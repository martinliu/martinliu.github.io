<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SRE on Martin Liu's Blog</title><link>https://martinliu.cn/categories/sre/</link><description>Recent content in SRE on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://martinliu.cn/categories/sre/index.xml" rel="self" type="application/rss+xml"/><item><title>Grafana Labs 连续第二年荣膺 2025 年 Gartner® 可观测性平台魔力象限™ 的领导者称号</title><link>https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/</link><pubDate>Wed, 27 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/</guid><description>&lt;img src="https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/Gartner-MQ-observability-platforms-meta.webp" alt="Featured image of post Grafana Labs 连续第二年荣膺 2025 年 Gartner® 可观测性平台魔力象限™ 的领导者称号" />&lt;blockquote>
&lt;p>From: Grafana Labs 官网&lt;/p>&lt;/blockquote>
&lt;p>我们很高兴地宣布，&lt;strong>&lt;a class="link" href="https://www.grafana.com/resources/grafana-observability-platforms-gartner-magic-quadrant-2025/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana Labs has been recognized as a Leader in the 2025 Gartner® Magic Quadrant™ for Observability Platforms&lt;/a>&lt;/strong>，这是我们连续第二年获此殊荣。&lt;/p>
&lt;p>今年的报告将 Grafana Labs 定位在“愿景完整性 (Completeness of Vision)”方面最靠前的位置，我们认为这反映了我们对构建一个真正开放、可组合的可观测性（Observability）堆栈的坚定承诺，该堆栈为用户提供了灵活性、控制力以及自主制定可观测性策略的工具。&lt;/p>
&lt;p>我们为过去一年所产生的影响感到自豪，我们支持了超过 2500 万用户和 5000 多家客户，助力他们实现可观测性之旅。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/mq-for-observability-platforms.webp"
width="320"
height="353"
srcset="https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/mq-for-observability-platforms_hu_9a56fb0874660010.webp 480w, https://martinliu.cn/blog/grafana-labs-named-a-leader-again-in-the-2025-gartner-magic-quadrant-for-observability-platforms/mq-for-observability-platforms_hu_5e2004c71f8f4c5e.webp 1024w"
loading="lazy"
alt="图 1: Grafana Labs 荣膺 2025 Gartner® 可观测性平台魔力象限™ 领导者"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>除了在魔力象限（Magic Quadrant）中的位置，Grafana Labs 还被纳入 2025 Gartner® 可观测性平台关键能力（Critical Capabilities）报告。该报告对关键用例进行了更深入的评估。我们很自豪能成为所有用例中得分最高的四家供应商之一，其中包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>成本优化&lt;/strong> (4.18/5)&lt;/li>
&lt;li>&lt;strong>IT 运维&lt;/strong> (4.15/5)&lt;/li>
&lt;li>&lt;strong>平台运维&lt;/strong> (4.15/5)&lt;/li>
&lt;li>&lt;strong>软件工程&lt;/strong> (4.15/5)&lt;/li>
&lt;li>&lt;strong>SRE&lt;/strong> (4.14/5)&lt;/li>
&lt;li>&lt;strong>业务洞察&lt;/strong> (4.10/5)&lt;/li>
&lt;li>&lt;strong>AI 工程&lt;/strong> (3.96/5)&lt;/li>
&lt;/ul>
&lt;h2 id="我们的表现和影响力">我们的表现和影响力
&lt;/h2>&lt;p>我们相信，今年在魔力象限中的排名反映了我们在开放可观测性堆栈中实现的创新所带来的实际影响。Gartner 强调了 Grafana Labs 表现突出的几个领域——特别是在成本优化和开源生态系统领导力方面。同时，我们也为过去一年中持续推出的 &lt;a class="link" href="https://grafana.com/blog/2025/05/07/grafanacon-2025-announcements/" target="_blank" rel="noopener"
>持续创新&lt;/a> 和 &lt;a class="link" href="https://grafana.com/blog/2024/09/24/observabilitycon-2024-announcements/" target="_blank" rel="noopener"
>产品更新&lt;/a> 感到自豪。&lt;/p>
&lt;p>正如关键能力报告中所述，一个主要差异化因素是我们的 &lt;a class="link" href="https://grafana.com/blog/2025/01/14/what-is-adaptive-telemetry-and-how-can-it-reduce-mttr-noise-and-cost/" target="_blank" rel="noopener"
>自适应遥测 (Adaptive Telemetry)&lt;/a> 套件，它帮助客户显著降低可观测性成本——平均可节省 20% 到 50% 的指标费用和 20% 到 40% 的日志费用。这些成本效益的实现无需牺牲可见性或性能，使团队能够更可持续地扩展可观测性。&lt;/p>
&lt;p>Gartner 还指出我们深度参与了开源社区，尤其是 Prometheus 和 OpenTelemetry，根据我们最近的 &lt;a class="link" href="https://grafana.com/observability-survey/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>可观测性调研&lt;/a>，这两个项目目前被 71% 的组织使用。我们对开放标准的承诺不仅体现在贡献上，也体现在领导力方面：我们最近 &lt;a class="link" href="https://grafana.com/blog/2025/03/27/meet-ted-young-opentelemetry-co-founder-and-the-newest-grafanista/" target="_blank" rel="noopener"
>欢迎 OpenTelemetry 联合创始人 Ted Young 加入 Grafana Labs&lt;/a>，并向 OpenTelemetry 项目 &lt;a class="link" href="https://grafana.com/blog/2025/05/07/opentelemetry-ebpf-instrumentation-beyla-donation/" target="_blank" rel="noopener"
>捐赠了我们的 eBPF 自动检测工具 Beyla&lt;/a>，这进一步强化了我们致力于构建一个以互操作性 (interoperability) 和透明度 (transparency) 为常态的未来的决心。&lt;/p>
&lt;p>尽管 Gartner 的评估中没有明确提及，但我们在过去一年中推出的两项重大增强功能获得了客户的强烈积极反馈，这两项功能都旨在帮助团队更快地行动，并以更小的阻力获取洞察。&lt;/p>
&lt;p>首先，&lt;a class="link" href="https://grafana.com/blog/2025/02/20/grafana-drilldown-apps-the-improved-queryless-experience-formerly-known-as-the-explore-apps/" target="_blank" rel="noopener"
>Grafana Drilldown 应用&lt;/a> 让探索数据变得前所未有的简单，无需编写复杂的查询语句。其次，客户越来越多地采用 &lt;a class="link" href="https://grafana.com/products/cloud/asserts/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana Cloud Asserts&lt;/a>——我们的持续关联 (continuous correlation) 和根本原因分析 (root cause analysis) 工具。Grafana Cloud Asserts 能够自动映射你的整个技术栈中的依赖关系，持续分析信号，并呈现相关洞察，从而帮助你在问题升级前发现、理解并解决它们。&lt;/p>
&lt;p>各组织已经在使用这些工具来更智能地工作和更快地响应，我们很高兴能将这一切与 &lt;a class="link" href="https://grafana.com/blog/2025/05/07/llm-grafana-assistant/" target="_blank" rel="noopener"
>Grafana Assistant&lt;/a>（目前处于私有预览 (private preview) 阶段）整合起来，它是一个上下文感知 (context-aware)、集成的聊天代理，可帮助用户了解 Grafana，探索和查询他们的可观测性 (observability) 数据，管理仪表盘，并进行调查——所有这些都通过自然语言 (natural language) 完成。&lt;/p>
&lt;h2 id="用户评价">用户评价
&lt;/h2>&lt;p>我们很荣幸被 Gartner 评为领导者，但我们最重要的反馈来自每天使用 Grafana 的用户。&lt;/p>
&lt;p>截至 2025 年 7 月 1 日，在 &lt;a class="link" href="https://www.gartner.com/reviews/market/observability-platforms/vendor/grafana-labs" target="_blank" rel="noopener"
>Gartner Peer Insights™&lt;/a> 上：&lt;/p>
&lt;ul>
&lt;li>Grafana Labs 的&lt;strong>整体评分为 4.5/5&lt;/strong>&lt;/li>
&lt;li>基于 268 条经过验证的客户评论&lt;/li>
&lt;li>91% 的评论者表示会推荐我们的产品&lt;/li>
&lt;/ul>
&lt;p>以下是用户们的评价：&lt;/p>
&lt;ul>
&lt;li>“LGTM 堆栈 (LGTM stack) 在易用性和功能性方面都是最佳选择——而 Grafana Cloud 则是扩展它的最佳方式。” - &lt;a class="link" href="https://www.gartner.com/reviews/market/observability-platforms/vendor/grafana-labs/product/grafana-cloud/review/view/5725094" target="_blank" rel="noopener"
>一家软件公司的工程师&lt;/a>&lt;/li>
&lt;li>“在使用我们之前的可观测性 (observability) 工具之后再用 Grafana Cloud，感觉耳目一新。它满足了我对可观测性提供商的所有期望。” - &lt;a class="link" href="https://www.gartner.com/reviews/market/observability-platforms/vendor/grafana-labs/product/grafana-cloud/review/view/5725094" target="_blank" rel="noopener"
>一家软件公司的软件开发人员&lt;/a>&lt;/li>
&lt;li>“它帮助我们整合了所有不同的监控解决方案。其中的‘自适应’功能极大地节省了成本。” - &lt;a class="link" href="https://www.gartner.com/reviews/market/observability-platforms/vendor/grafana-labs/product/grafana-cloud/review/view/5812548" target="_blank" rel="noopener"
>Manager of IT services at a bank&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们非常感谢我们的用户和社区给予的信任、反馈和伙伴关系。可观测性的未来是开放、灵活和用户驱动的——而这仅仅是个开始。&lt;/p>
&lt;h2 id="常见问题解答grafana-labs-与-2025-年-gartner-魔力象限">常见问题解答：Grafana Labs 与 2025 年 Gartner® 魔力象限™
&lt;/h2>&lt;p>&lt;strong>什么是 Gartner 魔力象限？&lt;/strong>&lt;/p>
&lt;p>魔力象限报告是在特定市场进行严谨、基于事实的研究的成果，它为高增长且供应商差异显著的市场中的供应商相对位置提供了广阔的视角。供应商被分为四个象限：领导者 (Leaders)、挑战者 (Challengers)、远见者 (Visionaries) 和特定领域者 (Niche Players)。该研究使组织能够根据其独特的业务和技术需求，最大程度地利用市场分析。&lt;/p>
&lt;p>&lt;strong>被评为领导者意味着什么？&lt;/strong>&lt;/p>
&lt;p>领导者能够很好地执行其当前愿景，并为未来做好了充分准备。对于 Grafana Labs 而言，这验证了我们对开放性、创新以及帮助用户掌控其可观测性堆栈 (observability stack) 的承诺。&lt;/p>
&lt;p>&lt;strong>这是 Grafana Labs 第一次获得认可吗？&lt;/strong>&lt;/p>
&lt;p>不是，这已是 Grafana Labs 连续第二年被评为领导者。&lt;/p>
&lt;p>&lt;strong>什么是关键能力报告，Grafana Labs 的表现如何？&lt;/strong>&lt;/p>
&lt;p>Gartner 可观测性平台关键能力 (Gartner Critical Capabilities for Observability Platforms) 报告提供了对供应商更深入、基于用例 (use cases) 的评估。Grafana Labs 是所有用例中得分最高的四家供应商之一，其中包括在成本优化 (Cost Optimization)（4.18/5）和平台运营 (Platform Operations)（4.15/5）中排名第三。&lt;/p>
&lt;p>&lt;strong>客户是怎么说的？&lt;/strong>&lt;/p>
&lt;p>截至 2025 年 7 月 1 日，Grafana Labs 在 Gartner Peer Insights™ (Gartner Peer Insights™) 上的总体评分为 4.5/5，基于 268 份经过验证的客户评论，91% 的评论者推荐我们的产品。&lt;/p>
&lt;p>&lt;strong>在哪里可以了解更多或开始使用？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.grafana.com/resources/grafana-observability-platforms-gartner-magic-quadrant-2025/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>阅读完整的 Gartner 魔力象限报告&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>了解更多关于 Grafana Cloud 的信息&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>立即创建永久免费 Grafana Cloud 账户&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Gartner，《可观测性平台关键能力》（Critical Capabilities for Observability Platforms），作者：Matt Crossley, Gregg Siegfried, Padraig Byrne, Andre Bridges, Martin Caren，发布日期：2025年7月8日&lt;/p>
&lt;p>GARTNER 是 Gartner, Inc. 和/或其在美国和国际上的关联公司的注册商标和服务标志，MAGIC QUADRANT 和 PEER INSIGHTS 是 Gartner, Inc. 和/或其在美国和国际上的关联公司的商标和服务标志，本文经许可使用。保留所有权利。&lt;/p>
&lt;p>Gartner 不对其研究出版物中描述的任何厂商、产品或服务进行认可，也不建议技术用户仅选择那些获得最高评级或其他称号的厂商。Gartner 研究出版物包含 Gartner 研究组织的观点，不应被解释为事实陈述。Gartner 对本研究不作任何明示或暗示的保证，包括任何适销性或特定用途适用性的保证。&lt;/p>
&lt;p>Gartner Peer Insights 的内容包含基于个体最终用户自身经验的观点，不应被解释为事实陈述，也不代表 Gartner 或其关联公司的观点。Gartner 不对此内容中描述的任何厂商、产品或服务进行认可，也不对该内容的准确性或完整性作任何明示或暗示的保证，包括任何适销性或特定用途适用性的保证。&lt;/p></description></item><item><title>我为什么使用多个 SSH 密钥，而不是只用一个？</title><link>https://martinliu.cn/blog/why-i-run-multiple-ssh-keys-instead-of-just-one/</link><pubDate>Mon, 25 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/why-i-run-multiple-ssh-keys-instead-of-just-one/</guid><description>&lt;img src="https://martinliu.cn/blog/why-i-run-multiple-ssh-keys-instead-of-just-one/ssh-key-management-best-practices-feature.webp" alt="Featured image of post 我为什么使用多个 SSH 密钥，而不是只用一个？" />&lt;blockquote>
&lt;p>作者：Faruk Ahmed&lt;/p>&lt;/blockquote>
&lt;p>对于许多 Linux 管理员来说，使用单个 SSH 密钥对登录他们所有的服务器、测试环境或云实例是默认做法。
这种方式简单、方便——但它也是一个单点故障。&lt;/p>
&lt;p>随着时间的推移，我了解到&lt;strong>按用途和环境分离 SSH 密钥&lt;/strong>不仅是良好的安全习惯，更是重大的安全提升。&lt;/p>
&lt;h2 id="-一钥通吃的风险">🛑 “一钥通吃”的风险
&lt;/h2>&lt;p>如果你对所有事务都使用同一个 SSH 私钥，那么一旦泄露，后果可能是灾难性的：&lt;/p>
&lt;ul>
&lt;li>笔记本电脑丢失？所有使用该密钥的服务器都将面临风险。&lt;/li>
&lt;li>密钥从安全性较低的环境中被窃取？攻击者可以利用它渗透到关键系统。&lt;/li>
&lt;li>需要轮换密钥？你将不得不手忙脚乱地在&lt;em>所有地方&lt;/em>替换它。&lt;/li>
&lt;/ul>
&lt;p>这就是&lt;strong>爆炸半径问题 (blast radius problem)&lt;/strong> 的定义。&lt;/p>
&lt;h2 id="-我如何划分密钥">🧩 我如何划分密钥
&lt;/h2>&lt;p>我为以下用途维护&lt;strong>单独的 SSH 密钥&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>生产环境 (Production)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>存储在硬件令牌 (hardware token) 或安全密钥保管库 (secure key vault) 中&lt;/li>
&lt;li>仅用于关键服务器&lt;/li>
&lt;li>绝不离开安全设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>预演/测试环境 (Staging/Test)&lt;/p>
&lt;ul>
&lt;li>与生产环境分离&lt;/li>
&lt;li>存在于工作笔记本电脑上&lt;/li>
&lt;li>易于替换&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>个人项目 (Personal Projects)&lt;/p>
&lt;ul>
&lt;li>用于家庭实验室 (home labs)、个人 VPS、树莓派 (Raspberry Pis)&lt;/li>
&lt;li>绝不与工作系统混用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一次性/临时用途 (Disposable/Temporary)&lt;/p>
&lt;ul>
&lt;li>为短期项目或供应商访问创建&lt;/li>
&lt;li>使用后删除&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-我的工作流程">🛠 我的工作流程
&lt;/h2>&lt;p>&lt;strong>密钥生成 (Key Generation)&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh-keygen -t ed25519 -f ~/.ssh/prod_id_ed25519 -C &lt;span class="s2">&amp;#34;Production Key&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh-keygen -t ed25519 -f ~/.ssh/staging_id_ed25519 -C &lt;span class="s2">&amp;#34;Staging Key&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh-keygen -t ed25519 -f ~/.ssh/personal_id_ed25519 -C &lt;span class="s2">&amp;#34;Personal Key&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>SSH 配置示例&lt;/strong> (&lt;code>~/.ssh/config&lt;/code>)：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Host prod-server-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName 192.168.1.100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User admin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IdentityFile ~/.ssh/prod_id_ed25519
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host staging-box-alpha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName staging.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IdentityFile ~/.ssh/staging_id_ed25519
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host personal-pi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName raspberrypi.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User pi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IdentityFile ~/.ssh/personal_id_ed25519
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，我就不必记住要使用哪个密钥——SSH 会自动选择正确的密钥。&lt;/p>
&lt;h2 id="-这种方法为何有效">🧠 这种方法为何有效
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>限制损害 (Limits Damage)&lt;/strong> — 如果一个密钥泄露，只有该环境面临风险。&lt;/li>
&lt;li>&lt;strong>更易轮换 (Easier Rotation)&lt;/strong> — 我可以轮换单个密钥而无需触及其他密钥。&lt;/li>
&lt;li>&lt;strong>利于审计 (Audit-Friendly)&lt;/strong> — 密钥直接映射到其用途，使合规性 (compliance) 更容易。&lt;/li>
&lt;li>&lt;strong>鼓励最小权限原则 (Encourages Principle of Least Privilege)&lt;/strong> — 没有单个密钥可以访问&lt;em>所有&lt;/em>内容。&lt;/li>
&lt;/ul>
&lt;h2 id="-总结">📌 总结
&lt;/h2>&lt;p>一开始，管理多个 SSH 密钥可能感觉有些多余，但这却是最简单、最不影响效率的风险降低方法之一。&lt;/p>
&lt;p>一个密钥通吃所有事务可能很方便……直到它不再方便为止。&lt;/p>
&lt;h2 id="扩展附录ssh-config-常用技巧">扩展附录：SSH Config 常用技巧
&lt;/h2>&lt;h3 id="1-通配符与模式匹配">1. 通配符与模式匹配
&lt;/h3>&lt;ul>
&lt;li>&lt;code>Host *&lt;/code>&lt;br>
匹配所有主机，可以用来定义全局默认配置。&lt;/li>
&lt;li>&lt;code>Host *.example.com&lt;/code>&lt;br>
匹配所有 &lt;code>example.com&lt;/code> 域下的主机。&lt;/li>
&lt;li>&lt;code>Host staging-*&lt;/code>&lt;br>
匹配前缀为 &lt;code>staging-&lt;/code> 的所有主机别名。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>优先级&lt;/strong>：具体匹配 &amp;gt; 通配符匹配 &amp;gt; &lt;code>Host *&lt;/code>。&lt;/p>&lt;/blockquote>
&lt;h3 id="2-include-指令">2. Include 指令
&lt;/h3>&lt;p>可以拆分配置文件，保持清晰：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Include ~/.ssh/config.d/*.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-jumphost--proxyjump">3. JumpHost / ProxyJump
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>通过中间跳板机连接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Host prod-app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName app.internal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyJump bastion.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="4-端口转发">4. 端口转发
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>本地转发：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">LocalForward 8080 localhost:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>远程转发：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">RemoteForward 9000 localhost:9000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="5-指定端口与超时">5. 指定端口与超时
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>非标准端口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Port 2222
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>连接保持活跃：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ServerAliveInterval 60
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ServerAliveCountMax 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="6-多身份密钥管理">6. 多身份密钥管理
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>全局默认密钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">IdentityFile ~/.ssh/id_ed25519
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>针对特定主机指定：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Host gitlab.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IdentityFile ~/.ssh/gitlab_id_ed25519
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="7-控制连接复用-提升速度">7. 控制连接复用 (提升速度)
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>避免重复握手，复用连接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Host *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ControlMaster auto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ControlPath ~/.ssh/control-%r@%h:%p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ControlPersist 10m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="8-别名与简化命令">8. 别名与简化命令
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>配置好 &lt;code>Host&lt;/code> 别名后，可以直接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh prod-server-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh staging-box-alpha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh personal-pi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>⚡ 这些技巧组合使用，可以大幅简化 SSH 日常管理，尤其是 &lt;strong>多环境运维&lt;/strong> 或 &lt;strong>开发调试&lt;/strong> 场景。&lt;/p></description></item><item><title>2025 年 Magic Quadrant：可观测性平台魔力象限</title><link>https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/</link><pubDate>Sun, 24 Aug 2025 16:57:03 +0800</pubDate><guid>https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/</guid><description>&lt;img src="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/1180-thumbnail.webp" alt="Featured image of post 2025 年 Magic Quadrant：可观测性平台魔力象限" />&lt;p>可观测性平台正在彻底改变企业管理系统健康状况的方式，这一变革由分析技术的创新、成本优化及 AI 可观测性（AI observability）的兴起所推动。基础架构与运营（I&amp;amp;O）负责人可以借助本研究，评估供应商格局，把握不断演进的解决方案市场。&lt;/p>
&lt;h2 id="市场定义描述">市场定义／描述
&lt;/h2>&lt;p>&lt;em>本文于 2025 年 7 月 17 日修订。您当前查看的是更正版本。更多信息请访问 gartner.com 上的更正页面。&lt;/em>&lt;/p>
&lt;p>Gartner 将可观测性平台定义为：帮助用户了解应用、服务和基础设施的健康状况、性能及行为的产品。平台通过采集来自日志、指标、事件、追踪等多个来源的遥测数据（telemetry，运营数据），再由人工或机器智能进行分析，以识别可能影响终端用户体验的系统行为变化，如故障或性能下降。借助这些能力，团队能够及早发现甚至主动预防问题。使用这些平台的包括 IT 运维人员、&lt;strong>站点可靠性工程师（Site Reliability Engineer）&lt;/strong> 、云与平台团队、应用开发者及产品负责人等。&lt;/p>
&lt;p>现代企业高度依赖关键的数字化应用与服务，这些系统不仅创收且面向客户，同时关系到整体业务效率。因此，系统宕机、性能下降或不稳定将直接影响收入、客户感知与品牌形象。&lt;/p>
&lt;p>组织通过可观测性平台掌握这些系统的运行状况，并持续优化其可用性、性能与弹性。投入并成功部署这类平台有助于避免营收损失，加快产品交付速度，并提升品牌形象。&lt;/p>
&lt;p>以下是可观测性平台在不同场景中的典型用途：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>IT 运维：&lt;/strong> 生产环境中的 IT 团队需确保系统在任何时刻，尤其是高负载期间，始终保持可用、高效与稳定。可观测性平台能够及时发出告警，并帮助团队深入分析数据，查明问题根源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>平台工程：&lt;/strong> 平台工程师的使用方式融合了运维和开发两类实践。平台不仅帮助保障服务满足服务级别目标（SLO），也推动基于数据的持续改进与平台升级。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件开发：&lt;/strong> 开发团队将可观测性能力集成进 CI/CD 流水线，从而在代码部署后迅速获得反馈。这不仅加快了新功能的上线，也增强了系统的弹性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>业务分析：&lt;/strong> 分析师可以利用平台追踪关键业务指标，这些指标通常具有行业或客户特定性。例如，零售商可能会关注购物车放弃成本和客户平均消费水平等数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="强制性功能">强制性功能
&lt;/h3>&lt;p>可观测性平台至少应具备以下能力：&lt;/p>
&lt;ul>
&lt;li>支持采集、存储和分析各类运营遥测数据，包括但不限于指标、事件、日志和追踪信息。&lt;/li>
&lt;li>能识别并分析应用、服务和基础设施的行为变化，明确宕机或性能下降的根因，并量化其对终端用户体验的影响。&lt;/li>
&lt;li>提供拓扑依赖、服务映射等上下文信息，以丰富遥测数据内容。&lt;/li>
&lt;li>支持构建或映射被监控服务与其在业务流程中角色之间的关系。&lt;/li>
&lt;li>能从主流公有云服务（如 Amazon Web Services、Microsoft Azure、Oracle Cloud Infrastructure）中采集遥测数据。&lt;/li>
&lt;li>支持对追踪、指标、日志等多种遥测数据进行交互式分析，从而洞察用户和应用行为。&lt;/li>
&lt;/ul>
&lt;h3 id="常见功能">常见功能
&lt;/h3>&lt;p>在本市场中，主流可观测性平台通常具备以下特性：&lt;/p>
&lt;ul>
&lt;li>支持监控通过浏览器、移动应用及 API 提供的应用和服务的数字化用户体验。&lt;/li>
&lt;li>能与其他运维、服务管理与开发工具集成，包括 IT 服务管理（ITSM）、配置管理数据库（CMDB）、事件与故障响应、编排与自动化系统，以及各类 DevOps 工具。&lt;/li>
&lt;li>利用高级分析与机器学习技术，提供传统人工分析难以获得的深度洞察。&lt;/li>
&lt;li>自动发现并建立基础设施、网络、应用组件与服务之间的关系映射。&lt;/li>
&lt;li>提供成本管理功能，既能衡量与优化应用工作负载的成本，也可评估与优化平台自身的资源使用与开销。&lt;/li>
&lt;li>支持对用户行为路径进行业务流程和活动监控，如从登录到结账、转化率漏斗分析、客户注册流程或贷款申请等。&lt;/li>
&lt;li>提供 AI 可观测性能力，支持分析大语言模型（LLM）及其生成式 AI（Generative AI）负载的性能、成本、容量与合规性。&lt;/li>
&lt;li>具备自动化功能，能够对应用和基础设施的代码或配置发起更改，以优化成本、容量、性能，或在出现故障与性能下降时采取修复行动。&lt;/li>
&lt;li>提供应用安全功能，能识别受监控应用中的已知漏洞，并阻止相关利用行为的发生。&lt;/li>
&lt;/ul>
&lt;h2 id="魔力象限">魔力象限
&lt;/h2>&lt;p>图 1: 可观测性平台魔力象限&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/Figure_1_Magic_Quadrant_for_Observability_Platforms.webp"
width="1200"
height="1245"
srcset="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/Figure_1_Magic_Quadrant_for_Observability_Platforms_hu_9e9c68f1f8cd29a2.webp 480w, https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/Figure_1_Magic_Quadrant_for_Observability_Platforms_hu_ea30594c77952551.webp 1024w"
loading="lazy"
alt="Figure 1: Magic Quadrant for Observability Platforms"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;h3 id="厂商优势与注意事项">厂商优势与注意事项
&lt;/h3>&lt;h4 id="amazon-web-services">Amazon Web Services
&lt;/h4>&lt;p>Amazon Web Services（AWS）在本次魔力象限中被评为挑战者。其可观测性解决方案以 Amazon CloudWatch 为核心，涵盖指标、日志、事件等多类遥测数据的处理能力。AWS 还提供 AWS X-Ray（分布式追踪）、Amazon OpenSearch Service（日志分析）、Amazon Managed Service for Prometheus 和 Amazon Managed Grafana 等组件。这些服务构成 AWS Cloud Operations 体系的一部分，该体系还包含治理与财务管理功能。AWS 的客户遍布全球，从初创企业到大型机构不等，并持续稳定发布产品更新。&lt;/p>
&lt;h5 id="优势">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI 创新：&lt;/strong> Amazon 推出 CloudWatch Investigations，帮助 SRE、IT 运维与云工程团队快速诊断和修复问题。此外，AWS 为 CloudWatch、CloudTrail、OpenSearch 和 Config 提供自然语言查询功能，降低了性能分析的门槛。&lt;/li>
&lt;li>&lt;strong>客户体验：&lt;/strong> AWS 提供业内领先的客户支持，涵盖全尺寸客户的定制化上手流程，全天候 7×24 全球支持，社区活跃，认证体系完备。&lt;/li>
&lt;li>&lt;strong>生态系统：&lt;/strong> AWS 原生工具（如 CloudWatch）与 AWS 服务深度集成，遥测数据可自动采集，配置简便；统一的控制台支持集中管理与计费，通过 IAM 实现一致的安全控制。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>多云支持：&lt;/strong> CloudWatch 主要优化于 AWS 环境。虽然 AWS 提供对 Azure 指标的有限支持，其他来源则需使用 OTel 代理、CloudWatch 代理或手动配置。用户还需关注跨环境数据传出与 AWS 数据摄取相关费用。&lt;/li>
&lt;li>&lt;strong>市场营销策略：&lt;/strong> 相较其他厂商，AWS 在可观测性方面的推广力度相对不足。可观测性并非其核心产品，市场关注度相对落后于本象限中的领导者。&lt;/li>
&lt;li>&lt;strong>成本问题：&lt;/strong> 根据客户咨询及 Peer Insights 上的反馈，CloudWatch 及相关工具的费用常被提及为痛点。由于 AWS 服务间的紧密集成，数据易被自动推送至 CloudWatch，增加了不经意的成本开销。建议客户使用 AWS Cost Explorer、AWS Budgets 等管理工具，并优化日志与追踪的摄取频率以控制支出。&lt;/li>
&lt;/ul>
&lt;h4 id="apica">Apica
&lt;/h4>&lt;p>Apica 被评为本次魔力象限中的远见者。其可观测性平台 Apica Ascent 具备遥测数据管道功能，是其整体数据管理解决方案的重要组成部分。Apica 的业务主要集中在美国和 EMEA 地区，客户多位于北美。公司成立于 2005 年，早期专注于合成监控，并以支持多因素认证（MFA）等功能而知名。通过在 2023 年和 2024 年先后收购 LogIQ 和 Circonus，Apica 正式进军可观测性领域，并正在将其原有的合成监控能力整合至 Ascent 平台中。&lt;/p>
&lt;h5 id="优势-1">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>易于采集接入：&lt;/strong> Apica Ascent 无需部署专属代理即可接入数据，客户可灵活使用 OpenTelemetry Collector、Fluent Bit、Logstash，甚至 Datadog Agent 等采集技术。其遥测管道产品 Flow 提供了更多数据接入与处理选项。&lt;/li>
&lt;li>&lt;strong>代理自动化管理：&lt;/strong> Apica 的代理管理系统 Fleet 基于 OpAMP 协议，可实现遥测采集器的自动部署与配置，功能强大，即使用户未采用 Ascent 的核心可观测性能力也值得单独评估。&lt;/li>
&lt;li>&lt;strong>灵活的存储选项：&lt;/strong> 对于 SaaS 用户，Apica Ascent 支持客户自定义使用对象存储，从而完全掌控数据存放位置，有助于简化合规工作并满足数据主权需求。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-1">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>功能尚不完善：&lt;/strong> 尽管平台具备 AI 可观测性等高级能力，但目前仍在演进中，尚缺少服务级别目标（SLO）管理和真实用户监控（RUM）等关键功能。&lt;/li>
&lt;li>&lt;strong>市场影响力较弱：&lt;/strong> 虽然 Apica 成立已有 20 年，但作为可观测性平台的市场认知度较低，在 Gartner 客户群体中的采用率仍有限。&lt;/li>
&lt;li>&lt;strong>公司规模偏小：&lt;/strong> 与本研究中的其他厂商相比，Apica 的整体规模较小，这在竞争激烈的市场中可能成为制约因素。&lt;/li>
&lt;/ul>
&lt;h4 id="bmc-helix">BMC Helix
&lt;/h4>&lt;p>BMC Helix 在本次魔力象限中被评为利基厂商。其 Observability &amp;amp; AIOps 套件覆盖多项 IT 运维与可观测性能力，产品组合包括 BMC Helix Discovery 等模块。BMC Helix 还在相关的 IT 服务管理市场中占有一席之地，其产品 BMC Helix ITSM（前称 Remedy）应用广泛。公司业务遍布全球，覆盖各行业、各规模客户。2024 年 10 月，BMC 宣布将业务拆分为两家独立实体，其中一家保留 BMC 名称，另一家为 BMC Helix。本文分析仅聚焦后者的可观测性相关产品。&lt;/p>
&lt;h5 id="优势-2">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>创新投入：&lt;/strong> BMC Helix 持续增强平台能力，在各产品中广泛嵌入 AI，例如推出用于事件调查的生成式 AI 工具 BMC HelixGPT。&lt;/li>
&lt;li>&lt;strong>全球服务能力：&lt;/strong> BMC Helix 的客户遍布全球，配备本地办事处、区域合作伙伴，并提供多样化的全球托管选项。&lt;/li>
&lt;li>&lt;strong>工具链整合能力：&lt;/strong> 尽管支持与第三方工具共存，BMC Helix 依然将自身的 ITSM、资产发现与 CMDB 功能集成到可观测性方案中，有助于客户整合运维工具链与供应商体系。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-2">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>战略转型阶段：&lt;/strong> BMC Helix 正处于从 BMC 拆分后的独立运营阶段，客户应注意此期间客户关系、支持模式等方面可能出现的调整。&lt;/li>
&lt;li>&lt;strong>市场影响力有限：&lt;/strong> BMC Helix 的市场推广主要聚焦原有客户，尚未在可观测性领域建立广泛认知，因此在 Gartner 客户提及率偏低。&lt;/li>
&lt;li>&lt;strong>产品功能不全：&lt;/strong> 相较市场领导者，BMC Helix 缺少部分关键功能，如成本控制工具有限、未支持 eBPF 等。虽然存在替代方案，但可能增加成本或影响部署效率。&lt;/li>
&lt;/ul>
&lt;h4 id="chronosphere">Chronosphere
&lt;/h4>&lt;p>Chronosphere 是本次魔力象限中的领导者。其平台由 Chronosphere Observability Platform 与 Telemetry Pipeline 构成，主要服务于北美客户，业务覆盖美国与 EMEA 地区。近期推出的 “Differential Diagnosis（DDx） for Traces” 功能帮助用户更快定位性能问题原因。支持指标的 DDx 功能已于 2025 年 5 月发布，日志支持与业务影响分析功能也在后续计划中。&lt;/p>
&lt;h5 id="优势-3">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>成本控制能力强：&lt;/strong> 平台提供策略驱动的摄取、存储与保留控制，用户可精细化管理遥测数据，降低不必要的成本浪费。该功能已成为行业参考标准。&lt;/li>
&lt;li>&lt;strong>无需代理采集：&lt;/strong> 平台广泛采用 OpenTelemetry 和 Prometheus 等开放协议接入遥测数据，无需安装代理。客户可灵活选择最适合各类工作负载的接入机制。&lt;/li>
&lt;li>&lt;strong>高可用性保障：&lt;/strong> Chronosphere 为每位客户分配独立租户及私有存储资源，减少资源争抢，提升安全性，服务可用性持续达成 99.9% SLA 承诺。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-3">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>数字体验监控依赖第三方：&lt;/strong> Chronosphere 通过与 Checkly（合成监控）和 Sentry（RUM）合作实现 DEM，但遥测数据生成与集成仍需客户主导。&lt;/li>
&lt;li>&lt;strong>权限控制粒度有限：&lt;/strong> 当前平台权限模型较为粗略，不支持基于对象的职责分离。如有此需求，用户需采用多个租户或 GitOps 机制加以实现。&lt;/li>
&lt;li>&lt;strong>AI 能力未成重点：&lt;/strong> 与多数竞争对手相比，Chronosphere 在平台中未将 AI 作为主要能力强调。虽然目前未对功能完整性造成实质影响，但若企业对 AI 功能有明确需求，建议评估其他方案。&lt;/li>
&lt;/ul>
&lt;h4 id="coralogix">Coralogix
&lt;/h4>&lt;p>Coralogix 被评为本次魔力象限中的远见者。其平台支持可观测性与安全相关场景，基于品牌化的数据管道架构 Streama 构建。公司业务集中于美国与 EMEA 地区，客户群主要分布在北美和 EMEA。近期推出的产品包括基于收购 Aporia 构建的 Coralogix AI 中心（AI Center）和基于 eBPF 的遥测采集代理。平台未来规划将继续强化持续分析和 AI 能力，并计划引入代理式 AI（Agentic AI）。&lt;/p>
&lt;h5 id="优势-4">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>优化存储成本：&lt;/strong> TCO 优化器支持通过策略制定遥测数据（如日志与追踪）的分层存储与保留机制，用户甚至可使用自有 S3 存储，灵活控制性能与成本平衡。&lt;/li>
&lt;li>&lt;strong>AI 功能丰富：&lt;/strong> AI Center 提供对基于 LLM 应用的性能、安全与运行状况的监控，支持 OpenAI 与 Amazon Bedrock，涵盖 token 使用、错误率、响应质量与成本等维度。平台还内置生成式 AI 助手 Cora。&lt;/li>
&lt;li>&lt;strong>客户支持及时：&lt;/strong> Coralogix 提供 7×24 全天候产品内支持，平均响应时间仅为 17 秒，问题平均解决时间为 1 小时。客户上手流程由专属团队协助完成，确保快速启动与稳定落地。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-4">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>学习成本较高：&lt;/strong> 平台功能强大但设置繁多，新用户在熟悉过程中可能遇到学习曲线陡峭的问题。&lt;/li>
&lt;li>&lt;strong>代理管理缺失：&lt;/strong> 平台不具备统一的代理部署与生命周期管理功能，可能导致运维负担上升，限制大规模扩展。&lt;/li>
&lt;li>&lt;strong>开发集成受限：&lt;/strong> 目前尚不支持开发者在 IDE 中直接接入平台进行生产问题排查，流程依赖此能力的团队需考虑替代方案。&lt;/li>
&lt;/ul>
&lt;h4 id="datadog">Datadog
&lt;/h4>&lt;p>Datadog 是本次魔力象限的领导者之一。其可观测性平台属于一套更广泛的监控与安全产品组合。公司持续扩展全球覆盖，2023 年在日本建立数据中心，并计划于 2025 年进驻澳大利亚。2024 年推出了包括 LLM Observability（生成式 AI 可观测性）与 On-Call（事件响应管理工具）在内的新功能，并收购 Quickwit、Metaplane 和 Eppo，进一步拓展在日志优化、数据质量与产品实验分析方面的能力。&lt;/p>
&lt;h5 id="优势-5">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>SLO 全生命周期管理：&lt;/strong> 平台支持多类型数据的服务级别目标管理，包括历史回放、误差预算告警与配置建议等，帮助用户建立稳定可靠的服务交付机制。&lt;/li>
&lt;li>&lt;strong>深入系统可视化：&lt;/strong> 广泛采用 eBPF 技术，在无需代码插桩的前提下，实现对应用与系统行为的深度监控，用于 APM 和云工作负载保护等关键场景。&lt;/li>
&lt;li>&lt;strong>产品分析能力强：&lt;/strong> 通过真实用户监控、会话重现、热力图与转化分析等功能，平台可用于产品使用行为分析与功能迭代优先级决策，超越传统健康指标监控范畴。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-5">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>授权与合同流程复杂：&lt;/strong> 随着产品线扩展，授权模型也变得复杂，合同协商与预算管理难度上升，缺乏灵活组合也限制了配置自由度。&lt;/li>
&lt;li>&lt;strong>平台成本不低：&lt;/strong> 日志与指标的摄取与保留成本是客户常提到的问题，Datadog 通过引入 Flex Logs 和“无限制”模式尝试缓解这一压力。&lt;/li>
&lt;li>&lt;strong>生态绑定强：&lt;/strong> 平台高度集成，使用门槛低但退出成本高。一旦深入使用，其与其他工具集成或替换成本将显著上升，形成潜在厂商锁定。&lt;/li>
&lt;/ul>
&lt;h4 id="dynatrace">Dynatrace
&lt;/h4>&lt;p>Dynatrace 是本次魔力象限中的领导者。其统一的可观测性与安全平台涵盖多个功能模块，包括基础设施与应用可观测性、应用安全与威胁监测、数字体验分析、自动化功能以及业务可观测性等。近期，Dynatrace 进一步扩展产品能力，新增成本优化与生成式 AI／大语言模型（LLM）相关的可观测性功能。公司客户遍及全球主要区域（包括拉美和亚太），以大型企业与技术密集型公司为主。最近，Dynatrace 收购了 AI 驱动的数据库可观测性平台 Metis。&lt;/p>
&lt;h5 id="优势-6">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>产品线全面：&lt;/strong> Dynatrace 提供种类丰富的可观测性与安全解决方案，特别适用于企业级场景。其平台既支持 Kubernetes、容器、云函数、LLM 等现代架构，也兼容主机系统和 SAP 等传统企业软件。&lt;/li>
&lt;li>&lt;strong>AI 自动化与根因定位：&lt;/strong> 平台核心 AI 引擎 Davis 能自动执行根因分析和预测建模。它可智能发现并映射复杂的应用环境、检测性能异常，并实时定位问题根源，大幅减少人工介入与平均修复时间（MTTR）。此外，平台还支持基线建立、异常检测与洞察生成的全流程自动化。&lt;/li>
&lt;li>&lt;strong>强大可扩展性：&lt;/strong> Dynatrace 专为应对大型、动态的企业 IT 架构而设计，包括微服务、多云与容器环境。平台支持同时监控数万个主机与数百万依赖，适合 IT 系统庞大的组织。其高度自动化与弹性架构有助于控制现代企业环境的复杂性与规模化难题。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-6">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>授权模型较复杂：&lt;/strong> Dynatrace 的订阅授权（DPS）引入了多个新项目，相比旧模式更难理解和预算。客户应确保相关团队熟悉报告、告警与预测等功能的成本控制机制。&lt;/li>
&lt;li>&lt;strong>平台上手需引导：&lt;/strong> 功能深度和数据量庞大可能导致新用户面临学习门槛。建议组织通过厂商或可信合作伙伴提供的专业服务完成初期部署，并强化培训以提高使用效果。&lt;/li>
&lt;li>&lt;strong>中小企业适配性有限：&lt;/strong> 作为企业级全功能平台，Dynatrace 虽可通过公有云市场等方式获取，但对中小企业而言，其成本通常只能在关键系统中获得投入回报。&lt;/li>
&lt;/ul>
&lt;h4 id="elastic">Elastic
&lt;/h4>&lt;p>Elastic 在本次魔力象限中被评为领导者。其产品组合覆盖多种部署方式，包括自托管、云托管以及基于 Elastic Cloud 提供的全托管 Serverless 服务。Elastic Observability 构建于其核心平台 Search AI Platform 之上，该平台也支持 Elastic 的搜索与安全产品。Elastic Cloud 目前在主流云平台上广泛部署。公司总部位于北美，客户主要分布于美洲与 EMEA 地区。未来发展重点包括增强生成式 AI（GenAI）能力，并进一步推进 OpenTelemetry 的标准化支持。&lt;/p>
&lt;h5 id="优势-7">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI 助力洞察：&lt;/strong> Elastic 的 AI 助手可通过自然语言与遥测数据交互，帮助用户快速定位问题与解决方案，降低了技术门槛。&lt;/li>
&lt;li>&lt;strong>平台能力领先：&lt;/strong> Elastic 在服务级别目标（SLO）、代理管理和数据分析等核心可观测性能力方面表现出色，有效提升 IT 运维与 SRE 团队效率。&lt;/li>
&lt;li>&lt;strong>开源平台战略清晰：&lt;/strong> Elastic 坚持开放平台战略，覆盖可观测性、安全与企业搜索领域，其差异化定位在众多厂商中极具特色。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-7">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>产品认知仍在提升：&lt;/strong> Elastic 的搜索与安全产品广为人知，但可观测性方案 Elastic Observability 的市场覆盖仍处于扩展阶段，公司正在加大市场投入。&lt;/li>
&lt;li>&lt;strong>平台使用需具备一定技术背景：&lt;/strong> 虽然托管服务降低了部署门槛，但若要发挥平台全部能力，仍需内部具备较强的技术实施能力。&lt;/li>
&lt;li>&lt;strong>定价模型复杂：&lt;/strong> Elastic Cloud 基于多维度（内存、存储、流量、功能层级）计费，随着数据量增长，成本预测难度增加。平台提供的定价工具与数据分层策略可一定程度缓解此问题。&lt;/li>
&lt;/ul>
&lt;h4 id="grafana-labs">Grafana Labs
&lt;/h4>&lt;p>Grafana Labs 被评为本次魔力象限中的领导者。公司发源于开源项目 Grafana，并陆续推出 Loki、Tempo、Mimir、Beyla 与 Faro 等多个开源项目。其团队聚集了众多 Prometheus 与 OpenTelemetry 核心维护者。Grafana Cloud 是其核心可观测性平台，客户遍及全球，重点集中在北美与 EMEA 地区。近期更新包括统一事件响应管理与云服务可观测性支持，未来还将推出增强型根因分析与成本优化功能。&lt;/p>
&lt;h5 id="优势-8">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>灵活的成本控制机制：&lt;/strong> Grafana Cloud 推出的 Adaptive Telemetry 功能（目前适用于日志和指标）可通过减少不必要的数据摄取来降低开销。用户可根据推荐自动执行、手动配置或设定例外。目前对追踪数据的支持已在开发中。&lt;/li>
&lt;li>&lt;strong>全球部署灵活：&lt;/strong> 平台部署于全球 25 个 AWS、Azure 和 GCP 区域，用户可根据延迟与数据主权要求选择合适位置，提升性能与合规性。&lt;/li>
&lt;li>&lt;strong>完整客户体验：&lt;/strong> Grafana Labs 提供详尽的上手支持，包括激活、迁移、架构设计与培训，并配有丰富的社区资源和官方支持选项，助力用户顺利上云。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-8">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>学习成本较高：&lt;/strong> 对缺乏 Prometheus 背景的用户来说，配置文件语法和操作模式可能较难理解，需安排必要培训。为缓解此问题，Grafana 正逐步推出预设模板支持常见场景。&lt;/li>
&lt;li>&lt;strong>文档体系不完善：&lt;/strong> 平台文档体现出开源特性，虽覆盖基础组件，但整体结构不够系统，对新手用户指导不足。&lt;/li>
&lt;li>&lt;strong>依赖社区插件存在风险：&lt;/strong> Grafana 生态构建在大量社区插件基础上，尽管提升了功能多样性，但也带来兼容性与安全风险，建议运维团队评估并纳入风控流程。&lt;/li>
&lt;/ul>
&lt;h4 id="honeycomb">Honeycomb
&lt;/h4>&lt;p>Honeycomb 是本次魔力象限中的远见者。其平台专注于处理高基数遥测数据（即具有大量唯一标签组合的数据），支持开放标准，面向需要实时、探索式可观测性的工程团队。虽然 Honeycomb 的客户群主要集中在北美，但自 2024 年推出欧盟 SaaS 服务以来，公司持续拓展 APAC 和 LATAM 市场。2024 年发布了多项新功能，包括 Honeycomb Telemetry Pipeline（HTP）、日志分析功能，以及前端可观测性方案。2025 年初，公司收购了开源代码分析与自动插桩引擎 Grit，标志其首次并购。&lt;/p>
&lt;h5 id="优势-9">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>灵活的遥测数据管理：&lt;/strong> HTP 可帮助企业在不同数据源与目标间高效路由、抽样和过滤遥测数据，在扩展可观测性覆盖的同时控制成本与生命周期。&lt;/li>
&lt;li>&lt;strong>集中式代理管理：&lt;/strong> 平台利用 OpAMP 协议，实现对 OpenTelemetry Collectors 的集中部署与配置，简化大规模遥测部署的运维流程。&lt;/li>
&lt;li>&lt;strong>技术创新快速推进：&lt;/strong> 通过收购 Grit，Honeycomb 引入 AI 驱动的代码分析能力，提升代码层级的遥测集成效率，助力开发团队提升老旧代码库的可观测性。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-9">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>定价模型预测难度大：&lt;/strong> Honeycomb 采用按事件计费的方式，适合处理高基数遥测，但初期可能难以精确评估预算与使用量。&lt;/li>
&lt;li>&lt;strong>合作伙伴体系薄弱：&lt;/strong> 公司以直销为主，渠道合作较少，企业如需本地实施或第三方集成支持，可能缺乏充足选择。&lt;/li>
&lt;li>&lt;strong>AI 能力尚处追赶阶段：&lt;/strong> 虽然已有如 BubbleUp 异常检测等探索性功能，但在生成式 AI 方面仍相对滞后，目前主要功能为 Query Assistant。公司希望借助 Grit 缩小差距。&lt;/li>
&lt;/ul>
&lt;h4 id="ibm">IBM
&lt;/h4>&lt;p>IBM 是本次魔力象限的领导者之一。其可观测性平台 Instana 支持 SaaS 与自托管部署，并采用轻量的单代理架构。公司全球业务广泛，客户以大型企业为主。IBM 的产品组合覆盖从主机系统、网络（SevOne）到现代云原生架构（如容器与 Kubernetes）的可观测性需求。近期，IBM 收购了 HashiCorp 和 Kubecost，进一步加强其在自动化与 Kubernetes 成本管理领域的能力。&lt;/p>
&lt;h5 id="优势-10">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>强大的市场执行能力：&lt;/strong> IBM 在全球市场均设有销售与支持团队，服务能力成熟。Instana 与 Apptio 和 HashiCorp 同属软件业务线，形成面向 IT 运维、自动化与 FinOps 的完整企业解决方案组合。&lt;/li>
&lt;li>&lt;strong>本地化与合规优势：&lt;/strong> IBM 的全球合作网络支持各区域客户的本地部署与合规要求，数据中心布局广泛，产品也支持多语言环境。&lt;/li>
&lt;li>&lt;strong>定价简洁透明：&lt;/strong> Instana 采用按主机计费的方式，易于理解，能随着企业规模增长平滑扩展，在成本敏感环境中具备一定优势。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-10">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI 产品功能相对保守：&lt;/strong> 2024 年 IBM 在 AI 方面的创新节奏慢于其他领导厂商。尽管正探索代理式能力与 AI 可观测性，但仍有较大提升空间。&lt;/li>
&lt;li>&lt;strong>中小企业关注度不足：&lt;/strong> 许多客户仍将 Instana 视为大型企业专属方案。若未使用 IBM 其他产品，中小企业接触意愿偏低。&lt;/li>
&lt;li>&lt;strong>社区活跃度有限：&lt;/strong> 虽然平台提供线上用户论坛，但整体社区互动度不如其他厂商，用户间经验交流与学习资源较为欠缺。&lt;/li>
&lt;/ul>
&lt;h4 id="itrs">ITRS
&lt;/h4>&lt;p>ITRS 是本次魔力象限中的利基厂商，其可观测性平台 ITRS Analytics 包含采集管道、分析引擎与客户访问层等核心模块，具备覆盖全面的遥测数据处理能力。公司主要业务区域为北美、欧洲和亚太。为简化遥测数据接入，ITRS 近期推出数据采集管道。未来将进一步支持服务级别目标（SLO）管理、代理集群管理与安全威胁检测功能。&lt;/p>
&lt;h5 id="优势-11">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>灵活的定价方案：&lt;/strong> ITRS 全新定价策略提供基础版与企业版打包选择，产品形态也正从多个独立组件向统一平台转型，主要面向大型、复杂的企业 IT 环境。&lt;/li>
&lt;li>&lt;strong>极快的实时响应能力：&lt;/strong> 源于金融行业经验，ITRS 在遥测摄取与告警方面表现突出，响应时间可低至一秒以内，优于多数同类产品。&lt;/li>
&lt;li>&lt;strong>高安全性的权限管理：&lt;/strong> 平台提供细粒度、可审计的 RBAC 控制，支持按属性设定访问规则，并能对命令权限进行分区控制，为运维安全与合规提供保障。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-11">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>定价不透明：&lt;/strong> 尽管已更新为分级打包形式，但官方未公开价格信息，客户需联系销售团队才能了解成本，影响采购前期决策。&lt;/li>
&lt;li>&lt;strong>尚未支持生成式 AI：&lt;/strong> 平台目前未集成大语言模型或生成式 AI 能力，相比市场中已引入代理式 AI 的厂商存在滞后，虽已纳入产品规划，但落地时间尚未可知。&lt;/li>
&lt;li>&lt;strong>代理部署复杂：&lt;/strong> ITRS 尚不支持集中式代理部署，需依赖如 Puppet、Chef 等第三方工具进行安装，并需分别管理 NetProbe、基础设施代理与 RUM 收集器等多个代理组件，增加了运维复杂度与管理成本。&lt;/li>
&lt;/ul>
&lt;h4 id="logicmonitor">LogicMonitor
&lt;/h4>&lt;p>LogicMonitor 被评为本次魔力象限的挑战者。其可观测性平台 LM Envision 基于本地采集器构建，支持混合架构环境，可从云、本地、SaaS 及容器中采集指标、日志、追踪与事件数据。平台引入多项生成式 AI（GenAI）功能，包括根因分析、告警聚类、基础设施智能监控（支持如 Nvidia GPU 和 OpenAI）。其客户主要分布于北美与 EMEA，并在亚太市场快速拓展。过去一年，公司陆续推出 Edwin AI（跨域事件摄取与关联）、LM Co-Pilot（AI 聊天助手）与 LM Cost Optimization（云成本优化）等新工具。&lt;/p>
&lt;h5 id="优势-12">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>客户扩展性强：&lt;/strong> 2024 财年 LogicMonitor 实现 108% 净留存率，得益于客户快速实现平台价值、高粘性使用体验与多模块组合使用，尤其在大型企业与 MSP 客户群中增长显著。&lt;/li>
&lt;li>&lt;strong>强大的合作伙伴生态：&lt;/strong> 80% 收入来自合作伙伴通路，覆盖 SI、VAR、MSP 与技术联盟等角色。公司持续通过培训赋能、资源投入与联合市场推广计划，拓展合作广度与深度。&lt;/li>
&lt;li>&lt;strong>优秀的混合架构覆盖能力：&lt;/strong> 采用无代理采集方式，平台可同时管理传统系统与现代部署环境（如云与边缘计算），为组织提供灵活的混合 IT 管理方案，降低迁移与整合成本。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-12">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>SLI／SLO 功能仍待完善：&lt;/strong> 当前平台尚未提供统一的服务级别指标与目标管理方案，无法有效支持误差预算等 SRE 关键实践，在对可用性要求严格的场景中存在短板。&lt;/li>
&lt;li>&lt;strong>DevOps 集成覆盖有限：&lt;/strong> 当前平台对 DevOps 工具链的支持不够全面，缺少针对 CI/CD 全流程的原生功能，需通过额外工具实现功能补足。尽管有如 Ops Notes 记录变更的功能提供问题上下文，但整体仍以可观测性为主。&lt;/li>
&lt;li>&lt;strong>缺失真实用户监控（RUM）：&lt;/strong> 平台尚未提供前端性能或用户路径的可观测性功能，限制了对用户体验的深入洞察。需要此类视角的组织需额外集成 RUM 工具，或转向支持该功能的平台。&lt;/li>
&lt;/ul>
&lt;h4 id="microsoft">Microsoft
&lt;/h4>&lt;p>Microsoft 被评为本次魔力象限的挑战者。其可观测性平台 Azure Monitor 是 Azure 原生监控解决方案，覆盖云、容器与基础设施层，具备良好的全球可用性。客户主要为中大型企业，地理覆盖范围广。近期更新包括：增强版 Azure Kubernetes Service 监控能力，以及 Log Analytics 的跨区域工作区复制功能。未来产品路线图将聚焦于提升 AI 驱动的可观测性能力，并进一步深化与 Microsoft Fabric 和 Microsoft Sentinel 的集成。&lt;/p>
&lt;h5 id="优势-13">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>成熟的日志分析方案：&lt;/strong> Azure Monitor 中的 Log Analytics 功能成熟且持续进化。最新支持的 Auxiliary Logs（低成本存储层）适合低频访问日志数据，同时推出的 Simple Mode 模式让用户无需掌握 KQL 查询语言即可通过低代码方式从日志中获取洞察。&lt;/li>
&lt;li>&lt;strong>AI 能力加持：&lt;/strong> Azure Monitor 的 Application Insights 模块集成了 AI 驱动的性能优化分析，能够基于实时遥测数据识别潜在瓶颈，并推荐相应的代码改进措施。该能力可与 Azure 中的 Microsoft Copilot 搭配使用，进一步增强诊断效率。&lt;/li>
&lt;li>&lt;strong>统一的安全与运维视角：&lt;/strong> Azure Monitor 与 Microsoft 的安全工具 Sentinel 和 Defender 深度融合，使得用户可以在同一平台上实现跨运维与安全团队的事件分析、告警响应与报表生成，提升整体可视性与协同效率。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-13">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>缺乏 SLO 原生支持：&lt;/strong> Azure Monitor 尚未提供完整的 SLO 创建与监控功能，虽然可通过自定义方法实现部分能力，但配置过程复杂，难以满足 SRE 的高效实践需求。&lt;/li>
&lt;li>&lt;strong>OpenTelemetry 支持不一致：&lt;/strong> 虽然 Azure Monitor 可通过导出器支持 OTel 数据的导入，但不支持直接通过采集器接口接收 OTLP 协议，增加了数据集成复杂度。客户端可使用 Azure 提供的 OpenTelemetry Distro SDK，将数据发送至 Application Insights，但该流程仍不够直观。&lt;/li>
&lt;li>&lt;strong>长期预览功能影响生产使用：&lt;/strong> Microsoft 习惯以“公测（Preview）”形式发布新功能，部分功能预览期超过一年，虽对所有用户开放，但不提供正式支持或 SLA。Azure Monitor 中多个关键能力尚处于长期预览状态，不建议在生产环境中使用，影响企业落地信心。&lt;/li>
&lt;/ul>
&lt;h4 id="new-relic">New Relic
&lt;/h4>&lt;p>New Relic 被评为本次魔力象限中的领导者。其可观测性平台功能全面，覆盖 APM、AI 监控、数字体验监控（DEM）、基础设施与安全监控，以及日志管理。客户遍布全球，以中大型企业为主。除了在北美和欧洲部署数据中心外，公司于 2024 年大幅扩展了印度的创新中心，进一步提升全球运营能力。其产品发展重点是加速代理式 AI（Agentic AI）集成，已与 ServiceNow 与 GitHub Copilot 展开深度合作。&lt;/p>
&lt;h5 id="优势-14">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI 自动化战略清晰：&lt;/strong> New Relic 致力于构建基于代理的自动化编排框架。平台推出标准化 API 用于代理接入，并持续扩展专用代理库，推动跨平台的智能化自动响应能力。与 GitHub 和 ServiceNow 的合作展示了 AI 驱动工作流在实际场景中的落地前景。&lt;/li>
&lt;li>&lt;strong>产品功能不断增强：&lt;/strong> 过去一年中，New Relic 增强了 eBPF 支持、推出生成式 AI 接口的多项优化，新增 LLM 可观测性能力，并扩展成本控制工具，产品能力日益完善。&lt;/li>
&lt;li>&lt;strong>优质客户支持体验：&lt;/strong> 客户通过 Peer Insights 和咨询反馈表示，New Relic 在服务响应和技术支持方面表现优异，满意度居高。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-14">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>增长节奏放缓：&lt;/strong> 虽然 New Relic 的客户续约率持续稳定，但自从被 Francisco Partners 与 TPG 收购并私有化以来，其整体市场拓展速度相较于其他领先厂商略显保守。&lt;/li>
&lt;li>&lt;strong>遥测数据成本控制挑战：&lt;/strong> New Relic 采用按用户数与遥测摄取量计费的方式，在数据量快速增长时可能带来较高费用。公司已推出成本优化器功能，帮助用户应对突发数据峰值。&lt;/li>
&lt;li>&lt;strong>业务指标可见性不足：&lt;/strong> Pathpoint 功能可用于监控业务流程与“业务可观测性”，但目前知晓与实际使用的客户仍较少，功能价值尚未被充分利用。&lt;/li>
&lt;/ul>
&lt;h4 id="oracle">Oracle
&lt;/h4>&lt;p>Oracle 被评为本次魔力象限中的挑战者。其 &lt;strong>可观测性与管理平台（Observability and Management, O&amp;amp;M）&lt;/strong> 提供一体化能力，涵盖应用性能监控（APM）、日志分析、数据库管理、运维洞察、漏洞检测与补丁管理等模块。平台支持跨公有云、私有云和传统数据中心环境的混合工作负载监控。Oracle 在全球多个地区设有服务节点，客户涵盖政府机构及中大型企业，行业覆盖广泛。&lt;/p>
&lt;h5 id="优势-15">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>内建数据库漏洞检测：&lt;/strong> 平台内置数据库安全能力，可自动识别 Oracle 数据库中的配置缺陷、安全漏洞与合规风险，降低运营风险。&lt;/li>
&lt;li>&lt;strong>数据主权与区域合规优势：&lt;/strong> Oracle 在 25 个国家提供主权云部署选项，满足数据驻留、地理隔离等合规要求。可选部署形式包括欧盟主权云、美国政府云以及 OCI 专属区域，可落地至客户本地数据中心。&lt;/li>
&lt;li>&lt;strong>成熟的支持与认证体系：&lt;/strong> Oracle 提供全面的上手与支持服务，包括官方认证合作伙伴与集成商生态、面向 SRE 与 DevOps 团队的专业认证课程，以及一系列客户赋能与参与计划，帮助客户快速应用平台能力。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-15">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>生成式 AI 功能尚处初期阶段：&lt;/strong> 目前平台仅提供基础型支持助手，与同类厂商相比，在生成式 AI 功能的广度与深度上仍有差距。Oracle 计划于 2025 年推出 “可观测性助手” 功能，以补齐此短板。&lt;/li>
&lt;li>&lt;strong>缺乏业务视角下的可观测性能力：&lt;/strong> 对于关注业务连续性与服务弹性的团队而言，平台尚不支持 SLO、误差预算等 SRE 核心指标，限制其在业务层面分析与决策中的适用性。&lt;/li>
&lt;li>&lt;strong>平台依赖 OCI 战略：&lt;/strong> Oracle O&amp;amp;M 平台与其云产品（OCI）深度绑定，在 Oracle 云用户中使用体验良好，但对于构建云中立或多云可观测性平台的组织而言，其高度集成策略可能成为限制因素。&lt;/li>
&lt;/ul>
&lt;h4 id="sciencelogic">ScienceLogic
&lt;/h4>&lt;p>ScienceLogic 被评为本次魔力象限中的远见者。其 AI 平台由四大核心模块组成：SL1（可观测性平台）、PowerFlow（代理式自动化）、RestorePoint（安全与网络合规）以及 Skylar AI（用于无监督事件分析与智能推理）。SL1 支持自托管部署，也可运行于 AWS 和 Azure 环境。客户群体主要集中于北美与 EMEA 地区。公司当前产品路线图着重发展生成式 AI（GenAI）驱动的智能分析与自动化能力。&lt;/p>
&lt;h5 id="优势-16">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI 驱动的智能运维战略：&lt;/strong> ScienceLogic 以事件智能分析与 AI 能力为差异化核心，特别是 Skylar AI 模块，通过无监督学习方式实现事件识别与处理，推动智能化运维自动化。&lt;/li>
&lt;li>&lt;strong>市场执行力强：&lt;/strong> ScienceLogic 通过直销、全球系统集成商（GSI）以及多层渠道生态，成功构建了稳定的市场份额，在竞争激烈的运维管理市场中脱颖而出。&lt;/li>
&lt;li>&lt;strong>卓越的客户体验：&lt;/strong> ScienceLogic 提供全面的客户成功支持体系，包括活跃的用户社区、在线培训资源、专属客户成功经理（CSM），并通过 SL360 项目，帮助客户最大化产品价值，实现长期业务收益。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-16">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>缺少 SLO 支持机制：&lt;/strong> 平台目前不支持原生的服务级别目标（SLO）定义与可视化，限制了 SRE 团队对可靠性目标与误差预算的持续追踪与管理。&lt;/li>
&lt;li>&lt;strong>应用与开发集成能力较弱：&lt;/strong> 平台偏向基础设施监控，缺乏对代码层面的深入洞察，并在 DevOps 工具链方面的集成度不如同类产品，影响其在应用可观测性领域的覆盖深度。&lt;/li>
&lt;li>&lt;strong>全球扩展策略不均衡：&lt;/strong> 虽然在北美与 EMEA 市场表现稳定，ScienceLogic 在拉美等新兴市场的投入有限，可能因此错失地域扩张机会。&lt;/li>
&lt;/ul>
&lt;h4 id="solarwinds">SolarWinds
&lt;/h4>&lt;p>SolarWinds 被评为本次魔力象限的利基厂商，其可观测性平台 SolarWinds Observability 基于 SaaS 架构，支持多种部署场景。公司全球业务广泛，客户覆盖从中小型企业到大型组织。近期平台新增了 Kubernetes 自动遥测注入能力，并增强了对 AWS 的原生集成支持。未来路线图将包括事件响应系统、告警抑制引擎、自动化工作流、Runbook 触发，以及基于代理式 AI（Agentic AI）的智能操作流程。&lt;/p>
&lt;h5 id="优势-17">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>eBPF 加持的容器可视化：&lt;/strong> 平台通过 eBPF 技术提升了对 Kubernetes 环境的深度性能分析能力，相较传统监控手段更易快速发现集群中的潜在问题。&lt;/li>
&lt;li>&lt;strong>灵活部署与透明定价：&lt;/strong> SolarWinds 支持云与本地部署混合使用，帮助企业在混合架构中灵活扩展，同时保持良好的价格透明度与竞争力。&lt;/li>
&lt;li>&lt;strong>收购 Squadcast 提升响应能力：&lt;/strong> 通过并购事件响应平台 Squadcast，SolarWinds 增强了在告警去重、MTTR 优化、工具链集成与流水线支持等方面的能力，并引入 AI 驱动的事件智能处理机制，改善整体运维效率。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-17">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>AI/ML 功能尚不完善：&lt;/strong> 当前平台仅具备基础 AI 能力，例如异常检测与查询辅助功能，在自动化决策、根因分析等方面仍与行业领先厂商存在差距。&lt;/li>
&lt;li>&lt;strong>代理统一性不足：&lt;/strong> 虽具备统一代理架构，但 APM 与 DEM 仍需额外代理模块，带来额外部署与维护成本。&lt;/li>
&lt;li>&lt;strong>DevOps 工具链支持薄弱：&lt;/strong> 平台主要支持通过 IaC 或打包方式集成遥测代理，但缺乏对 DevOps 工具链的双向通信支持，配置流程复杂，降低了与开发流程的契合度。&lt;/li>
&lt;/ul>
&lt;h4 id="splunk">Splunk
&lt;/h4>&lt;p>Splunk（现为 Cisco 旗下公司）在本次魔力象限中被评为领导者。自 2024 年 3 月被 Cisco 收购以来，Splunk 成为其专责可观测性业务的事业部。Splunk 的核心产品为 Splunk Observability Cloud，涵盖基础设施监控、应用性能管理（APM）、值班响应、合成监控、日志分析与真实用户监控（RUM），并整合了 Splunk Platform、IT 服务智能（ITSI）与 AppDynamics 等产品。公司在全球范围内建立了广泛的运营与客户基础，服务对象以大型企业为主。&lt;/p>
&lt;h5 id="优势-18">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>全球化运营与生态支持：&lt;/strong> Cisco 与 Splunk 在全球主要市场均设有销售与服务团队，并构建了强大的合作伙伴网络，确保客户在部署、运营、维护各阶段都能获得全面支持。&lt;/li>
&lt;li>&lt;strong>稳定的产品战略与行业基础：&lt;/strong> 在监控与可观测性领域拥有深厚积累，结合 Splunk 的日志、安全与 IT 运维能力，使其在金融、科技与公共领域具备强大综合实力。&lt;/li>
&lt;li>&lt;strong>AI 创新集成推进迅速：&lt;/strong> 持续在 AI 能力上加大投入，推出 Cisco AI Assistant 与可观测性平台集成，支持生成查询、自动解读遥测数据，并加速洞察生成，显著提升操作效率。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-18">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>平台整合度不足：&lt;/strong> Splunk 的产品线通过多次收购构建，导致不同模块之间集成度不高，影响平台的一致性与使用效率，增加运维复杂性。&lt;/li>
&lt;li>&lt;strong>产品认知度偏低：&lt;/strong> 尽管 Splunk 在日志与安全分析领域具有较高知名度，但 Splunk Observability Cloud 的市场认知度较低，部分客户甚至未意识到其可观测性平台已全面上线。&lt;/li>
&lt;li>&lt;strong>运营成本难以控制：&lt;/strong> 虽然 Splunk 引入了指标处理优化工具，但在 Splunk Cloud 与 ITSI 场景下，客户普遍面临成本增长快、用量预估难等问题，管理大型遥测环境的成本控制仍是一大挑战。&lt;/li>
&lt;/ul>
&lt;h4 id="sumo-logic">Sumo Logic
&lt;/h4>&lt;p>Sumo Logic 是本次魔力象限中的利基厂商。其核心定位为大规模日志分析平台，同时拓展至安全监控与可观测性领域，适配 DevSecOps 场景。尽管北美是其主要市场，公司也服务于全球客户，平台已部署于多个 AWS 区域，并在亚太地区持续加大投入。2024 年，Sumo Logic 推出 AI 助手 Mo Copilot，计划于 2025 年底上线基于生成式 AI 的问题分析功能。&lt;/p>
&lt;h5 id="优势-19">优势
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>强大的日志分析能力：&lt;/strong> 平台提供 Log Search、LogReduce、LogCompare 等专用工具，便于高效处理大规模日志数据。结合基于分析量而非数据摄取量计费的 Flex Licensing 模式，帮助客户更好地控制成本。&lt;/li>
&lt;li>&lt;strong>开源兼容性强：&lt;/strong> Sumo Logic 广泛支持开源遥测采集框架，如 OpenTelemetry、Telegraf 和 Fluent Bit，支持通过 OTLP 协议接收数据。同时平台也支持 OpenSLO 用于服务级别目标管理，并通过 OpAMP 实现对遥测采集器的统一编排与管理。&lt;/li>
&lt;li>&lt;strong>可观测性与安全一体化：&lt;/strong> 平台同时服务于运维与安全团队，适合实施 DevSecOps 战略的组织，在单一平台中实现威胁监测与系统性能洞察的融合。&lt;/li>
&lt;/ul>
&lt;h5 id="注意事项-19">注意事项
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>缺乏针对 LLM 的可观测性能力：&lt;/strong> 虽然平台支持将 AWS Bedrock 与 Google Vertex AI 的日志与指标接入，但尚不具备对大语言模型运行关键维度（如 Token 使用、成本、偏差、漂移、幻觉）的深入分析功能，落后于其他主流平台。&lt;/li>
&lt;li>&lt;strong>生成式 AI 助手功能有限：&lt;/strong> Mo Copilot 于 2024 年底上线，目前主要用于数据探索与可视化，仍处于功能早期，缺乏复杂任务的自动化处理能力。&lt;/li>
&lt;li>&lt;strong>调试体验不佳：&lt;/strong> 平台尚未与主流 IDE（集成开发环境）集成，不便于开发者在调试过程中直接回溯日志或异常，限制了 DevOps 流程中的效率提升空间。&lt;/li>
&lt;/ul>
&lt;h3 id="新增与移除厂商">新增与移除厂商
&lt;/h3>&lt;p>我们会根据市场变化，定期审查并调整魔力象限的入选标准。随着评估标准的更新，每年入选厂商的组合也会有所变化。某个厂商在某一年出现而下一年未被列入，并不代表我们对其评价发生变化，可能反映的是市场格局或厂商战略重心的调整。&lt;/p>
&lt;h4 id="新增厂商">新增厂商
&lt;/h4>&lt;p>以下厂商符合入选标准，首次加入本年度魔力象限：&lt;/p>
&lt;ul>
&lt;li>Apica&lt;/li>
&lt;li>Coralogix&lt;/li>
&lt;li>ITRS&lt;/li>
&lt;li>ScienceLogic&lt;/li>
&lt;li>SolarWinds&lt;/li>
&lt;/ul>
&lt;h4 id="被移除厂商">被移除厂商
&lt;/h4>&lt;ul>
&lt;li>Logz.io 因未达到本市场所要求的客户兴趣指标（CII）阈值，被移出本次评选。&lt;/li>
&lt;li>ServiceNow 未满足本次研究的入选条件，未被纳入本次魔力象限。&lt;/li>
&lt;/ul>
&lt;h2 id="入选与排除标准">入选与排除标准
&lt;/h2>&lt;h3 id="基本条件">基本条件
&lt;/h3>&lt;ul>
&lt;li>截至 2025 年 3 月 27 日，平台必须提供正式上线（GA）的功能，且可通过常规销售渠道向所有客户开放。&lt;/li>
&lt;li>可观测性平台必须可直接售卖给客户，且无需强制依赖专业服务。厂商需为平台（包括所用开源组件）至少提供一线支持，如产品文档、安装指南、参考用例等。&lt;/li>
&lt;li>平台需具备明确的产品路线图和销售推广战略。&lt;/li>
&lt;li>厂商需提供电话、邮件或在线客服，并支持英文合同、控制台、技术文档与客户支持。&lt;/li>
&lt;/ul>
&lt;h3 id="功能能力要求">功能能力要求
&lt;/h3>&lt;ul>
&lt;li>平台必须原生支持所有强制功能，并至少满足九项常见功能中的四项（详见 Gartner 市场定义部分）。&lt;/li>
&lt;li>平台必须以 SaaS 形式交付。虽可提供自托管版本，但本次研究不评估自托管方案。&lt;/li>
&lt;/ul>
&lt;h3 id="业绩门槛要求">业绩门槛要求
&lt;/h3>&lt;p>满足以下任一条件：&lt;/p>
&lt;ol>
&lt;li>拥有至少 50 家生产环境的付费客户，且客户分布至少覆盖两个大区（亚太、EMEA、拉美、北美），不含 MSP 销售；&lt;/li>
&lt;li>在过去 12 个月中，实现符合 GAAP 的年收入不少于 7500 万美元；&lt;/li>
&lt;li>或者：年收入达到至少 1000 万美元，且同比增长率不低于 25%。&lt;/li>
&lt;/ol>
&lt;p>此外，厂商还需在 Gartner 设定的客户兴趣指标（CII）中排名靠前。CII 是结合内部数据与外部市场反馈（如客户咨询热度、客户满意度等）形成的加权指标。&lt;/p>
&lt;h3 id="特别提及厂商">特别提及厂商
&lt;/h3>&lt;p>Gartner 当前正跟踪超过 40 家可观测性平台厂商。本次魔力象限仅聚焦于其中 20 家符合入选标准的供应商。但未被纳入并不代表这些厂商不具备市场竞争力，部分平台在特定场景下依然非常值得客户关注和评估。&lt;/p>
&lt;p>&lt;strong>Dash0：&lt;/strong> 由 Instana（后被 IBM 收购）联合创始人之一创建，Dash0 是一个基于 ClickHouse 构建、原生支持 OpenTelemetry 的现代可观测性平台。虽然基础架构并不独特，但 Dash0 在用户体验和产品实现方面表现出色，拥有简洁的定价方案与面向开发者的界面。其同时支持 PromQL（Prometheus 查询语言）与 Perses 仪表盘工具，全面拥抱开放标准。Dash0 因未达业绩门槛，未能入选本次评选。&lt;/p>
&lt;p>&lt;strong>groundcover：&lt;/strong> 适合对遥测数据主权与位置控制有严格要求的组织。该平台尽管提供 SaaS 控制平面，但所有遥测数据均保留在客户自建环境内，部署于 ClickHouse 与 VictoriaMetrics 私有实例中，支持 BYOC（Bring Your Own Cloud，自带云）架构。groundcover 因未达业绩门槛，未被纳入本次象限。&lt;/p>
&lt;p>&lt;strong>HPE OpsRamp：&lt;/strong> 作为一款 SaaS 化 IT 运维平台，OpsRamp 以事件智能为特色功能，在产品演进中不断引入领先能力。HPE 于 2023 年收购 OpsRamp，并将其整合至 Greenlake 平台核心，协同 Morpheus Data 提供运营支撑能力。今年由于整体市场认知度不高，未满足入选标准。&lt;/p>
&lt;p>&lt;strong>Kloudfuse：&lt;/strong> 这是一款由客户自行托管的可观测性平台，可部署于公有云或私有云资源中。虽然未提供 SaaS 版本，但通过托管控制平面降低了运维难度，同时数据完全保留在客户侧。平台基于数据湖架构，致力于打造统一可观测性视角。由于缺乏 SaaS 交付形式，Kloudfuse 不符合功能能力入选标准。&lt;/p>
&lt;p>&lt;strong>Observe：&lt;/strong> 作为首批构建于 Snowflake 云数据平台上的数据湖型可观测性产品之一，Observe 在 2021 年被评为 Gartner Cool Vendor。该平台以数据分析能力为核心，近年来企业采用率持续提升。然而，鉴于象限仅评选最多 20 家厂商，Observe 今年因未达市场认知度门槛而未能入选。&lt;/p>
&lt;h2 id="评估标准">评估标准
&lt;/h2>&lt;h3 id="执行能力ability-to-execute">执行能力（Ability to Execute）
&lt;/h3>&lt;p>Gartner 分析师通过厂商在流程、系统、执行方法与运营机制上的质量与效率，评估其在市场中的竞争力与表现。这些因素不仅影响厂商在营收、客户保留率与品牌声誉方面的表现，也体现其将战略愿景转化为实际成果的能力。&lt;/p>
&lt;p>&lt;strong>产品能力：&lt;/strong> 评估平台在可观测性核心技术上的表现，包括当前的产品特性、稳定性、功能丰富度等。还会考虑其在扩展性、可用性、集成能力与安全功能方面的成熟度。&lt;/p>
&lt;p>&lt;strong>整体可持续性：&lt;/strong> 衡量厂商整体财务健康状况及其核心业务单元的运营表现，具体包括盈利能力、收入地域分布与研发投入强度等。&lt;/p>
&lt;p>&lt;strong>销售与定价策略：&lt;/strong> 评估厂商在市场中的销售成功程度，分析其定价模型是否具备透明性、灵活性与客户价值。还包括新客户与续约客户的比例、与竞争对手的价格对比等。&lt;/p>
&lt;p>&lt;strong>市场响应速度：&lt;/strong> 衡量厂商是否具备快速适应市场变化与客户需求演变的能力，包括对竞争格局的敏锐反应与客户反馈的响应机制。&lt;/p>
&lt;p>&lt;strong>市场推广执行力：&lt;/strong> 评估厂商在市场宣传与品牌建设方面的策略效果，包括信息传递的清晰度、宣传内容的创意性与影响力，以及产品的市场认知度。&lt;/p>
&lt;p>&lt;strong>客户体验：&lt;/strong> 考察厂商是否通过产品、服务与支持机制，帮助客户实现预期目标。包含售后支持、高触达服务、VIP 项目与区域交付能力等。&lt;/p>
&lt;p>&lt;strong>运营能力：&lt;/strong> 评估厂商是否具备履行承诺与服务目标的执行力，涉及组织结构、团队技能、合作伙伴关系以及服务等级协议（SLA）的遵守情况。包括是否与主流云服务商协作，以及宕机与服务中断的响应能力。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table1.webp"
width="1420"
height="1212"
srcset="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table1_hu_de9051a86c171bc3.webp 480w, https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table1_hu_b696279f9f4d51d9.webp 1024w"
loading="lazy"
alt="table1"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;h3 id="愿景完整性completeness-of-vision">愿景完整性（Completeness of Vision）
&lt;/h3>&lt;p>Gartner 分析师通过评估厂商对当前市场机会的理解能力、对未来发展方向的构想能力，以及其愿景表达的清晰度与落地能力，来判断其在可观测性平台领域的长期发展潜力。最终评分基于厂商愿景的前瞻性与其与 Gartner 市场判断之间的一致性。&lt;/p>
&lt;p>&lt;strong>市场理解力：&lt;/strong> 厂商是否能够准确理解客户需求，并将其转化为产品特性。优秀的厂商不仅能回应客户诉求，还能主动推动市场方向，特别是在可观测性快速发展、与 APM 不断区分的趋势中展现清晰判断力。&lt;/p>
&lt;p>&lt;strong>市场战略：&lt;/strong> 评估厂商在品牌定位与市场传播上的清晰性与差异性，以及其通过社交媒体、广告宣传、客户计划等渠道将理念传达给内外部受众的能力。也会关注其在新市场的拓展、营销创新与战略独特性。&lt;/p>
&lt;p>&lt;strong>销售策略：&lt;/strong> 考察厂商是否建立了覆盖直销、渠道、服务与合作伙伴网络的销售体系，能否拓展客户群并满足不同买家与决策者的选型需求。包括渠道布局、影响者策略与市场触达能力。&lt;/p>
&lt;p>&lt;strong>产品策略：&lt;/strong> 厂商在产品开发与迭代中是否注重差异化竞争、功能覆盖、交付方法及未来能力的布局。关注其产品路线图的发布节奏、质量与在 IT 运维领域周边市场的投资方向。&lt;/p>
&lt;p>&lt;strong>商业模式：&lt;/strong> 评估厂商的商业逻辑是否具备可持续性，包括价值主张、对授权／定价模式变化的预判能力，以及与开源社区的合作与生态关系。&lt;/p>
&lt;p>&lt;strong>垂直行业策略：&lt;/strong> 由于可观测性平台通常不依赖具体行业，因此本研究不将其作为主要评估项。如涉及行业差异化策略，相关内容已整合进其他指标中评估。&lt;/p>
&lt;p>&lt;strong>创新能力：&lt;/strong> 分析厂商是否对可观测性核心或相邻领域进行战略投资，包括资源整合、AI/ML 应用、合作伙伴生态建设等。也关注其在整合、防御性布局或前瞻性产品方向上的行动力。&lt;/p>
&lt;p>&lt;strong>地域策略：&lt;/strong> 厂商是否具备将产品、人才与服务本地化的能力，并能覆盖本土以外地区的客户需求。包括各区域团队建设、SaaS 平台部署位置、面向区域差异的产品策略，以及当地合作伙伴的广度与深度。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table2.webp"
width="1424"
height="1346"
srcset="https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table2_hu_73069a9f02612c15.webp 480w, https://martinliu.cn/blog/magic-quadrant-observability-platforms-2025/table2_hu_23be73b65765c165.webp 1024w"
loading="lazy"
alt="table2"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="253px"
>&lt;/p>
&lt;h3 id="象限定义说明quadrant-descriptions">象限定义说明（Quadrant Descriptions）
&lt;/h3>&lt;h4 id="leaders领导者">&lt;strong>Leaders（领导者）&lt;/strong>
&lt;/h4>&lt;p>领导者的可观测性平台产品在功能上与市场主流需求高度匹配，且在客户获取与扩张方面表现卓越。他们通常拥有全面的产品组合，具备先进的数据分析能力与可视化能力，并能与其他 IT 运维（ITOM）工具实现广泛集成。这些厂商展现出前瞻性的战略视野和强大的执行力，持续推动产品创新与优化客户体验。&lt;/p>
&lt;h4 id="challengers挑战者">&lt;strong>Challengers（挑战者）&lt;/strong>
&lt;/h4>&lt;p>挑战者在市场覆盖范围和平台部署规模方面具备显著优势。此类厂商通常执行力强，并借助企业整体品牌或销售网络在市场中占据一席之地，即使其可观测性业务尚未成为核心。他们可能曾是市场领先者，也可能正经历产品与战略的转型。部分挑战者的产品被作为更大 IT 解决方案的一部分，甚至超出传统 IT 运维的范畴。&lt;/p>
&lt;h4 id="visionaries远见者">&lt;strong>Visionaries（远见者）&lt;/strong>
&lt;/h4>&lt;p>远见者具备清晰的市场策略与竞争愿景，正在构建有潜力的可观测性平台产品组合。然而，由于产品尚处于发展阶段，其在市场响应速度、平台整合能力与市场份额拓展方面的执行力仍不及领导者。&lt;/p>
&lt;h4 id="niche-players利基者">&lt;strong>Niche Players（利基者）&lt;/strong>
&lt;/h4>&lt;p>利基者主要面向特定客户群体，或专注于某些细分使用场景。由于在核心功能方面不具备全面覆盖，通常难以满足广泛市场的全部需求，或仅在特定行业、区域或场景中具备竞争力。此外，利基者在功能开发、市场拓展与渠道建设上的投入相对有限。不过，入选此象限并不代表其市场价值不足，而是表明其专注于更具针对性的市场定位。&lt;/p>
&lt;h2 id="背景">背景
&lt;/h2>&lt;h3 id="可观测性平台vuca-的微观缩影还是一片绿洲">可观测性平台：VUCA 的微观缩影还是一片绿洲？
&lt;/h3>&lt;p>正如我们在去年的会议演讲中所回顾的，这项研究的起点可以追溯到 1997 年。2025 年是我主持该 Magic Quadrant 的第四年，回顾自 2022 年以来的种种变化，尤其是在 Gartner 所描述的这个充满动荡、不确定、复杂和模糊（VUCA）的全球环境中，感触尤深。&lt;/p>
&lt;p>可观测性平台市场（以及早期的应用性能监控市场）这几年几乎一直处于不断演变的状态。这无疑增加了本报告对 Gartner 客户的参考价值。但我们也要保持清醒：这毕竟是众多竞争激烈的软件市场之一。那可观测性平台有何不同？一种观点认为，云原生工作负载的复杂性与规模已经打破了人们对可见性与资源管理的长期认知。下面我们从当前环境出发，深入探讨这个问题。&lt;/p>
&lt;p>&lt;strong>波动性：&lt;/strong> 最直观的波动表现来自行业并购。例如 Cisco 收购 Splunk 的影响如今才开始显现，而 Broadcom 收购 VMware 与 New Relic、Riverbed、Sumo Logic 与 SolarWinds 的私有化或易主也在不断重塑市场格局。Datadog、Dynatrace 与 Grafana Labs 等厂商也陆续收购了诸多初创企业，包括 Quickwit、Metaplane、Rookout、Runecast、Asserts 和 Pyroscope 等。行业对基础能力的要求正在快速提升，而 AI 可观测性创业公司极有可能成为下一波收购浪潮的核心目标。&lt;/p>
&lt;p>&lt;strong>不确定性：&lt;/strong> 对客户而言，可观测性平台的持续拥有成本仍是不确定因素；而对潜在买家来说，成本之外，还有价值实现周期和实施复杂度的顾虑。随着厂商从基于主机数量的定价模式转向基于资源消耗的计费方式，或将两者结合，客户对成本上涨的担忧持续升温。越来越多客户向 Gartner 咨询如何优化支出，并开始接受功能取舍或转向开源方案以控制预算。&lt;/p>
&lt;p>&lt;strong>复杂性：&lt;/strong> 当今企业构建和运行的系统愈发复杂。Kubernetes、多云服务、API 驱动的外部依赖不断增加，需求复杂化最终也让产品更复杂。AI 的兴起也为运维团队带来了全新挑战。虽然客户部署 AI 工作负载的浪潮尚未全面到来，但趋势已然明确。如今，AI 功能已成为可观测性平台的标配，许多厂商也正迈向具代理能力的 AI。不过，“用 AI 工具来运维 AI 系统”这一说法，尚未成为主流卖点。&lt;/p>
&lt;p>&lt;strong>模糊性：&lt;/strong> 我们看到，产品与运维团队中出现了大量新角色与组织，例如 SRE、平台工程师、AI 工程师、数据科学家、云卓越中心以及集中可观测性团队等。将这些新角色纳入原本以技术职能划分的组织架构中，往往令人困惑。同时，对运维团队的期待也变得模糊：什么才算是优秀的可用性与性能？当数据和告警已经压得我喘不过气时，再加遥测数据真能带来帮助吗？&lt;/p>
&lt;p>事实上，运维团队似乎也无法逃离 VUCA，甚至可以说，运维社区已经拥有一个属于自己的 “VUCA 宇宙”。&lt;/p>
&lt;p>不过，在评估了本报告中涵盖的厂商与产品后，我们依然感到振奋。如今市面上已有不少表现出色的可观测性平台产品，它们中的多数已纳入此次研究。在 VUCA 的大环境下，正是投身数字化运维的好时机。&lt;/p>
&lt;p>如果说对抗 VUCA 的方法，是掌握将遥测数据转化为业务行动与洞察的能力，从而让运维团队持续驱动业务飞轮，那么我们愿意承认，现在就是那片“绿洲”。&lt;/p>
&lt;h2 id="市场概览">市场概览
&lt;/h2>&lt;p>截至 2025 年中，可观测性平台市场仍延续着自全球疫情以来的高速演进。今年，为遵守 Magic Quadrant 最多纳入 20 家厂商的限制，我们在厂商遴选过程中面临诸多艰难取舍——部分具备竞争力的厂商因此未能入选，它们有的被收录于“值得关注”部分，另一些则可能在未来研究中出现。预计这一市场的活跃状态在短期内仍将持续。当前的市场格局已经带来了功能深度的不断增强与产品选择的显著扩展，未来厂商之间的差异化可能不再局限于技术能力，而是进一步演变成“功能秀”的角力。&lt;/p>
&lt;p>影响市场持续增长与采纳的关键因素包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>应对 VUCA 环境：&lt;/strong> 企业在技术平台、部署位置、地域策略与拥有成本等方面不得不做出权衡。即便在挑战加剧的环境下，可用性与性能要求并未放宽。组织往往需以更少资源应对更高标准，或借助新方式达成目标。例如，随着 VMware 产品对部分企业而言变得难以获得，自管私有云基础设施的未来愈发不明朗，这对相关工作负载的可观测性提出了新挑战。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>AI 热度持续：&lt;/strong> 每当 AI 热潮似乎达到顶峰，市场总会因新动向再度升温。目前的焦点是“具代理能力的 AI”，这一方向在 IT 运维领域展现出巨大潜力。虽然部分宣称具备此类能力的产品仍存虚名，但整体趋势值得关注。同时，企业对 AI 工作负载的运维支持需求正在快速增长，可观测性平台厂商与专用工具厂商都在加快布局。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>遥测数据的业务价值愈加突出：&lt;/strong> 越来越多平台声称可支持“业务可观测性”功能，帮助监测业务活动而非仅限技术指标。这类能力虽具价值，但往往需要配套的工作负载改造。此外，许多企业也开始意识到遥测数据中蕴含的业务洞察，并寻求手段将其普惠化。然而，要持续有效地将洞察交付至更多角色，还需在技术与非技术层面投入资源，这在现实中仍被普遍忽视。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>同时，多个监控领域与实践正加速融合。市场重心正从单点技术优化，转向保障应用实现其业务目标。相应地，资金投入也更集中于数字体验监控（DEM）与基础设施监控等与业务成效紧密相关的领域。根据 Gartner 预测，全球可观测性产品市场将在 2028 年达到约 142 亿美元，2021 至 2028 年年复合增长率（CAGR）为 11.1%（恒定汇率计）。&lt;/p>
&lt;p>未来几年，市场将继续围绕以下趋势发展：&lt;/p>
&lt;ul>
&lt;li>客户对于可观测性平台的成本与价值比问题愈发敏感，相关咨询频率持续上升；&lt;/li>
&lt;li>数据量与种类持续增长，推动平台向通用分析工具靠拢，AI 助力下的“自驱型”功能日益普及；&lt;/li>
&lt;li>AI 可观测性成为部署 AI 与 LLM 工作负载的企业刚需；&lt;/li>
&lt;li>平台正延伸至更多角色，如业务负责人、产品经理、平台工程师、开发人员等；&lt;/li>
&lt;li>渐进式交付、版本管理与可观测性的融合趋势明显；&lt;/li>
&lt;li>集中式可观测性团队被越来越多企业采纳，用于统一管理 SLO、遥测流转与工具选型；&lt;/li>
&lt;li>OpenTelemetry、eBPF 与遥测管道解决方案将推动行业标准与最佳实践的形成。&lt;/li>
&lt;/ul></description></item><item><title>Grafana Cloud 推出多项更新：AI 驱动工具、秘钥管理强化安全性，以及更多功能</title><link>https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/</link><pubDate>Thu, 21 Aug 2025 16:55:49 +0800</pubDate><guid>https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/</guid><description>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/cloud-updates-aug-2025.webp" alt="Featured image of post Grafana Cloud 推出多项更新：AI 驱动工具、秘钥管理强化安全性，以及更多功能" />&lt;blockquote>
&lt;p>From: &lt;a class="link" href="https://grafana.com/blog/2025/08/20/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security-and-more/" target="_blank" rel="noopener"
>Grafana Labs Blog&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>我们持续为 Grafana Cloud 推出实用更新和新特性。Grafana Cloud 是一款由开源的 Grafana LGTM Stack 提供支持的全托管可观测性平台，其中包括 &lt;a class="link" href="https://grafana.com/oss/loki/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Loki&lt;/a>（日志）、&lt;a class="link" href="https://grafana.com/oss/grafana/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana&lt;/a>（可视化）、&lt;a class="link" href="https://grafana.com/oss/tempo/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Tempo&lt;/a>（链路追踪）和 &lt;a class="link" href="https://grafana.com/oss/mimir/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Mimir&lt;/a>（指标监控）。&lt;/p>
&lt;p>还不是 Grafana Cloud 用户？&lt;a class="link" href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>立即注册&lt;/a> 账户，使用我们的 Cloud Free 免费计划即可试用所有功能。&lt;/p>
&lt;h2 id="更轻松上手-grafana-cloudgrafana-assistant-现已开放公开预览">更轻松上手 Grafana Cloud：Grafana Assistant 现已开放公开预览
&lt;/h2>&lt;p>在 Grafana Labs，我们始终&lt;a class="link" href="https://grafana.com/blog/2025/08/14/ai-in-observability-at-grafana-labs-making-observability-easy-and-accessible-for-everyone/" target="_blank" rel="noopener"
>坚信&lt;/a>，AI 不只是可观测性领域的一时潮流，它将在未来成为保障系统稳定运行的重要基石。&lt;/p>
&lt;p>这一理念也持续推动我们构建新的工具。例如，本月我们很高兴宣布：Grafana Assistant——一款嵌入于 Grafana Cloud 的 AI 助手，现已进入公开预览阶段。它支持自然语言操作，帮助你更高效地进行查询、构建和故障排查。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-2.webp"
width="1280"
height="720"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-2_hu_47179ad60e43c357.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-2_hu_3b3c2bd1d28d0f6c.webp 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>Grafana Assistant 可简化常见的工作流程，比如编写 PromQL、LogQL 或 TraceQL 查询，以及创建仪表盘等，同时始终让你掌控操作过程。它能帮助你减少重复性工作，提升整体效率，包括：&lt;/p>
&lt;ul>
&lt;li>更快速地编写和调试查询语句&lt;/li>
&lt;li>构建并优化可视化仪表盘&lt;/li>
&lt;li>排查系统问题与异常&lt;/li>
&lt;li>分析观测数据中的趋势与模式&lt;/li>
&lt;li>更直观地使用 Grafana 界面&lt;/li>
&lt;li>降低团队上手门槛，加速使用流程&lt;/li>
&lt;/ul>
&lt;p>想深入了解 Grafana Assistant 的功能和应用场景，欢迎访问&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/machine-learning/assistant/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;h2 id="安全凭证管理grafana-cloud-synthetic-monitoring-引入密钥管理功能">安全凭证管理：Grafana Cloud Synthetic Monitoring 引入密钥管理功能
&lt;/h2>&lt;p>随着基础设施的不断扩展，安全管理可观测性系统中的 API 密钥、密码、Token 等敏感信息也变得愈发复杂和重要。&lt;/p>
&lt;p>为了解决这一问题，我们本月在 Grafana Cloud 中&lt;a class="link" href="https://grafana.com/whats-new/2025-08-12-secrets-management-for-synthetic-monitoring/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>推出了机密管理功能&lt;/a>，目前已开放公开预览。该功能为 API 密钥、密码、Token 和凭证等数据提供了集中化、安全存储与统一管理的能力。首个集成此功能的产品是 Synthetic Monitoring。&lt;/p>
&lt;p>借助 Grafana Cloud Synthetic Monitoring 中的机密管理，你可以：&lt;/p>
&lt;ul>
&lt;li>创建密钥，并附加描述、标签等元数据信息&lt;/li>
&lt;li>在 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>k6 脚本型&lt;/a> 和 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6-browser/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>k6 浏览器型&lt;/a> 检查中通过名称引用密钥&lt;/li>
&lt;li>重置或吊销已有的密钥&lt;/li>
&lt;/ul>
&lt;p>当前，密钥的创建、修改和删除权限仅限于管理员用户。不过，只要用户具备检查项的编辑权限，且知晓密钥名称，即可在相应脚本中调用密钥。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/secrets-management-config.webp"
width="1999"
height="869"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/secrets-management-config_hu_e861c53427d2000f.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/secrets-management-config_hu_17c70bfda228c7ef.webp 1024w"
loading="lazy"
alt="Synthetic Monitoring 用户界面截图，左侧显示“创建密钥”对话框，右侧是“密钥管理”部分。"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>Synthetic Monitoring 用户界面截图，左侧显示“创建密钥”对话框，右侧是“密钥管理”部分。&lt;/p>
&lt;p>目前，密钥仅支持在脚本型和浏览器型检查中使用，但未来将扩展支持更多类型的监控检查。&lt;/p>
&lt;p>如需详细了解，请查阅我们的&lt;a class="link" href="https://grafana.com/blog/2025/08/20/secure-credential-storage-for-your-observability-stack-introducing-secrets-management-in-grafana-cloud/" target="_blank" rel="noopener"
>博客文章&lt;/a>与&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/manage-secrets/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>密钥管理官方文档&lt;/a>。&lt;/p>
&lt;h2 id="llm-驱动的追踪数据洞察grafana-cloud-traces-现已支持-mcp-协议">LLM 驱动的追踪数据洞察：Grafana Cloud Traces 现已支持 MCP 协议
&lt;/h2>&lt;p>分布式追踪数据是一种独特而强大的可观测性信号，能够帮助你深入了解系统中服务之间的交互关系。然而，将这些原始数据转化为可操作的洞察往往充满挑战。&lt;/p>
&lt;p>为此，我们在由 &lt;a class="link" href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener"
>Grafana Tempo&lt;/a> 驱动的全托管分布式追踪系统 &lt;a class="link" href="https://grafana.com/products/cloud/traces/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana Cloud Traces&lt;/a> 中，现已&lt;a class="link" href="https://grafana.com/whats-new/2025-08-08-access-tracing-data-using-mcp-server-in-grafana-cloud-traces/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>新增对 Model Context Protocol（MCP）&lt;/a> 的原生支持。&lt;/p>
&lt;p>&lt;a class="link" href="https://modelcontextprotocol.io/overview" target="_blank" rel="noopener"
>MCP 协议&lt;/a> 是由 Anthropic 推出的标准协议，广泛用于定义应用程序如何向大语言模型（Large Language Model，LLM）提供上下文信息。通过将 MCP 集成进 Grafana Cloud Traces，你现在可以使用如 &lt;a class="link" href="https://www.anthropic.com/claude-code" target="_blank" rel="noopener"
>Claude Code&lt;/a> 和 &lt;a class="link" href="https://cursor.com/en" target="_blank" rel="noopener"
>Cursor&lt;/a> 等基于 LLM 的工具，更高效地分析追踪数据并获取深度洞察。&lt;/p>
&lt;p>具体来说，这项集成可以帮助你：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>探索服务结构与交互&lt;/strong>：通过 LLM 分析追踪数据，新入职的开发者可以快速了解系统中服务之间的调用关系。&lt;/li>
&lt;li>&lt;strong>快速定位与诊断问题&lt;/strong>：LLM 可辅助识别调用链中的异常或错误，加快问题定位流程。&lt;/li>
&lt;li>&lt;strong>优化性能，降低延迟&lt;/strong>：通过分析链路数据，LLM 可帮助识别延迟瓶颈，指导优化策略。&lt;/li>
&lt;/ul>
&lt;p>要在 Grafana Cloud Traces 中配置 LLM 智能体，需要提供 Grafana Cloud API Token 并完成相应的&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/send-data/traces/mcp-server/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>配置流程&lt;/a>。该功能目前处于公开预览阶段。&lt;/p>
&lt;p>如需进一步了解 MCP 支持及其使用方式，请参阅我们的&lt;a class="link" href="https://grafana.com/blog/2025/08/13/llm-powered-insights-into-your-tracing-data-introducing-mcp-support-in-grafana-cloud-traces/" target="_blank" rel="noopener"
>博客文章&lt;/a>和&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/send-data/traces/mcp-server/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>技术文档&lt;/a>。&lt;/p>
&lt;h2 id="安全访问私有数据源tailscale-与-grafana-cloud-全新集成上线">安全访问私有数据源：Tailscale 与 Grafana Cloud 全新集成上线
&lt;/h2>&lt;p>我们深知，用户在希望通过 Grafana Cloud 实现数据可视化和洞察分析的同时，也极为关注数据源的私密性与安全性。&lt;/p>
&lt;p>为此，我们推出了全新的 &lt;a class="link" href="https://tailscale.com/" target="_blank" rel="noopener"
>Tailscale&lt;/a> 与 Grafana Cloud 集成方案。该集成现已开启私密预览，允许你通过 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Private Data Source Connect&lt;/a>，从 Grafana Cloud 直接安全访问位于 Tailscale 网络（称为 &lt;a class="link" href="https://tailscale.com/kb/1136/tailnet" target="_blank" rel="noopener"
>tailnet&lt;/a>）中的数据源。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-1.webp"
width="1280"
height="720"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-1_hu_51c8c53c3833b26e.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault-1_hu_d0d79f084aabb44d.webp 1024w"
loading="lazy"
alt="YouTube 视频"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>该集成带来的关键优势包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>安全私密的数据访问&lt;/strong>：借助 Tailscale，无需将数据源暴露在公网环境中，即可安全地进行查询操作。&lt;/li>
&lt;li>&lt;strong>配置简便，减少运维负担&lt;/strong>：使用 Tailscale 搭配 Private Data Source Connect，无需部署 PDC agent。你只需通过 MagicDNS 填写数据源的 tailnet 地址或机器名，并提供 Tailscale 授权密钥，即可完成连接。&lt;/li>
&lt;li>&lt;strong>扩展 Grafana Cloud 的可观测性覆盖&lt;/strong>：相比自托管方案，Grafana Cloud 提供更强大的可观测能力和使用便捷性。你可以在任何地点访问私有网络中的数据源，特别适合远程办公和分布式团队。&lt;/li>
&lt;/ul>
&lt;p>想了解该集成的更多细节及使用方式，欢迎阅读&lt;a class="link" href="https://grafana.com/blog/2025/07/24/securely-query-data-sources-on-your-tailscale-network-using-private-data-source-connect-in-grafana-cloud/" target="_blank" rel="noopener"
>官方博客&lt;/a>，以及查阅我们的 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Private Data Source Connect 文档&lt;/a>。&lt;/p>
&lt;h2 id="前端可观测性新增开箱即用告警功能">前端可观测性新增开箱即用告警功能
&lt;/h2>&lt;p>&lt;a class="link" href="https://grafana.com/products/cloud/frontend-observability-for-real-user-monitoring/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana Cloud Frontend Observability&lt;/a> 是我们为 Web 应用推出的真实用户监测（Real User Monitoring，RUM）托管服务，能够即时提供清晰且可操作的终端用户体验洞察。&lt;/p>
&lt;p>本月，配置前端可观测性告警的流程变得更加轻松便捷。&lt;/p>
&lt;p>随着开箱即用的告警功能&lt;a class="link" href="https://grafana.com/whats-new/2025-07-22-frontend-observability-out-of-the-box-alerting/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>正式发布&lt;/a>，Grafana Cloud Frontend Observability 向前迈出了重要一步，即使是首次使用 Grafana 告警功能的用户，也可以通过 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-grafana-managed-rule/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Grafana 托管告警&lt;/a> 快速上手，无需预先了解复杂的配置流程。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault.webp"
width="1280"
height="720"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault_hu_e50605c21ac7351b.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/maxresdefault_hu_e7ac48b3c158294d.webp 1024w"
loading="lazy"
alt="YouTube 视频"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>借助简化的工作流，你可以：&lt;/p>
&lt;ul>
&lt;li>基于 Web 应用中的错误或 Web Vitals 指标启用并配置告警&lt;/li>
&lt;li>快速定位并排查前端问题，因告警规则由系统自动配置与管理&lt;/li>
&lt;li>编写可复用模板，拓展前端告警策略的覆盖范围&lt;/li>
&lt;/ul>
&lt;p>想了解更多详细内容，请访问我们的 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/monitor-applications/frontend-observability/alerting/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Frontend Observability 文档&lt;/a>。&lt;/p>
&lt;h2 id="grafana-cloud-irm-事件管理功能全面升级">Grafana Cloud IRM 事件管理功能全面升级
&lt;/h2>&lt;h3 id="快速通报事件状态更新">快速通报事件状态更新
&lt;/h3>&lt;p>在 &lt;a class="link" href="https://grafana.com/blog/2025/03/11/oncall-management-incident-response-grafana-cloud-irm/" target="_blank" rel="noopener"
>Grafana Cloud IRM&lt;/a> 中，你现在可以为事件添加结构化的&lt;a class="link" href="https://grafana.com/whats-new/2025-07-23-communicate-incident-status-updates-with-grafana-irm/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>状态更新&lt;/a>，帮助团队与干系人实时掌握处理进展。&lt;/p>
&lt;p>状态更新贯穿整个事件生命周期，无论是确认影响、交由其他团队处理，还是完成事件解决，都能以统一格式高效传递关键信息，提升沟通透明度。&lt;/p>
&lt;p>你可以直接在 Web 界面中添加状态更新，或在关联的 Slack 事件频道中使用以下指令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/grafana incident update add &amp;lt;内容&amp;gt;&lt;/code>：发布新的状态更新&lt;/li>
&lt;li>&lt;code>/grafana incident update&lt;/code>：查看最新状态更新&lt;/li>
&lt;/ul>
&lt;p>该功能现已全面上线。只需打开任一事件页面，在 &lt;strong>活动时间轴（activity timeline）&lt;/strong> 中找到 &lt;strong>状态更新（Status updates）&lt;/strong> 区域即可使用。如需了解详情，请查阅&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/irm/use/incident-management/status-updates/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>使用指南&lt;/a>。&lt;/p>
&lt;h3 id="全新-webhook-集成体验">全新 Webhook 集成体验
&lt;/h3>&lt;p>Grafana Cloud IRM 的外发 Webhook 现已支持事件相关触发器，为自动化告警分组和事件处理提供更强大的统一工作流管理能力。你可在 &lt;strong>Outgoing Webhooks&lt;/strong> 配置页中设置，在事件声明、更新或解决时自动触发请求。&lt;/p>
&lt;p>新版本 Webhook 支持以下能力：&lt;/p>
&lt;ul>
&lt;li>支持任意 HTTP 方法，灵活配置请求&lt;/li>
&lt;li>URL、Header、请求体均可模板化定义&lt;/li>
&lt;li>可动态引用事件数据和先前 Webhook 响应结果&lt;/li>
&lt;li>可在事件或告警分组时间轴中直接查看执行记录&lt;/li>
&lt;li>支持使用 Terraform 进行配置管理&lt;/li>
&lt;/ul>
&lt;p>现有旧版 Incident Outgoing Webhooks 及其配置仍可继续使用。但为获得更好的功能体验和长期支持，我们建议迁移至新版统一 Webhook 集成。&lt;/p>
&lt;p>更多信息请参阅&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/irm/configure/integrations/webhooks/outgoing-webhooks/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;h2 id="grafana-cloud-k6-正式支持扩展机制现已全面上线">Grafana Cloud k6 正式支持扩展机制，现已全面上线
&lt;/h2>&lt;p>我们正式推出 &lt;a class="link" href="https://grafana.com/products/cloud/k6/" target="_blank" rel="noopener"
>Grafana Cloud k6&lt;/a> 的扩展功能支持！Grafana Cloud k6 是一款基于 &lt;a class="link" href="https://grafana.com/docs/k6/latest/" target="_blank" rel="noopener"
>Grafana k6&lt;/a> 构建的托管性能测试平台，适用于多种测试场景。&lt;/p>
&lt;p>通过 &lt;a class="link" href="https://grafana.com/docs/k6/latest/extensions/" target="_blank" rel="noopener"
>k6 扩展机制&lt;/a>，你可以扩展 k6 的核心功能。开源版本用户需自行编写扩展并重新编译 k6，而在 Grafana Cloud k6 中，你可直接使用平台支持的一部分扩展模块，无需构建自定义二进制文件。&lt;/p>
&lt;p>你可以通过以下方式灵活执行测试脚本：&lt;/p>
&lt;ul>
&lt;li>本地运行测试：&lt;code>k6 run test.js&lt;/code>&lt;/li>
&lt;li>在云端运行测试：&lt;code>k6 cloud run test.js&lt;/code>&lt;/li>
&lt;li>本地运行并将测试结果实时传输到云端：&lt;code>k6 cloud run test.js --local-execution&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如需进一步了解扩展功能和使用方式，请访问&lt;a class="link" href="https://grafana.com/whats-new/2025-08-18-extensions-and-version-support-in-grafana-cloud-k6/" target="_blank" rel="noopener"
>官方公告&lt;/a>。&lt;/p>
&lt;h2 id="grafana-cloud-全新-enterprise-数据源与集成支持上线">Grafana Cloud 全新 Enterprise 数据源与集成支持上线
&lt;/h2>&lt;p>我们还新增了多项集成与 Enterprise 数据源，帮助你进一步扩展 Grafana Cloud 的可观测能力。&lt;/p>
&lt;h3 id="使用-anthropic-集成监控-claude-模型的使用与成本">使用 Anthropic 集成监控 Claude 模型的使用与成本
&lt;/h3>&lt;p>全新发布的 &lt;a class="link" href="https://grafana.com/blog/2025/08/19/how-to-monitor-claude-usage-and-costs-introducing-the-anthropic-integration-for-grafana-cloud/" target="_blank" rel="noopener"
>Anthropic 集成&lt;/a> 允许你直接在 Grafana Cloud 中连接 &lt;a class="link" href="https://docs.anthropic.com/en/api/admin-api/usage-cost" target="_blank" rel="noopener"
>Anthropic Usage and Cost API&lt;/a>，实时监控 Claude 系列大语言模型（Large Language Models, LLM）的使用情况与开销。&lt;/p>
&lt;p>通过这一集成，你可以在统一平台中查看 Claude 模型的调用频率、响应时间和累计费用，配套的预设仪表盘与告警机制可帮助你迅速启动监控并及时采取优化措施。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/anthropic-usage-dashboard_1.webp"
width="3024"
height="1726"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/anthropic-usage-dashboard_1_hu_48ffdbebb88331c9.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/anthropic-usage-dashboard_1_hu_1c10558f357e00fc.webp 1024w"
loading="lazy"
alt="Claude"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;p>详细信息请参阅&lt;a class="link" href="https://grafana.com/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-anthropic/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;h3 id="可视化-jenkins-数据指标">可视化 Jenkins 数据指标
&lt;/h3>&lt;p>全新上线的 &lt;a class="link" href="https://grafana.com/grafana/plugins/grafana-jenkins-datasource/?pg=blog&amp;amp;plcmt=body-txt" target="_blank" rel="noopener"
>Jenkins Enterprise 数据源&lt;/a> 现已支持在 Grafana Cloud 和 Grafana Enterprise 中，查询并展示 &lt;a class="link" href="https://www.jenkins.io/" target="_blank" rel="noopener"
>Jenkins&lt;/a> 自动化服务器中的性能指标。Jenkins 是开源的持续集成（CI）/持续部署（CD）平台，用于项目的构建与发布管理。&lt;/p>
&lt;p>该数据源内置两个预设仪表盘，助你快速上手 Jenkins 数据可视化：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Jenkins 概览仪表盘&lt;/strong>：展示整个 Jenkins 实例的运行状况，包括所有项目、节点、执行器状态和构建队列等信息。&lt;/li>
&lt;li>&lt;strong>Jenkins DORA 指标仪表盘&lt;/strong>：聚焦衡量研发效能的四项核心指标：部署频率、变更交付时长、变更失败率与服务恢复时间。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/jenkins-enterprise-data-source-dashboard.webp"
width="1999"
height="901"
srcset="https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/jenkins-enterprise-data-source-dashboard_hu_a0e440a3f662fa82.webp 480w, https://martinliu.cn/blog/grafana-cloud-updates-onboard-teams-with-new-ai-powered-tooling-secrets-management-for-enhanced-security/jenkins-enterprise-data-source-dashboard_hu_c6cf48979513874e.webp 1024w"
loading="lazy"
alt="Grafana 仪表盘截图，展示四个图表：部署频率、变更交付时间、变更失败率和 30 天内服务恢复时间。"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p></description></item><item><title>Grafana 12.1 正式发布！</title><link>https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/</link><pubDate>Tue, 29 Jul 2025 14:34:27 +0800</pubDate><guid>https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/</guid><description>&lt;img src="https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/grafana-12.1-meta.webp" alt="Featured image of post Grafana 12.1 正式发布！" />&lt;p>最新版本带来了多项新功能，简化了 &lt;strong>Grafana 实例（Grafana instances）&lt;/strong> 的管理方式，也优化了 &lt;strong>告警规则（alert rules）&lt;/strong> 的管理体验，方便你快速定位所需的告警内容。此外还有更多改进。&lt;/p>
&lt;p>以下是本次 Grafana 版本的一些亮点。如果你想了解本次发布的全部更新内容，请参考 &lt;a class="link" href="https://github.com/grafana/grafana/blob/main/CHANGELOG.md" target="_blank" rel="noopener"
>更新日志&lt;/a> 或 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/whatsnew/whats-new-in-v12-1/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>新版功能文档&lt;/a>。&lt;/p>
&lt;h2 id="grafana-advisor智能化运维监控">Grafana Advisor：智能化运维监控
&lt;/h2>&lt;p>我们一直在探索降低运维负担的方法，帮助你更高效地进行维护与故障排查。因此，在 Grafana 12.1 中，我们很高兴地宣布 &lt;a class="link" href="https://grafana.com/whats-new/2025-07-22-keep-instances-running-smoothly-with-grafana-advisor/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>Grafana Advisor&lt;/a> —— 一个用于帮助管理员保持 Grafana 实例稳定和安全运行的监控工具 —— 现已进入公开预览阶段。&lt;/p>
&lt;p>&lt;strong>Grafana Advisor&lt;/strong> 最初在 Grafana 12 中作为实验性功能推出，如今它能够自动对你的 Grafana 服务器执行定期健康检查，提供可操作的洞见与建议，帮助你维持系统的最佳运行状态。&lt;/p>
&lt;p>目前，&lt;strong>Grafana Advisor&lt;/strong> 会定期检查 &lt;strong>数据源连接（data source connections）&lt;/strong>、&lt;strong>插件（plugins）&lt;/strong> 和 &lt;strong>SSO 设置（SSO settings）&lt;/strong>，未来版本中我们计划扩展其功能范围。&lt;/p>
&lt;p>在 &lt;strong>Grafana Cloud&lt;/strong> 中，Advisor 默认启用。若要在 &lt;strong>Grafana OSS&lt;/strong> 与 &lt;strong>Enterprise 版&lt;/strong> 中启用该功能，可通过配置开关 &lt;code>grafanaAdvisor&lt;/code> 实现。详情请参见我们的 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/administration/grafana-advisor/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>技术文档&lt;/a>。&lt;/p>
&lt;h2 id="告警功能的重大升级">告警功能的重大升级
&lt;/h2>&lt;p>告警是任何可观测性策略中的关键组成部分。在 Grafana 12.1 中，我们带来了几项新的告警功能，包括重新设计的 &lt;strong>告警规则列表页面（alert rule list page）&lt;/strong>，帮助你以更可扩展、直观的方式管理告警。&lt;/p>
&lt;h3 id="全新设计的告警规则列表页面">全新设计的告警规则列表页面
&lt;/h3>&lt;p>&lt;em>适用于所有版本的 Grafana&lt;/em>&lt;/p>
&lt;p>在 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/alerting/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>Grafana Alerting&lt;/a> 中，一个 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>告警规则（alert rule）&lt;/a> 定义了触发告警的评估条件。你可能拥有数百甚至上千条这样的规则，而在本次发布中，我们通过完全 &lt;a class="link" href="https://grafana.com/whats-new/2025-07-15-alert-rule-list-page-updates/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>重新设计的规则列表页面&lt;/a> 让浏览管理更加轻松。&lt;/p>
&lt;p>新版页面整体提供了更流畅、更快捷、更灵活的使用体验。它支持两种视图模式，满足不同使用场景：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分组视图（Grouped view）&lt;/strong>：按命名空间组织，便于深入查看特定规则组。&lt;/li>
&lt;li>&lt;strong>列表视图（List view）&lt;/strong>：展示所有告警规则的完整列表，支持快速搜索与过滤。近期的性能优化大幅提升了使用效率。&lt;/li>
&lt;/ul>
&lt;p>我们还对界面进行了简化，聚焦于“管理告警规则”这一核心任务。现在你将看到一个更简洁、更清晰的视图，仅显示最关键的信息字段，包括 &lt;strong>规则名称（rule name）&lt;/strong>、&lt;strong>所属位置（location）&lt;/strong>、&lt;strong>类型（type）&lt;/strong> 和 &lt;strong>状态（state）&lt;/strong>。&lt;/p>
&lt;p>此外，我们还为规则列表页面引入了新的分页 API，使管理操作更轻松便捷。无论你是希望查看结构化的告警规则层级，还是需要快速检索和筛选成千上万条规则，现在都能获得更简洁、更流畅的体验。&lt;/p>
&lt;p>对于 &lt;strong>Grafana Cloud 用户&lt;/strong>，我们正逐步向所有实例推出新版规则页面；对于 &lt;strong>Grafana OSS 用户&lt;/strong>，当前可通过功能开关启用。请在 Grafana 配置文件的 &lt;code>feature_toggles&lt;/code> 部分中添加开关 &lt;code>alertingListViewV2&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">feature_toggles]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">alertingListViewV2 = true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重启 Grafana 后，即可访问新版规则列表页面。&lt;/p>
&lt;h3 id="支持-prometheus-yaml-文件导入规则">支持 Prometheus YAML 文件导入规则
&lt;/h3>&lt;p>我们近期还 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/alerting/alerting-rules/alerting-migration/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>新增支持&lt;/a>：可以将由数据源管理的规则导入为由 Grafana 管理的告警规则（Grafana-managed alert rules）。不过，以前用户在没有配置 ruler 的情况下，无法导入现有的 &lt;strong>Prometheus 规则（Prometheus rules）&lt;/strong>。&lt;/p>
&lt;p>而在 Grafana 12.1 中，你现在可以直接 &lt;a class="link" href="https://grafana.com/whats-new/2025-06-02-add-ability-to-import-rules-to-gma-from-prometheus-yaml/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>通过 Prometheus YAML 文件导入规则&lt;/a>，并使用同一套 Alerting UI 完成配置。&lt;/p>
&lt;h3 id="引入活动时间区间active-time-intervals">引入“活动时间区间”（active time intervals）
&lt;/h3>&lt;p>在本次告警功能更新中，我们将原先的 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/alerting/configure-notifications/mute-timings/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>静默时间区间（mute time intervals）&lt;/a> 重命名为 &lt;a class="link" href="https://grafana.com/whats-new/2025-07-09-active-time-intervals-in-grafana-alerting/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>活动时间区间（active time intervals）&lt;/a>，以更准确地反映其用途 —— 即定义告警“何时应当触发”。&lt;/p>
&lt;p>如需进一步了解 Grafana 告警功能中的这些改动和其他更新，请查看我们的 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/alerting/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;h2 id="用更灵活的方式查询与可视化数据">用更灵活的方式查询与可视化数据
&lt;/h2>&lt;p>无论你是想深入分析某项指标，还是构建复杂的仪表盘，这些新功能都将帮助你以更符合需求的方式探索数据。&lt;/p>
&lt;h3 id="趋势线转换trendlines-transformation">趋势线转换（Trendlines transformation）
&lt;/h3>&lt;p>&lt;em>适用于所有版本的 Grafana&lt;/em>&lt;/p>
&lt;p>在 Grafana 中，&lt;a class="link" href="https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/transform-data/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>转换操作（transformations）&lt;/a> 是一种强大手段，用于在系统进行可视化之前处理查询返回的数据。Grafana 12.1 中新增了一个全新的转换类型：&lt;a class="link" href="https://grafana.com/whats-new/2025-07-21-transformations--regression-analysis/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>趋势线（trendlines，也称回归分析）&lt;/a>。&lt;/p>
&lt;p>这一新转换会对任意数据集拟合一个数学函数 —— 支持线性或多项式回归 —— 以预测原始数据中未直接体现的某一时间点的数值。&lt;/p>
&lt;p>换句话说，你可以基于统计模型生成一个新序列，用于表示趋势线中的预测值。这在处理波动剧烈、难以洞察趋势的数据时尤为有用。&lt;/p>
&lt;p>你可以在 &lt;a class="link" href="https://play.grafana.org/goto/9o1-SMyNg?orgId=1&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>Grafana Play 示例&lt;/a> 中查看这一转换的实际效果，或在我们的 &lt;a class="link" href="https://grafana.com/docs/grafana-cloud/visualizations/panels-visualizations/query-transform-data/transform-data/#regression-analysis?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>文档&lt;/a> 中了解更多细节。&lt;/p>
&lt;h3 id="可视化操作中支持自定义变量">可视化操作中支持自定义变量
&lt;/h3>&lt;p>&lt;em>适用于所有版本的 Grafana&lt;/em>&lt;/p>
&lt;p>我们很高兴地宣布，你现在可以在 &lt;a class="link" href="https://grafana.com/whats-new/2025-07-14-custom-variable-support-in-visualization-actions/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>可视化操作（visualization actions）中定义自定义变量&lt;/a> 了。&lt;/p>
&lt;p>当你触发一个 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/panels-visualizations/configure-data-links/#actions?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>操作（action）&lt;/a>（例如调用 API 创建支持工单）时，系统会提示你填写这些变量的值。这样一来，操作变得更加动态、交互性更强，你无需修改仪表盘配置就能实时定制请求内容。&lt;/p>
&lt;p>这项功能在触发告警、过滤 API 调用，或将用户定义参数传递给外部系统时尤其有用。&lt;/p>
&lt;h3 id="仪表盘支持服务器配置的快捷时间范围">仪表盘支持服务器配置的快捷时间范围
&lt;/h3>&lt;p>&lt;em>适用于 Grafana OSS 与 Grafana Enterprise&lt;/em>&lt;/p>
&lt;p>Grafana 服务器管理员现在可以为仪表盘的 &lt;a class="link" href="https://grafana.com/grafana/plugins/williamvenner-timepickerbuttons-panel/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>时间选择器（time picker）&lt;/a> 定义自定义的时间范围预设。这一功能非常适合那些需要经常分析特定上下文时间窗口的团队。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/screenshot-custom-time-ranges-12-1.webp"
width="594"
height="517"
srcset="https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/screenshot-custom-time-ranges-12-1_hu_d4031303725a9f46.webp 480w, https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/screenshot-custom-time-ranges-12-1_hu_484dbcf62390cb7a.webp 1024w"
loading="lazy"
alt="服务器配置时间范围的截图"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>&lt;em>服务器配置时间范围的截图&lt;/em>&lt;/p>
&lt;p>只需在你的 &lt;a class="link" href="https://grafana.com/docs/grafana/next/setup-grafana/configure-grafana/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>服务器配置&lt;/a> 文件中配置 &lt;code>[time_picker] quick_ranges&lt;/code>，即可根据监控数据的实际情况设置全局默认值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">time_picker]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">quick_ranges = &amp;#34;&amp;#34;&amp;#34;[&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>{&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now-6s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;to&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Last 6 seconds&amp;#34;&lt;/span>}&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>{&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now-10m&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;to&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Last 10 minutes&amp;#34;&lt;/span>}&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>{&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now-25h&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;to&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Last 24 hours&amp;#34;&lt;/span>}&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>{&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now/w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;to&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now/w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;This week&amp;#34;&lt;/span>}&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>{&lt;span class="s2">&amp;#34;from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now-1w/w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;to&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;now-1w/w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;display&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Last week&amp;#34;&lt;/span>}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="l">&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>特别感谢社区成员 Chris Hodges &lt;a class="link" href="https://github.com/grafana/grafana/pull/102254" target="_blank" rel="noopener"
>为该功能贡献代码&lt;/a>！&lt;/p>
&lt;h3 id="增强的自定义货币格式">增强的自定义货币格式
&lt;/h3>&lt;p>&lt;em>适用于所有版本的 Grafana&lt;/em>&lt;/p>
&lt;p>你现在可以 &lt;a class="link" href="https://grafana.com/whats-new/2025-06-12-enhanced-custom-currency-format--display-exact-financial-values/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>显示精确的财务数值&lt;/a>（或按需缩写），以便更灵活地控制仪表盘中的展示方式。&lt;/p>
&lt;p>此前，Grafana 会自动缩写较大的货币数值 —— 例如 &lt;code>$1,235,667&lt;/code> 会显示为 &lt;code>$1.24M&lt;/code>，&lt;code>$555,558&lt;/code> 会变成 &lt;code>$555.6K&lt;/code>。虽然这种方式适用于大多数可视化场景，但财务数据往往需要显示精确数值。&lt;/p>
&lt;p>为此，我们增强了自定义货币格式。你现在可以使用 &lt;code>currency:financial:&amp;lt;unit&amp;gt;&lt;/code> 格式完整显示数字。例如：使用 &lt;code>currency:financial:$&lt;/code> 会将 &lt;code>1235667&lt;/code> 格式化为 &lt;code>$1,235,667&lt;/code>，而非 &lt;code>$1.24M&lt;/code>。&lt;/p>
&lt;p>财务格式还支持灵活的货币符号位置，包括：&lt;/p>
&lt;p>&lt;strong>前缀&lt;/strong>（默认）：&lt;code>currency:financial:$&lt;/code> 会显示为 &lt;code>$1,235,667&lt;/code>&lt;/p>
&lt;p>&lt;strong>后缀&lt;/strong>：&lt;code>currency:financial:€:suffix&lt;/code> 会显示为 &lt;code>1,235,667€&lt;/code>&lt;/p>
&lt;h3 id="microsoft-entra-workload-identity-支持">Microsoft Entra Workload Identity 支持
&lt;/h3>&lt;p>&lt;em>适用于所有版本的 Grafana&lt;/em>&lt;/p>
&lt;p>Grafana 现在 &lt;a class="link" href="https://grafana.com/whats-new/2025-07-15-entra-workload-identity-support/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>支持 Microsoft Entra Workload Identity&lt;/a>，显著增强了基于联合凭据的身份验证能力。该更新简化了 OAuth 流程，并提升了在 Microsoft Azure 上运行 Grafana 实例的安全性。&lt;/p>
&lt;p>关于 Entra ID（前身为 Azure AD）身份验证配置的更多信息，请参见我们的 &lt;a class="link" href="https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication/azuread/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>官方文档&lt;/a>。感谢社区成员 &lt;a class="link" href="https://github.com/mehighlow" target="_blank" rel="noopener"
>mehiglow&lt;/a> 对该功能的宝贵贡献！&lt;/p>
&lt;h2 id="grafana-扩展性数据源新增功能">Grafana 扩展性：数据源新增功能
&lt;/h2>&lt;p>在 Grafana Labs，我们始终相信 —— 不论你的数据存储在哪里，你都应该能够查询和可视化它。因此，我们持续扩展并改进 Grafana 的数据源支持能力。&lt;/p>
&lt;p>以下是最新的数据源相关更新。&lt;/p>
&lt;h3 id="可视化-logicmonitor-数据">可视化 LogicMonitor 数据
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.logicmonitor.com/" target="_blank" rel="noopener"
>LogicMonitor&lt;/a> 是一个可观测性平台，提供基础设施监控、AIOps 和 IT 运维洞察。现已进入公开预览阶段，全新的 &lt;a class="link" href="https://grafana.com/grafana/plugins/grafana-logicmonitor-datasource/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>LogicMonitor Devices Enterprise 数据源&lt;/a> 让你可以在 Grafana Cloud 或 Grafana Enterprise 中直接查询与可视化 &lt;code>Device Instance Data&lt;/code>，以及列出 &lt;code>Devices&lt;/code>、&lt;code>Datasources&lt;/code> 和 &lt;code>Instances&lt;/code>。&lt;/p>
&lt;p>你可以在我们的 &lt;a class="link" href="https://grafana.com/docs/plugins/grafana-logicmonitor-datasource/latest/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>官方文档&lt;/a> 中了解如何使用与安装该数据源。如需全面了解 Enterprise 数据源，请参考这篇 &lt;a class="link" href="https://grafana.com/blog/2024/05/13/grafana-enterprise-data-source-plugins-a-brief-guide-to-what-they-are-and-how-to-get-started/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>指南&lt;/a>。&lt;/p>
&lt;h3 id="bigquery-数据源支持服务账号模拟service-account-impersonation">BigQuery 数据源支持服务账号模拟（Service Account Impersonation）
&lt;/h3>&lt;p>为提升安全性，Google 建议使用服务账号令牌配合 &lt;a class="link" href="https://cloud.google.com/iam/docs/service-account-impersonation" target="_blank" rel="noopener"
>服务账号模拟（Service Account Impersonation）&lt;/a>。一旦服务账号令牌遭到泄露，若未关联可模拟的服务账号，该令牌将无法访问 Google Cloud API，从而显著降低未授权访问的风险。&lt;/p>
&lt;p>这一额外的安全层级现已在我们的 &lt;a class="link" href="https://grafana.com/grafana/plugins/grafana-bigquery-datasource/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>BigQuery 数据源&lt;/a> 配置中 &lt;a class="link" href="https://grafana.com/whats-new/2025-06-18-support-for-service-account-impersonation-in-bigquery/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>正式支持&lt;/a>，可有效防止令牌泄露后被滥用。目前该功能已全面开放。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/bigquery-service-account-impersonation.webp"
width="1388"
height="476"
srcset="https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/bigquery-service-account-impersonation_hu_743fba5a932506a6.webp 480w, https://martinliu.cn/blog/grafana-12-1-release-all-the-latest-features/bigquery-service-account-impersonation_hu_cc8ee7441169d37b.webp 1024w"
loading="lazy"
alt="服务账号模拟开关的截图"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="699px"
>&lt;/p>
&lt;p>你可以通过我们的 &lt;a class="link" href="https://grafana.com/grafana/plugins/grafana-bigquery-datasource/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>插件目录&lt;/a> 或这篇 &lt;a class="link" href="https://grafana.com/blog/2025/06/18/visualize-google-cloud-bigquery-data-in-grafana-the-latest-updates-key-features-and-more/?src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>最新博客文章&lt;/a> 深入了解 Grafana 中 BigQuery 数据源的使用方式。&lt;/p>
&lt;p>如需查看 Grafana 中全部新增功能，请参阅我们的 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>官方文档&lt;/a>、&lt;a class="link" href="https://github.com/grafana/grafana/blob/main/CHANGELOG.md" target="_blank" rel="noopener"
>更新日志&lt;/a>，或 &lt;a class="link" href="https://grafana.com/docs/grafana/latest/whatsnew/whats-new-in-v12-1/?pg=blog&amp;amp;plcmt=body-txt&amp;amp;src=li&amp;amp;mdm=social&amp;amp;camp=blog" target="_blank" rel="noopener"
>新版亮点文档&lt;/a>。&lt;/p></description></item><item><title>欢迎进入 SRE 的第三纪元 - AI 可靠性工程</title><link>https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/</link><pubDate>Sun, 27 Jul 2025 09:44:13 +0800</pubDate><guid>https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/afadfd03-nasik-lababan-auk3gkpv6u-unsplash-1024x683.webp" alt="Featured image of post 欢迎进入 SRE 的第三纪元 - AI 可靠性工程" />&lt;p>Source: &lt;a class="link" href="https://thenewstack.io/ai-reliability-engineering-welcome-to-the-third-age-of-sre/" target="_blank" rel="noopener"
>Denys Vasyliev @ The New Stack&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>SRE 必须构建值得信赖的 AI 系统，充分利用不断涌现的工具与标准化生态。&lt;/p>&lt;/blockquote>
&lt;p>当 &lt;a class="link" href="https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/?p=clayton-coleman" target="_blank" rel="noopener"
>Clayton Coleman&lt;/a> 的这句话在 KubeCon 北美大会上被引用时，引发了强烈共鸣。仅仅五年前，问一位站点可靠性工程师（Site Reliability Engineer，SRE）他们的职责，回答通常围绕着让 Web 应用保持高性能、具备可扩展性和高可用性。而如今，整个技术格局已然发生深刻变化。AI 推理（Inference）工作负载——即训练完成的模型基于所学知识对新数据做出预测的过程——正逐渐成为像 Web 应用一样关键的核心系统。&lt;/p>
&lt;p>“&lt;em>Inference&lt;/em>——是指模型在推理阶段将其学到的模式应用于此前未见的数据，以生成预测或决策。在这个过程中，模型会利用其已有的知识，对来自真实世界的输入进行响应。”&lt;/p>
&lt;p>这种演变催生了一个全新的工程领域：AI 可靠性工程（AI Reliability Engineering，AIRe）。我们面临的挑战早已不再是 HTTP 请求的延迟，而是如何减少大语言模型（LLM）在生成标记（token）时的卡顿。优化数据库查询显得有些传统，如今我们更需要关注如何提升模型的检查点（checkpoint）恢复效率和张量（tensor）处理性能。AI 模型，正如曾经的 Web 应用那样，也需要卓越的可扩展性、可靠性和可观测性——而这些能力的架构工作仍在持续进行中。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/bb3cd678-image5.webp"
width="468"
height="166"
srcset="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/bb3cd678-image5_hu_2b6efe16802156d5.webp 480w, https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/bb3cd678-image5_hu_ed694a31972dccec.webp 1024w"
loading="lazy"
alt="The new stack of AI"
class="gallery-image"
data-flex-grow="281"
data-flex-basis="676px"
>&lt;/p>
&lt;p>我已经深入从事 AI 可靠性工程近两年，专注于研究、原型设计，并构建实际的推理系统。从 DevOps 各类大会到 SRE Days，再到纽伦堡和伦敦的社区聚会，我不断与行业同行交流实践经验。现在，我希望在这里将这些珍贵的洞察与你分享。&lt;/p>
&lt;p>&lt;strong>不可靠的 AI，甚至比没有 AI 更危险。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>推理（Inference）&lt;/strong> 不仅仅是模型的运行过程，它是一门独立的运维工程学科，具备独特的架构抉择与工程范式。与训练阶段可以容忍时间与成本不同，推理处于生产的关键链路上，每一毫秒都可能影响最终体验。&lt;/li>
&lt;li>&lt;strong>实时 vs 批量&lt;/strong>：推理运行方式主要分为实时（也称在线）和批量（离线）两种。实时推理支撑着聊天机器人、欺诈检测和自动驾驶等对低延迟有严苛要求的应用；而批量推理则周期性地处理大规模数据集，用于图像识别、日志分析或趋势预测等场景。&lt;/li>
&lt;li>&lt;strong>资源特征&lt;/strong>：尽管相较训练更轻量，推理依然对性能要求极高。尤其在实时场景下，既需要快速计算，也要求基础设施具备高可用性。尽管 CPU 仍有用武之地，但现代推理系统越来越依赖 GPU、TPU，或专用芯片（如 AWS Inferentia、NVIDIA TensorRT）以实现极低延迟。&lt;/li>
&lt;li>&lt;strong>部署环境&lt;/strong>：推理部署可以无处不在，从边缘设备到云端超大规模集群。你可以在 Serverless 端点、Kubernetes 集群，甚至微型 IoT 模块中找到它的身影。SageMaker、Vertex AI、Hugging Face 和 Together.ai 等平台让部署变得更轻松，但最终选择仍需在成本、控制力和延迟之间权衡。&lt;/li>
&lt;li>&lt;strong>性能优化手册(Playbook)&lt;/strong>：性能与效率的挑战从未止步。团队广泛应用量化（例如将 FP32 精度转为 INT8）、模型蒸馏和神经架构搜索（Neural Architecture Search，NAS）等技术，以尽可能在不牺牲结果质量的前提下，打造更小、更快、更高效的推理引擎。&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="https://thenewstack.io/monitoring-vs-observability-whats-the-difference/" title="Observability and Monitoring"
target="_blank" rel="noopener"
>可观测性与监控&lt;/a>&lt;/strong>：传统遥测系统难以满足需求。推理系统需要更精细的可观测性，涵盖预测延迟、token（标记）吞吐量、数据漂移，甚至模型幻觉（即生成虚假信息）的比率。OpenTelemetry、Prometheus 和专为 AI 打造的追踪工具如今已成为基础设施标配。&lt;/li>
&lt;li>&lt;strong>可扩展性&lt;/strong>：推理流量不可预期，经常随着用户行为剧烈波动。因此需要通过 Kubernetes HPA、Cloud Run 实现高效自动扩容，并结合 Envoy、Istio、KServe 等实现智能流量调度，以确保系统始终从容应对。&lt;/li>
&lt;li>&lt;strong>安全防线&lt;/strong>：AI 推理引入了新的安全挑战，包括对抗性输入攻击与潜在的数据泄露。工程师必须将模型端点像保护 API 端点一样严格防御，实施身份验证、访问频率限制、数据加密以及运行时完整性验证。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>推理已不再是机器学习的附属过程。它就是核心应用。它就是生产环境。而它也正在重塑整套运维架构体系。&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>传统的 SRE 原则虽为 AI 提供了基础，但已难以满足它的独特需求。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模型的不确定性本质&lt;/strong>：与典型的 Web 应用不同，AI 模型不是确定性的。同一个输入可能会产生不同结果。一个模型即便系统运行稳定、没有宕机，也可能输出错误、有偏差甚至荒谬的内容——这彻底颠覆了我们对“可靠性”的传统认知。&lt;/li>
&lt;li>&lt;strong>评估标准正在变化&lt;/strong>：光靠“可用性 SLA”已远远不够。我们需要引入 &lt;em>准确性 SLA&lt;/em> 的新范式，通过精确率、召回率、公平性以及模型漂移等维度，来衡量模型在实际环境下的表现。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/e116da6b-image2.webp"
width="468"
height="259"
srcset="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/e116da6b-image2_hu_434d8d23be0dd7a3.webp 480w, https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/e116da6b-image2_hu_6a7789d308daf277.webp 1024w"
loading="lazy"
alt="Emerging AI Challenges – SRE Day – AIRe 2025"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>基础设施变革&lt;/strong>：随着 AI 工作负载的出现，传统的架构设计也在演进。像 Ingress、水平 Pod 自动扩缩（HPA）这些概念，正逐步被模型网格（Model Mesh）、LoRa 负载均衡、AI 网关等新技术所取代，尤其是在 GPU 资源密集的场景下尤为关键。Kubernetes 社区也在持续演进，推动包括“Serving 工作组”、动态资源分配（DRA）以及 Gateway API 等机制，以支持 AI 推理的特殊需求。&lt;/li>
&lt;li>&lt;strong>可观测性的盲区&lt;/strong>：传统监控工具擅长监测 CPU、内存和响应延迟，但面对 AI 模型中的置信度、漂移情况，甚至幻觉（即模型生成虚假内容的倾向）等问题，常常无能为力。我们亟需构建 AI 专用的可观测性体系。&lt;/li>
&lt;li>&lt;strong>新型故障模式&lt;/strong>：现在的问题已不再是“系统崩溃”，而是更隐蔽的“模型静默退化”。这种退化通常不会立刻显现故障，但模型的准确性、公平性会在不知不觉中下降，输出越来越偏离预期。将这种变化当作严重生产事故来看待，需要全新的监测机制和响应工具。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>模型衰减（Model Decay）&lt;/strong>——也称为 &lt;em>模型静默退化（Silent model degradation）&lt;/em>，不同于传统软件的崩溃报错，它表现为模型持续运行但输出质量悄然下降，可能变得不准确、带偏见或逻辑不一致。这种无声的“故障”，往往更难察觉也更难解决。&lt;/p>
&lt;blockquote>
&lt;p>我们为何将模型静默退化当作生产级事故来看待？&lt;/p>&lt;/blockquote>
&lt;p>因为它本质上就是&amp;quot;silent failure&amp;quot;。与崩溃的 Pod 或无法响应的 API 不同，模型静默退化是悄无声息的——系统仍能正常响应请求，但返回的答案可能越来越模糊、偏颇甚至完全错误。用户不会看到直观的 500 错误页面，而是遇到“幻觉式”输出、有害内容，或基于错误数据做出的决策。这不只是代码 bug，更是对用户信任的严重破坏。在 AI 世界里，“正确性”本身就等同于可用性（uptime）。当“可靠性”意味着输出质量时，模型退化——就是宕机。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/f6df7415-image1.webp"
width="452"
height="231"
srcset="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/f6df7415-image1_hu_1ba39b8bdf7f49c6.webp 480w, https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/f6df7415-image1_hu_e6dd5048e9ea9880.webp 1024w"
loading="lazy"
alt="Gateway API Inference Extension, OpenInference and AI Gateways"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;blockquote>
&lt;p>我们或许不仅要为 AI 扩展 Kubernetes —— 甚至终有一天，我们不得不为它另起炉灶（fork）。&lt;/p>&lt;/blockquote>
&lt;p>大语言模型（Large Language Models，LLMs）对流量路由、速率限制和安全防护提出了前所未有的要求，而这些功能并非 Kubernetes Ingress 机制的设计初衷。Kubernetes 架构自诞生以来就是围绕无状态 Web 应用打造的，推理场景从未被列为核心用例。尽管 Kubernetes 社区正积极适配，但关键差距依然存在。&lt;/p>
&lt;p>推理工作负载需要更紧密集成的架构支持：既包括对 GPU/TPU 等硬件加速器的原生支持，也涵盖资源编排与高并发流控能力。为此，Kubernetes 正在推进多个项目，如 WG-Serving（针对 AI/ML 推理优化）、设备管理（通过 DRA 动态资源分配集成加速器），以及 Gateway API 推理扩展，这些都在为 LLM 的规模化、可靠路由打下基础。与此同时，新一代 AI 网关也应运而生，提供专为推理定制的流量控制、可观测性和权限管理能力。&lt;/p>
&lt;p>但归根结底，我们仍是在一个“原本不是为 AI 而生”的编排平台上进行集成工作。Google 最近宣布，将 Kubernetes 的 etcd 存储引擎替换为基于 Spanner 的架构后，成功实现了单集群支持 65,000 节点的能力，这或许预示着未来我们不仅需要对 Kubernetes 进行功能扩展，甚至可能要彻底分叉（fork）一个属于 AI 推理的基础平台。&lt;/p>
&lt;blockquote>
&lt;p>那么，面对全新的 AI 现实，我们应如何实践 SRE 理念？&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>制定面向 AI 的服务目标与承诺（SLO/SLA）：&lt;/strong> 传统的可用性指标已不足以衡量 AI 系统的可靠性。我们需要将准确性、公平性、延迟和模型漂移纳入考量，制定清晰的服务等级协议（SLA）。例如 TTFT（生成首个 token 的响应时间）、TPOT（每个输出 token 的平均生成时间）、准确率或偏差范围等，都是需要量化承诺的核心指标。&lt;/li>
&lt;li>&lt;strong>打造 AI 专属的可观测体系：&lt;/strong> 在使用 OpenTelemetry、Grafana 等常规监控工具的基础上，结合 OpenInference 等 AI 专用追踪与评估平台，实现对模型响应分布、置信度评分和错误类型（如幻觉）的深入监测。&lt;/li>
&lt;li>&lt;strong>建立 AI 故障应急机制：&lt;/strong> AI 系统可能出现特有问题，如突发的预测漂移或偏差上升。因此，我们需要制定专门的应急预案（playbook），包括模型自动回滚至稳定版本，或启用 AI 熔断机制，以保障系统稳定性。&lt;/li>
&lt;li>&lt;strong>兼顾扩展性与安全性进行架构设计：&lt;/strong> 可通过模型副本负载均衡、缓存机制、GPU 调度优化（Kubernetes 仍在演进中）及 AI 网关等技术，管理推理流量并加强安全性。安全机制可涵盖基于 token 的限速、语义缓存与访问权限控制。同时，还需通过模型来源追踪、安全交付与运行时监控，确保模型始终可信、稳定。&lt;/li>
&lt;li>&lt;strong>构建持续评估机制：&lt;/strong> 模型评估不应只在部署前完成。它应覆盖部署前的离线测试、上线前的影子测试与 A/B 测试，以及部署后的实时监控，持续检测模型是否出现性能漂移或精度退化。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/1ef2c34a-image3.webp"
width="392"
height="213"
srcset="https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/1ef2c34a-image3_hu_48e0a4535afd79b3.webp 480w, https://martinliu.cn/blog/ai-reliability-engineering-welcome-to-the-third-age-of-sre/1ef2c34a-image3_hu_ba5ae5e2cedfb631.webp 1024w"
loading="lazy"
alt="Example Model Evaluation SLA in Production"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="441px"
>&lt;/p>
&lt;h2 id="ai-网关sre-在-ai-时代的核心工具">AI 网关：SRE 在 AI 时代的核心工具
&lt;/h2>&lt;p>在 SRE 发展的初期阶段，我们依靠负载均衡器、服务网格和 API 网关来管理流量、执行安全策略，并实现系统可观测性。而如今，AI 推理带来的工作负载同样需要这些能力——但复杂度更高，规模更大，且容不得半点延迟或错误。这就是 AI 网关登场的时刻。&lt;/p>
&lt;p>你可以把它理解为现代 SRE 面对 AI 系统的一站式解决方案：它能将请求精准路由到正确的模型、在多个副本间实现高效负载均衡、实施速率限制与安全策略，并集成深度可观测性机制。像 Gloo AI Gateway 这样的项目正是这一领域的先锋，专注解决企业在 AI 落地中遇到的关键难题，如模型成本控制、基于 token 的权限机制、以及对 LLM 响应的实时追踪分析——这些都是传统服务网格难以胜任的。&lt;/p>
&lt;p>这就是当代 SRE 的新定位：不仅要调节自动扩缩容机制，还要掌控 AI 系统的控制平面（control plane），成为智能系统运行的核心操盘手。&lt;/p>
&lt;p>&lt;em>AI 网关不仅是 SRE 新工具箱中的一员——它或许是最关键的那一个。&lt;/em>&lt;/p>
&lt;h2 id="sre-的第三个时代ai-可靠性工程">SRE 的第三个时代：AI 可靠性工程
&lt;/h2>&lt;p>SRE 的角色正在发生深刻转变。我们需要的是《97 条 SRE 必知法则》书中所强调的那种探索精神——对整个系统的深入理解，从芯片层的硬件架构到模型输出背后的微妙机制。我们要构建值得信赖的 AI 系统，并借助不断成熟的工具链与标准体系来实现这一目标。&lt;/p>
&lt;p>Björn Rabenstein 曾提到 SRE 正步入“第三个时代”，一个其原则将全面融入系统建设的阶段。确实如此，但推动这个新时代到来的，不再是传统系统的演进，而是 AI 的崛起。AI 可靠性工程（AI Reliability Engineering）不仅仅是传统 SRE 的延伸，它代表了一次根本性的范式转移：从关注“基础设施是否可靠”，走向“智能系统本身是否可信”。&lt;/p></description></item><item><title>2024 年 Gartner 可观测性平台魔力象限</title><link>https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/</link><pubDate>Thu, 15 Aug 2024 10:04:45 +0800</pubDate><guid>https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/</guid><description>&lt;img src="https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/pexels-pavel-danilyuk-9143804.webp" alt="Featured image of post 2024 年 Gartner 可观测性平台魔力象限" />&lt;p>可观测性平台通过分析、可视化、自动化以及 AI 技术，将遥测数据转化为可执行的洞察。虽然大多数平台都包括应用性能监控（APM）功能，但仅靠 APM 是不够的。I&amp;amp;O 领导者可以参考此研究，探索相关供应商及解决方案。&lt;/p>
&lt;h2 id="市场定义与描述">市场定义与描述
&lt;/h2>&lt;p>Gartner 将可观测性平台定义为：能够从日志、指标、事件和追踪等多种来源获取遥测数据（运营数据）的产品。它们旨在帮助企业了解应用、服务及基础设施的健康状况、性能表现，及行为趋势。可观测性平台可以通过人工操作或机器智能分析遥测数据，识别影响终端用户体验的系统行为变化，例如服务中断或性能下降。这些平台可以让问题在早期，甚至是预防阶段就得到解决。可观测性解决方案被广泛的应用于 IT 运营/运维、站点稳定性工程师/SRE、云与平台团队、应用开发人员，以及产品负责人。&lt;/p>
&lt;p>现代企业高度依赖关键的数字应用和服务，这些应用和服务不仅是创收工具，还直接影响客户体验和企业运营效率。中断、性能下降和不稳定现象都会直接冲击企业的营收、客户满意度及品牌形象。&lt;/p>
&lt;p>可观测性平台能帮助企业提升关键应用和服务的可用性、性能和恢复力。成功投资和部署可观测性平台能够避免收入损失，同时加快产品开发周期，改善品牌形象。&lt;/p>
&lt;p>以下是可观测性平台解决的一些典型场景或业务问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IT 运营&lt;/strong>：IT 运营团队负责确保生产环境中的应用和服务始终可用、迅速响应且性能卓越，尤其是在高峰期。可观测性平台可以在问题出现时及时发出告警，并帮助团队通过数据分析找到根本原因。&lt;/li>
&lt;li>&lt;strong>平台工程&lt;/strong>：平台工程师的工作类似于 IT 运营和软件开发。可观测性平台帮助他们确保生产环境始终达到服务质量目标 (SLO)，同时推动持续的数据驱动改进与平台优化。&lt;/li>
&lt;li>&lt;strong>软件开发&lt;/strong>：开发团队将可观测性平台集成到 CI/CD 流水线中，提供新代码部署的快速反馈，加快新功能发布，同时提高产品的恢复力。&lt;/li>
&lt;li>&lt;strong>业务分析&lt;/strong>：业务分析师利用可观测性平台分析企业的关键业务指标，例如零售商可能会评估放弃购物车的成本和客户的平均消费金额。&lt;/li>
&lt;/ul>
&lt;h3 id="必备功能">必备功能
&lt;/h3>&lt;p>可观测性平台至少应具备以下基本功能：&lt;/p>
&lt;ul>
&lt;li>获取、存储并分析运营遥测数据流，数据来源包括但不限于指标、事件、日志和追踪信息。&lt;/li>
&lt;li>识别并分析应用、服务或基础设施的行为变化，从而判断是否存在可用性中断、性能下降，或是否对终端用户体验产生了影响。&lt;/li>
&lt;li>通过提供拓扑依赖关系映射和业务服务之间的关联，为遥测数据增加上下文信息，进一步丰富数据内容。&lt;/li>
&lt;/ul>
&lt;h3 id="常见功能">常见功能
&lt;/h3>&lt;p>可观测性平台通常具备以下功能：&lt;/p>
&lt;ul>
&lt;li>监控通过浏览器、移动应用和 API 提供的应用与服务的用户体验。&lt;/li>
&lt;li>与其他运营管理、服务管理和软件开发技术集成，如 IT 服务管理、配置管理数据库、事件与事故响应管理、编排与自动化及 DevOps 工具。&lt;/li>
&lt;li>从公有云平台（如 Amazon CloudWatch、Microsoft Azure Monitor 和 Google Cloud Operations）收集遥测数据。&lt;/li>
&lt;li>支持多种遥测数据类型（如追踪、指标和日志）的交互式分析，帮助深入了解用户与应用行为。&lt;/li>
&lt;li>借助高级分析与机器学习，提供基于数据的洞察，超越手动查询或分析的能力。&lt;/li>
&lt;li>自动发现并映射相关的基础设施、网络和应用组件及服务。&lt;/li>
&lt;li>支持成本管理功能，能够度量和优化应用工作负载成本，或优化可观测性平台的利用率和支出。&lt;/li>
&lt;li>业务流程与活动监控，例如用户的登录到结账流程、转化率追踪漏斗分析、客户注册或贷款申请的流程。&lt;/li>
&lt;li>提供应用安全功能，能够识别受监控应用中的已知漏洞，并阻止对这些漏洞的攻击尝试。&lt;/li>
&lt;/ul>
&lt;h2 id="魔力象限">魔力象限
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/Figure-1.webp"
width="570"
height="592"
srcset="https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/Figure-1_hu_a16da44d601f6774.webp 480w, https://martinliu.cn/blog/2024-magic-quadrant-for-observability-platforms/Figure-1_hu_600daebd35b8729f.webp 1024w"
loading="lazy"
alt="图 1: Y24Q3 可观测性平台魔力象限"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>供应商优势与注意事项分析如下。&lt;/p>
&lt;h3 id="amazon-web-services">Amazon Web Services
&lt;/h3>&lt;p>Amazon Web Services (AWS) 在此次魔力象限中被归类为挑战者。AWS 的可观测性解决方案包括 Amazon CloudWatch、AWS X-Ray、Amazon Managed Service for Prometheus、Amazon Managed Grafana 和 AWS Distro for OpenTelemetry，支持端到端的 observability 使用场景。这些服务是 AWS Cloud Operations 的一部分，涵盖治理和财务管理。AWS 的业务遍布全球，其客户主要为大型企业，并且 AWS 定期发布和更新产品。&lt;/p>
&lt;h4 id="优势">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>应用信号&lt;/strong>：AWS 于 2023 年末推出了 CloudWatch Application Signals，这是第一个专注于应用程序监控的 CloudWatch 服务。通过此服务，运维人员可以通过设定服务质量目标 (SLO) 并使用服务视图来管理系统健康和性能，同时对出现的问题进行分类。&lt;/li>
&lt;li>&lt;strong>统一的可观测性平台&lt;/strong>：AWS 支持 OpenTelemetry、Prometheus 和 Selenium 等行业标准，提升了跨平台的互操作性。即使没有使用代理，AWS 之外的工作负载也可以通过 Managed Grafana 服务进行监控和可视化。&lt;/li>
&lt;li>&lt;strong>全球影响力&lt;/strong>：AWS 在全球范围内扩展迅速，已宣布新增四个地区和 18 个本地区域。Observability 服务全球可用，客户可以根据需求决定如何设置遥测数据在生命周期中的存储策略。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>竞争环境&lt;/strong>：尽管 AWS 可观测性工具近年来有所改进，如推出 CloudWatch Application Signals 和 Internet Monitor，但 AWS 也为本研究中的许多供应商提供托管服务，并通过 AWS Marketplace 与其合作。此种合作关系在时间上优先考虑客户选择，但与 AWS 平台的统一性存在矛盾。&lt;/li>
&lt;li>&lt;strong>成本管理&lt;/strong>：与 AWS 其他服务类似，observability 按需付费，基于多种消费模式，可能不完全适应所有运营模式或使用场景。&lt;/li>
&lt;li>&lt;strong>服务复杂性&lt;/strong>：AWS 提供多达 28 种监控与 observability 服务，尽管这展示了广泛的产品线，但也容易引起客户混淆。改进的文档有助于客户根据实际需求区分 CloudWatch 的功能。&lt;/li>
&lt;/ul>
&lt;h3 id="bmc">BMC
&lt;/h3>&lt;p>BMC 在本次魔力象限中被归类为利基参与者。其 BMC Helix Operations Management 平台提供了丰富的 ServiceOps 和 observability 功能，涵盖 BMC Helix Discovery 及其他组件。BMC 在 IT 服务管理领域中拥有重要地位，其 BMC Helix ITSM（前称 Remedy）产品以及主机解决方案有着广泛的应用。BMC 的业务覆盖全球主要市场。&lt;/p>
&lt;h4 id="优势-1">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>广泛的客户基础&lt;/strong>：作为传统的“四大” IT 运营技术供应商之一，BMC 在大型企业和政府机构中具有重要影响力。这种既有的影响力使 BMC 在向 observability 过渡时具备优势。&lt;/li>
&lt;li>&lt;strong>服务运营集成&lt;/strong>：BMC 的可观测性解决方案可以与第三方工具兼容，同时与其自身的 ITSM、发现工具和 CMDB 紧密集成，具有潜在的工具整合优势。&lt;/li>
&lt;li>&lt;strong>故障分析工具&lt;/strong>：该平台提供健康时间线和健康评分功能，帮助用户了解应用程序或服务的性能变化，还支持快速检查变化情况。它还具备“情况解释”功能，通过 BMC HelixGPT 等 AI 技术，解释问题可能的根本原因。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-1">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>产品组合复杂性&lt;/strong>：BMC 的解决方案依赖其众多产品组件，尽管可以单独授权使用，但某些功能仍需依赖自定义仪表板。例如，SLO 功能并非开箱即用。&lt;/li>
&lt;li>&lt;strong>定价不透明&lt;/strong>：BMC 未公开其定价，除非是针对政府客户或云市场的定价。这与 observability 行业的趋势不符，客户通常希望在早期获取价格信息以进行成本评估。&lt;/li>
&lt;li>&lt;strong>现有 BMC 环境&lt;/strong>：BMC 的大部分客户仍在使用其旧有技术，如 BMC PATROL 和 TrueSight。BMC 已对其产品进行现代化改造，如推出云原生的 Helix 平台，并收购了 Netreo。因此，客户需要明确的升级路径指导，以顺利过渡到新平台。&lt;/li>
&lt;/ul>
&lt;h3 id="chronosphere">Chronosphere
&lt;/h3>&lt;p>Chronosphere 在此次魔力象限中被评为领导者。其可观测性平台解决方案包括 Chronosphere Observability Platform 和 Chronosphere Telemetry Pipeline，业务主要集中在美国和 EMEA 地区，客户大多来自北美。&lt;/p>
&lt;p>Chronosphere 的创始人在 Uber 工作期间开发了 M3DB 时间序列数据库，如今公司仍在支持这一开源项目。近期，Chronosphere 收购了遥测管道供应商 Calyptia（Fluent Bit 的创建者），并与 CrowdStrike 建立了合作，作为其日志获取和分析产品的基础。&lt;/p>
&lt;h4 id="优势-2">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>遥测数据管理与治理&lt;/strong>：Chronosphere 提供一个控制平面，客户可以使用该平台分析遥测数据的使用情况，并在数据收集时制定策略与规则。这使得成本优化和数据治理变得更加高效，这是其他供应商难以提供的功能。&lt;/li>
&lt;li>&lt;strong>依托开源技术&lt;/strong>：Chronosphere 支持 Prometheus 风格的指标采集以及 OpenTelemetry，用于收集指标、日志和追踪数据。这为那些不愿继续自行管理 Prometheus 或 Jaeger 环境的组织提供了迁移便利。收购 Calyptia 也带来了 Fluent Bit 这一开源工具，进一步丰富了 Chronosphere 的遥测管道能力。&lt;/li>
&lt;li>&lt;strong>单租户架构&lt;/strong>：Chronosphere 为每位客户提供独立的租户环境和专属存储空间。这有效避免了不同客户之间的资源争用，同时提高了数据安全性。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-2">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>地理覆盖范围&lt;/strong>：尽管 Chronosphere 的服务可以在全球使用，但其平台目前仅托管在美国的公有云区域。这可能会引发某些客户对数据主权的担忧，或在某些地区导致延迟问题。公司计划于 2024 年在 EMEA 地区部署托管服务。&lt;/li>
&lt;li>&lt;strong>数字体验监控功能缺乏&lt;/strong>：Chronosphere 目前不提供专门的数字体验监控功能，如合成监控或真实用户监控（RUM）。虽然客户可以将数字体验监控的遥测数据上传至 Chronosphere 进行分析，但这些数据的生成和传输需要客户自行解决。&lt;/li>
&lt;li>&lt;strong>缺少自带代理&lt;/strong>：Chronosphere 不包含自带的埋点代理，因此被监控的系统需要以与 Prometheus 或 OpenTelemetry 兼容的方式进行埋点，或使用 Fluent Bit 支持的格式。Chronosphere 也支持从其他供应商的代理获取遥测数据，客户可选择兼容的代理进行使用。&lt;/li>
&lt;/ul>
&lt;h3 id="datadog">Datadog
&lt;/h3>&lt;p>Datadog 在此次魔力象限中被评为领导者。其 SaaS 平台不仅提供可观测性解决方案，还覆盖云安全领域。Datadog 的业务主要集中在美国和 EMEA 地区，同时在亚太和拉丁美洲市场逐步扩展，服务的客户从初创企业到大型企业。近期，Datadog 对其平台进行了多项改进，包括升级仪表板、笔记本和 Watchdog AI 功能，推出了 Flex Logs、移动应用测试、数据流监控以及动态埋点功能。此外，还推出了事件管理功能，将 Datadog 和其他 可观测性工具中的事件整合到统一视图中进行管理。&lt;/p>
&lt;h4 id="优势-3">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>战略愿景与销售执行力&lt;/strong>：Datadog 迅速构建了多项新功能，涵盖 APM、日志管理、数字体验监控（DEM）、安全和软件交付等领域，赢得了许多寻求高端解决方案的企业的青睐。其产品驱动增长（PLG）模式帮助企业在大中小规模的组织中扩大客户基础并提升客户参与度。&lt;/li>
&lt;li>&lt;strong>可视化能力&lt;/strong>：Datadog 提供了强大且用户友好的可视化功能，使用户能够在一个界面中查看所有遥测数据，并支持通过小部件轻松定制仪表板。&lt;/li>
&lt;li>&lt;strong>产品发展路线&lt;/strong>：Datadog 具备强大的产品发展规划，专注于提升 observability、DevSecOps、自动化修复、软件交付以及遥测数据的治理。其策略是打造一个将所有功能无缝整合在一起的平台。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-3">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>定价问题&lt;/strong>：虽然 Datadog 在官网上提供了详细的定价信息，但一些客户反映，随着使用量的增长，成本可能迅速上升。为了应对这一问题，Datadog 提供了可配置的遥测数据获取控制，帮助客户在预算范围内管理成本。&lt;/li>
&lt;li>&lt;strong>复杂的业务模式&lt;/strong>：随着产品线的扩展，Datadog 目前在其官网上提供 20 个独立的产品模块，每个模块都有独立的定价结构，这可能让客户在理解和谈判价格时感到困惑。为了简化流程，Datadog 已开始推出捆绑产品选项。&lt;/li>
&lt;li>&lt;strong>代理管理功能缺乏&lt;/strong>：目前，Datadog 缺乏针对代理群组的管理和自动化部署功能，这给大规模部署带来了一定的复杂性。该公司表示，相关功能正在开发中，并已进入测试阶段。&lt;/li>
&lt;/ul>
&lt;h3 id="dynatrace">Dynatrace
&lt;/h3>&lt;p>Dynatrace 在此次魔力象限中被评为领导者。其 observability 和安全平台包含多个模块，包括基础设施与应用可观测性、安全分析与防护、数字体验管理、自动化功能以及业务分析。Dynatrace 的客户遍布全球，尤其集中在拉丁美洲、亚太地区等各大市场，主要为大型企业和科技驱动型公司。Dynatrace 最近收购了开发者工具供应商 Rookout 和安全厂商 Runecast，进一步扩展其产品线。&lt;/p>
&lt;h4 id="优势-4">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>广泛的产品组合&lt;/strong>：Dynatrace 提供全面的 observability 和安全解决方案，尤其受到大型企业的青睐。其覆盖范围包括现代架构（如 Kubernetes、容器、云函数）的可观测性，及主机和 SAP 等传统企业解决方案的监控。&lt;/li>
&lt;li>&lt;strong>AI 技术创新&lt;/strong>：Dynatrace 对其 Davis AI 引擎进行了重大升级，全面采用 AI 技术进行因果分析和预测建模，并且推出了基于生成式 AI 的智能助手，显著提升了平台的智能化水平。&lt;/li>
&lt;li>&lt;strong>平台的灵活性与扩展性&lt;/strong>：Dynatrace 的 AppEngine 和 AutomationEngine 使平台具备更强的扩展能力，用户和第三方开发者可以针对特定行业或业务需求开发定制应用和自动化流程，超越了简单的健康监控和性能分析。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-4">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>采购的复杂性&lt;/strong>：Dynatrace 于 2023 年引入了新的订阅模式 Dynatrace Platform Subscription（DPS），要求客户承诺年度最低消费额度并使用递减率定价机制。虽然很多客户接受了该模式，并能够使用所有的 Dynatrace 产品，但一些采购部门对最低承诺和新组件的定价模式保持谨慎。&lt;/li>
&lt;li>&lt;strong>日志管理应用的进展缓慢&lt;/strong>：尽管 Dynatrace 在 2023 年推出了新机制，能够高效处理大量日志数据，客户对此技术表示出浓厚兴趣，但目前并未出现广泛采用 Dynatrace 进行大规模日志管理的趋势。&lt;/li>
&lt;li>&lt;strong>对中小企业的适应性&lt;/strong>：Dynatrace 主要为大型企业设计，虽然通过公有云市场可以降低部分门槛，但中小企业可能因为成本原因，选择将其用于监控最核心的业务系统。&lt;/li>
&lt;/ul>
&lt;h3 id="elastic">Elastic
&lt;/h3>&lt;p>Elastic 在此次魔力象限中被评为领导者。Elastic Observability 基于广泛使用的 Elastic Search AI 平台（原 Elasticsearch）构建，同时支撑其搜索和安全产品。Elastic Observability 可以通过 SaaS 提供，也可自托管使用。公司总部位于北美，客户主要分布在美洲和 EMEA 地区，并在亚太地区实现了显著增长。Elastic 的未来发展规划包括通过新查询语言和 AI 助手提升分析能力和站点稳定性工程（SRE）效率。&lt;/p>
&lt;h4 id="优势-5">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>深度 AI 集成&lt;/strong>：Elastic 在其平台中深度集成了 AI，提供 30 多种机器学习模型、定制模型集成，并配备了基于检索增强生成（RAG）的 AI 助手，增强了传统数据分析能力。&lt;/li>
&lt;li>&lt;strong>开放性与灵活性&lt;/strong>：Elastic Observability 源自开源的 Elasticsearch 数据平台，能够在大规模下处理多样化的高基数数据。其开放架构为平台提供了极高的灵活性和可扩展性。&lt;/li>
&lt;li>&lt;strong>多样化的部署选择&lt;/strong>：Elastic Observability 支持全球多个区域的部署，涵盖所有主要云服务提供商，并提供自托管选项。这使得它能够满足不同客户的数据主权需求，并符合区域性法规要求，例如美国政府的 FedRAMP 认证。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-5">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>市场认知度低&lt;/strong>：尽管 Elastic 的搜索和安全产品知名度较高，但其可观测性产品的市场认知度和应用率仍有待提升。公司正在积极推动其可观测性产品的市场销售和推广。&lt;/li>
&lt;li>&lt;strong>学习曲线较陡峭&lt;/strong>：作为开源软件，Elastic 可能需要更多的学习和培训时间，尤其是对于计划自托管的组织，需确保有足够的技术能力支持。&lt;/li>
&lt;li>&lt;strong>定价模型复杂&lt;/strong>：Elastic 采用基于计算资源的定价模型，与其他厂商的定价模式不同。尽管 Elastic 提供了定价计算器，但在采购、成本评估和预算预测过程中，可能较难进行直观比较。&lt;/li>
&lt;/ul>
&lt;h3 id="grafana-labs">Grafana Labs
&lt;/h3>&lt;p>Grafana Labs 也是本次魔力象限中的领导者。公司创建于开源项目 Grafana 之上，并推出了诸如 Loki、Tempo、Mimir 等其他开源项目。Grafana Labs 的可观测性平台包括 Grafana Cloud 可视化、指标、日志、配置文件以及机器学习功能，客户遍布全球，主要集中在美洲和 EMEA 地区。&lt;/p>
&lt;h4 id="优势-6">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>全球托管灵活性&lt;/strong>：Grafana Cloud 目前在全球 19 个 AWS、Azure 和 GCP 区域托管，使客户能够根据延迟需求和数据主权选择合适的托管位置。&lt;/li>
&lt;li>&lt;strong>持续功能更新&lt;/strong>：在过去的 12 个月里，Grafana Labs 显著增强了 Grafana Cloud 的功能，特别是在应用程序监控、SLO 管理和自适应指标方面，这些功能可以帮助企业更有效地管理成本。&lt;/li>
&lt;li>&lt;strong>灵活的数据集成&lt;/strong>：Grafana 平台能够连接不同的遥测收集系统，并实现跨系统的数据可视化和告警，避免了数据迁移或存储在 Grafana Cloud 中的需求，极大增强了其组合能力。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-6">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>学习曲线较高&lt;/strong>：随着功能的不断扩展，掌握 Grafana 平台变得更加复杂，配置可能需要手动编辑 YAML 或 JSON 文件，这对初学者来说具有挑战性。&lt;/li>
&lt;li>&lt;strong>成本预测困难&lt;/strong>：新用户可能会发现难以预测在 Grafana Cloud 上的指标支出，尤其是活动系列和每分钟数据点等度量标准并不容易获得。使用免费的 Grafana Cloud 版本可能有助于缓解这一问题。&lt;/li>
&lt;li>&lt;strong>合作竞争关系的复杂性&lt;/strong>：Grafana Labs 与其他 observability 供应商之间的合作关系可能会变得复杂，尤其是在其自身业务快速扩展的情况下。尽管与 AWS、Google 和 Microsoft 的合作有助于缓解这一问题，但仍需保持关注。&lt;/li>
&lt;/ul>
&lt;h3 id="honeycomb">Honeycomb
&lt;/h3>&lt;p>Honeycomb 是本次魔力象限中的远见者。其 observability 服务基于优化的数据存储和查询引擎，专注于探测应用和基础设施中的模式和异常。Honeycomb 作为可观测性平台，支持 APM 使用场景，并以 SaaS 形式提供服务。其客户遍布全球，主要集中在北美和 EMEA 地区。&lt;br>
最近的更新包括推出了 Kubernetes 监控功能和前端可观测性功能（现阶段为早期访问版本）。&lt;/p>
&lt;h4 id="优势-7">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Kubernetes 专用工具&lt;/strong>：2023 年，Honeycomb 推出了 Kubernetes 监控工具，使 SRE 能够更快速地诊断容器化环境中的问题。&lt;/li>
&lt;li>&lt;strong>高度参与的客户社区&lt;/strong>：Honeycomb 与其用户群保持紧密联系，定期举办研讨会，活跃的 Slack 社区以及社交媒体互动，让客户能够直接提供反馈。&lt;/li>
&lt;li>&lt;strong>全球化扩展&lt;/strong>：2024 年初，Honeycomb 在欧洲部署了基于 SaaS 的新实例，使客户能够根据数据主权要求选择将 observability 数据存储在美国、欧盟，或同时存储在两者之间。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-7">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>企业市场的影响力有限&lt;/strong>：虽然 Honeycomb 在云原生和技术驱动型企业中很受欢迎，但在更广泛的企业市场中其影响力相对较小，Gartner 客户较少将其作为可观测性平台的候选供应商。&lt;/li>
&lt;li>&lt;strong>技术导向的聚焦&lt;/strong>：Honeycomb 的宣传主要面向技术专家，特别是 SRE 和平台团队，可能忽略了提供商业和客户行为洞察的潜力，而这些内容往往是 I&amp;amp;O 预算持有者更关心的。&lt;/li>
&lt;li>&lt;strong>定价难以预测&lt;/strong>：Honeycomb 的定价基于摄取到平台中的事件量，客户难以预测事件数量以及未来 12 个月的增长。&lt;/li>
&lt;/ul>
&lt;h3 id="ibm">IBM
&lt;/h3>&lt;p>IBM 是本次魔力象限中的远见者。IBM 的 Instana可观测性平台既可以作为 SaaS 提供，也可以通过自托管方式部署，使用单代理架构。其客户主要为中大型企业，集中在北美和西欧。IBM 的监控产品覆盖从主机到现代云架构。IBM 还计划收购基础设施自动化公司 HashiCorp，该公司的 Terraform 产品与许多可观测性平台都有集成。&lt;/p>
&lt;h4 id="优势-8">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>精确的遥测数据&lt;/strong>：Instana 以每秒级别的精度收集指标，并在三秒内生成通知，这为提升可用性和确保服务质量目标 (SLO) 达成提供了支持。&lt;/li>
&lt;li>&lt;strong>简单的定价模式&lt;/strong>：IBM Instana 采用按主机计费的简单定价模式，在市场中具备竞争力。&lt;/li>
&lt;li>&lt;strong>AI 集成优势&lt;/strong>：Instana 提供自动化 observability，利用 AI 生成洞察并辅助决策。IBM 最近推出了 watsonx 和 Concert，这些生成式 AI 技术将进一步扩展 Instana 的智能化功能。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-8">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>有限的安全功能&lt;/strong>：Instana 的安全功能较为有限，更多依赖 IBM 其他产品提供这方面的支持。虽然 Gartner 认为安全功能是可选的，但客户需要根据需求决定是否需要集成安全解决方案。&lt;/li>
&lt;li>&lt;strong>市场认知度不足&lt;/strong>：IBM Instana 在市场中的知名度较低，很多现有的 IBM 客户甚至不知道这一产品的存在，即使他们正在寻找可观测性解决方案。虽然 IBM 为使用其传统 IT 工具的客户提供了升级到 Instana 的路径，但很多客户对此并不知情。&lt;/li>
&lt;li>&lt;strong>日志摄取的限制&lt;/strong>：目前 Instana 的日志摄取仅限于应用日志和容器化环境。扩展到更广泛的环境是其 2024 年的发展计划之一。&lt;/li>
&lt;/ul>
&lt;h3 id="logicmonitor">LogicMonitor
&lt;/h3>&lt;p>LogicMonitor 是本次魔力象限中的远见者。其 LM Envision 平台从混合基础设施监控发展为可观测性解决方案。LogicMonitor 提供无代理的 SaaS 平台，涵盖基础设施、网络、SD-WAN、云和应用监控，并具备 AI 功能。客户主要来自美洲和 EMEA，且在亚太地区业务不断扩展。过去一年内，LogicMonitor 发布了多项新工具，包括 Edwin AI（用于事件摄取与关联）、生成式 AI 聊天机器人 LM Copilot 以及用于云成本管理的 LM 成本优化。&lt;/p>
&lt;h4 id="优势-9">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>高扩展性&lt;/strong>：LogicMonitor 使用无代理收集器来监控资源，这些收集器可根据服务器容量和数据需求进行自动负载均衡，确保高数据处理能力，并支持故障切换。其平台提供 99.9% 的可用性 SLA，确保监控始终可用。&lt;/li>
&lt;li>&lt;strong>容器支持广泛&lt;/strong>：LogicMonitor 对 Kubernetes 容器环境提供了强大的支持，无需修改容器代码即可进行监控。&lt;/li>
&lt;li>&lt;strong>简单定价&lt;/strong>：LogicMonitor 的定价模式简洁明了，适用于各种规模的企业，尤其适合托管服务提供商（MSP）模式下的企业。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-9">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>observability 功能有限&lt;/strong>：尽管 LogicMonitor 近年来有所投资，但它仍然主要专注于基础设施和网络监控，缺乏数字体验监控和威胁检测等功能，与同行相比存在差距。&lt;/li>
&lt;li>&lt;strong>仪表板和用户界面&lt;/strong>：尽管提供了多种监控模板，但 LogicMonitor 的用户界面在市场上相对落后，操作时需要多次点击才能深入分析数据和获取上下文信息。公司正在发布新界面，预计将有所改善。&lt;/li>
&lt;li>&lt;strong>市场影响力&lt;/strong>：尽管投入了大量市场宣传，但 LogicMonitor 在市场上的认知度仍然有限，特别是在 observability 领域的扩展上，客户认知度仍需提升。&lt;/li>
&lt;/ul>
&lt;h3 id="logzio">Logz.io
&lt;/h3>&lt;p>Logz.io 作为远见者，基于开源技术提供其 Open 360可观测性平台，涵盖应用、Kubernetes 和基础设施监控，支持日志管理和云安全信息及事件管理（SIEM）。Logz.io 的客户多为开源技术友好的中小型企业，主要分布在美洲和 EMEA 地区。其未来规划包括进一步利用生成式 AI 增强平台能力，并引入业务导向功能，如 SLO 管理。&lt;/p>
&lt;h4 id="优势-10">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>成本优化&lt;/strong>：Logz.io 专注于降低 observability 成本，其数据优化中心提供强大的遥测成本管理功能，如数据过滤、分层存储、追踪采样等。&lt;/li>
&lt;li>&lt;strong>从开源到企业的无缝衔接&lt;/strong>：对于已经使用开源监控工具的企业，Logz.io 提供了快速实现企业级 observability 的路径。&lt;/li>
&lt;li>&lt;strong>全球化业务&lt;/strong>：Logz.io 的 Open 360 平台在全球多个 SaaS 实例上运行，支持多语言并符合区域性数据安全法规，客户遍布全球。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-10">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>缺乏前端监控&lt;/strong>：Logz.io 主要专注于通过开源技术收集后台遥测数据，但在前端用户监控和会话回放等功能方面支持不足。&lt;/li>
&lt;li>&lt;strong>技术导向过强&lt;/strong>：Logz.io 平台过于关注技术细节，缺少业务监控和漏斗分析等更贴合商业需求的功能。&lt;/li>
&lt;li>&lt;strong>市场知名度不足&lt;/strong>：尽管 Logz.io 的客户基础在增长，但主要集中在中小型企业，与其他供应商相比，其市场可见度较低，较少出现在客户的候选名单中。&lt;/li>
&lt;/ul>
&lt;h3 id="microsoft">Microsoft
&lt;/h3>&lt;p>Microsoft 在此次魔力象限中被评为挑战者。其 Azure Monitor 是一款原生的 Azure 可观测性平台，专注于中大型企业。公司业务遍布全球。除了引入生成式 AI 功能外，Microsoft 的未来计划还包括一种低成本的日志存储机制和基于服务组的应用建模。&lt;/p>
&lt;h4 id="优势-11">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>AI 集成&lt;/strong>：Microsoft 与 OpenAI 的合作带来了生成式 AI 能力，如通过 Copilot 接口集成到 Azure Monitor 中。Kusto Query Language (KQL) 也支持机器学习，并可以创建处理日志数据的机器学习流水线。&lt;/li>
&lt;li>&lt;strong>Prometheus 支持&lt;/strong>：Azure Monitor 引入了 Prometheus 托管服务，支持从 Azure Kubernetes Service (AKS) 等服务摄取数据，利用 PromQL 进行分析，并通过 Grafana 实现可视化和告警功能。&lt;/li>
&lt;li>&lt;strong>安全监控集成&lt;/strong>：Microsoft 的 Sentinel 和 Defender 产品与 Azure Monitor 无缝集成，提供跨运营和安全功能的统一分析和事件响应能力。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-11">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>SLO 管理缺乏&lt;/strong>：Azure Monitor 尚未提供直接的 SLO 管理功能，相关功能预计在 2024 年推出。当前的 SLO 管理流程相对繁琐。&lt;/li>
&lt;li>&lt;strong>OpenTelemetry 支持延迟&lt;/strong>：尽管 Azure Monitor 可以摄取 OpenTelemetry 数据，但尚不支持直接通过收集器接口处理 OpenTelemetry Protocol (OTLP) 数据。相关功能在 2024 年进入公测。&lt;/li>
&lt;li>&lt;strong>Prometheus 兼容性问题&lt;/strong>：Azure Monitor 对 Prometheus 的支持目前与开源版本存在一些不兼容问题。&lt;/li>
&lt;/ul>
&lt;h3 id="new-relic">New Relic
&lt;/h3>&lt;p>New Relic 在此次魔力象限中被评为领导者。其可观测性平台以 SaaS 形式提供，涵盖 APM、AI 监控、数字体验、基础设施监控、日志管理和安全功能。客户主要为中大型企业，遍布美洲、EMEA 和亚太地区。最近，New Relic 在日志存储优化、AI 监控和应用安全方面进行了增强，并在 2023 年 11 月被 Francisco Partners 和 TPG 收购。&lt;/p>
&lt;h4 id="优势-12">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>灵活的定价&lt;/strong>：New Relic 提供基于摄取量和用户数量的定价模式，以及新的基于计算量的定价，客户可以根据使用量灵活调整成本。&lt;/li>
&lt;li>&lt;strong>AI 监控&lt;/strong>：New Relic 的 AI 监控功能使工程师能够监控 AI 模型的性能，并比较大语言模型（LLM）的成本和效率。&lt;/li>
&lt;li>&lt;strong>统一的数据平台&lt;/strong>：New Relic 的遥测数据平台 (TDP) 专为高效管理遥测数据而优化，支持高基数数据，并原生支持 OpenTelemetry。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-12">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>实施复杂性&lt;/strong>：一些客户反映，初始设置和配置过程较为复杂，特别是对于不熟悉该平台的用户。&lt;/li>
&lt;li>&lt;strong>地理覆盖有限&lt;/strong>：New Relic 的服务交付平台主要位于美国和 EMEA，特别是依赖 AWS 托管的 SaaS 平台。亚太地区的企业可能需要确保其服务符合区域性要求。&lt;/li>
&lt;li>&lt;strong>收购影响&lt;/strong>：New Relic 被收购后，客户对其产品路线图和稳定性有所关注。公司表示已加大平台创新投资，但未来发展仍有待观察。&lt;/li>
&lt;/ul>
&lt;h3 id="oracle">Oracle
&lt;/h3>&lt;p>Oracle 在本次魔力象限中被评为利基参与者。其 Oracle Cloud Observability and Management (O&amp;amp;M) 平台支持混合和多云环境中的应用、日志、基础设施和数据库监控，尤其侧重于 Oracle Cloud Infrastructure (OCI) 和企业应用。Oracle 客户遍布全球，涵盖各行业的中大型企业，包括政府机构。未来，Oracle 计划进一步提升 O&amp;amp;M 为 SRE 团队的体验，集成 ITSM，并专注于日志管理和分析。&lt;/p>
&lt;h4 id="优势-13">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>全球覆盖&lt;/strong>：Oracle 拥有全球化的业务，支持多种语言，并符合区域性法规要求。通过欧盟主权云、FedRAMP 认证以及 OCI 专用区域，Oracle 提供了符合数据主权要求的解决方案。&lt;/li>
&lt;li>&lt;strong>全面的 Oracle 集成&lt;/strong>：Oracle 的 O&amp;amp;M 不仅适用于 OCI，还支持 E-Business Suite 和 PeopleSoft 等应用，客户可以使用定制仪表板和自动化监控，提升用户体验。&lt;/li>
&lt;li>&lt;strong>多云支持&lt;/strong>：Oracle 一直致力于提供支持多云环境的 O&amp;amp;M 解决方案，不局限于自家生态，适应多云工作负载的需求。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-13">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>市场认知度较低&lt;/strong>：虽然 Oracle 将 O&amp;amp;M 定位为多云解决方案，但该产品在现有客户群之外的认知度较低，较少出现在 Gartner 的客户咨询中。&lt;/li>
&lt;li>&lt;strong>生成式 AI 发展较慢&lt;/strong>：虽然大多数供应商在 2023 年都引入了生成式 AI，Oracle 在这方面的进展较为缓慢，目前相关功能仍在开发中。&lt;/li>
&lt;li>&lt;strong>缺乏业务导向功能&lt;/strong>：尽管支持 Apdex 评分，O&amp;amp;M 尚未引入全面的 SLO 管理或错误预算管理功能，难以完全满足 SRE 团队的需求。&lt;/li>
&lt;/ul>
&lt;h3 id="servicenow">ServiceNow
&lt;/h3>&lt;p>ServiceNow 是本次魔力象限中的远见者。其可观测性平台包括 Cloud Observability（原 Lightstep）以及 IT 运营管理 (ITOM) 和 IT 服务管理 (ITSM) 功能。ServiceNow 客户遍布全球，涵盖各行业，其产品路线图侧重于全面引入生成式 AI 功能。&lt;/p>
&lt;h4 id="优势-14">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>支持 OpenTelemetry&lt;/strong>：ServiceNow Cloud Observability 从设计上就支持 OpenTelemetry 数据的摄取和分析，包括基于 Open Agent 管理协议 (OpAmp) 的收集器管理功能。&lt;/li>
&lt;li>&lt;strong>强劲的市场影响力&lt;/strong>：ServiceNow 在企业市场中拥有稳固的基础，特别是在大型企业中，其 ITSM 产品的广泛应用使其能够推动 Cloud Observability 的使用。&lt;/li>
&lt;li>&lt;strong>全面的产品组合&lt;/strong>：Cloud Observability 正逐步与 ServiceNow 的 ITOM 和 ITSM 产品整合，成为 ServiceNow 客户寻求可观测性平台的一个自然选择。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-14">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>认知度不足&lt;/strong>：Gartner 的客户反馈表明，许多企业对 ServiceNow 的 Cloud可观测性解决方案并不熟悉，市场推广力度不及专注于 observability 的供应商。&lt;/li>
&lt;li>&lt;strong>产品组合复杂性&lt;/strong>：Cloud Observability 与 ServiceNow 的其他产品组合并行但独立存在，功能如 SLO 管理属于 ITOM，需要额外购买，增加了复杂性。&lt;/li>
&lt;li>&lt;strong>路线图缺乏创新&lt;/strong>：与市场领导者相比，ServiceNow 在 Cloud Observability 上的创新较少，未来发展方向较为保守。&lt;/li>
&lt;/ul>
&lt;h3 id="splunk">Splunk
&lt;/h3>&lt;p>Splunk 在本次魔力象限中被评为领导者。其可观测性平台包括 Splunk Platform、Splunk IT Service Intelligence 和 Splunk Observability Cloud。Splunk 的客户主要为全球的大型企业。2024 年 3 月 18 日，Cisco 完成了对 Splunk 的收购，并将 AppDynamics 整合到 Splunk 的可观测性产品中。本报告中的参考信息收集于收购完成之前，因此仍然使用 Splunk 的名称。&lt;/p>
&lt;h4 id="优势-15">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>支持 OpenTelemetry&lt;/strong>：Splunk 强大的 OpenTelemetry 支持使其在可观测性平台中表现出色，提供对 Linux、Windows 和 Kubernetes 的全方位支持。&lt;/li>
&lt;li>&lt;strong>SLO 管理功能&lt;/strong>：Splunk Observability 提供了便捷的工作流，帮助客户通过 UI 或自动化工具如 Terraform 管理 SLO，还支持 SLO 消耗率分析告警。&lt;/li>
&lt;li>&lt;strong>一体化解决方案&lt;/strong>：Splunk 通过紧密集成的可观测性平台，能够无缝地支持 IT 运营、工程和网络安全领域的多种使用场景。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-15">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>收购带来的不确定性&lt;/strong>：Cisco 收购 Splunk 后，产品线整合尚未完成，未来销售流程可能存在不确定性。&lt;/li>
&lt;li>&lt;strong>地理覆盖差异&lt;/strong>：Splunk Cloud 的覆盖范围大于 Splunk Observability Cloud，前者在北美、EMEA 和亚太地区有更广泛的分布。对于有严格数据主权要求的客户，需详细检查其具体位置。&lt;/li>
&lt;li>&lt;strong>定价复杂&lt;/strong>：Splunk 的定价模式较为复杂，可能会给客户带来预测成本的难题，特别是在数据摄取和使用量变化较大的情况下。&lt;/li>
&lt;/ul>
&lt;h3 id="sumo-logic">Sumo Logic
&lt;/h3>&lt;p>Sumo Logic 在此次魔力象限中被评为利基参与者。其可观测性平台专注于提供可用性、性能和安全分析，主要服务于全球中小型企业。Sumo Logic 最近推出了基于 AI 的异常检测和优化功能，客户主要分布在美洲和亚太地区。&lt;/p>
&lt;h4 id="优势-16">优势
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>灵活的定价模式&lt;/strong>：Sumo Logic 的定价基于分析而非数据摄取，这意味着客户只需为数据分析付费，而数据摄取成本为 $0。&lt;/li>
&lt;li>&lt;strong>支持 OpenTelemetry&lt;/strong>：Sumo Logic 为所有客户提供 OpenTelemetry 支持，简化了遥测数据的收集和分析。&lt;/li>
&lt;li>&lt;strong>全球覆盖&lt;/strong>：Sumo Logic 平台在全球多个 AWS 区域可用，支持数据驻留和主权要求。&lt;/li>
&lt;/ul>
&lt;h4 id="注意事项-16">注意事项
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>日志为中心&lt;/strong>：Sumo Logic 主要定位为日志分析工具，尽管支持追踪和指标，但对于需要深入应用监控的企业可能不够全面。&lt;/li>
&lt;li>&lt;strong>市场增速缓慢&lt;/strong>：尽管 Sumo Logic 总体收入有所增长，但可观测性平台的收入增长自 2022 年以来几乎停滞不前。&lt;/li>
&lt;li>&lt;strong>缺乏原生合成监控&lt;/strong>：Sumo Logic 没有提供原生的合成监控功能，客户需要使用其他工具来实现此功能，尽管它支持与 Catchpoint 的开箱即用集成。&lt;/li>
&lt;/ul>
&lt;h3 id="添加和删除的供应商">添加和删除的供应商
&lt;/h3>&lt;p>随着市场变化，我们会不断审查和调整魔力象限的纳入标准。因此，魔力象限中的供应商组合可能会随时间发生变化。一年中出现的供应商在次年消失，并不意味着我们对该供应商的看法发生了改变。这可能反映了市场的变化，进而调整了评估标准，或是供应商自身的重点发生了转移。&lt;/p>
&lt;h4 id="新增">新增
&lt;/h4>&lt;p>以下供应商符合纳入标准，并被添加至魔力象限：&lt;/p>
&lt;ul>
&lt;li>BMC&lt;/li>
&lt;li>Chronosphere&lt;/li>
&lt;li>LogicMonitor&lt;/li>
&lt;/ul>
&lt;h4 id="删除">删除
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Broadcom&lt;/strong> 被删除是因为未能达到市场的客户兴趣指标 (CII) 门槛。&lt;/li>
&lt;li>&lt;strong>Cisco&lt;/strong> 被删除是因为 Cisco Observability Platform 产品已停用。&lt;/li>
&lt;li>&lt;strong>ManageEngine&lt;/strong> 被删除是因为未能达到 CII 门槛。&lt;/li>
&lt;li>&lt;strong>Riverbed&lt;/strong> 被删除是因为未能达到 CII 门槛。&lt;/li>
&lt;li>&lt;strong>SolarWinds&lt;/strong> 被删除是因为未能满足本次研究的纳入标准。&lt;/li>
&lt;/ul>
&lt;h2 id="纳入和排除标准">纳入和排除标准
&lt;/h2>&lt;p>魔力象限的研究通过识别并分析市场中最具相关性的供应商及其产品，帮助客户了解市场状况。为了支持市场识别，通常我们会选择不超过 20 个最具代表性的供应商进行研究。要符合纳入标准，供应商必须满足以下要求：&lt;/p>
&lt;h3 id="市场参与标准">市场参与标准
&lt;/h3>&lt;ul>
&lt;li>截至 2024 年 3 月 14 日，产品或服务必须普遍可用，能够通过常规销售渠道提供给所有客户。&lt;/li>
&lt;li>供应商必须直接销售可观测性平台，并提供至少一线的客户支持服务，包括产品文档、安装指南和参考示例。&lt;/li>
&lt;li>供应商应展示清晰的产品路线图和市场策略。&lt;/li>
&lt;/ul>
&lt;h3 id="性能门槛">性能门槛
&lt;/h3>&lt;p>-可观测性平台必须在两个或多个地理区域拥有至少 50 位付费的生产环境客户。
-可观测性平台在最近 12 个月内的年收入至少达到 7500 万美元，或者年收入至少达到 1000 万美元，并且年收入增长率达到 25%。&lt;/p>
&lt;p>此外，供应商必须在 Gartner 的客户兴趣指标 (CII) 中位居前列。CII 指标通过反映客户兴趣、供应商互动和客户反馈的加权组合来计算。&lt;/p>
&lt;h3 id="荣誉提名">荣誉提名
&lt;/h3>&lt;p>我们正在观察超过 40 家供应商的表现，虽然此次研究重点分析了 17 家供应商，但未被纳入并不意味着它们不具备实力。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Observe&lt;/strong>：这家公司是最早基于 Snowflake 数据平台构建可观测性平台的供应商之一，在其 2024 年 B 轮融资后表现强劲，尽管未达到此次研究的非功能性要求，但仍是市场中的重要力量。&lt;/li>
&lt;/ul>
&lt;h2 id="评估标准">评估标准
&lt;/h2>&lt;h3 id="执行能力">执行能力
&lt;/h3>&lt;p>Gartner 分析师根据供应商的质量和效率来评估其执行能力。我们评估供应商的过程、系统、方法或程序是否能够使其在市场中保持竞争力、运营高效且富有成效，并能够带来积极的收入增长、客户留存率和声誉。最终，供应商的表现评估将依据其利用自身愿景实现成功的能力。&lt;/p>
&lt;h3 id="产品">产品
&lt;/h3>&lt;p>此标准主要关注供应商在可观测性平台市场中的核心技术竞争力，涵盖当前产品功能、质量和特性。此外，还考虑其产品的可扩展性、稳定性、集成性以及安全特性。&lt;/p>
&lt;h3 id="整体可行性">整体可行性
&lt;/h3>&lt;p>评估供应商整体财务状况及其业务单元的财务健康度，考虑盈利能力、收入来源的地理分布以及研发投入。&lt;/p>
&lt;h3 id="销售执行定价">销售执行/定价
&lt;/h3>&lt;p>评估供应商在市场中的销售表现，重点关注其定价模式的透明度、价值以及复杂性。还包括对定价与折扣、新老客户业务以及与竞争对手的动态对比。&lt;/p>
&lt;h3 id="市场响应能力">市场响应能力
&lt;/h3>&lt;p>衡量供应商根据客户需求变化和市场动态调整策略的灵活性，评估其应对竞争和响应客户反馈的能力。&lt;/p>
&lt;h3 id="市场执行">市场执行
&lt;/h3>&lt;p>评估供应商的市场推广活动，关注其传递信息的清晰度、质量、创意和效果，以及其品牌影响力、产品知名度和客户认同感的提升。&lt;/p>
&lt;h3 id="客户体验">客户体验
&lt;/h3>&lt;p>重点评估客户通过供应商产品和服务实现预期结果的体验，包括客户支持计划、售后服务和区域内合作伙伴的支持情况。高端客户的特别支持项目也在评估范围内。&lt;/p>
&lt;h3 id="运营">运营
&lt;/h3>&lt;p>衡量供应商实现目标并履行承诺的能力，评估其组织结构、技能和合作关系的质量，特别是其遵守服务级别协议 (SLA) 的表现。还考虑其与云服务提供商的合作以及处理停机事件的能力。&lt;/p>
&lt;p>表 1 列出了魔力象限中关于执行能力的具体评估标准。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>评估标准&lt;/th>
&lt;th>权重&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>客户体验&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>市场响应能力/记录&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>市场推广执行&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运营&lt;/td>
&lt;td>低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>整体可行性&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>产品或服务&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>销售执行/定价&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="愿景的完整性">愿景的完整性
&lt;/h3>&lt;p>Gartner 分析师通过评估供应商对当前市场机会的理解能力，以及其阐述未来市场方向、创新和客户需求的能力来衡量其表现。最终，供应商的愿景展望和其实现未来目标的能力将作为评估依据。&lt;/p>
&lt;h3 id="市场理解">市场理解
&lt;/h3>&lt;p>此标准衡量供应商对客户需求的把握，以及如何将这些需求转化为产品。具有清晰市场愿景的供应商能够倾听和理解客户需求，并通过其创新推动市场发展。供应商对 observability 领域的深入理解及其与 APM 的区别也是评估的重要因素。&lt;/p>
&lt;h3 id="营销策略">营销策略
&lt;/h3>&lt;p>评估供应商是否具备清晰的差异化营销信息，以及是否通过社交媒体、广告和客户项目等渠道有效传递这些信息。创新的市场推广策略和真实的差异化也在考量范围内。&lt;/p>
&lt;h3 id="销售策略">销售策略
&lt;/h3>&lt;p>评估供应商的销售策略是否能够利用直接和间接销售、营销、服务和合作伙伴网络，扩大市场覆盖和客户基础。渠道策略及对购买决策者的理解也是关键考量因素。&lt;/p>
&lt;h3 id="产品策略">产品策略
&lt;/h3>&lt;p>评估供应商在产品开发和交付上的策略是否满足当前及未来的市场需求，是否具备差异化功能和持续创新的能力。产品路线图的质量及投资优先级也在评估范围内。&lt;/p>
&lt;h3 id="商业模式">商业模式
&lt;/h3>&lt;p>评估供应商的商业模式是否设计合理且执行有效，能否持续取得成功。考量因素包括对定价模式的预判、业务逻辑以及与开源社区的关系。&lt;/p>
&lt;h3 id="创新">创新
&lt;/h3>&lt;p>评估供应商在新兴技术领域的创新能力，以及对 AI/ML 等新技术的运用，是否能推动产品开发，并与第三方和合作伙伴建立协同效应。&lt;/p>
&lt;h3 id="地理战略">地理战略
&lt;/h3>&lt;p>评估供应商是否具备针对全球市场的战略，能否通过本地资源、合作伙伴和 SaaS 平台满足各地区的需求。考量因素包括区域员工数量、SaaS 平台位置及地区化市场策略的调整。&lt;/p>
&lt;p>本次魔力象限中使用的愿景完整性评估标准列于表 2。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>评估标准&lt;/th>
&lt;th>权重&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>市场理解&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>市场策略&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>销售策略&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>产品策略&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>商业模式&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>垂直行业策略&lt;/td>
&lt;td>未评级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>创新&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>地理策略&lt;/td>
&lt;td>中&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="象限描述">象限描述
&lt;/h2>&lt;h3 id="领导者">领导者
&lt;/h3>&lt;p>领导者象限中的供应商提供强大的可观测性产品，能够满足市场的广泛需求，并在扩展客户基础方面非常成功。他们拥有广泛的产品组合，提供卓越的分析能力和可见性，且能够与其他 ITOM 技术无缝集成。领导者具备优异的愿景与执行力，能够满足当前和未来市场的需求，同时持续在创新和客户体验方面表现出色。&lt;/p>
&lt;h3 id="挑战者">挑战者
&lt;/h3>&lt;p>挑战者象限中的供应商通常具备广泛的市场覆盖和大规模的客户部署。他们在执行方面表现强劲，得益于公司整体的销售和品牌影响力。这些供应商通常提供广泛的产品组合，部分供应商可能正处于产品转型阶段，逐步调整其市场焦点。&lt;/p>
&lt;h3 id="远见者">远见者
&lt;/h3>&lt;p>远见者象限中的供应商具备创新计划，能够应对市场需求，但其产品组合尚不成熟。他们在执行方面的能力略低，通常在应对市场变化、整合产品功能以及扩大市场份额方面相对较弱。&lt;/p>
&lt;h3 id="利基参与者">利基参与者
&lt;/h3>&lt;p>利基参与者象限中的供应商主要专注于特定市场或垂直领域，或仅满足有限的使用场景需求。由于他们无法在所有核心功能上表现出深度，通常无法满足更广泛市场的需求。纳入该象限并不意味着其在所竞争市场中的价值受到质疑。&lt;/p>
&lt;h3 id="背景">背景
&lt;/h3>&lt;p>&lt;strong>可观测性平台：未来展望&lt;/strong>&lt;/p>
&lt;p>过去几年里，observability 市场一直在快速发展，竞争激烈，供应商背景和规模各异，开源产品的比例也逐渐增加。虽然产品质量和功能不断提升，但随之而来的成本也在上涨。许多客户开始质疑是否值得为 observability 支付高昂的成本。&lt;/p>
&lt;p>IT 运营同样受到了 AI 技术的深刻影响，尤其是在本次魔力象限项目中，这一现象尤为明显。客户常常询问 AI 在 IT 运营中的角色，以及它与 AIOps 的关系。&lt;/p>
&lt;p>可观测性平台本质上是数据管理和分析工具，越来越多的工具开始将 AI 技术作为基础功能，包括自适应阈值、异常检测等。AI 在可观测性平台中的作用将继续演进，但 Gartner 鼓励客户根据具体的用例评估产品的适用性，而非仅仅关注特定技术的有无。&lt;/p>
&lt;p>市场中的可观测性产品种类繁多，几乎总有一个产品能够满足客户的独特需求。由于魔力象限的篇幅限制，许多优秀的供应商未能被纳入本次研究。如果有任何问题，欢迎联系我们。&lt;/p>
&lt;h2 id="市场概览">市场概览
&lt;/h2>&lt;p>从 APM（应用性能管理）到可观测性平台的发展，反映了市场的更广泛趋势。随着商业数字化、云的普及以及技术在日常生活中扮演的核心角色，工作负载和遥测数据的复杂性和规模都在不断增长，这对理解系统健康、性能和用户体验的能力提出了更高的要求。&lt;/p>
&lt;h3 id="市场扩展">市场扩展
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>现有客户中的扩展&lt;/strong>：过去，APM 工具主要用于监控少量关键应用。但随着可观测性平台功能的提升、部署的简化以及价格下降，更多的应用开始使用这些工具。面对经济波动，组织更倾向于选择能够全面覆盖遥测数据的“全栈”解决方案。&lt;/li>
&lt;li>&lt;strong>新行业的扩展&lt;/strong>：APM 和 可观测性工具最初多应用于 IT 系统成熟的大型企业。如今，中小企业也逐渐采用这些工具，特别是那些基于开源技术的解决方案，帮助他们更轻松地转向现代可观测性平台。&lt;/li>
&lt;li>&lt;strong>云服务商的竞争&lt;/strong>：随着企业在 observability 上的投入增加，云服务商（CSP）也开始推出具备竞争力的原生 可观测性工具，尤其在多平台环境中，它们的吸引力越来越大。&lt;/li>
&lt;/ul>
&lt;h3 id="未来趋势">未来趋势
&lt;/h3>&lt;p>未来几年，可观测性平台市场将继续受到以下趋势的推动：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据整合需求&lt;/strong>：用户需要在不切换工具的情况下，整合和分析来自不同源的遥测数据。&lt;/li>
&lt;li>&lt;strong>AI 驱动的自主功能&lt;/strong>：随着 AI 的进步，监控工具将逐渐融入自适应阈值、异常检测等自动化功能，甚至具备更高层次的优化能力。&lt;/li>
&lt;li>&lt;strong>网络安全集成&lt;/strong>：可观测性平台开始增加网络安全功能，未来可能成为此领域的重要竞争者。&lt;/li>
&lt;li>&lt;strong>AI 和 LLM 监控&lt;/strong>：随着 AI 和大语言模型工作负载的部署，可观测性平台将优先支持这些新兴领域。&lt;/li>
&lt;li>&lt;strong>集中式 observability 团队&lt;/strong>：越来越多的组织成立专门团队来集中管理 SLO、遥测数据和事故响应。&lt;/li>
&lt;li>&lt;strong>SaaS 和云服务监控&lt;/strong>：随着更多关键业务依赖 SaaS 和云服务，可观测性平台供应商将继续扩展对这些领域的支持。&lt;/li>
&lt;li>&lt;strong>并购与整合&lt;/strong>：市场的重组仍在继续，未来将有更多并购、产品更新和整合，这将改变供应商格局。&lt;/li>
&lt;/ul>
&lt;h2 id="证据">证据
&lt;/h2>&lt;p>本次研究基于过去 12 个月中超过 1000 次客户互动。此外，我们还结合了来自 Gartner Peer Insights、客户咨询以及公开资料的信息，以补充供应商提供的数据。&lt;/p>
&lt;h3 id="评估标准定义">评估标准定义
&lt;/h3>&lt;h4 id="执行能力-1">执行能力
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>产品/服务&lt;/strong>：评估供应商为市场提供的核心产品和服务，包括当前产品功能、质量、特性、以及是否通过 OEM 协议或合作伙伴提供。&lt;/li>
&lt;li>&lt;strong>整体可行性&lt;/strong>：衡量供应商整体的财务健康状况及其业务单元的成功，评估其继续投资、创新和提供产品的能力。&lt;/li>
&lt;li>&lt;strong>销售执行/定价&lt;/strong>：评估供应商在销售中的能力，包括交易管理、定价策略、售前支持和销售渠道的整体效率。&lt;/li>
&lt;li>&lt;strong>市场响应能力/记录&lt;/strong>：评估供应商根据市场机会、客户需求变化和竞争对手行为的响应能力，以及其在应对市场变化中的灵活性。&lt;/li>
&lt;li>&lt;strong>市场执行&lt;/strong>：评估供应商推广其品牌、提升产品知名度和影响客户心智的能力。包括宣传、促销、思想领导力等活动的效果。&lt;/li>
&lt;li>&lt;strong>客户体验&lt;/strong>：衡量供应商通过产品和服务帮助客户取得成功的能力，特别是技术支持、客户服务以及服务级别协议等方面的表现。&lt;/li>
&lt;li>&lt;strong>运营&lt;/strong>：评估供应商是否具备有效管理和运营其业务的能力，包括组织结构、项目管理、系统和其他运营工具的质量。&lt;/li>
&lt;/ul>
&lt;h4 id="愿景完整性">愿景完整性
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>市场理解&lt;/strong>：衡量供应商理解客户需求并将其转化为产品和服务的能力，展示出清晰的愿景，并能够通过这些愿景引领市场发展。&lt;/li>
&lt;li>&lt;strong>营销策略&lt;/strong>：供应商的营销信息是否清晰、具有差异化，并通过多种渠道有效传达。&lt;/li>
&lt;li>&lt;strong>销售策略&lt;/strong>：评估供应商的销售策略是否覆盖全面，包括直接和间接销售渠道的利用，以及市场覆盖的深度和广度。&lt;/li>
&lt;li>&lt;strong>产品策略&lt;/strong>：供应商在产品开发和交付中的策略是否能够满足当前和未来的市场需求，并体现差异化。&lt;/li>
&lt;li>&lt;strong>商业模式&lt;/strong>：评估供应商的商业模式是否合理且具备可持续性。&lt;/li>
&lt;li>&lt;strong>垂直/行业策略&lt;/strong>：供应商在特定市场细分中的资源配置和产品战略。&lt;/li>
&lt;li>&lt;strong>创新&lt;/strong>：供应商在新技术、整合和协同创新方面的能力和投资力度。&lt;/li>
&lt;li>&lt;strong>地理战略&lt;/strong>：评估供应商是否具备全球扩展的战略，能够根据不同地区的需求调整资源和产品策略。&lt;/li>
&lt;/ul>
&lt;p>原文：&lt;a class="link" href="https://www.gartner.com/doc/reprints?id=1-2HXS17MG&amp;amp;ct=240627&amp;amp;st=sb" target="_blank" rel="noopener"
>https://www.gartner.com/doc/reprints?id=1-2HXS17MG&amp;ct=240627&amp;st=sb&lt;/a>&lt;/p>
&lt;p>❤️ Feature Photo by Pavel Danilyuk: &lt;a class="link" href="https://www.pexels.com/photo/a-bearded-man-with-a-hat-using-binoculars-9143804/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/a-bearded-man-with-a-hat-using-binoculars-9143804/&lt;/a>&lt;/p></description></item><item><title>停止统计生产事故</title><link>https://martinliu.cn/blog/stop-counting-prod-incidents/</link><pubDate>Sat, 13 Jul 2024 20:11:14 +0800</pubDate><guid>https://martinliu.cn/blog/stop-counting-prod-incidents/</guid><description>&lt;img src="https://martinliu.cn/blog/stop-counting-prod-incidents/pexels-freestockpro-12955678.webp" alt="Featured image of post 停止统计生产事故" />&lt;blockquote>
&lt;p>原作者：Rick Branson；&lt;a class="link" href="https://rbranson.medium.com/why-you-shouldnt-count-production-incidents-38616d8e6329" target="_blank" rel="noopener"
>原文链接&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/blog/stop-counting-prod-incidents/1_h2CrvUkRwuO_X01IpDYT6Q.webp"
width="791"
height="489"
srcset="https://martinliu.cn/blog/stop-counting-prod-incidents/1_h2CrvUkRwuO_X01IpDYT6Q_hu_7867adce0fecee69.webp 480w, https://martinliu.cn/blog/stop-counting-prod-incidents/1_h2CrvUkRwuO_X01IpDYT6Q_hu_8d7e6515b83e1d7c.webp 1024w"
loading="lazy"
alt="出处: US NTSB 航空事故数据库"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>航空事故和死亡人数随着时间推移而减少。上图告诉了我们这一点。它还揭示了另一点：每次事故的死亡人数差异很大！&lt;strong>仅仅统计事故报告数量会掩盖这一非常重要的事实。&lt;/strong>&lt;/p>
&lt;p>高效的互联网服务团队都有一个共同点：有效的事故管理和无责后期分析流程。然而，这样的流程往往会导致一个不幸的结果——有人会提出一个看似合理的建议：将事故报告数量作为衡量产品质量的标准。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/stop-counting-prod-incidents/0_OICO-8FSc-QxpptN.webp"
width="967"
height="544"
srcset="https://martinliu.cn/blog/stop-counting-prod-incidents/0_OICO-8FSc-QxpptN_hu_a1b57bbe7f6eeea1.webp 480w, https://martinliu.cn/blog/stop-counting-prod-incidents/0_OICO-8FSc-QxpptN_hu_fb21ae7b05516080.webp 1024w"
loading="lazy"
alt="这是个陷阱"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>Facebook 坚决反对统计事故报告——至少在我在那里的时候是这样。似乎基础设施团队的负责人 Jay Parikh 的一项重要任务就是不断提醒大家不要统计事故报告。当有这样的仪表板或报告出现时，他会在极短的时间内发现。&lt;/p>
&lt;p>如果你是始作俑者，你的手机会很快响起 Messenger 标志性的“PING！”声。你会低头看通知。“哦，糟了。” 是 Jay Parikh 本人，他礼貌但坚定地请求“请将其撤下。” 自然地，你会感受到潜在的“否则后果自负”的威胁。&lt;/p>
&lt;p>为什么如此激进呢？有三个主要原因说明这个看似不错的想法为何如此危险。&lt;/p>
&lt;h2 id="1-这是一个借口">1. 这是一个借口
&lt;/h2>&lt;p>有有效的方法来衡量服务质量，但绝对不是通过事故的数量。因为数据已经存在，所以很容易让人产生更多事故不好，少事故好的想法。&lt;/p>
&lt;p>问题在于，这成为了衡量实际客户体验的借口。推导出这些指标需要大量精力，所以人们容易选择走捷径。选择正确的客户体验指标完全取决于特定产品或服务的细节，需要对产品有深刻的理解以及对客户重视内容的敏锐洞察。&lt;/p>
&lt;p>对于 web 应用程序的后端服务，一个与客户体验直接相关的质量指标可能是客户端观察到的不可恢复请求错误的频率。客户不应该遇到这种错误，如果遇到了，就表明存在实际的体验问题。这种指标特别强大，因为它综合了各种潜在原因。&lt;/p>
&lt;p>高层通常希望将质量汇总成每个产品领域的总分。这可能看起来有点偷懒，但他们的工作是确保改进集中在最需要的地方。我已经写了一个简要的草图来实现这一点。&lt;/p>
&lt;h2 id="2-反向激励">2. 反向激励
&lt;/h2>&lt;blockquote>
&lt;p>摘自《哈佛商业评论》：你可能会争辩说，这不可能这么简单——但心理学家和经济学家会告诉你，事实就是如此。人类会根据被评估的指标调整行为。你衡量什么，人们就会努力优化该指标的得分。你测量什么，就会得到什么。就是这样。&lt;/p>&lt;/blockquote>
&lt;p>行为必然会符合测量的证据是压倒性的。测量事故报告的数量会导致提交的事故报告减少。&lt;/p>
&lt;p>我已经听到有人说：“但是，我们公司的价值观是诚实和合作，所以情况不同。” 尽管有类似的压倒性证据，相信化学尾迹阴谋论的人还是很多。&lt;/p>
&lt;p>一个精心安排的事故管理和事后分析流程的根本目标是学习和改进。事故报告正是实现这一目标的工具。通常，报告越少，流程的效用就越低。实际上，应该鼓励人们尽早为任何可验证的严重事故提交报告。&lt;/p>
&lt;p>虽然事故确实需要分配严重等级，但其目的是为了明确传达在事故期间适当的响应措施。如果一个团队根据提交的事故报告数量来评估，他们不可避免地会在提交或升级时犹豫不决。测量带来的寒蝉效应不应该在生产事故的压力环境中发生。&lt;/p>
&lt;h2 id="3-实际上并无用处">3. 实际上并无用处
&lt;/h2>&lt;p>事故报告的频率与组织的成功或失败并没有什么有意义的相关性。因为严重等级通常表示事故期间的最高影响值，所以它并不能准确反映总影响。因此，十小时的 SEV2 不一定比十分钟的 SEV2 更好或更差——这是模糊的。&lt;/p>
&lt;p>然而，有一些非常有用的指标可以在事故报告过程中收集。以下是每个事故报告中应包含的四个通用数据点：&lt;/p>
&lt;ol>
&lt;li>影响开始的时间&lt;/li>
&lt;li>团队意识到问题的时间&lt;/li>
&lt;li>事故影响被缓解的时间&lt;/li>
&lt;li>团队如何意识到问题（例如，通过机器警报、员工报告、客户报告或《纽约时报》头版）&lt;/li>
&lt;/ol>
&lt;p>这些数据点可以用来推导出以下指标：&lt;/p>
&lt;ol>
&lt;li>从影响开始到意识到问题的延迟&lt;/li>
&lt;li>从意识到问题到解决问题的延迟（即 MTTR）&lt;/li>
&lt;li>响应的主动性&lt;/li>
&lt;/ol>
&lt;p>这些指标对于推动改进非常有用。任何改善这些指标的服务团队都将提供更高的质量……这是可以保证的。尽管每份报告都需要准确的损害评估，但这些数据通常无法在不同的事故之间进行普遍比较。&lt;/p>
&lt;p>“但是 Rick，你不是刚刚提到测量带来的反向激励吗？这不会激励人们篡改这些数据吗？” 首先，尽量避免与撒谎者共事。考虑提交事故报告是否合适与篡改客观事实之间有很大的道德差异。&lt;/p>
&lt;p>其次，事后审查的一个重要部分是将报告中的数据点与现有数据进行验证。这不是某种“信任但验证”的偏执行为。这是关于过程的完整性。人们会犯错误，他们可能因为事故而疲惫不堪，并希望尽快恢复正常生活。即使在最极端的情况下，事故报告也是相对罕见的，因此，确保每一份报告的准确性是必不可少的，如果改进是真正的目标。&lt;/p>
&lt;h2 id="但需注意">但需注意
&lt;/h2>&lt;p>最高的事故严重等级应保留给“所有东西都出问题了”的情况。在这种影响水平下，没有人会犹豫提交报告。&lt;/p>
&lt;p>你可能会想到一些可靠地表明这种情况的警报。Facebook 最具行动力的警报之一是可怕的出口流量下降。我从未遇到过出口流量下降警报是误报的情况。&lt;/p>
&lt;p>网络团队会跟踪每个边缘路由器的全球总吞吐量。如果这个数字突然大幅下降，比如 50%，那么“所有东西都出问题了”的阈值已经达到。虽然仍需要人类提交报告，但这主要是形式上的。每次这种情况都是 SEV1，最糟糕的情况——所有人都得参与。&lt;/p>
&lt;p>如果你的流程中的最高严重等级并不等同于“所有东西都出问题了”，那么可能是时候调整等级以达到这种程度了。&lt;/p>
&lt;p>这些事故是绝对不应该发生的。没有地方可以隐藏，所以没有任何测量会对报告机制产生寒蝉效应。甚至 Jay Parikh 也曾引用 SEV1 的频率来证明公司优先事项的调整。&lt;/p>
&lt;h2 id="最后的忠告">最后的忠告
&lt;/h2>&lt;p>事故报告的价值在于收集到的数据。&lt;/p>
&lt;p>回到衡量质量的问题，记住事故报告最终是在最糟糕的情况下捕获的数据是很有帮助的。我们可以承认事故的不可避免性和从中学习的价值，同时也要认识到绝大多数的质量改进不会来自这个过程。改进质量不应该依赖于事故的发生。&lt;/p>
&lt;p>事故应当被视为神圣的，所以不要破坏这个神圣的过程。不要为了统计而降低其价值。停止统计生产事故！&lt;/p>
&lt;p>❤️ Photo by Oleksandr P: &lt;a class="link" href="https://www.pexels.com/photo/hand-stopping-domino-effect-12955678/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/hand-stopping-domino-effect-12955678/&lt;/a>&lt;/p></description></item><item><title>SRE 故障应急实践：通用缓解措施</title><link>https://martinliu.cn/blog/generic-mitigations/</link><pubDate>Sat, 13 Jul 2024 19:02:57 +0800</pubDate><guid>https://martinliu.cn/blog/generic-mitigations/</guid><description>&lt;img src="https://martinliu.cn/blog/generic-mitigations/07-2048x1024.webp" alt="Featured image of post SRE 故障应急实践：通用缓解措施" />&lt;blockquote>
&lt;p>原作者：Jennifer Mace ；from &lt;a class="link" href="https://www.oreilly.com/content/generic-mitigations/" target="_blank" rel="noopener"
>https://www.oreilly.com/content/generic-mitigations/&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>亲爱的读者，你好！试想你是否负责一项你和你的用户希望一直正常运行的服务？如果是这样，我在这里要告诉你，你的服务应该准备好至少一两个通用的缓解措施。如果没有，你可能会遇到麻烦。如果有，请珍惜它们，维护它们，并使用它们，否则它们可能会失效。&lt;/p>
&lt;h2 id="什么是通用缓解措施">什么是通用缓解措施？
&lt;/h2>&lt;p>好的，从头开始：缓解措施是你可能采取的任何行动，以减少故障的影响，通常在生产环境中。热修复是一种缓解措施。通过 SSH 登录进入实例，并清除缓存也算是一种缓解措施。用胶带把备用电池固定在破旧的笔记本电脑上也算。我猜切断数据中心的电源，以关闭漏洞也是一种缓解措施，就像用断头台治疗普通感冒一样。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/01-1.webp"
width="2000"
height="2000"
srcset="https://martinliu.cn/blog/generic-mitigations/01-1_hu_1e9a3bae379155ab.webp 480w, https://martinliu.cn/blog/generic-mitigations/01-1_hu_577c28d5f9bcee5c.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画中，值班的 Macey 用滑稽的大剪刀剪断数据中心机架的电缆，同时竖起大拇指。&lt;/p>&lt;/blockquote>
&lt;p>通用缓解措施是指那些在缓解各种故障中都很有用的措施。&lt;/p>
&lt;p>例如，二进制回滚可能是最常见的通用缓解措施。许多多宿主服务都会有一个紧急按钮，用于将流量从故障副本中排除，这是基于查询服务的一个很好的通用缓解措施。其他的可能有单独的数据回滚工具，或快速增加大量额外容量的工具。&lt;/p>
&lt;p>通用缓解措施最重要的特征是：你不需要完全了解你的故障就可以使用它。&lt;/p>
&lt;h2 id="难得不应该排查故障吗">难得不应该排查故障吗？
&lt;/h2>&lt;p>不。&lt;/p>
&lt;p>好吧，让我详细解释一下：你应该在故障被缓解后，再去排查理解它。让我们画一个典型故障的简图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/02-2048x1126.webp"
width="2048"
height="1126"
srcset="https://martinliu.cn/blog/generic-mitigations/02-2048x1126_hu_c5492ad6a2224a9f.webp 480w, https://martinliu.cn/blog/generic-mitigations/02-2048x1126_hu_d4ef88673ca1fc58.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="181"
data-flex-basis="436px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画中，时间轴图示了两种不同的处理故障的方法。时间轴开始相同，从“问题产生”到“损害开始”（此时出现红色的“用户影响”条）到“值班人员接到通知”，但在决策点上分叉：如果选择“应用通用缓解措施”，用户影响停止，时间轴继续到“调查”、“最终修复”和“应用修复”。如果选择不缓解，用户影响继续——通过“调查”、“找到完美修复”，最后在“应用修复”时停止。时间轴上装饰有火山岛爆炸的插图；显然，在“早期缓解”时间轴中，岛民要快乐得多，而如果选择先调查，岛屿最终被灰烬覆盖，居民悲伤。&lt;/p>&lt;/blockquote>
&lt;p>构建好的通用缓解措施的目标是尽早在时间轴上准备好一个武器。如果你能使用的缓解措施都是特定于问题的，那么在你详细了解问题之前，你将无法帮助你的用户。减少了解问题所需时间是非常困难的；如果我们能轻松找到问题，那么我们很可能一开始就不会引发这些问题。&lt;/p>
&lt;p>所以假设团队的事故管理成功的衡量标准不是“修复时间”，而是“缓解时间”，我们想要最小化的是用户完全崩溃的时间。构建广泛适用的缓解措施比加快根本原因分析要容易得多。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/03.webp"
width="2000"
height="2000"
srcset="https://martinliu.cn/blog/generic-mitigations/03_hu_e7a1d000aefebfbd.webp 480w, https://martinliu.cn/blog/generic-mitigations/03_hu_6be9269b60312ff8.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画，中的 Macey 高举一把标有“不是太特定问题的！！！”的剑。她站在一团复杂的电缆上。&lt;/p>&lt;/blockquote>
&lt;h2 id="难点是什么">难点是什么？
&lt;/h2>&lt;p>具有讽刺意味的是，通用缓解措施非常具体。&lt;/p>
&lt;p>这句话听起来很矛盾。再解释一下。一个好的、通用的“快速修复”按钮在紧急情况下使用应该是简单且安全的；但一个稳固的通用缓解工具需要在事前做大量工作，并需要仔细调整以适应所缓解的服务。&lt;/p>
&lt;p>然而，有一些非常好的通用缓解模式可以学习，虽然这些需要仔细调整以适应你的特定服务。&lt;/p>
&lt;h2 id="通用缓解模式有哪些">通用缓解模式有哪些？
&lt;/h2>&lt;p>很高兴你问了！这里有一些可以让你开始使用的模式。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>回滚&lt;/strong>: 将你的服务恢复到已知的良好状态，通常是恢复二进制文件，但也有其他选项。几乎每个服务都可以实现这个策略的版本。很多服务以为自己有安全的回滚措施，但在故障期间才发现并非如此。&lt;/li>
&lt;li>&lt;strong>数据回滚&lt;/strong>：这是前一种情况的一个子案例——它只恢复你的数据。内容密集型服务特别需要这个，尤其是那些依赖数据管道的服务。&lt;/li>
&lt;li>&lt;strong>降级&lt;/strong>：你的服务过载了吗？能减少工作但保持运行总比崩溃好得多。在系统崩溃时尝试创建新的降级机制总是让人头疼。&lt;/li>
&lt;li>&lt;strong>扩展/扩容&lt;/strong>：流量太大？或者所有东西无缘无故地运行过热？增加更多副本。这虽然昂贵，但比因为故障而惹恼用户要便宜。注意，这通常不像“扩展一个二进制文件”那么简单；系统扩展是复杂的。&lt;/li>
&lt;li>&lt;strong>屏蔽&lt;/strong>：有致命查询？单个垃圾用户导致一个区域瘫痪？屏蔽他们。&lt;/li>
&lt;li>&lt;strong>引流/切流&lt;/strong>：将你的流量转移到其他地方。如果你是多宿主和流量驱动的服务，这个方法效果很好：如果一个区域看到高错误率，将请求转移到其他地方。&lt;/li>
&lt;li>&lt;strong>隔离&lt;/strong>：一个好方法是隔离“问题实例”。将一个使用单元隔离开来——一个热点数据库行、一个垃圾用户、一个有问题的流量——这样它碰到的任何问题都不会影响其他部分。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/04.webp"
width="2000"
height="2000"
srcset="https://martinliu.cn/blog/generic-mitigations/04_hu_6522ae412d26370.webp 480w, https://martinliu.cn/blog/generic-mitigations/04_hu_d84f61c2be150626.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画中的 Macey，看起来在深思，头上有“嗯”的字样，思考四个可能的缓解选项。顺时针从左上角开始，泡泡中有：Macey 将一个小鱼缸倒入一个大鱼缸；Macey 将一块巨石推上山；一个写着“NOPE！”的大红色停止标志；一辆飞驰的救护车。&lt;/p>&lt;/blockquote>
&lt;h2 id="什么不是通用缓解措施">什么不是通用缓解措施？
&lt;/h2>&lt;p>没错，如果你因为最近的发布触发了错误而排空了一个实例，却在 30 分钟后下一个实例升级时再次看到相同的错误，你会显得很愚蠢。没有什么是魔法：你需要诊断到能够理解你所处理的故障场景的程度。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/05.webp"
width="2000"
height="2000"
srcset="https://martinliu.cn/blog/generic-mitigations/05_hu_133936b0d0fe65e7.webp 480w, https://martinliu.cn/blog/generic-mitigations/05_hu_4cf3832d5d36b3a7.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画中，一台数据中心的服务器机架看起来很痛苦，它着火了，前面贴了一块创可贴。显然这个解决方案不足以解决问题。&lt;/p>&lt;/blockquote>
&lt;p>这些模式对所有服务的用处也不尽相同。例如，对于很多固定在单一物理区域的本地化产品来说，排空实例是没有意义的。当你的工作负载无法分离或已经完全隔离时，隔离也没有用。降级模式并不总是可行的。&lt;/p>
&lt;p>所以问问自己哪些策略对你的服务有意义。把它作为生产就绪评审（ &lt;a class="link" href="https://landing.google.com/sre/sre-book/chapters/evolving-sre-engagement-model/" target="_blank" rel="noopener"
>https://landing.google.com/sre/sre-book/chapters/evolving-sre-engagement-model/&lt;/a> ）的一部分——记录现有的通用缓解措施，如果不够，就计划添加更多。（但不要太多！质量胜过数量！）缓解措施越好、越标准化，支持的扩展就越容易；如果缓解措施能撑到早上，就不需要在凌晨 2 点叫醒专家。&lt;/p>
&lt;p>另外？如果你不使用它们，它们就不会工作。&lt;/p>
&lt;p>即使是熟练的值班人员，使用不熟悉的工具也是危险的。无论你选择哪种方法——进行演练、添加自动化测试、编写新团队成员必须完成的小清单以获得生产凭证——确保你的团队接触过你的缓解措施。毕竟，如果没人练习过恢复磁带备份，当有人在生产环境中运行 &lt;code>rm -r /*&lt;/code> 时，它们就只能是高级的纸镇。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/06.webp"
width="2000"
height="2000"
srcset="https://martinliu.cn/blog/generic-mitigations/06_hu_592669f964ce64dd.webp 480w, https://martinliu.cn/blog/generic-mitigations/06_hu_267b4d25949e8336.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;blockquote>
&lt;p>四个磁带备份堆叠在凌乱的桌子上的文件上，标签分别是“古老备份 #1”到“2020 年备份”。附近的一张便签写着“恢复你的备份！”&lt;/p>&lt;/blockquote>
&lt;p>通过定期演练你的缓解措施，你还可以验证它们的行为。我们的系统足够复杂，只有在真正使用你的通用缓解措施时，才能知道它们的连锁效应。&lt;/p>
&lt;p>目标是为你的服务创建易于使用、安全、无摩擦的紧急按钮，让任何值班人员在稍有怀疑时都能安心使用。这并不容易构建。但提前构建它们比忍受没有缓解措施的长时间停机要便宜得多。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>简而言之：故障中最昂贵的阶段是用户能看到的时候。一个快速到达“基本正常”的路径比等待“完全修复”对用户来说要好得多。如果你开的是一辆老款的丰田卡罗拉，有时最好的策略是确保手套箱里有胶带，这样当后视镜掉下来时，你可以开到修理厂。&lt;/p>
&lt;p>知道你的胶带是什么。你会需要它。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/generic-mitigations/07-2048x1024.webp"
width="1200"
height="630"
srcset="https://martinliu.cn/blog/generic-mitigations/07-2048x1024_hu_f9c0a8951f41072a.webp 480w, https://martinliu.cn/blog/generic-mitigations/07-2048x1024_hu_5b66a352d69f254f.webp 1024w"
loading="lazy"
alt=" SRE 漫画 "
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;blockquote>
&lt;p>漫画中一个快乐的值班人员 Macey 从一辆极其破旧的红色轿车的车窗外挥手。这辆车由胶带固定，车牌上写着“MTIG8”。&lt;/p>&lt;/blockquote>
&lt;p>这篇文章是 O&amp;rsquo;Reilly 和 Google 的合作。请参阅我们的编辑独立声明。( &lt;a class="link" href="http://www.oreilly.com/about/editorial_independence.html" target="_blank" rel="noopener"
>http://www.oreilly.com/about/editorial_independence.html&lt;/a> )&lt;/p>
&lt;blockquote>
&lt;p>本文所有图片均由 Emily Griffin 绘制。( &lt;a class="link" href="https://www.daybrighten.com/" target="_blank" rel="noopener"
>https://www.daybrighten.com/&lt;/a> )&lt;/p>&lt;/blockquote></description></item><item><title>Google SRE 白皮书：《SRE 视角的事故管理指标》</title><link>https://martinliu.cn/blog/incident-metrics-in-sre/</link><pubDate>Fri, 12 Jul 2024 17:03:39 +0800</pubDate><guid>https://martinliu.cn/blog/incident-metrics-in-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/pexels-kevinbidwell-3013676.webp" alt="Featured image of post Google SRE 白皮书：《SRE 视角的事故管理指标》" />&lt;h2 id="前言">前言
&lt;/h2>&lt;h3 id="摘要">摘要
&lt;/h3>&lt;p>评估由于&lt;strong>流程变化、产品采购或技术变革&lt;/strong>所产生的提升改进是一种常见的工作。在可靠性工程中，通常会测量平均恢复时间（MTTR）或平均缓解时间（MTTM）等指标。这些指标有时用于评估上述变化所带来的改进效果或跟踪其发展趋势。&lt;/p>
&lt;p>在本报告中，我通过一个简单的蒙特卡洛模拟过程（可应用于许多其他情况）和统计分析，展示了这些指标在生产事故管理的背景下，并不适用于决策或趋势分析的方面。为此，我提出了一些：在特定情况下会更有效的替代方法。&lt;/p>
&lt;h3 id="介绍">介绍
&lt;/h3>&lt;p>站点可靠性工程师（SRE）的主要职责之一是管理其负责的生产系统所发生的事故。在事故发生时，SRE 负责调试系统，选择合适且即时的缓解措施，并在需要时组织更大范围的事故响应。&lt;/p>
&lt;p>然而，SRE 的职责不仅限于事故管理，还包括预防工作，例如：制定在生产环境中执行变更的稳健策略，或自动响应问题，并将系统恢复到已知的安全正常运行状态。这些工作还包括改进沟通流程、提升监控能力，或开发有助于事故调试的工具。实际上，有一些产品都是专门用于改进事故响应流程。&lt;/p>
&lt;p>希望事故（如果必须发生的话）对业务的影响尽可能小。这通常意味着事故的持续时间要短，这是我将在这里重点讨论的内容。了解流程变化或产品采购会怎样缩短事故持续时间是重要的，尤其当事故涉及实际成本时。然而，我们不能仅凭一次事故就得出结论，需要对多个事故进行综合分析。&lt;/p>
&lt;p>用搜索引擎搜索一下，你可能会发现：许多文章声称的 MTTx 指标（包括平均恢复时间和平均缓解时间）应被视为服务可靠性的关键性能指标。这些文章有时由：拥有良好服务口碑或提供可靠性相关工具的知名公司撰写的。但这些指标真的是良好的可靠性管理指标吗？实际上，它们能否作为有效的指标来使用？该如何判断？&lt;/p>
&lt;p>应用 MTTx 指标的目的是了解系统可靠性的演变。但实际情况是，应用这些指标比看起来要复杂得多，而且在大多数情况下，这些流行指标往往具有误导性。&lt;/p>
&lt;p>本报告将展示 MTTx 在大多数典型 SRE 环境中无效的原因，这些原因适用于许多总结性统计数据，与公司规模或生产实践的严格程度无关。不论选择何种指标，重要的是测试它在不同的事件持续时间分布下是否能够提供可靠的见解。尽管可能没有一种通用的“银弹”指标能替代 MTTx，但通过根据具体问题定制指标，您可能会在度量方面取得更好的效果。在本报告的最后，我将探讨一些替代方法来实现这些测量。&lt;/p>
&lt;h2 id="事故生命周期和时间节点">事故生命周期和时间节点
&lt;/h2>&lt;p>在分析事故的总体情况前，我想先介绍一些相关术语。这些术语可能因公司而异，但基本原则是一致的。&lt;/p>
&lt;p>图 1 展示了一个简单的事故时间线模型，我将在后续内容中使用这个模型。在这个模型中，事故经历以下关键阶段：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>首次产品影响&lt;/strong>：对产品产生严重影响的第一个时刻。&lt;/li>
&lt;li>&lt;strong>检测&lt;/strong>：系统操作员意识到正在发生的问题。&lt;/li>
&lt;li>&lt;strong>缓解&lt;/strong>：产品不再受到严重影响，但系统可能仍存在着部分的功能退化。&lt;/li>
&lt;li>&lt;strong>恢复&lt;/strong>：系统完全恢复正常运行；有时缓解和恢复是同一时间点，但有时恢复时间之后，具体会有所不同。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32.webp"
width="1295"
height="551"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32_hu_dad72c63fe54cd42.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32_hu_b40f84e2cc87da9f.webp 1024w"
loading="lazy"
alt="图 1. 事故的简化时间线，突出显示了关键节点"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;p>我将分析事故的持续时间周期，并探讨应用统计数据的有效性。有几个公开的资源库汇集了事故复盘回顾，展示了时间线和关键事件&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。在这次分析中，我特别关注事故对用户影响的时间窗口。&lt;/p>
&lt;p>图 1 的事故时间线模型简化了现实，就像所有模型一样。“浅层事故数据”存在一些问题。例如，在这次分析中，一个问题是：“如果你已经消除了 90% 用户的影响，但还有 10% 仍然受影响，你会认为事故已经缓解了吗？” 如果还有 5% 或 20% 呢？使用这个模型，你需要做出一个二元决策。这种分类方式常常因为主观性和不一致的原则而受到批评。&lt;/p>
&lt;p>你可能不会太在意事故数据中&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>的这些不准确之处。对于许多实际应用——包括我将重点关注的总体分析——更高的精确度并不是必须的，而实现这种精确度的成本可能超过提高数据质量的潜在好处。著名统计学家 George Box 说过：“所有模型都是错的，但有些是有用的”，我认为这个模型可以用来理解 MTTR 和类似指标的可行性。&lt;/p>
&lt;h3 id="mttr-和-mttm-指标探讨与应用">MTTR 和 MTTM 指标，探讨与应用
&lt;/h3>&lt;p>一次事故可能会提供其相关数据，但你需要分析整体情况&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。平均恢复时间 (MTTR) 是行业中常用的术语。类似于平均故障间隔时间 (MTBF) 的术语也很常见，特别是在分析硬件组件的可靠性时。&lt;/p>
&lt;p>在这里，MTTR 被定义为所有适合分析的事故中，从首次产品影响到恢复的平均时间。同样，平均缓解时间 (MTTM) 被定义为从首次产品影响到缓解的平均时间。&lt;/p>
&lt;h3 id="事故持续时间的分布">事故持续时间的分布
&lt;/h3>&lt;p>要分析事故持续时间的统计数据，需要多样化的数据来源，以避免仅依据一个公司或产品得出结论。我收集了三家知名互联网公司的公共事故状态仪表板数据（员工数量在一千到两千之间）。图 2 展示了事故持续时间的分布。&lt;/p>
&lt;p>我没有区分事故类型：如果公司认为事故值得向用户公布，我就将其纳入分析。这些事故的持续时间代表了从首次影响到最后影响的用户沟通时间。我简化称之为恢复时间，虽然这种叫法并不完全精确。因为恢复时间和缓解时间通常相同，我发现它们遵循类似的分布，这种不精确性不会影响分析结果。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56.webp"
width="1297"
height="760"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56_hu_9f98f048bb74c04e.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56_hu_902821161e64fb99.webp 1024w"
loading="lazy"
alt="图 2. 事故持续时间的分布及事故次数"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>行的顺序依次为公司 A (N = 798；2019 年 173 起)，公司 B (N = 350；2019 年 103 起)，和公司 C (N = 2,186；2019 年 609 起)。列显示了每家公司在短期和长期内分布的尾部。&lt;/p>
&lt;p>我还收集了 Google 的事故数据（见图 3），在我的分析中，Google 的数据集代表了一家专注于互联网服务的巨型公司。这个数据集是在一年的时间内收集的，时间比图 2 中的任何数据集都短，但它还包括内部事故（例如，仅影响开发人员生产力的事故）。虽然我不能分享具体的数字，但可以预见，Google 的事故数据集比三个公共数据集中任何一个都大好几倍。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14.webp"
width="1295"
height="275"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14_hu_55dfc94dc890ea18.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14_hu_42dea5cf7b565362.webp 1024w"
loading="lazy"
alt="图 3. 2019 年 Google 的事故持续时间分布，数据经过模糊处理"
class="gallery-image"
data-flex-grow="470"
data-flex-basis="1130px"
>&lt;/p>
&lt;p>得出的关键观察是：在每种情况下，事故都呈现出正偏分布，大多数事故能迅速解决。图 4 显示，这些分布大致接近对数正态（或伽玛）分布，但我没有对经验数据进行概率分布拟合。所有数据集都显示了事故持续时间的巨大差异。这与我的经验相符：大多数事故能相对较快解决，但一些更复杂且持续时间较长，还会有少数灾难性的“黑天鹅事件”发生。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30.webp"
width="1295"
height="389"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30_hu_dac35a265e7d8fd4.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30_hu_b01ad922ad3736e4.webp 1024w"
loading="lazy"
alt="图 4. 事故持续时间的对数正态 Q-Q 图"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>&lt;/p>
&lt;p>显示它们如何接近对数正态分布&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>。请注意，这不能用来得出对数正态分布是最佳拟合的结论，仅供参考。&lt;/p>
&lt;p>我排除了公共数据集中持续时间少于三分钟和超过三天的事故，这些事故占每个数据集的约 1-2%。对数据集中随机选择的事故进行手动检查，确认这些异常值是有效的，并且我也知道，从事故回顾中可以得知确实存在影响重大的多天事故，甚至更长时间的事故&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。但是，我认为包括这些异常长的事故，即使它们在实际中发生，可能会对分析带来不必要的质疑。&lt;/p>
&lt;p>从这些经验数据中，可以看到事故持续时间的分布，但仅根据事故数量或持续时间来判断公司的可靠性实践是错误的。这些数据集来自不同业务模式、可靠性需求和事故沟通方式各有差异的公司。&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="分析改进">分析改进
&lt;/h2>&lt;p>现在你已经清楚了解了事故持续时间的情况，是时候缩短事故时间了！&lt;/p>
&lt;p>假设你获得了一款可以提高可靠性的产品，能够将事故的缓解和解决时间缩短 10%。例如，一个持续一天的事故可以缩短到约 21.5 小时。你有机会进行试用来评估该产品的效果。如何确认产品能兑现其承诺呢？这份报告将探讨使用 MTTR 和类似指标，因此我们将使用这个指标。&lt;/p>
&lt;p>我故意选择了这个模拟场景，因为它适用于许多现实中的情况。无论是更改策略、开发软件，还是引入新的事故管理流程，目标往往是缩短事故时间，并评估这些改变所带来的效果。&lt;/p>
&lt;h3 id="判定-mttr-的改进">判定 MTTR 的改进
&lt;/h3>&lt;p>那么，你如何测试该产品是否真正兑现了承诺呢？一个简单直观的测试方法是：“如果每次事故的持续时间，都能按产品所述的减少了，我们就能看到 MTTR 指标的改进。”&lt;/p>
&lt;p>然而，这仍然相当不精确。“我们能够看出改进”具体意味着什么？最终，你需要做出一个明确的判定。在这种情况下，你需要判断产品是否取得了成功，并选择是否购买。&lt;/p>
&lt;p>为了评估产品是否实现了缩短事故持续时间 10% 的承诺，你可以设置一个阈值，即 MTTR 与使用产品前相比减少 10%。一个更宽松的标准是：只要有任何改进就算成功。如果你看到任何事故时间的缩短，无论幅度大小，你就会认为产品成功了。&lt;/p>
&lt;p>你需要明确了解你期望指标的表现，并确信所选指标（如 MTTR）能够准确衡量你想要的内容。如果依赖于一个不佳的指标，可能会带来实际且严重的风险和成本。这些风险可能是直接的，例如因为错误的原因购买产品，但也可能非常微妙。例如，员工意识到：他们的事故管理工作是通过未经验证，或有问题的指标进行评估时，士气可能会受挫。&lt;/p>
&lt;h3 id="在平行宇宙中模拟-mttr">在平行宇宙中模拟 MTTR
&lt;/h3>&lt;p>你只能在一个宇宙中生活，因此在这个场景中你只有一次机会评估产品。但直觉告诉你，事故是多变的，你希望确保能看到改进，且不是随机巧合。&lt;/p>
&lt;p>为了更确定这一点，你可以进行蒙特卡洛模拟&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。假设事故遵循获得的数据集的经验分布，并评估在一定数量的事故后你会看到哪些改进及其置信水平。&lt;/p>
&lt;p>模拟过程如下：&lt;/p>
&lt;ol>
&lt;li>从事故持续时间的经验分布中随机抽取两个样本，样本量为 N1 和 N2（N1 = N2 以实现完美的 50/50 分割）。&lt;/li>
&lt;li>修改其中一个样本的事故持续时间，缩短 10%。&lt;/li>
&lt;li>计算每组的 MTTR，即 MTTR&lt;!-- raw HTML omitted -->modified&lt;!-- raw HTML omitted --> 和 MTTR&lt;!-- raw HTML omitted -->unmodified&lt;!-- raw HTML omitted -->。&lt;/li>
&lt;li>计算差值，观察到的改进 = MTTR&lt;!-- raw HTML omitted -->unmodified&lt;!-- raw HTML omitted --> − MTTR&lt;!-- raw HTML omitted -->modified&lt;!-- raw HTML omitted -->（负差异意味着 MTTR 恶化）。&lt;/li>
&lt;li>重复这个过程 100,000 次。&lt;/li>
&lt;/ol>
&lt;p>你正在进行两个样本的实验，样本大小为 N1 和 N2，其中 N1 = N2。50/50 的分割能提供最强的分析；在第 18 页的“分析方法”中，我将简要讨论原因。&lt;/p>
&lt;p>简单来说，你访问成千上万个平行宇宙，模拟产品兑现其承诺，并将结果的 MTTR 与未处理的事故进行比较。从操作上讲，这可以使用 Python 脚本和包含数据的 CSV 文件或足够强大的 SQL 引擎来完成，不需要任何专业工具或额外知识。&lt;/p>
&lt;p>现在你在操作概率，所以需要为测试添加一个条件：对随机巧合的某种容忍度。假设你容忍最多 10% 的平行宇宙误导你。更正式地说，这意味着你需要统计显著性 α = 0.10。这个值可以说是比较宽松的。&lt;/p>
&lt;p>&lt;strong>场景模拟与评估&lt;/strong>&lt;/p>
&lt;p>在这个场景中，我选择了两个等量的事故样本（N1 和 N2，其中 N1 = N2）。我选择的 N1 + N2 等于 2019 年的事故数量（见表 1）&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>。具体来说，公司 A、B 和 C 的事故数量分别为 173、103 和 609 起。&lt;/p>
&lt;p>表 1. 三个数据集的事故数量、均值和方差。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>公司A&lt;/th>
&lt;th>公司B&lt;/th>
&lt;th>公司C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>事故(所有)&lt;/td>
&lt;td>779&lt;/td>
&lt;td>348&lt;/td>
&lt;td>2157&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>事故（2019）&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>均值&lt;/td>
&lt;td>2h26m&lt;/td>
&lt;td>2h31m&lt;/td>
&lt;td>4h31m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>方差&lt;/td>
&lt;td>5h16m&lt;/td>
&lt;td>5h1m&lt;/td>
&lt;td>6h53m&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>进行模拟后，我绘制了图表来观察结果（见图 5）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23.webp"
width="1301"
height="521"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23_hu_abcc56caee33a9b1.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23_hu_5c3c5e474ff3988d.webp 1024w"
loading="lazy"
alt="图 5."
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>如果改进实际发生，模拟的 MTTR 变化分布，作为相对改进。&lt;/p>
&lt;p>即使在模拟中改进总是有效，38% 的模拟中公司 A 的 MTTR 差异低于零，40% 的公司 B 和 20% 的公司 C 也是如此。观察 MTTR 的绝对变化，看到至少 15 分钟改进的概率分别只有 49%、50% 和 64%。即使场景中的产品有效并缩短了事故，检测到任何改进的几率也远超出 10% 随机误差的容忍度。&lt;/p>
&lt;p>&lt;strong>不改变事故情况下统计数据的变化&lt;/strong>&lt;/p>
&lt;p>更糟糕的是，你可能会看到 MTTR 的显著减少，甚至超过产品的承诺。这可以通过运行与之前相同的模拟更清楚地证明，但在这种情况下，产品对事故没有任何影响。将步骤 2 替换为 new_duration = old_duration。&lt;/p>
&lt;p>果然，图 6 显示公司 A 有 19% 的几率 MTTR 改进半小时（或更好），公司 B 有 23%，公司 C 有 10%……即使在这个模拟中，你没有对事故做任何改变&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>。换句话说，即使假设的产品对你没有任何作用，你也会认为它有效并决定购买产品。&lt;/p>
&lt;blockquote>
&lt;p>注意：对此发现，一个愤世嫉俗的回应是开始销售虚假的缩短事故时间的产品。这种商业行为会设定价格，使得部分客户仅凭运气看到宣传的改进并购买产品，从而盈利。我绝不支持这种商业计划。然而，这确实突出了使用低质量指标可能带来的问题。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46.webp"
width="1302"
height="515"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46_hu_2c8258ff479ec53f.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46_hu_291b90547a286515.webp 1024w"
loading="lazy"
alt="图 6."
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>在事故没有变化的情况下，模拟的 MTTR 变化分布。&lt;/p>
&lt;p>我们了解到，即使没有对事故持续时间进行任何有意的改变，许多模拟的场景仍然会让你认为 MTTR 大大缩短或延长，而实际上没有任何结构性的变化。如果你无法辨别出事故没有变化的情况，那么当它们真的发生变化时，你也会难以判断。&lt;/p>
&lt;h3 id="改变思维实验">改变思维实验
&lt;/h3>&lt;p>之前的场景假设有一个产品可以缩短事故持续时间，你想了解这种变化如何反映在 MTTR 中。但实际上，预测和建模潜在的改进非常困难。&lt;/p>
&lt;p>可以通过换个角度来解决这个问题。与其寻找特定的改进，不如观察在事故没有结构性变化的情况下 MTTR（或其他统计数据）的变化。换句话说，你的事故持续时间依旧来自相同的分布（未受任何事故处理改进的影响），你评估的是统计数据的典型变化。&lt;/p>
&lt;p>接下来，我将简化讨论，只关注在事故没有变化的情况下 MTTR 变化的场景，不再分析改进。因此，最有趣的是结果分布的形状：简单来说，我们想知道它有多平坦。&lt;/p>
&lt;h3 id="通过更多事故进行更好的分析">通过更多事故进行更好的分析
&lt;/h3>&lt;p>你可能会直觉上理解为什么观察到的 MTTR 会有如此广泛的变化：事故的方差太大。这种直觉有统计学依据。&lt;/p>
&lt;p>中心极限定理告诉我们，随着样本数量的增加，样本和的分布趋向于正态分布&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>。你可以在之前的分析中看到一些证据（例如图 6），这些分布看起来有些正态。虽然不能自动假设结果分布总是正态的（稍后会详细说明），但这也意味着在极限情况下方差会趋于收敛。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41.webp"
width="1268"
height="237"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_a5a6cccefc465323.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_ea5d5c33d3a759a0.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="535"
data-flex-basis="1284px"
>&lt;/p>
&lt;p>这与直觉一致，表明随着样本大小（即事故数量）的增加，观察到的 MTTR 值的方差会减少。这很容易证明。表 2 显示了多个事故数量下 MTTR 的 90% 置信区间。&lt;/p>
&lt;p>回想一下，你是从事故持续时间分布中抽取两个样本。因此，如果你想知道用 N 个事故总数进行分析的效果，你需要抽取两个样本，样本大小为 N1 和 N2，其中 N1 = N2。&lt;/p>
&lt;p>表 2. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个 MTTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>原始数据TTR的均值&lt;/td>
&lt;td>2h 26m&lt;/td>
&lt;td>2h 31m&lt;/td>
&lt;td>4h 31m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2019的事故数据&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 10&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h41m; +5h42m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h25m; +5h18m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7h4m; +7h15m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h44m; +1h44m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h39m; +1h39m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−2h16m; +2h16m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−33m; +33m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−31m; +31m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−43m; +43m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>随着样本数量的增加，标准差会下降，从而提高检测较小显著变化的能力。在原始场景中，你评估的产品承诺将事故持续时间减少 10%；即使有一千起事故，这仍然会落入 90% 置信区间。即便有一年的数据，你也无法得到一个有信心的结论。&lt;/p>
&lt;p>公司 A 和公司 B 的相似结果是巧合。这两家公司提供的服务非常不同，但它们的平均事故持续时间和标准差却相似。如果只考虑一年的事故数据，差异会很大：公司 A 的平均事故持续时间是 4 小时 35 分钟，而公司 B 是 2 小时 38 分钟。它们的其他统计数据，如中位数，也比平均值差异更大。&lt;/p>
&lt;p>即使事故数量很多（超过每年的总数），方差仍然太高。图 7 显示，即使 MTTR 观察到的变化很大，仍然在 90% 置信区间内。虽然增加事故数量有助于获得更好的信号，但这与可靠性工程的整体目标相违背。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27.webp"
width="1302"
height="504"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27_hu_f0e32665300e814.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27_hu_271ba2cab099598.webp 1024w"
loading="lazy"
alt="图 7."
class="gallery-image"
data-flex-grow="258"
data-flex-basis="620px"
>&lt;/p>
&lt;p>随着样本数量增加，90% 置信区间的宽度减少。&lt;/p>
&lt;h3 id="超越平均值">超越平均值
&lt;/h3>&lt;p>对算术平均值的一个常见且合理的批评是它对异常值过于敏感。尽管已经排除了最严重的异常值事故（如少于三分钟或超过三天的事故），这一点依然成立。我们可能需要考虑其他统计方法，让我们来探讨一下。&lt;/p>
&lt;p>&lt;strong>中位数和百分位数&lt;/strong>&lt;/p>
&lt;p>中位数常用于避免少数极端异常值过度影响结果，这里也可以使用——大多数事故不会持续几天。&lt;/p>
&lt;p>需要注意的是，如果要分析中位数，你也需要调整你的分析方式。如果你在寻找任何类型的相对差异，它应该是相对于中位数的。例如，用 MTTR 的一部分进行测试可能会非常误导。&lt;/p>
&lt;p>如表 3 所示，即使在 N = 1,000 起事故的情况下，90% 置信区间相对于中位数统计数据仍然很大，并且涵盖了讨论中的 10% 中位数 TTR 目标。问题不仅限于 MTTR 的“平均值”；中位数 TTR 也无法解决。&lt;/p>
&lt;p>表 3. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个中位数 TTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Median TTR of original data&lt;/td>
&lt;td>42m&lt;/td>
&lt;td>1h 7m&lt;/td>
&lt;td>2h 50m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Incidents in 2019&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 10&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h46m; +1h46m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−2h13m; +2h12m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−4h8m; +4h7m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h20m; +1h19m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−11m; +11m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−9m; +9m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>较高的百分位数，如第 95 百分位，表现更差。直观上，这是合理的。较高百分位数的事故持续时间会受到最严重事故的影响，而这些事故又非常罕见。因此，它们的方差非常高。表 4 列出了一些具体数值。&lt;/p>
&lt;p>表 4. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的第 95 百分位 TTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>95th percentile TTR of original data&lt;/td>
&lt;td>10h 45m&lt;/td>
&lt;td>8h 48m&lt;/td>
&lt;td>12h 59m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−12h19m; +12h22m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−8h34m; +8h36m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−12h29m; +12h30m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h23m; +5h25m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−3h18m; +3h17m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−3h33m; +3h32m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>虽然公司 A 和公司 B 的 MTTR 在这些百分位数测量中的结果相似，但你可以看到事故持续时间差异的影响。&lt;/p>
&lt;p>几何平均数&lt;/p>
&lt;p>你可能感兴趣的另一个汇总统计量是几何平均数，其计算公式为。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25.webp"
width="1542"
height="156"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25_hu_17dee94625cb1683.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25_hu_14830f261cfcaeb1.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="988"
data-flex-basis="2372px"
>&lt;/p>
&lt;p>鉴于事故持续时间分布与对数正态分布相差不远，几何平均数在这里特别有吸引力。几何平均数对于对数正态分布而言，就像算术平均数对于正态分布一样。同样，这可以快速模拟（见表 5）。&lt;/p>
&lt;p>表 5. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个几何平均数差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Geometric mean TTR of original data&lt;/td>
&lt;td>54m&lt;/td>
&lt;td>1h 9m&lt;/td>
&lt;td>2h 24m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−24m; +25m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−27m; +27m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−56m; +56m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7.2m; +7.2m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−8.5m; +8.7m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−18m; +17m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到目前为止，我们在实际数量的事故中还没有得到足够好的结果。在有一千起事故的情况下，90% 置信区间仅刚好超过指标变化的 10%。&lt;/p>
&lt;p>&lt;strong>事故持续时间总和&lt;/strong>&lt;/p>
&lt;p>你可能更感兴趣的是减少事故持续时间总和，而不是单个事故的持续时间。这是直观的：你想提供可靠的服务，但服务的可靠性更多取决于总的不可用时间，而不是平均事故持续时间。&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们已经进行过这样的分析！算术平均数是事故持续时间总和除以事故数量，因此你可以简单地将 MTTR 模拟结果乘以 N/2（即两个样本中任意一个的元素数量），就能得到总和的模拟结果。为了确认这一点，我生成了一些总和模拟，显示置信区间等于 MTTR 置信区间乘以相应的 N（见表 6）。&lt;/p>
&lt;p>表 6. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个事故持续时间总和差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−87h; +87h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−82h; +82h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−113h; +113h]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−275h; +274h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−260h; +259h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−359h; +357h]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>事故数量对总和的观察值有很大影响。让我们简要看一下事故数量。&lt;/p>
&lt;p>&lt;strong>统计事故&lt;/strong>&lt;/p>
&lt;p>本报告讨论了你是否能够检测到事故处理的改进，重点分析事故的解决过程。从发生事故到完全没有事故超出了本文的讨论范围。&lt;/p>
&lt;p>然而，既然我已经收集了所有这些数据，至少可以简要查看这些数据集，以了解事故数量随时间的变化。我不会在这里进行更深入的分析。&lt;/p>
&lt;p>事故数量和事故持续时间一样不稳定。即使按全年汇总，如图 8 所示，数值也会大幅波动。在月度或季度的分辨率下，这种波动更为严重。最多可以从这个图表中看到一些明显的趋势：公司 C 的事故数量在 2019 年急剧增加（这一趋势在 2020 年继续，但图中未显示），与之前的年份相比。这一趋势只有在多年时间尺度上才明显，尤其是与公司 A 和公司 B 的不稳定趋势相比时更为明显。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06.webp"
width="1302"
height="452"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06_hu_dacf15e1e337a123.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06_hu_397e6e70f7ad5504.webp 1024w"
loading="lazy"
alt="图 8."
class="gallery-image"
data-flex-grow="288"
data-flex-basis="691px"
>&lt;/p>
&lt;p>每年每个公司的事故数量，占总事故数量的比例。排除了数据不完整的年份（2020 年和每个数据集的第一年）。&lt;/p>
&lt;p>但这种趋势可能根本无法反映系统可靠性。可能是由于外部世界事件导致的使用模式变化？还是产品组合的变化？或者是相同生产事件的事故报告方式变化，例如法规要求的变化？我只能猜测，但这些通常无法避免的因素可能会影响甚至使你自己公司的分析无效。&lt;/p>
&lt;p>过去也提出了其他反对统计事故数量的观点&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>。我不会再花时间进一步分析这些数据，但我期待未来更多关于这一主题的研究。现在我们快速浏览了事故数量，让我们利用这些知识回到分析事故缩短的主题。&lt;/p>
&lt;h2 id="分析方法">分析方法
&lt;/h2>&lt;p>到目前为止，我一直在使用蒙特卡洛模拟。然而，你也可以采取分析方法。能否依靠中心极限定理来计算置信区间，而不是通过模拟来实现呢？答案是，有时候可以。&lt;/p>
&lt;p>中心极限定理指出，样本均值的分布在极限情况下会趋向于正态分布。然而，由于事故发生频率低，数量可能不足以使中心极限定理适用。&lt;/p>
&lt;p>你的团队或公司可能没有足够的事故数量来使样本均值的分布趋向于正态分布。&lt;/p>
&lt;p>一种测试方法是运行模拟以生成样本均值分布的正态概率图（Q-Q 图）。&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>
在图 9 中，我对公司 A 的数据进行了这样的模拟。随着样本量的增加（例如一年的事故数量），图表趋向于正态分布。但对于仅三个月的事故数量，图表明显偏离正态分布。
假设持续时间是正态分布的可能会误导并影响后续的计算。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23.webp"
width="1301"
height="568"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23_hu_466193f6881b4b0.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23_hu_75ae8f60626b5bbb.webp 1024w"
loading="lazy"
alt="图 9."
class="gallery-image"
data-flex-grow="229"
data-flex-basis="549px"
>&lt;/p>
&lt;p>公司 A 样本均值事故持续时间的正态概率图，由 1,000 次模拟生成，模拟事故数量为 2019 年的全年事故数和大约一个季度的事故数。&lt;/p>
&lt;p>一旦确定样本均值分布是正态的，你可以使用标准工具，例如 z 检验或 t 检验来建立置信区间&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>。我们特别关注的是两个分布之间的差异。既然它们来自同一总体，均值差异（以及样本总体差异的正态分布的众数）将趋于零，正如我们在模拟中所见。更有趣的是标准差，它决定了置信区间。&lt;/p>
&lt;p>样本均值的方差收敛到：&lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41.webp"
width="1268"
height="237"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_a5a6cccefc465323.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_ea5d5c33d3a759a0.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="535"
data-flex-basis="1284px"
>&lt;/p>
&lt;p>两个正态分布差异的方差是：&lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54.webp"
width="1273"
height="197"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54_hu_ced7d37eb2bf7268.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54_hu_73e1e971fb0a200b.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="646"
data-flex-basis="1550px"
>&lt;/p>
&lt;p>在这种情况下，两个样本均值正态分布的方差和样本量相同，结果是：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09.webp"
width="1309"
height="190"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09_hu_e7f893574343e0b5.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09_hu_c86ee0d26d89ebf5.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="688"
data-flex-basis="1653px"
>&lt;/p>
&lt;p>这也解释了为什么 50/50 分割是最佳选择，因为不同的样本比例会导致更大的方差，从而得到更差的结果。&lt;/p>
&lt;p>然后你可以应用双尾 z 检验。你可以扩展 z 检验公式；知道分布均值是 0，你可以寻找 MTTR 的特定变化，同时扩展方差计算：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22.webp"
width="1298"
height="248"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22_hu_be7c8028e90fd522.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22_hu_3d0b6695435a2bf6.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="523"
data-flex-basis="1256px"
>&lt;/p>
&lt;p>你也可以反过来：查找相应的 z 分数（双尾检验在 α = 0.10 时的 z 分数约为 1.644），找到 MTTR 变化的置信区间：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46.webp"
width="1302"
height="205"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46_hu_4ffaee6923c3d9cb.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46_hu_16d2dcec15c6bd10.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="635"
data-flex-basis="1524px"
>&lt;/p>
&lt;p>对于公司 A，事故持续时间的标准差为 5 小时 16 分钟，使用 N1 = N2 = 100/2 = 50 的样本来计算 90% 置信区间：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05.webp"
width="1303"
height="209"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05_hu_eff4a51b9eb8b32e.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05_hu_3691742a0cf7b7b5.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="623"
data-flex-basis="1496px"
>&lt;/p>
&lt;p>这个结果与模拟结果中看到的 90% 置信区间相对应。&lt;/p>
&lt;p>虽然有时你可以使用公式来进行事故统计分析，但我更喜欢模拟方法。我发现用模拟来讨论这个话题比用公式更容易理解。它还提供了更多的灵活性，可以进行建模和分析。计算 95 百分位恢复时间的解析解决方案可能非常具有挑战性，但在模拟中，这只需要一行代码的改变。&lt;/p>
&lt;p>你可能也对模拟不同的变化和情况感兴趣。如果提议的事故缩短比简单的 10% 减少更复杂怎么办？也许你期望根据事故类别有不同的减少？如果 SRE 团队由狼人组成，他们只在满月后开始处理事故怎么办？你的场景可能没有那么奇幻，但模拟可以让它们更容易实现。&lt;/p>
&lt;h2 id="大型公司事故数据集">大型公司事故数据集
&lt;/h2>&lt;p>之前的分析显示，随着样本数量的增加，方差会下降。Google 拥有的员工数量约是三家匿名公司总和的一百倍，事故数量也显著多于这些公司。这是否有助于获得更可靠的事故指标？&lt;/p>
&lt;p>我们将以相同的方法分析 Google 的事故数据，并利用更丰富的数据集（包括内部元数据）进一步细分数据。&lt;/p>
&lt;p>图 10 显示了所有重大事故和最严重事故的持续时间分布。这两个数据集中还包括内部事故，例如仅影响 Google 员工及其生产力的事故，甚至是对任何用户（内部或外部）完全不可见的事件。最严重事故的数据集中包含了更高比例的面向用户的事故（例如，会在服务状态仪表板上列出）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31.webp"
width="1302"
height="472"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31_hu_e058cd3e34b82458.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31_hu_ffa78f3547b58659.webp 1024w"
loading="lazy"
alt="图 10."
class="gallery-image"
data-flex-grow="275"
data-flex-basis="662px"
>&lt;/p>
&lt;p>2019 年 Google 所有事故的持续时间分布。&lt;/p>
&lt;p>除了更广泛的事故集中有更多非常短的事故外，图表显示这两个分布大致相似。所有 Google 事故的数据集大约是所选的面向用户的 Google 服务事故数据集的 15 倍，这也是公司范围内的分布图显得更平滑的原因。&lt;/p>
&lt;p>在三个公共数据集中，排除超过三天的事故去除了约 1% 的事故，但两个 Google 数据集中都有相当多的事故持续时间超过三天。与之前的公共数据集一样，由于事故跟踪方式不同，得出关于可靠性的结论是不正确的。我尝试了两种方法：在三天处截断和排除长度排名前 5% 的事故。结果显示，相对 MTTR 的置信区间仅有略微差异，结论相同。表 7 显示了以三天为截断点的模拟数据，与其他模拟一致。&lt;/p>
&lt;p>表 7. 基于 100,000 次模拟，从 Google 事故数据集中两个随机抽样的事故集合（N1 = N2）中计算出的两个平均 TTR 和中位数 TTR 差异的 90% 置信区间。事故数量对应每个数据集中一年中的一部分。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>2019 年 Google 最严重的事故（通常但不总是面向用户）&lt;/th>
&lt;th>所有重大事故（通常不面向用户）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Incidents in 2019 (approximate relative size)&lt;/td>
&lt;td>1 * X&lt;/td>
&lt;td>15 * X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = ¼ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−35%; +35% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−11%; +11% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = ½ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−25%; +25% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7.6%; +7.6% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = 1 year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−18%; +18% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5.3%; +5.4% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = ¼ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−53%; +52% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−20%; +20% of median TTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = ½ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−35%; +35% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−14%; +14% of median TTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = 1 year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−25%; +25% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−10%; +10% of median TTR]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从数学上讲，在所有重大事故的一年数据中事故数量（虽然具体数字无法分享，但比我们之前测试的 1,000 起更多）有助于获得更可信的结果，这与之前的发现一致。然而，你需要注意你所看的数据和所应用的测试。事实证明，虽然在数学上成立，但这一发现实际上并没有特别实用。&lt;/p>
&lt;p>所有事故的数据集包含各种类型的事故，从面向用户的服务系统故障到长期存在的处理管道问题、网络配置和公司设备软件安装——这些通常对终端用户是不可见的。对于一些事故，解决时间也可能相当长（例如，事故本身就很长或可以等到周末之后），这会推高 MTTR 值。&lt;/p>
&lt;p>在如此广泛的事故中，我没有任何实际的开发工作可以保证实现这种程度的事故持续时间减少。在一年事故数据中，能够自信地检测到 5.3% 的均值变化，并没有使 MTTR 成为一个实际有用的事故统计数据。&lt;/p>
&lt;h2 id="这与数据质量有关吗">这与数据质量有关吗？
&lt;/h2>&lt;p>汇总事故分析的挑战似乎并不在于事故元数据的质量。提高元数据收集准确性的努力不太可能引起显著变化。在检查 Google 内部事故元数据时，我发现那些有更严格事故报告要求的团队（例如，直接由 SRE 支持或运行高可用性、对收入至关重要服务的团队），在事故持续时间分析上并没有显著改进。所有三个公共事故数据集也显示出类似的行为。&lt;/p>
&lt;p>你也可以通过生成完全合成的事故分布来验证这个问题。如果假设事故遵循某种分布（例如伽马分布或对数正态分布），你可以选择参数，使其在主观判断中“看起来正确”，然后进行评估。&lt;/p>
&lt;p>这种方法可以应用于任何分布，但需要谨慎。假设事故持续时间呈正态分布或均匀分布可能并不现实。从这种分布的分析中得出的结论可能会产生误导。&lt;/p>
&lt;h2 id="这就是为什么-mttx-可能会误导你">这就是为什么 MTTx 可能会误导你
&lt;/h2>&lt;p>像收集到的事故数据（也可能包括你公司的事故数据）这样的分布具有非常高的方差，以至于均值、中位数或总和都无法很好地汇总统计来理解事故趋势。事故问题领域固有的高方差和小样本量使得进行稳健的事故持续时间分析变得不可取，如在三个示例数据集中所示。这里的分析是在理想条件下进行的，现实中的表现可能更差。&lt;/p>
&lt;p>从可靠性角度来看，缓解和恢复之间确实存在差异，但在本分析范围内，这并不重要&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>。我称之为“MTTx”，因为只要实际测量遵循类似的分布属性和样本量（即事故数量），它对分析没有影响。许多其他事故指标，例如检测时间，也存在同样的问题。&lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup>&lt;/p>
&lt;p>这意味着 MTTx 不适合用于评估典型变更对 TTx 的影响：&lt;/p>
&lt;ul>
&lt;li>它不能很好地衡量系统的整体可靠性。仅仅得出这一结论不需要这种分析，我可以总结《实施服务质量目标》中的一个论点：如果事故数量翻倍，而事故分布大致相同，系统的可靠性显然变差了，但你的指标却没有发生太大变化。&lt;/li>
&lt;li>它无法提供任何关于事故响应实践趋势的有用见解。模拟显示，即使事故性质没有变化，你也能看到大量变化。&lt;/li>
&lt;li>无法通过 MTTx 评估事故管理过程或工具变更的成功或失败。方差使得难以区分任何改进，并且即使承诺的改进实现了，该指标也可能会恶化。&lt;/li>
&lt;/ul>
&lt;p>这些结果适用于典型的可靠性工程情况，例如网络服务上的事故。默认情况下，应拒绝将 MTTx 指标用于上述目的。然而，也有例外情况。例如，如果你有大量数据可以进行汇总 MTTx 分析。一个实际例子是大规模硬盘驱动器采购，如 Backblaze 公司定期发布的每个型号的硬盘驱动器可靠性统计数据，覆盖了数万个设备&lt;sup id="fnref:20">&lt;a href="#fn:20" class="footnote-ref" role="doc-noteref">20&lt;/a>&lt;/sup>。此外，同一型号硬盘之间的相似性比事故之间更大。同样，数量和较低的方差是你能够自信地看到典型服务系统平均延迟变化的原因。&lt;sup id="fnref:21">&lt;a href="#fn:21" class="footnote-ref" role="doc-noteref">21&lt;/a>&lt;/sup>&lt;/p>
&lt;p>另一个例外情况是剧变，例如将事故持续时间缩短到原来的 20%。如前所示，你很可能能够自信地在数据中检测到它。然而，你也可能通过其他方式检测到它，因此不需要使用仍存在问题的 MTTx 指标。&lt;/p>
&lt;h2 id="更好的分析选项">更好的分析选项
&lt;/h2>&lt;p>MTTx 的挑战在于它是一个错误的观察指标。这个指标的行为特性使得分析变得困难。&lt;/p>
&lt;p>另一个挑战在于，这个指标可能根本没有测量到你真正关心的内容。当我们谈论 MTTR 改进时，通常是在问：“我们的可靠性提高了吗？”或者，“我们在应对事故方面变得更好了？”选择一个更准确地代表决策目标的指标是其他文献中也讨论的重要话题。&lt;sup id="fnref:22">&lt;a href="#fn:22" class="footnote-ref" role="doc-noteref">22&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我没有找到任何可以像 MTTx 那样被普遍应用的“银弹”指标。然而，我们可以探讨在特定背景下选择更好指标的一些方法。&lt;/p>
&lt;h3 id="根据问题定制指标">根据问题定制指标
&lt;/h3>&lt;p>我用模拟测试产品是否影响 MTTx。然而，现实中的产品或流程变更并不是这样运作的。相反，它们改善了事故的某些方面，可能是事故沟通过程，或是自动事故分析工具提出的假设。&lt;sup id="fnref:23">&lt;a href="#fn:23" class="footnote-ref" role="doc-noteref">23&lt;/a>&lt;/sup>&lt;/p>
&lt;p>如前所述，事故是由不同持续时间的步骤组成的。&lt;sup id="fnref:24">&lt;a href="#fn:24" class="footnote-ref" role="doc-noteref">24&lt;/a>&lt;/sup>这些步骤在各种出版物中都有研究。如果你在改进事故过程中的某一步，将所有其他步骤包括在内会使你更难理解变更的影响。&lt;/p>
&lt;p>尝试分析每个事故的具体行为可能并不实际。你无法依赖人类输入元数据，也难以紧密观察每个事故。相反，实际的解决方案可以是对选定的事故样本进行用户研究。这些研究可以专注于你感兴趣的事故方面，并提供比汇总统计数据更丰富的理解。正确构建这些研究并不总是容易的，如果可能，建议寻求专家意见。考虑到这一点，有些文献在建立低成本用户测试方面提供了帮助，我已经成功地将这些经验应用于构建实际系统。&lt;sup id="fnref:25">&lt;a href="#fn:25" class="footnote-ref" role="doc-noteref">25&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="考虑直接的可靠性指标">考虑直接的可靠性指标
&lt;/h3>&lt;p>也许你在问：“作为公司，我们的可靠性在变好还是变坏？” 这时可用性的概念就显得尤为重要。在 SRE 实践中，服务质量指标（SLIs）和服务质量目标（SLOs）是常用的术语。理想情况下，这些指标应该反映用户感知的产品可靠性，而 SLOs 则应该设定为符合业务权衡的目标。通常，这两者并不完全准确，有时甚至与理想情况相去甚远。&lt;/p>
&lt;p>即使你的 SLIs 和 SLOs 尽可能真实地反映业务目标，这仍不意味着它们可以用汇总统计数据来分析，例如每年消耗的错误预算总和。由于 SLI（即使是接近理想属性的 SLI）可以通过多种方式实现，这里给出的答案可能不具有普遍适用性。我在这方面没有进行过分析，但这是一个有趣的未来研究方向。你可能可以在公司内部使用前面讨论过的工具轻松完成这项工作。&lt;/p>
&lt;p>根据你的业务，另一个衡量标准可能是已打开的支持案例总数，或因服务不可靠而导致的客户电话，或其他更高级的综合指标。&lt;/p>
&lt;h3 id="测试你的选择指标">测试你的选择指标
&lt;/h3>&lt;p>可能有比这里建议的更好的方法，我期待该领域未来的工作。关键在于，分析应关注你真正关心的问题；明智地选择你的指标。
可靠性事故是多种多样的，需要回答的关于可靠性度量的问题也同样多样。关键是以批判的眼光看待你的指标。它们是否真的在测量你想要测量的内容？它们在面对随机性时是否稳健？你是否有证据支持你的答案？
我用来研究 MTTx 的工具同样可以用于其他你正在考虑的指标。过程大致相同：确定对你有意义的变化水平（这取决于指标，也取决于你的业务），然后分析你是否可以在数据中自信地看到它。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>我已经证明，即使在有利的分析设置中，MTTx 也不能用于许多被宣传为有用的实际用途，例如评估可靠性趋势、评估政策或产品的结果，或了解整体系统可靠性。系统运营者、DevOps 或 SRE 应该不再默认 MTTx 是有用的。除非在特定情况下已证明其适用性，否则应对其应用持怀疑态度。&lt;/p>
&lt;p>问题并不仅限于使用算术平均数作为指标；我已经证明，中位数和其他指标也存在同样的问题。这是由于事故数量通常较少且持续时间方差较大的结果。在三家匿名公司的实际数据集中以及 Google 的混淆数据集中都观察到了这种分布。&lt;/p>
&lt;p>与其使用 MTTx 分析整体事故统计数据，你可以专注于事故生命周期中的更具体问题，更贴近你想要评估的内容。这可能会导致选择不同的指标或完全不同的测量过程。选择更好的指标应当带来更好和更稳健的决策过程。例如，可以专门测量和研究检测时间，或在一些常见事故响应活动上花费的时间。&lt;/p>
&lt;p>也许还有其他统计数据可以提供更多的价值。事故持续时间的方差本身可能也是有用的，因为它可以证明响应能力的一致性。无论情况如何，有一点是肯定的：你应该批判性地思考你的指标并对其进行测试（或许可以使用本报告中提到的一些工具）。超越依赖假设、直觉或行业趋势，寻找证据证明你选择的指标可以指示你希望它们指示的内容。&lt;/p>
&lt;h2 id="致谢">致谢
&lt;/h2>&lt;p>作者感谢 Kathy Meier-Hellstern 的审阅、建议和意见；感谢 Ben Appleton 审阅此作品以及一些初步工作的贡献，这些工作促成了本文的完成；感谢 Michael Brundage 进一步审阅并激发了额外的分析；感谢 Scott Williams 的进一步审阅；感谢 Cassie Kozyrkov 为使统计思维成为一个越来越易于理解的主题所做的努力。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;p>Štěpán Davidovič 是 Google 的一名站点稳定性工程师，目前致力于内部自动监控基础设施的开发。在之前的 Google SRE 职位中，他开发了金丝雀分析服务，并参与了许多共享基础设施项目和 AdSense 可靠性工作。他于 2010 年毕业于布拉格捷克技术大学，获得学士学位。&lt;/p>
&lt;p>❤️ Photo by Kevin Bidwell: &lt;a class="link" href="https://www.pexels.com/photo/firefighter-holding-hose-with-water-flowing-3013676/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/firefighter-holding-hose-with-water-flowing-3013676/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>请参阅，例如，《A List of Post-mortems!》&lt;a class="link" href="https://github.com/danluu/post-mortems" target="_blank" rel="noopener"
>https://github.com/danluu/post-mortems&lt;/a> 和《Postmortem Index》&lt;a class="link" href="https://postmortems.app/" target="_blank" rel="noopener"
>https://postmortems.app/&lt;/a>。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>John Allspaw，《Moving Past Shallow Incident Data》，Adaptive Capacity Labs，2018 年 3 月 23 日。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>《Mean time to recovery》，Wikipedia。&lt;a class="link" href="https://en.wikipedia.org/wiki/Mean_time_to_recovery" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Mean_time_to_recovery&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Laura Nolan，《What Breaks Our Systems: A Taxonomy of Black Swans》（视频），SREcon19 Americas，2019 年 3 月 25 日。&lt;a class="link" href="https://www.usenix.org/conference/srecon19americas/presentation/nolan-taxonomy" target="_blank" rel="noopener"
>https://www.usenix.org/conference/srecon19americas/presentation/nolan-taxonomy&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>《Normal probability plot》，Wikipedia。&lt;a class="link" href="https://en.wikipedia.org/wiki/Normal_probability_plot" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Normal_probability_plot&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>请参阅，例如，《A List of Post-mortems!》&lt;a class="link" href="https://github.com/danluu/post-mortems" target="_blank" rel="noopener"
>https://github.com/danluu/post-mortems&lt;/a> 和《Postmortem Index》&lt;a class="link" href="https://postmortems.app/%e3%80%82" target="_blank" rel="noopener"
>https://postmortems.app/。&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>请注意，例如，公司 C 的事故持续时间通常对齐到整小时，这在图表上表现为一些峰值。&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>通过重复抽样来模拟行为的过程——在这种情况下，是模拟事故解决时间的行为。&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>截至 2020 年夏末，我认为仅使用过去 12 个月的数据可能会受到世界事件的影响，从而导致数据集不寻常。&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>针对这种特定情况，事故被缩短了 10%。&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>参见《在线统计教育》中的“均值的抽样分布”，“均值差异的抽样分布”，“均值的检验”等章节，项目负责人 David M. Lane，莱斯大学。&lt;a class="link" href="https://onlinestatbook.com/" target="_blank" rel="noopener"
>https://onlinestatbook.com/&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>根据你的业务，这种推理可能存在缺陷。考虑到每月一次一小时的事故对用户和业务的影响，与 60 次一分钟的事故非常不同。这同样适用于常用的服务质量目标（SLO）语言。&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13">
&lt;p>Rick Branson, &amp;ldquo;Stop Counting Production Incidents&amp;rdquo;, Medium, 2020 年 1 月 31 日。&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14">
&lt;p>“Normal probability plot”，Wikipedia。&lt;a class="link" href="https://rbranson.medium.com/why-you-shouldnt-count-production-incidents-38616d8e6329" target="_blank" rel="noopener"
>https://rbranson.medium.com/why-you-shouldnt-count-production-incidents-38616d8e6329&lt;/a>&amp;#160;&lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15">
&lt;p>参见《在线统计教育：多媒体学习课程》中的“均值的抽样分布”，“均值差异的抽样分布”，“均值检验”等章节，项目负责人 David M. Lane，莱斯大学。&amp;#160;&lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16">
&lt;p>参见《在线统计教育》中的相关章节，以及 Wikipedia 上的“样本均值分布”。&lt;a class="link" href="https://en.wikipedia.org/wiki/Mean#Distribution_of_the_sample_mean" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Mean#Distribution_of_the_sample_mean&lt;/a>&amp;#160;&lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17">
&lt;p>Eric W. Weisstein，《正态差异分布》，来源于 MathWorld—A Wolfram Web Resource，更新于 2021 年 3 月 5 日。&lt;a class="link" href="https://mathworld.wolfram.com/NormalDifferenceDistribution.html" target="_blank" rel="noopener"
>https://mathworld.wolfram.com/NormalDifferenceDistribution.html&lt;/a>&amp;#160;&lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18">
&lt;p>Jennifer Mace, &amp;ldquo;Generic Mitigations: A Philosophy of Duct-Tape Outage Resolutions&amp;rdquo;, O&amp;rsquo;Reilly, 2020 年 12 月 15 日。&lt;a class="link" href="https://www.oreilly.com/content/generic-mitigations/" target="_blank" rel="noopener"
>https://www.oreilly.com/content/generic-mitigations/&lt;/a>&amp;#160;&lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19">
&lt;p>Alex Hidalgo, Implementing Service Level Objectives, O&amp;rsquo;Reilly, 2020。&lt;a class="link" href="https://www.oreilly.com/library/view/implementing-service-level/9781492076803/" target="_blank" rel="noopener"
>https://www.oreilly.com/library/view/implementing-service-level/9781492076803/&lt;/a>&amp;#160;&lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:20">
&lt;p>“Hard Drive Data and Stats”，Backblaze。 &lt;a class="link" href="https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data" target="_blank" rel="noopener"
>https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data&lt;/a>&amp;#160;&lt;a href="#fnref:20" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:21">
&lt;p>尽管其他统计数据（例如更高的百分位数）通常是衡量服务系统延迟的更好指标。&amp;#160;&lt;a href="#fnref:21" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:22">
&lt;p>Douglas W. Hubbard，《How to Measure Anything》第三版（新泽西州霍博肯：John Wiley &amp;amp; Sons，2014 年）。&amp;#160;&lt;a href="#fnref:22" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:23">
&lt;p>Andrew Stribblehill，“Managing Incidents”，载于 《SRE Google 运维解密》（O&amp;rsquo;Reilly，2016）。&amp;#160;&lt;a href="#fnref:23" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:24">
&lt;p>John Allspaw，“Moving Past Shallow Incident Data”；Charisma Chan 和 Beth Cooper，“Debugging Incidents in Google’s Distributed Systems: How Experts Debug Production Issues in Complex Distributed Systems”，Queue 第 18 卷第 2 期（2020 年 3 月-4 月）。&lt;a class="link" href="https://queue.acm.org/detail.cfm?id=3404974" target="_blank" rel="noopener"
>https://queue.acm.org/detail.cfm?id=3404974&lt;/a>&amp;#160;&lt;a href="#fnref:24" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:25">
&lt;p>Steve Krug，《Rocket Surgery Made Easy》（加利福尼亚州伯克利：New Riders，2010）。&amp;#160;&lt;a href="#fnref:25" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书：Cloud CRE 生产成熟度评估</title><link>https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/</link><pubDate>Sun, 07 Jul 2024 21:12:04 +0800</pubDate><guid>https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/</guid><description>&lt;img src="https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/pexels-loan-patru-1487385115-27000643.webp" alt="Featured image of post Google SRE 白皮书：Cloud CRE 生产成熟度评估" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/cloud-cre-production-maturity-assessment-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>【译者注】Google Cloud 的客户可靠性工程团队（Cloud CRE）是一支专业团队，致力于帮助客户提高其 Google Cloud 平台上的可靠性。Cloud CRE 团队的使命是帮助客户建立可靠的服务，以便他们可以专注于创新。为了实现这一目标，Cloud CRE 团队开发了一种生产成熟度评估方法，以帮助客户评估其生产环境的成熟度，并提供指导，以帮助他们提高其生产环境的可靠性。&lt;/p>
&lt;blockquote>
&lt;p>谷歌 Cloud CRE 生产成熟度评估 (Cloud CRE Production Maturity Assessment)&lt;/p>&lt;/blockquote>
&lt;h2 id="监控和指标">监控和指标
&lt;/h2>&lt;p>【Monitoring &amp;amp; Metrics】确定期望的服务行为，度量服务的实际表现，并纠正差异。示例指标包括响应延迟、错误率或未答复查询率、资源的峰值利用率。&lt;/p>
&lt;h3 id="slo-定义和度量">SLO 定义和度量
&lt;/h3>&lt;p>【SLO Definition and Measurement】拥有一个代表用户需求的，已发布的服务水平目标 (SLO)，并根据这些已发布的 SLO 进行评估、报表和总结。&lt;/p>
&lt;ul>
&lt;li>您的服务/应用程序是否有明确定义的 SLO？
SLO 是对服务行为的度量目标，例如 95% 的查询请求延迟低于 500 毫秒。&lt;/li>
&lt;li>SLO 是否反映了客户的体验？
即，满足 SLO 是否意味着客户体验是可以接受的？反之，未能满足 SLO 是否意味着客户体验是不可接受的？&lt;/li>
&lt;li>SLO 是否发布给用户？
这并不常见，但有时如果您的服务有一个主要的大客户，您可能会发布您的 SLO，以便他们可以根据您的服务性能进行计划。&lt;/li>
&lt;li>您是否有对 SLO 进行良好定义的度量？
&lt;ul>
&lt;li>度量过程是否有文档记录？&lt;/li>
&lt;li>度量过程是否自动化？
即，您是否能自动获得 SLO 的报告或图表，还是必须手动运行命令或填写电子表格，以查看您对 SLO 的满足情况？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否有修订/优化 SLO 的流程？
例如，如果您一直未能满足 SLO，但用户似乎没有投诉，您如何决定是否修订 SLO 目标水平？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>服务没有 SLO 或 SLO 不代表用户需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>服务有定义的 SLO，但 SLO 的度量是临时的或没有文档记录。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>服务有定义的 SLO，并且度量过程有文档记录且有明确的负责人。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>SLO 发布给用户，并且 SLO 自动度量，代表用户需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>与用户一起对 SLO 进行持续评估和改进。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="仪表板与可视化">仪表板与可视化
&lt;/h3>&lt;p>【Dashboards &amp;amp; Visualization】用清晰的数据展示来支持服务的管理、决策和行动事项调整。&lt;/p>
&lt;ul>
&lt;li>您是否采集相关服务的数据？
&lt;ul>
&lt;li>您使用了哪些采集方法？
&lt;ul>
&lt;li>日志处理&lt;/li>
&lt;li>白盒监控：检查内部系统状态&lt;/li>
&lt;li>黑盒监控：模拟实际用户请求的人工流量事务/拨测&lt;/li>
&lt;li>从客户端设备采集指标&lt;/li>
&lt;li>其他： 您能简要描述您的采集方法吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>是否为自动化采集？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您管理的服务是否都有仪表板？
仪表板通常是一个显示图表或其他关键监控信息的网页，使您可以一目了然地看到服务的性能状态。&lt;/li>
&lt;li>仪表板是否包含关键服务指标？
例如：QPS，延迟，容量，错误预算消耗情况&lt;/li>
&lt;li>仪表板是否包含关键业务指标？
例如：访问量，用户，浏览量，共享次数&lt;/li>
&lt;li>仪表板是否可集中式的分享给相关业务部门使用？&lt;/li>
&lt;li>仪表板在应用程序/服务/团队之间是否以统一的 UI / UX 共享？&lt;/li>
&lt;li>企业是否有用于临时数据探索的工具？
例如：钻取仪表板，Splunk / BigQuery，数据仓库，以满足定制化分析需求。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有仪表板。数据采集是临时的、不一致的，没有文档记录。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>可能有关键指标的仪表板，但仅以静态形式存在（不可定制）。仪表板没有集中管理，用途没有标准化，所有权不明确。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>仪表板存在并支持常见的技术用例，所有权明确。支持临时查询的工具存在，但使用起来有些复杂（需要培训或长时间的试验才能得到结果）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>仪表板支持技术和业务用例。临时数据探索工具是可定制的，支持常见用例，无需培训（例如，按照手册文档操作）或通过直观的界面使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>仪表板在各业务单元之间标准化。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="用户关注">用户关注
&lt;/h3>&lt;p>采集准确反映用户体验的数据，并使用这些数据来维护服务质量。区分人工流量指标和关键用户旅程的度量；例如，如果服务器的“正常运行”，但用户仍然无法使用产品，则该指标无法提供用户体验的认知。&lt;/p>
&lt;ul>
&lt;li>服务是否采集任何未从服务器导出的数据？
通常是探针或关键用户旅程探测脚本。&lt;/li>
&lt;li>探针覆盖是否涵盖复杂的用户旅程？
例如，对于电商业务：主页 =&amp;gt; 搜索产品 =&amp;gt; 产品列表页 =&amp;gt; 产品详情页 =&amp;gt; “加入购物车” =&amp;gt; 结账&lt;/li>
&lt;li>是否为特定的用户旅程/流程提供 SLO？&lt;/li>
&lt;li>是否有针对用户旅程度量性能回归的既定响应流程？
例如，每当用户完成帐户创建流程的监控度量时间超过 5 分钟时，既定响应是：先暂停功能发布工作，并优先进行次问题的补救工作。
&lt;ul>
&lt;li>如有，响应是什么？
&lt;ul>
&lt;li>回滚发布&lt;/li>
&lt;li>触发告警&lt;/li>
&lt;li>开发临时修复&lt;/li>
&lt;li>其他
您能简要描述您的响应方法吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>是否评估用户旅程 SLO 的状态以推动服务改进？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有采集用户体验数据，或仅有服务器端指标数据（如服务响应延迟）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>存在探针来测试特定用户端点（如站点主页、登录），但缺少对复杂用户旅程/流程的探测覆盖。探针通常是单步的，而非多步旅程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>复杂用户旅程得到度量（通过复杂探测或客户端实时流量报告）。服务改进是被动的，而非主动的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>SLO 明确涵盖特定的用户旅程。不只是“服务器是否正常运行”，而是产品是否正常工作，能够让用户执行特定的产品功能。用户旅程的 SLO 违反会导致发布回滚。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>持续评估服务延迟和可用性，并用于推动服务改进。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="容量规划">容量规划
&lt;/h2>&lt;p>【Capacity Planning】预测未来需求，并确保服务在适当资源水位工作，并有足够的容量来满足这些需求。&lt;/p>
&lt;h3 id="业务指标预测">业务指标预测
&lt;/h3>&lt;p>【Business Metric Forecasting】预测服务关键业务指标的增长。业务指标的示例包括用户数量、销售数据、产品采用率等。预测需要准确且长期，以便有意义地指导容量规划。&lt;/p>
&lt;ul>
&lt;li>您的应用程序是否有关键业务指标？
例如，用户数量、图片数量、交易数量等。&lt;/li>
&lt;li>您是否有关键业务指标的历史趋势数据？
&lt;ul>
&lt;li>保留时间是多少个月？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否预测关键业务指标的未来增长？
&lt;ul>
&lt;li>您预测的未来时间范围是多少个月？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否通过将预测与度量期间的实际值进行比较分析，来衡量预测准确性？
&lt;ul>
&lt;li>6 个月预测的数字与观测值的误差百分比是多少？（0-100+）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的预测是否考虑了可能导致业务指标快速变化的发布或其他非有机事件？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有定义容量单位，或定义了单位但没有历史趋势数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>定义了业务单位，有单位的历史趋势数据，但预测能力有限。预测要么不准确，要么是短期的（&amp;lt;=1 个季度）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>有可靠的历史趋势数据，有 4-6 个季度的预测。有一个复杂的预测模型。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>已衡量过去预测的准确性。使用 6-8 个季度的预测。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>定义并度量且准确的预测，知道如何准确预测并不断提高准确性记录；实际需求的准确性在 6 个月预测内误差在 5% 以内。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="供给指标建模">供给指标建模
&lt;/h3>&lt;p>【Supply Metric Modeling】通过经验转换模型计算一组业务指标的容量需求。一个基本的示例模型：服务 1000 名用户需要 1 台虚拟机。预测显示用户每季度增长 10%，因此虚拟机也必须每季度增长 10%。&lt;/p>
&lt;ul>
&lt;li>您是否有一个将业务指标转换为逻辑容量指标（虚拟机、pods、分片等）的模型？
一个简单的模型示例可能是：“每 1000 名新用户我们需要增加一个 VM-large-1。”
&lt;ul>
&lt;li>该模型是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否验证容量模型的各个方面？
对于上述示例模型：我们如何知道 1000 名用户放在一台 VM-large-1 上是合适的？我们有压力测试吗？
&lt;ul>
&lt;li>验证是否是自动化的？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>该模型是否考虑了资源规格或成本的变化？
例如，不同地点的 CPU 成本效率或可用虚拟机规格的差异。&lt;/li>
&lt;li>实际需求的持续度量是否反馈到容量模型的修订中？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有将业务指标转化为逻辑供给的模型。服务是资源过度配置的（购买并希望使用模型），没有花费大量时间进行容量规划。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>使用简化的经验规则/指导方案，例如每 1000 用户/虚拟机。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>有压力测试，知道可能的扩容时间点。例如，压力测试的数据表明，1200 名用户确实适合在一个虚拟机上。使用经过验证的经验法则。模型验证可能是临时的（未自动化）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>有一个记录在案的服务模型，并定期验证（例如，通过了在发布验证期间的压力测试）。模型简单，维度上存在差距（例如，涵盖 CPU，但不包括带宽）。模型没有考虑不同地点的资源成本/规格差异，例如 CPU 类型、资源成本、虚拟机规格等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>有一个定义良好的模型，将需求单位转化为供给单位组合，并使用实时系统的反馈。制定了改进关键维度的计划。理解并在模型中考虑CPU平台/区域/网络之间的差异。如果存在非线性，则理解非线性。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容量获取">容量获取
&lt;/h3>&lt;p>【Acquiring Capacity】为服务配置额外资源：知道何时何地需要什么资源，了解必须满足的约束条件，并有满足这些需求的流程。&lt;/p>
&lt;ul>
&lt;li>团队每月在资源管理上花费多少总时间？&lt;/li>
&lt;li>获取更多资源的流程是否有明确定义？
&lt;ul>
&lt;li>流程是否有文档记录？&lt;/li>
&lt;li>流程是否自动化？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>资源请求的发起是否由预测程序自动生成？&lt;/li>
&lt;li>您是否知道哪些约束条件决定了服务的位置？
例如，您的服务器是否必须位于特定的云区域（az）或地区（region）？如果是，为什么？您的服务、处理流程和数据存储是否必须共址或在同一区域（az）或地区（region），为什么？您是否有数据区域化要求？
&lt;ul>
&lt;li>这些约束条件是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否监控对这些服务约束的遵守情况？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>资源是手动且临时部署的。系统组件之间的关系没有文档记录。不确定部署的资源是否足够。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>存在服务约束的经验法则（例如数据库和 Web 服务器需靠近），但这些约束没有被度量（未验证）。有定义的资源获取流程，但流程是手动的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>获取资源的过程大部分是自动化的，但何时获取资源仍是手动过程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>系统约束被建模，但缺乏评估。随着时间推移，服务变动可能导致模型中的约束与现实脱节。何时获取资源由预测驱动。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>模型不断评估和维护，即使在服务变动的情况下也是如此。获取容量的位置由模型驱动，获取容量的时间由预测驱动。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容量利用率">容量利用率
&lt;/h3>&lt;p>【Capacity Utilization】监控服务资源的使用情况，理解容量和利用率之间紧密而复杂的关系，设定有意义的利用率目标，并实现这些目标。&lt;/p>
&lt;ul>
&lt;li>您是否为服务定义了任何利用率指标？
例如，现在有多少总资源在使用？&lt;/li>
&lt;li>您是否持续度量利用率？&lt;/li>
&lt;li>您是否有公认的利用率目标？
即，您是否有特定的利用率指标阈值，这些阈值被记录，并认可为所需的最低值，未达到该目标会触发响应处理流程？&lt;/li>
&lt;li>利用率目标是否在驱动服务改进？&lt;/li>
&lt;li>您是否定期审查利用率目标，及服务对该目标的符合情况？
例如，每季度审查一次。&lt;/li>
&lt;li>您是否了解服务的资源瓶颈是什么？
对于上面的示例（每台虚拟机 1000 用户）：如果我们将 1200 用户放在一台虚拟机上，哪个资源会首先耗尽？（CPU、RAM、线程、磁盘等）
&lt;ul>
&lt;li>您能简要描述一下吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否测试新版本的利用率回归情况？&lt;/li>
&lt;li>显著的利用率回归是否会阻止发布？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有定义系统利用率指标。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>定义了利用率指标和目标，但度量是临时的（非持续）。每季度/每年进行。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>持续度量利用率，并定期审查（每月/每季度）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>利用率是发布健康状况的指标（利用率显著回归的新版本会被阻止发布）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>持续评估利用率指标，并用于推动服务改进（例如，保持服务成本的可持续性）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="变更管理">变更管理
&lt;/h2>&lt;p>【Change Management】在保持所需服务行为的同时更改服务行为。示例：金丝雀发布、1% 实验、滚动升级、快速失败回滚、季度错误预算。&lt;/p>
&lt;h3 id="发布过程">发布过程
&lt;/h3>&lt;p>标志、数据和二进制程序文件的变更流程。&lt;/p>
&lt;p>&lt;strong>术语澄清&lt;/strong>
不同上下文中的发布术语可能有所不同，因此在本次评估中我们将使用以下定义。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>服务版本：一组代码、二进制文件和/或配置，封装一个定义明确的服务状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>候选版本：一个用于部署到生产环境的新服务版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布：准备和部署一个新的发布候选版本到生产环境。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>候选版本准备：创建一个可行的候选发布版本。这包括编译和所有测试、分级或在与生产环境接触之前必须进行的其他验证活动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署：转换到新服务版本的过程。例如，将二进制文件推送到其生产位置，并重新启动相关进程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增量部署：以一系列连续逻辑划分的方式结构化地部署到多个生产位置。例如，一次部署到多个不同站点中的一个站点，或者在总共 1000 台虚拟机的环境中，每次在其中的 100 台虚拟机子集进行部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>金丝雀发布：战略性地部署到生产环境的有限子集，以测试版本的可行性，必须满足明确的健康检查才能继续更广泛的部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否有定期的发布节奏？
即，您是否有固定频率执行发布流程？&lt;/p>
&lt;ul>
&lt;li>以下哪项最接近您的发布节奏？
&lt;ul>
&lt;li>构建成功即发布（Push-on-green）&lt;/li>
&lt;li>每日&lt;/li>
&lt;li>每周&lt;/li>
&lt;li>每两周&lt;/li>
&lt;li>每月&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一次典型发布需要多少工程师工时（小时）？
从发布候版本选准备到部署完监控配置结束，总共需要多少人力时间？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布的成功率是多少？
成功的发布通常是指达到完全部署，且不需要回滚或产品补丁的发布。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布成功率是否满足您的业务需求？
例如，发布是否足够可靠，不会阻碍开发进度，或削弱对功能交付的信心？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否有回滚部署的流程？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是不是进行的增量部署？
例如，将新版本先暴露给 1% 的用户访问，然后 10%，然后 50%&amp;hellip;（参见上面的定义。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对版本发布结果，您是否有明确的失败条件检查？
例如，由人类或机器人评估的指标，以查看发布结果是否存在问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否使用金丝雀发布（或一系列金丝雀发布）来验证每次部署？
即，少量真实请求被发送到新版部署，以查看其是否能正确处理，然后再接收所有请求。（参见上面的定义。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布过程的所有部分是否都是自动化的？&lt;/p>
&lt;ul>
&lt;li>哪些部分？
&lt;ul>
&lt;li>发布候选版本准备&lt;/li>
&lt;li>部署&lt;/li>
&lt;li>失败检测&lt;/li>
&lt;li>部署回滚&lt;/li>
&lt;li>金丝雀发布&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>发布过程的所有部分是否都有文档记录？
即，如果您让一个新团队成员执行发布，他们是否能找到，并遵循该过程的说明文档？&lt;/p>
&lt;ul>
&lt;li>哪些部分？
&lt;ul>
&lt;li>发布候选版本准备&lt;/li>
&lt;li>部署&lt;/li>
&lt;li>失败检测&lt;/li>
&lt;li>部署回滚&lt;/li>
&lt;li>金丝雀发布&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>发布没有固定的节奏。发布过程是手动且无文档记录的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>发布过程有文档记录。尝试定期发布。有应对不良发布的流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>拥有自动化的持续集成/持续交付 (CI/CD) 流水线。发布是可预测的，成功率满足业务需求。发布过程设计允许在预先与业务约定的参数范围内，尽量降低对客户的不良影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>完全自动化的发布过程，包括自动化测试、金丝雀发布过程和自动回滚。发布满足业务需求。展示出可在不显著消耗错误预算的情况下，进行回滚的能力。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>标准的质量保证（Q/A）和金丝雀发布过程。发布快速、可预测，且需要最少的人工监督。过程完全按标准操作落地，并可发布完成。自动化的发布验证和测试，全面的与监控集成。健全的回滚和异常处理程序。发布和发布频率符合业务需求。发布过程符合产品需求。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="设计与发布">设计与发布
&lt;/h3>&lt;p>【Design &amp;amp; Launch】通过早期参与、设计审查、引入最佳实践等方式，设计一个成功的服务。&lt;/p>
&lt;ul>
&lt;li>团队是否有重大代码变更的评审流程？
例如，设计评审或发布评审。
&lt;ul>
&lt;li>评审是否自助进行？&lt;/li>
&lt;li>评审是否有特定的批准人？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>团队是否有执行重大变更的最佳实践？
例如，如果您知道您正在发布一个新功能，会添加一个新组件，是否有关于如何以标准方式配置、监控、部署和操作该组件的协议？
&lt;ul>
&lt;li>这些实践是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最佳实践是否是通过代码和/或自动化方式强制执行的？&lt;/li>
&lt;li>是否可以因未遵循最佳实践而拦截发布？&lt;/li>
&lt;li>团队是否有高风险发布的强制性流程？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>团队没有新代码或新服务的设计或评审流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>团队有一个轻量级的引入新组件或服务的评审流程。团队有一套最佳实践，但它们是临时的且记录不完整。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>团队有高风险发布的强制性流程。该流程涉及应用发布的记录最佳实践，可能包括设计/发布审查。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>大多数发布的评审是自助进行的（例如，通过简短的调查，可以触发对边缘情况的审查）。最佳实践通过共享代码模块和调优自动化来应用。团队有记录的重大服务变更流程，这些设计有指定的评审者/批准人。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>最佳实践通过自动化强制执行。允许通过特例申请，来请求忽略最佳实践。包含1-4中的所有内容。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="变更流程自动化">变更流程自动化
&lt;/h3>&lt;p>【Change Process Automation】自动化了与服务运维相关的手动工作。&lt;/p>
&lt;ul>
&lt;li>您是否有变更流程自动化？
即，当需要执行生产操作（如重启一组作业或变更一组虚拟机的配置）时，是否有脚本或其他工具或服务来帮助更安全和轻松地进行变更？&lt;/li>
&lt;li>您的自动化是否使用了“基础设施即代码 (Infrastructure as code)”？
与命令执行（命令式）自动化流程相对的。&lt;/li>
&lt;li>您的自动化是否支持“差异”（diffing）或“干运行 (dry-run)”功能，以便操作员可以看到操作的效果？&lt;/li>
&lt;li>您的自动化是否幂等？&lt;/li>
&lt;li>您的自动化是否具有弹性？
即，很少因服务、政策或基础设施变化而中断。&lt;/li>
&lt;li>您的常规流程是否有文档记录？
例如，如果让新团队成员升级所有虚拟机上的 Linux 版本，他们是否能找到并遵循操作说明？&lt;/li>
&lt;li>您的常规任务中有多少百分比是自动化的？&lt;/li>
&lt;li>您是否有启动或关闭服务的流程？例如，在新的 GCP 区域部署。
&lt;ul>
&lt;li>该流程是否有文档记录？&lt;/li>
&lt;li>该流程是否自动化？&lt;/li>
&lt;li>需要多少工程师工时（小时）？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>团队花费大量时间在操作上，或有一个“运维团队”花费大量时间在操作上。任务记录不足（例如，流程仅特定个人知道，但没有文档记录）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>手动任务有文档记录。高负担任务部分为自动化，并且了解操作时间的花费。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>许多高负担任务已自动化。团队在操作上花费的时间不到一半。自动化不灵活，易受政策或基础设施变化的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>所有高负担任务均已自动化。团队在操作工作上花费的时间少于 20%。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>所有可自动化的任务均已自动化，团队专注于更高层次的自动化和可扩展性。现有自动化可以快速适应服务或政策变化。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="紧急响应">紧急响应
&lt;/h2>&lt;p>【Emergency Response】注意并有效响应服务故障以保持服务符合SLO。示例：值班轮换、主要/次要/升级、操作手册、不幸之轮、告警审查。&lt;/p>
&lt;h3 id="组织值班轮换">组织值班轮换
&lt;/h3>&lt;p>&lt;strong>响应告警&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>您是否有应对重大事件的事件管理协议（流程）？
例如，指定事件经理、启动跨公司通信/沟通、定义其他管理危机的角色。&lt;/li>
&lt;li>您的服务是否有特定情况的操作手册？
操作手册是描述如何响应特定类型故障的文档，例如将服务从一个区域切换到另一个区域。
&lt;ul>
&lt;li>大多数操作手册条目是否提供明确且有效的响应操作？
即，能够减轻问题并帮助诊断或解决原因的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的服务是否有例行遵循的升级流程？
即，如果无法解决问题，是否有流程可以找到并联系能够解决问题的人？
&lt;ul>
&lt;li>升级流程是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一线响应者能否在不求助的情况下解决90%的事件？
例如，事件在不升级到主题专家或同事的情况下解决？&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>值班轮换结构&lt;/strong>&lt;/p>
&lt;p>【Oncall Rotation Structure】关于值班责任的程序和期望，明确识别受过训练的工程师团队，能够可持续地快速响应事件以维护服务的SLO。&lt;/p>
&lt;ul>
&lt;li>您的服务是否有值班/通知触达的轮换？&lt;/li>
&lt;li>您的值班轮换是否有文档记录的响应时间？
响应时间是“到键盘时间”而不是“解决时间”。
&lt;ul>
&lt;li>响应时间是多少分钟？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的值班团队成员是否在轮班时进行交接？&lt;/li>
&lt;li>您的团队是否有将新响应者加入值班轮换的流程？
例如，培训过程、指导、跟班主要响应者。
&lt;ul>
&lt;li>培训材料是否有文档记录？&lt;/li>
&lt;li>您的团队是否有“值班配对”计划，即由有经验的响应者与新响应者配对进行在岗培训？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的团队是否进行“厄运之轮”或其他值班培训演习？
厄运之轮：生产灾难角色扮演，用于培训和审查及维护文档。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>临时支持：尽力而为，仅限白天，无实际轮换，手动告警，无定义的升级流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>有文档记录的轮换和响应时间。告警自动化并与监控集成。培训是临时的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>存在培训流程制度（幸运之轮、值班跟班在岗培训等）。轮换人员充足，但有些告警需要升级到高级团队成员才能解决。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>度量事件的平均修复时间 (MTTR) 和平均检测时间 (MTTD)。轮班之间有交接。大多数事件需要最小的升级（可以由值班人员单独处理）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>每周回顾审查事件并改进策略、交接、班次间的沟通，大多数问题无需升级即可解决，回顾审查轮换的价值和规模，评估范围。建立了事件响应协议。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="告警分析">告警分析
&lt;/h3>&lt;p>【Alert Analysis】回顾审查实际接收到的告警，覆盖现有系统，管理告警的实践和流程，可操作告警的数量，按原因、位置和条件对事件进行分类的能力。&lt;/p>
&lt;ul>
&lt;li>您的告警是否基于监控数据自动化？&lt;/li>
&lt;li>您的团队收到的告警量是否一致？
如果答案为“是”表示大多数值班轮班的告警数量相当。&lt;/li>
&lt;li>您的团队是否有维持告警增长低于线性增长的流程？
即，随着服务数量的增长，是否采取措施来防止告警量成比例的增加？&lt;/li>
&lt;li>您的团队是否有自动化的告警抑制规则或依赖关系，以减少告警数量？
例如，当负载均衡服务器被排空时，该服务器的告警会自动被抑制；或者，细粒度的告警（如特定延迟阈值）可能依赖于粗粒度的“无法访问”告警的静音状态。&lt;/li>
&lt;li>您的团队是否经常忽略或手动抑制任何告警，因为它们噪音大、垃圾多、假告警或不可/无需操作？
例如，是否有某个告警每几天都会触发一次，但通常无需采取任何行动就关闭了？短期内有垃圾告警是可以的，只要在持续修复它们。&lt;/li>
&lt;li>您的团队是否在值班轮班之外花费大量时间处理轮班期间发生的事件？&lt;/li>
&lt;li>您的团队是否有定义的超负荷处理流程，以应对告警触发率达到不可持续水平的时期？&lt;/li>
&lt;li>您的服务是否经历过未被告警初期检测到的重大故障？
即，没有触发任何告警的故障，或只有在通过其他来源发现事件后才触发的告警。&lt;/li>
&lt;li>您的团队是否收集告警统计数据（原因、采取的行动、告警解决方案）以推动改进？&lt;/li>
&lt;li>您是否有定期审查评估会议，审查评估告警或事件以进行模式匹配、发生率、操作手册改进等？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Unmanaged&lt;/td>
&lt;td>Pager 过载，告警被忽略，告警长时间静音，无操作手册，告警量增加或不可预测，事件发生时无告警（手动检测事件）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Managed&lt;/td>
&lt;td>事件率不可持续（值班成员报告过劳）。虚假告警被静音。有操作手册，但指导操作较少。许多告警是“信息性”的，无明确操作。告警量不可预测。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Defined&lt;/td>
&lt;td>大多数告警有明确人类操作的操作手册。告警量在轮班/周之间无显著变化。告警量在可持续水平（由值班团队测量），有处理告警量过载的流程（如开发人员停止开发并致力于可靠性）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Measured&lt;/td>
&lt;td>大多数告警有有用的操作手册条目。几乎所有告警都需深思熟虑的人工反应。定期分析并处理告警主要原因。积极使用告警抑制以消除重复告警和已提醒其他团队的告警。维持服务增长下的低于线性增长的告警量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Continuous Improvement&lt;/td>
&lt;td>识别告警模式，定期审查故障率，修剪告警，审查基本服务故障模式，所有告警需深思熟虑的人工干预，告警操作手册提供适当的调试入口。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="事后复盘分析">事后复盘分析
&lt;/h3>&lt;p>【Postmortems】撰写事后复盘分析的制度，格式和行动项目，以及后续行动的期望。通过根本原因分析和发现结果推动服务可靠性改进的实践。&lt;/p>
&lt;ul>
&lt;li>您的团队是否有事后复盘分析流程？
事后复盘分析也称为事件回顾、回顾。&lt;/li>
&lt;li>事后复盘分析流程是否仅针对大型/重大事件？&lt;/li>
&lt;li>您的事后复盘分析流程是否会为团队生成行动项目？
&lt;ul>
&lt;li>您的团队是否有优先处理并完成事后复盘分析行动项目的流程？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大多数事件是否进行了彻底的根本原因分析，并有明确的结果？&lt;/li>
&lt;li>您的服务是否有优先修复或减轻已识别根本原因的流程？&lt;/li>
&lt;li>以下哪些是您的事后复盘分析流程的一部分？
&lt;ul>
&lt;li>检测时间
从事件发生到检测到的时间。&lt;/li>
&lt;li>修复时间
从事件发生到解决的时间。&lt;/li>
&lt;li>以上均无&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的公司是否有在组织/团队之间共享事后复盘分析的流程？&lt;/li>
&lt;li>您的公司是否收集事后复盘分析元数据（如根本原因分类，MTTR，MTTD）？
MTTD：平均检测时间。事件从发生到检测的平均时间。
MTTR：平均修复时间。事件从发生到解决的平均时间。
&lt;ul>
&lt;li>您的公司是否有使用这些数据识别问题区域的流程？
例如，是否对数据进行分类和/或汇总以识别故障模式或高风险服务方面，以指导风险缓解投资？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的团队或公司是否有事后复盘分析流程的所有权或审核周期？
即，是否有人标准化格式并定期评估其有效性和价值？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Unmanaged&lt;/td>
&lt;td>无跟进或系统错误识别，无根本原因分析，事件得到控制但未分析，同类事件不断发生，未识别长期趋势。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Managed&lt;/td>
&lt;td>有定义的事后复盘分析流程和行动项目，但行动项目跟进差（仅处理 P0 项目）。根本原因分析（RCA）不足（“为什么”问得不够多）。由于行动项目跟进不力或 RCA 不充分，类似事件重现。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Defined&lt;/td>
&lt;td>事后复盘分析流程应用于所有重大事件（包含行动项目）。优先处理 P0 级别的行动项目。RCA 广泛且正确归因于大多数事件的根本原因。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Measured&lt;/td>
&lt;td>事后复盘分析附有注释元数据以促进分析。事后复盘分析结果在受影响团队之间广泛分享，从错误中学习。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Continuous Improvement&lt;/td>
&lt;td>所有行动项目及时完成，由相关团队和其他团队审查以便学习，识别问题区域，有流程确保行动项目完成，标准化格式，审查事后复盘分析流程以评估其价值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>❤️ Photo by PNW Production: &lt;a class="link" href="https://www.pexels.com/photo/a-black-calculator-near-a-ruler-8250929/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/a-black-calculator-near-a-ruler-8250929/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第七章 总结与展望</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch7/</link><pubDate>Sat, 06 Jul 2024 12:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch7/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch7/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第七章 总结与展望" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们探讨了事故的基础知识，并详细了解了事故管理生命周期的三个阶段：准备、响应和恢复。这涵盖了很多内容，但你现在可能会想，“接下来该怎么做？”&lt;/p>
&lt;p>首先，要学会在适当的时候使用事故管理。事故响应需要大量人力资源。通常需要一个或多个人参与其中，从最初的告警，到问题解决的整个过程中。事故响应的目的是在问题发生时实施缓解措施，以争取时间来做出优先级决策。这意味着常规的产品修复可能会被推迟，长期计划和改进可能不会被优先考虑。事故响应可能导致服务质量目标 (SLO) 被违反或客户承诺无法履行，并且参与事故响应的员工都会感受到较大压力。&lt;/p>
&lt;p>有研究表明，现实世界中的第一事故响应者更容易出现倦怠和疲劳；同样的趋势也适用于处理非现实事故的人——即那些工作与生活不平衡、活动极端或可能缺乏控制的员工。这些因素在技术事故管理工作中很常见，意味着员工可能会感受到倦怠的影响和职业后果。这里的风险包括，最好的情况下是工作表现不佳，最坏的情况下是员工流失。由于这种倦怠产生的相关风险，公司必须尽量做好事故管理，并尽可能减少事故管理的频率。&lt;/p>
&lt;p>你的下一个行动是将&lt;strong>事故管理&lt;/strong>视为一项关键运维学科，并努力在这方面取得出色的表现。那么，什么是“擅长”事故管理呢？这意味着你的团队（而不仅仅是个别人员）需要积极改进这一循环的所有部分。虽然这听起来不像是：有几个超级英雄消防员冲了进来，他们拯救世界的场景那么戏剧化，但英雄主义心态是有害的。缓慢而仔细地改进事故准备，开发响应事故的工具、技术和通信渠道，并优先考虑可持续和可扩展的工程工作，才是强大事故管理实践的核心。&lt;/p>
&lt;p>通过将所有内容视为一个连续且相互关联的循环，每个人都变得重要，并且可以避免将责任归咎于任何一个人或系统组件。无责文化的实践营造了一个心理安全的工作环境，让员工能够在其中蓬勃发展，并创造出色的产品。这些方法帮助谷歌度过了最近全球历史上的巨大不确定时期，也可以帮助提高贵公司的韧性。&lt;/p>
&lt;p>总体而言，不要将事故管理应用于每一个潜在问题或类型问题。谨慎而合理地使用事故管理，以避免让团队成员感到倦怠。当你完成事故管理时，停止管理事故，开始进行解决长期问题或风险所需的工程工作。识别并使用其他可能有用的工具。&lt;/p>
&lt;h2 id="进一步阅读">进一步阅读
&lt;/h2>&lt;ul>
&lt;li>来自《Google SRE 工作手册》的监控 &lt;a class="link" href="https://sre.google/workbook/monitoring/" target="_blank" rel="noopener"
>https://sre.google/workbook/monitoring/&lt;/a>&lt;/li>
&lt;li>来自《Google SRE 工作手册》的事故响应 &lt;a class="link" href="https://sre.google/workbook/incident-response/" target="_blank" rel="noopener"
>https://sre.google/workbook/incident-response/&lt;/a>&lt;/li>
&lt;li>来自《Google SRE 工作手册》的事后分析文化：从失败中学习 &lt;a class="link" href="https://sre.google/workbook/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/workbook/postmortem-culture/&lt;/a>&lt;/li>
&lt;li>事后分析行动项目：计划工作并执行计划 &lt;a class="link" href="https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/" target="_blank" rel="noopener"
>https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/&lt;/a>&lt;/li>
&lt;li>使用 SRE 原则减少生产事故影响——CRE 实战经验 &lt;a class="link" href="https://cloud.google.com/blog/products/devops-sre/shrinking-the-impact-of-production-incidents-using-sre-principles-cre-life-lessons" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/devops-sre/shrinking-the-impact-of-production-incidents-using-sre-principles-cre-life-lessons&lt;/a>&lt;/li>
&lt;li>缩短生产事故缓解时间——CRE 实战经验 &lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考书目">参考书目
&lt;/h2>&lt;ul>
&lt;li>“Google Data Center FAQ”。《Data Center Knowledge》，2017 年 3 月 19 日。&lt;a class="link" href="https://www.datacenterknowledge.com/hyperscalers/google-data-center-faq" target="_blank" rel="noopener"
>https://www.datacenterknowledge.com/hyperscalers/google-data-center-faq&lt;/a>&lt;/li>
&lt;li>Aleksandra. “63 Fascinating Google Search Statistics”。《SEOtribunal》，2018 年 9 月 26 日。&lt;a class="link" href="https://seotribunal.com/blog/google-stats-and-facts/" target="_blank" rel="noopener"
>https://seotribunal.com/blog/google-stats-and-facts/&lt;/a>&lt;/li>
&lt;li>“Incident Command System Resources”。美国联邦紧急事务管理局，美国国土安全部，2018 年 6 月 26 日。&lt;/li>
&lt;li>Beyer, Betsy, Chris Jones, Niall Richard Murphy 和 Jennifer Petoff 编辑。 《Site Reliability Engineering: How Google Runs Production Systems》。O’Reilly Media，2016 年。&lt;/li>
&lt;li>“Data Access and Restrictions”。《Google Workspace Security Whitepaper》，2021 年 10 月。 &lt;a class="link" href="https://workspace.google.com/learn-more/security/security-whitepaper/page-7.html" target="_blank" rel="noopener"
>https://workspace.google.com/learn-more/security/security-whitepaper/page-7.html&lt;/a>&lt;/li>
&lt;li>Treynor Sloss, Benjamin. “An Update on Sunday’s Service Disruption”。《Inside Google Cloud (博客)》，Google Cloud，2019 年 6 月 3 日。 &lt;a class="link" href="https://cloud.google.com/blog/topics/inside-google-cloud/an-update-on-sundays-service-disruption" target="_blank" rel="noopener"
>https://cloud.google.com/blog/topics/inside-google-cloud/an-update-on-sundays-service-disruption&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="致谢">致谢
&lt;/h2>&lt;p>作者感谢 Jennifer Mace, Hazael Sanchez, Alexander Perry, Cindy Quach 和 Myk Taylor 对本报告的贡献。&lt;/p>
&lt;h2 id="作者简介">作者简介
&lt;/h2>&lt;p>&lt;strong>Ayelet Sachto&lt;/strong> 是 GKE SRE 的站点可靠性工程师，曾在 Google UK 担任战略云工程师，并领导 EMEA 地区的 PSO-SRE 项目。在她 17 年的职业生涯中，她开发和设计了大规模应用程序和数据流，同时实施了 DevOps 和 SRE 方法。她是众多技术文章、演讲和培训的作者，包括 O’Reilly 课程 “SRE Fundamentals in 3 Weeks”，并在数十个会议上发言和领导了数百个工作坊。Ayelet 还是技术社区的积极成员和导师。在空闲时间，她喜欢创造各种东西，无论是厨房中的一道菜、一段代码，还是有影响力的内容。&lt;/p>
&lt;p>&lt;strong>Adrienne Walcer&lt;/strong> 是谷歌 SRE 的技术项目经理，专注于提高弹性，减少大规模事故对谷歌服务、基础设施和运营的影响。Adrienne 曾为谷歌的 O’Reilly 出版物 《A Practical Guide to Cloud Migration》作出贡献，并在最后一次 USENIX LISA 会议 (LISA21) 上就规模化事故管理发表演讲。在加入谷歌之前，Adrienne 曾在 IBM Watson Health (前身为 Explorys Inc.) 担任数据科学家，并在 Strong Memorial Hospital 和 Cleveland Clinic 从事生物统计工作。她拥有乔治华盛顿大学的系统工程硕士学位和罗切斯特大学的学士学位。在空闲时间，Adrienne 喜欢玩龙与地下城游戏，并在 Second Harvest 食品银行做志愿者。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第六章 真实事故案例：玛雅末日事件</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch6/</link><pubDate>Fri, 05 Jul 2024 12:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch6/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch6/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第六章 真实事故案例：玛雅末日事件" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>为了看到前文所讨论的一些原则在实践中的应用，我们将深入探讨一个谷歌重大宕机事故的现实例子。我们将回顾事件的经过，了解规模化组织结构的运作方式，并展示如何解决这个问题以及我们从中学习到的经验。&lt;/p>
&lt;p>对于谷歌来说，玛雅末日并不是2012年的新纪元现象。相反，玛雅末日发生在2019年6月2日，与一个名为Maya的网络自动化工具有关。Maya负责标记管理和网络流量调度，一个微小的代码改动导致了实体类型持续被错误标记。&lt;/p>
&lt;p>大约在中午，我们正在进行计划中的维护，确定了一系列将在多个服务器上运行的操作和配置变更（包括在Maya上）。当这个错误标记与我们的作业调度逻辑冲突时，我们“发现”了一种新的故障模式，与流量调度相关的作业被大规模取消调度。出入这些区域的网络流量试图将重新调度的任务塞入剩余的网络容量中，其中流量调度功能仍然有效，但最终未能成功。网络变得拥挤，我们的系统正确地对流量过载进行了分级，并自动排空了较大、对延迟不敏感的流量，以保留较小、对延迟敏感的流量。&lt;/p>
&lt;p>流量拥塞开始了。结果，我们的监控系统启动了事故管理流程的第一步：告警。当组件响应者从监控系统收到告警时，这反映了其负责的系统中发生的变化。我们的监控系统注意到错误率阈值被突破了，并向负责该网络组件的值守人员发送了自动通知，值守人员开始评估情况。&lt;/p>
&lt;p>与此同时，受影响区域的网络容量减少导致溢出，这种网络拥塞引发了我们网络和计算基础设施中的级联故障。总体来说，我们的网络优先考虑用户流量高于内部流量，包括员工的流量。这实际上是合理的，因为我们宁愿从无法解决问题的99.9%的员工那里重新分配容量，并尽最大努力为我们的用户服务。参与事故响应的0.1%的员工通常知道如何继续处理并绕过这个限制。但是，这次级联故障的一个影响是我们的内部工具出现了重大中断，扰乱导致了大量告警的发送，导致大量人收到了呼叫短信。当每个值守人员都切换到事故响应模式时，他们注意到了：由于网络问题导致的服务不可用。网络组件值守人员迅速确定了网络拥塞的原因，但同样的网络拥塞导致服务降级，也减缓了他们恢复正确配置的能力。&lt;/p>
&lt;p>每个人都想尽最大努力支持他们的用户，并了解服务恢复的预期轨迹，因此原本负责网络组件的值守人员团队突然新加入了很多同事。&lt;/p>
&lt;p>我们在谷歌将组件分为三类：&lt;/p>
&lt;ul>
&lt;li>基础设施组件，如网络管道或存储服务。&lt;/li>
&lt;li>产品服务组件，如 YouTube 流媒体或 Google 搜索的前端。&lt;/li>
&lt;li>内部服务组件，如监控、零信任远程访问、Maya 和算力管理。这些内部服务组件都在经历困难。&lt;/li>
&lt;/ul>
&lt;p>由于网络具有广泛的依赖性，所以在网络组件值守人员解决完问题之前，其他人都无法继续工作。其他值守人员开始提供帮助，并询问他们的服务何时能开始恢复。很多不同响应者预期的并行性，并没有加速问题的解决。根本原因和次生效应开始变得模糊不清；一个团队的原因是另一个团队的结果，每个人都在尝试贡献他们的知识。虽然每个人都是其系统栈的专家，但大多数人都没有对整体系统全面的大局观，不知道哪些工具路径变得不可用。&lt;/p>
&lt;p>为什么？未触及拥堵网络的路径是正常的。如果路径在那时看起来像外部用户，则拥堵网络的路径也是正常的，因为我们优先考虑了它们。因此，我们向外部用户提供的服务是可用的——例如视频通话或编辑文档。然而，如果路径是内部服务，如作业控制或 Maya 配置，它就被降级并卡住了。&lt;/p>
&lt;p>我们都在观看此次火山爆发，然而，在 20 分钟后，我们得出了问题的结论 “可能与熔岩有关。”&lt;/p>
&lt;p>宕机一小时后，一位组件响应者注意到，影响我们基础设施的系统级问题过于普遍，围绕事故的协调沟通变得混乱不堪。此时，已有超过40位队友加入了事故响应通信频道，试图提供帮助。监控数据显示出：当前事故影响了半个地球。Google Cloud、Gmail、Google Calendar、Google Play等服务都受到了影响——导致企业都无法运作，大量员工无法高效工作，人们无法相互沟通。一些员工试图使用那些不依赖受损网络的零星服务，而另外的人们都已经放弃了。&lt;/p>
&lt;p>近40人卷入了本次事故，网络英雄并没有足够的时间和精力，用来制定和协调实施适当的缓解措施，向所有利益相关者广泛沟通，并管理各方期望。因此，他们进行了升级。我们的网络组件值守人员向技术事故响应团队（Tech IRT）发出了求助请求；他们的请求触达到了许多处于合适工作时段时区里的Tech IRT成员，能够处理事故的成员表示了他们的可用性。由于事故影响如此广泛，许多人已经参与了事故。一些Tech IRT响应者没有担任事故指挥官的角色，因为他们是处理网络问题的团队成员或经理，可以帮助解决主要根本原因，所以他们选择了协助操作的工作。&lt;/p>
&lt;p>接受事故指挥官角色的 Tech IRT 的成员，以前没有处理过受故障影响的网络组件，但他们能够评估系统状态和响应人员的情况。利用他们的训练有素，这位指挥官运用一种机制访问到了生产系统，该机制立即将他们的行动标识为“事故响应”，并绕过了“内部流量降级”的标志。一旦内部流量得到了一些空间，他们就指挥网络值守人员开始介入并解决问题。&lt;/p>
&lt;p>在此过程中，他们迅速对正在进行的沟通，以及所有试图“提供帮忙”的人进行了组织和结构化。一旦这种混乱的工程能量被组织起来之后，每个人都开始一起取得到了进展。他们能够更清楚地跟踪不同系统的当前状态，并看到缓解措施的实施速度。随着这些繁琐的管理工作不再让网络组件响应者们不堪重负，他们和他们的团队有了实施适当缓解计划的空间，包括丢弃大量负载，为健康重启和一些紧急强行配置变更腾出系统空间。&lt;/p>
&lt;p>一旦开始步入了缓解事故的路径，Tech IRT 成员就专注于将事故推向结束。他们设定了一些退出标准，以便我们可以关闭事故，确保其他系统在任何需要执行的恢复操作中得到支持，然后确保被卷入的响应团队都能够顺利交接并离场。&lt;/p>
&lt;p>事故结束后，服务都恢复正常，我们进行了深入的事后分析复盘，以分析事故，并理解根本原因的细微之处，以及这些故障模式所揭示的新兴属性。自那以后，参与的网络团队已经开展了一些非常酷的工作计划，重新构建了 Maya，来防止这种故障模式，以及类似的，但以前未考虑到的故障模式，预防它们再次困扰我们的系统。&lt;/p>
&lt;p>最后，我们用内部的个人档案徽章、荣誉性的表情包和奖金等方式奖励了相关参与的人员。对大多数人来说，这次非常严重的事故，是他们职业生涯中最艰苦的一天。也为每个参与事后分析复盘的人提供一些小奖励，是他们帮助我们从中得到学习，让我们持续的增长韧性。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第五章 事后复盘分析及其应用</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch5/</link><pubDate>Sun, 30 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch5/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第五章 事后复盘分析及其应用" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在前一章中，我们介绍了几种减小客户影响的方法，包括技术和人员方面，因为两者都会影响检测时间、缓解/恢复时间和故障间隔时间。在本节中，我们将讨论事故结束后的工作：撰写事后复盘分析，并将其作为强大的工具来分析问题并从错误中学习。&lt;/p>
&lt;p>在事故结束后，应该确保集中精力在如何减少未来的事故上？为了解决这个问题，我们建议采用数据驱动的方法（图 5-1）。这些数据可以来自风险分析过程，或者是我们之前提到的度量数据。依靠从事后复盘分析中收集的数据，以及对之前影响客户的事故的学习非常重要。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40.webp"
width="1245"
height="612"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40_hu_7136f05f85dc06fa.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40_hu_38e33d0a6a8d384d.webp 1024w"
loading="lazy"
alt="图 5-1. 你应集中精力的地方"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>一旦你积累了足够多的事后复盘分析，就可以识别出模式。让事后复盘分析成为你的指南非常重要；在失败分析上的投资可以引导你走向成功。为此，我们建议创建一个共享库，并在内部团队中广泛分享事后复盘分析。&lt;/p>
&lt;h2 id="心理安全">心理安全
&lt;/h2>&lt;p>在谈论事后复盘分析时，不可避免地要讨论心理安全(Psychological Safety)。因此，在深入探讨撰写事后复盘分析的细节之前，我们先来谈谈事故管理文化中固有的心理安全，并讨论早期升级的价值。&lt;/p>
&lt;p>如果客户受到影响，应该尽快解决问题。如果组织内的人们不觉得升级或扩大事故规模是安全的，那么问题就难以解决。如果公司环境阻止人们质疑，或因升级事故而受到惩罚，响应者可能会犹豫是否质疑。如果是这样，事故只会在改善之前变得更糟。&lt;/p>
&lt;p>失败是正常的，需要接受这一点。这就是为什么实施 SRE 原则需要支持性和赋权文化的原因。关键在于理解，在不断通过新功能和系统改进服务的过程中，事故和中断是不可避免的。因此，如果不从事故中学习，就错失了改进的机会。正如合气道创始人植芝盛平所说：“失败是成功之钥，每一个错误都教会我们一些东西。”&lt;/p>
&lt;p>将运维问题视为软件工程问题，当事情出错时（而且确实会出错），要寻找的是系统中导致问题的缺陷。你要改进系统，以帮助避免人为错误。&lt;/p>
&lt;blockquote>
&lt;p>人类永远不是事故的原因，而是“允许”事故发生的系统和流程。&lt;/p>&lt;/blockquote>
&lt;p>如果发生了中断，那是系统的错误，而不是人类的错误，因为人为错误是不可避免的。目标不是消除人为错误。【译者注：带有缺陷的系统导致了人为错误，或者人类遭遇到了事故；这里我们要把人的原因摘除的干干净净，这一点需要依靠大家构建心理安全的企业团队文化。】&lt;/p>
&lt;h3 id="实施事故管理实践时的心理安全">实施事故管理实践时的心理安全
&lt;/h3>&lt;p>实施事故管理实践是一项组织变革，需要一些文化前提条件才能让团队从错误中创新和学习。拥有心理安全和无责流程是至关重要的。(Psychological Safety When Implementing Incident Management Practices)&lt;/p>
&lt;blockquote>
&lt;p>心理安全是一种信念，即谁不会因为提出想法、问题、质疑、担忧，或遭遇到了错误而受到惩罚或羞辱。
——艾米·埃德蒙森，哈佛商学院诺华教授，领导力与管理学博士&lt;/p>&lt;/blockquote>
&lt;p>心理安全促进了绩效导向型组织的一些主要特征，特别是将失败视为学习机会和接受新想法。例如，Westrum 的组织文化模型预测了基于心理安全的软件交付绩效：生机型组织比其他两种类型更有可能成为顶级绩效者。&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>具有较高心理安全的团队更能利用成员多样化的想法，销售目标超额完成17%（相比之下，不安全的团队错失目标19%），并且被高管评为有效的概率是其两倍。&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="处理事故时的心理安全">处理事故时的心理安全
&lt;/h3>&lt;p>在风险管理中，每个人都知道自己可以表达意见和识别问题，而不会受到惩罚或嘲笑，这是至关重要的。当发生事故时，必须报告并宣告为事故【译者注：声明发生了事故，开始进入事故应急管理流程】。在事故期间，可能需要分享以前事故的信息，如果这样做可以揭示过去的错误（这与无责原则有关）。你还可能需要将事故移交给下一位值班工程师，并提出改进内部流程、工具和功能的建议。&lt;/p>
&lt;p>没有心理安全和无责原则，人们会避免提出可能揭示事故根本原因的正确问题。因此，团队无法学习或创新，因为他们忙于管理形象，并且害怕承担个人后果。&lt;/p>
&lt;p>为了在团队中培养心理安全和无责原则，关注学习机会：将每次事故视为学习机会，鼓励多样化的观点，邀请每个人（尤其是那些发表不同意的人）表达意见和想法。作为领导者，你还应该承认自己的不足【译者注：没有人是全知全能和权威的，大家都要从发问，和假设开始分析故障】，通过提问来展示好奇心。&lt;/p>
&lt;p>&lt;strong>不归咎于个人&lt;/strong>&lt;/p>
&lt;p>无责原则和心理安全是相辅相成的，一个可能自然导致另一个。假设发生了一次中断。如果经理问的第一个问题是“是谁造成的？”，这会造成一种互相指责的文化，使团队害怕冒险，从而阻碍创新和改进。相反，你应该提倡无责原则：&lt;/p>
&lt;blockquote>
&lt;p>无责原则是将责任从个人转移到系统和流程上。&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;p>指责文化会妨碍人们迅速解决事故和从错误中学习的能力，因为他们可能会隐藏信息，避免因害怕受罚而宣告事故。而无责文化允许你专注于改进。你要假设个人是出于善意行事，并根据现有的最佳信息做出决策。调查误导性信息的来源对组织比归咎于人更有益。因此，支持团队的设计和维护决策，鼓励创新和学习，当事情出错时，关注系统和流程，而不是个人。&lt;/p>
&lt;p>&lt;strong>从错误中学习&lt;/strong>&lt;/p>
&lt;p>错误是宝贵的学习和改进机会，但前提是正确识别错误的程序性和系统性原因。例如，在谷歌，Ben Treynor Sloss 发送季度工程报告《谷歌的成与败》，以培养一种能够从错误中学习的赋权文化。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="促进心理安全环境的其他提示">促进心理安全环境的其他提示
&lt;/h3>&lt;p>事故响应者需要一定的信心才能有效应对事故。尽管他们可能处于压力大的情况下，但在处理事故时，响应者必须感到心理安全。&lt;/p>
&lt;p>这种心理安全涉及多个层面：&lt;/p>
&lt;p>&lt;strong>来自队友&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>响应者不应该担心他们的行为会被同伴评判，尤其是在犯错误时。&lt;/li>
&lt;li>说“我需要帮助”应该得到奖励，而不是质疑或责备。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自合作团队&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>有些团队可能会觉得 X 团队的成员有居高临下的坏名声，因此不愿与他们交流。更糟糕的是，有些团队接受这种文化，或者利用它来避免与其他团队互动。&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>这种态度不应被容忍——它会增加紧张情绪，并延缓事故响应。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自管理层 (From management)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>经理负责团队的心理安全。在事故期间，经理通常不做技术工作，而是专注于确保团队的福祉——观察压力和倦怠的迹象，也许在团队处理事故时订购披萨。有时经理可能只是简单地对事故响应者说，“休息五分钟，清理一下头脑。”&lt;/li>
&lt;li>经理也可以在获取组织其他部分的额外帮助方面发挥重要作用。&lt;/li>
&lt;li>经理为团队提供与组织其他部分之间的缓冲，并在发生冲突时介入解决。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自组织 (From the organization)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>心理安全只有在组织文化中得到认可时才能蓬勃发展。应该有一种无责文化，重点是修复导致事故的流程。&lt;/li>
&lt;li>业界有诸如“三振出局”政策，这种政策要求对涉及三次影响生产的错误的个人进行解雇或严厉的训诫。虽然这种政策旨在鼓励响应者在事故期间格外小心，但它往往导致响应质量降低（“我不想成为那个做出错误决定的人”）、推卸责任（“我们没有弄坏它，是另一个团队弄坏的”）或隐藏有价值的信息（“不要透露我们已经知道这个问题的事实”）。&lt;/li>
&lt;li>如果领导者希望他们的团队——以及整个组织——蓬勃发展，他们必须培养一种尊重、信任和协作的文化。这必须从组织的高层开始。&lt;/li>
&lt;/ul>
&lt;p>如前所述，心理安全环境的一个明显好处是缩短了升级时间。如果一个组织接受协作文化，事故响应者更有可能寻求额外的帮助，无论是来自自己的团队还是公司中的其他团队。&lt;/p>
&lt;p>在审查事故时，一个反复出现的主题总是“如果我们早些升级，就可以节省 $XXX 的收入损失”，即使是在拥有健康、心理安全环境的团队/组织中。对于事故响应者来说，请求帮助很难，因为这可能被视为软弱或准备不足的表现。我们被训练去隐藏不安全感（即使是感知到的不安全感），并且通常被教导要成为英雄，全力以赴为团队贡献。这些行为在事故响应中实际上是负担，一个不堪重负或疲惫的响应者更容易犯错。因此，升级应该是廉价且快速的，不应有任何附加条件。始终假设最好的意图。如果事实证明升级是不必要的，找出为什么会发生升级，可能是因为文档不完整或缺失，并修复有缺陷的流程。&lt;/p>
&lt;p>事故响应者应该高度警惕尝试独自完成所有工作的倾向，而是应该尽早且频繁地升级。在谷歌的一个事故响应团队中，有一句格言：“我们告诉其他团队，我们不介意被频繁呼叫，但我们仍然没有被足够频繁地呼叫。”&lt;/p>
&lt;h2 id="撰写事后复盘分析">撰写事后复盘分析
&lt;/h2>&lt;p>现在我们已经深入讨论了心理安全，让我们转向撰写事后复盘分析。当事情出错时，这是你从中学习并改进未来的机会。虽然“糟糕的工程师”可能会想“希望没人看到”，但优秀的工程师会注意到问题并想“太好了！告诉大家！”这就是撰写事后复盘分析的意义所在。&lt;/p>
&lt;p>撰写事后复盘分析是一种系统分析形式：它是深入研究导致事故的故障，并识别改进工程和工程流程的过程。撰写事后复盘分析不仅仅是一种额外的实践，而是一种在服务中实践系统工程的核心方式，以推动改进。&lt;/p>
&lt;p>在撰写事后复盘分析时，创建一个无责文化和假设事故会发生的流程是很重要的。如前所述，防止失败很重要，但要意识到日常失败是不可避免的，特别是在大规模系统中。事故为你和你的团队提供了共同学习的机会。事后复盘分析是你们集体从错误中学习的系统解决方案，并帮助分享这些知识，以及从他人的错误中学习——例如，通过阅读他人的事后复盘分析。&lt;/p>
&lt;p>事后复盘分析提供了一种正式的从事故中学习的过程，以及一种防止和减少事故、其影响和复杂性的机制。例如，你可能会学到避免使用补丁作为永久解决方案。事后复盘分析突出趋势并优先考虑你的努力。它们应该是无责的——这可以防止关于问题、谁做了什么以及谁可能有错的侧面讨论。事后复盘分析不是为了归咎于谁，而是专注于从事故中学到了什么以及未来的改进。&lt;/p>
&lt;p>每个事后复盘分析都应该包括一些信息。例如，好的事后复盘分析包括明确的行动项（AI action item），以及这些行动项的负责人和截止日期。记住，这不是为了归咎，而是为了增加责任感，消除模糊性，并确保行动得到跟进。此外，重要的是要有一个清晰的时间线，包括中断开始时间、问题检测时间、升级时间（如果适用）、缓解时间（如果适用）、影响和中断结束时间。如果发生了升级，说明为什么以及如何发生的。为了避免混淆，澄清事故和中断的术语，以及事故开始和事故检测的术语。我们建议在事故发生期间保持一个“实时文档”，作为调试和缓解的工作记录，稍后可以用于事后复盘分析。该文档有助于正确记录时间线，并确保不会遗漏重要的行动项。&lt;/p>
&lt;p>在事后复盘分析中避免责备性语言，并实践心理安全。以身作则，问很多问题，但绝不要寻求归咎于谁。这是关于理解事件的现实、采取的行动以及未来如何防止重发。&lt;/p>
&lt;p>谷歌的最佳实践是将事后复盘分析分享给可能受益于所传授教训的最大范围受众。透明的分享使他人能够找到事后复盘分析并从中学习。&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们发现，建立一种无责的事后复盘分析文化会带来更可靠的系统，并且对于创建和维护一个成功的 SRE 组织至关重要。&lt;/p>
&lt;h3 id="用于组织改进的系统分析">用于组织改进的系统分析
&lt;/h3>&lt;p>我们已经讨论了无责的事后复盘分析，并提到事后复盘分析是一种系统分析形式。然而，你是否真正深入了解你的系统，充分理解发生了什么以及为什么？事件应该被分析以得出结论，而不仅仅是叙述。事故之后或在事后复盘分析中，分析的深度在于是否对事件和系统各方面进行了深入分析，以揭示和解释结论。这很重要，因为它增加了团队在事故之后解决正确问题的概率。&lt;/p>
&lt;p>在撰写事后复盘分析时，你应该力求对系统有最完整和准确的了解，以确保所做的修复是正确的。在图 5-2 中，标有“你认为的问题是什么”的圆圈反映了你在事故期间对系统的理解——这是你能控制的部分。标有“实际问题是什么”的圆圈反映了事故期间系统的实际状态。在复杂技术生态系统中，理解所有细微差别是极其困难的（实际上，我们曾有一位高级工程师花了整整一个月时间来理解一个20分钟的事故！）。然而，事故之后的分析越深入，圆圈的重叠部分越大，你越接近理解根本问题（图 5-3）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31.webp"
width="1247"
height="699"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31_hu_99afd28ae6a68146.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31_hu_58be278e8802a5a8.webp 1024w"
loading="lazy"
alt="图 5-2. Venn 图显示理解与事实之间的差距"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45.webp"
width="1245"
height="873"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45_hu_193515d14bc5f402.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45_hu_d420c66178ff35cc.webp 1024w"
loading="lazy"
alt="图 5-3. Venn 图显示系统分析的好处"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>即使事故已经缓解，系统再次稳定，理解真正的问题仍然重要。这涉及可操作性——即你在事故之后有能力修复或更改的内容。事故后的系统增量改进有助于随着时间的推移建立恢复力。这是第三个重要的圆圈，代表你可以控制并可以实施修复的系统中的事物（图 5-4）。这个圆圈无法移动，因为总有一些你无法控制的事情会影响系统的健康（例如天气、地球的大小、光速）。&lt;/p>
&lt;p>在中心的那个小交集（在集合理论中表示为 1 ∩ 2 ∩ 3）是你团队在事故之后可以做的最好的工作。“你认为的问题是什么”和“你能修复什么”的重叠部分 [(1 ∩ 3) – 2] 是危险的：这些是你认为在长期内会有帮助但实际上不会解决真正问题的解决方案。你可能正在解决与主要问题相关的某些事物，或者你可能正在处理另一个隐藏问题的表现症状。假设你已经解决了一个实际上没有解决的问题是一个危险的境地——因为缺乏对这一风险的认识，这种情况变得更加严重。如果特定事故再次发生，你将面临客户信任的降低和本可以更有效利用的时间的浪费。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15.webp"
width="1245"
height="1184"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15_hu_faae8c44895b2d0b.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15_hu_9c775b9366ea7237.webp 1024w"
loading="lazy"
alt="图 5-4. Venn 图显示工程工作与系统分析的相互作用"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>通过更深入的系统分析，中心的那个小片段（1 ∩ 2 ∩ 3）在两个不动的圆圈中被最大化（图 5-5）。换句话说，你正在最大化你优先考虑的修复措施的有效性。如果你想确保你正在针对正确的问题，移动圆圈是值得的。关键是要在系统分析上投入足够多的时间，以便你和你的团队能够以高概率选择最适合的工程项目来提高系统的恢复力。但要注意收益递减——例如，花一个月时间调查每一次中断并不是明智的资源使用。在以下部分中，我们提出了一些关键点，可能有助于思考如何移动圆圈。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35.webp"
width="1244"
height="1183"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35_hu_107cc438fefb89d6.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35_hu_510ebc5b952091fd.webp 1024w"
loading="lazy"
alt="图 5-5. Venn 图突出工程工作与系统分析之间的相互作用"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h3 id="根本原因与触发因素">根本原因与触发因素
&lt;/h3>&lt;p>让我们从两个关键术语开始：根本原因和触发因素。&lt;/p>
&lt;p>&lt;strong>根本原因 (Root cause)&lt;/strong>&lt;/p>
&lt;p>系统中的潜在危险，或者系统为什么变得脆弱。危险可能在系统中存在无限期——系统环境需要某种变化，才能将这种危险转化为中断。明确一点：在复杂系统中，事故很少只有一个根本原因。熟练的从业者认为，事故的根本原因是相互作用的一系列因果因素，导致危险状态。&lt;/p>
&lt;p>&lt;strong>触发因素 (Trigger)&lt;/strong>&lt;/p>
&lt;p>使根本原因转变为事故的情况。这是相关但独立的概念！为了防止中断再次发生，有时重要的是解决根本原因。有时更合理的做法是围绕这些触发因素建立预防措施。&lt;/p>
&lt;p>根本原因和触发因素共同作用造成了事故。当然，这是一种简化的说法。借用医学术语，根本原因与触发条件相互作用，产生了结果情景（即事故）。在复杂系统中，根本原因和触发因素与事故类型之间并不存在一一对应的关系，复杂性使得各种结果都有可能发生。让我们来看一些例子：&lt;/p>
&lt;p>房屋火灾&lt;/p>
&lt;ul>
&lt;li>根本原因：煤气泄漏&lt;/li>
&lt;li>触发因素：靠近漏气炉子的电插头产生火花，引燃了泄漏的煤气并引发了房屋火灾&lt;/li>
&lt;li>事故：房屋火灾（但这个根本原因可能导致其他事故）&lt;/li>
&lt;/ul>
&lt;p>蚂蚁入侵&lt;/p>
&lt;ul>
&lt;li>根本原因：温暖的季节适合虫子和害虫在自然环境中繁衍生息&lt;/li>
&lt;li>触发因素：随意吃东西，留下大量的碎屑&lt;/li>
&lt;li>事故：蚂蚁入侵&lt;/li>
&lt;/ul>
&lt;p>内存不足 (OOM)&lt;/p>
&lt;ul>
&lt;li>根本原因：配置文件更改引入了内存泄漏&lt;/li>
&lt;li>触发因素：出人意料的大量请求&lt;/li>
&lt;li>事故：OOM&lt;/li>
&lt;/ul>
&lt;p>在第三个 (OOM) 场景中，根本原因可能在触发条件存在之前的几年就已经存在了——这是技术债务最终比预期更昂贵的一种方式。而这个根本原因甚至可能不是一个错误，它可以是对系统行为的任何约束。约束本身并不是危险的，直到系统面临某种环境条件，将其转变为危险。需要澄清的是，触发因素可能不是二元的。触发条件可能存在于动态范围内，只有当系统的环境条件和根本原因相互作用时才会成为事故。这两者可以看作是创建事故生命周期的关键组成部分。&lt;/p>
&lt;p>事后复盘分析中的根本原因部分应详细说明事故的根本原因和触发因素。为了防止中断再次发生，有时重要的是解决根本原因，有时更合理的是围绕触发因素建立预防措施。&lt;/p>
&lt;p>然而，仅仅将根本原因和触发因素分开讨论并不会提高团队事后复盘分析的质量。所有部分都有适当的内容是最低要求，但事后复盘分析还应包括深入的分析，便于团队外的工程师理解，并且是可操作的。这是一个经常出现的问题吗？是否记录了缓解步骤，或者需要查找错误？事后复盘分析是否适当地解释或量化了系统的正常运行情况，以显示故障的对比和影响？如果你说产品 89% 的用户受到了影响，这具体意味着什么？&lt;/p>
&lt;h3 id="孤立的系统与整体堆栈">孤立的系统与整体堆栈
&lt;/h3>&lt;p>事故影响的系统不太可能在真空中存在（除非你来自 Hoover、Dyson 或 Roomba）。不幸的是，一个常见的反模式是将系统分析的范围限制在看似损坏的部分，而不考虑系统上下文（系统功能相关的环境部分）。以下是一些可以扩展系统分析深度的思考点：&lt;/p>
&lt;ul>
&lt;li>（如果适用）这个事故是作为单一事件进行审查，还是讨论了相关的/关联的/子事件？&lt;/li>
&lt;li>你或任何主要的内部客户是否发现了以前未知的依赖关系？&lt;/li>
&lt;li>端到端通信的效果如何？&lt;/li>
&lt;/ul>
&lt;p>虽然事故可能只发生在整体堆栈的一个子部分，但这并不意味着你的事故是孤立发生的。查看事故是否以及如何影响整体堆栈和公司的成员，可以揭示系统故障的见解。这可能包括你的事故是否引发了其他事故或级联故障，或者你的公司在事故期间是否能够有效沟通。&lt;/p>
&lt;h3 id="时间点与发展轨迹">时间点与发展轨迹
&lt;/h3>&lt;p>在研究中，元分析技术是将多个研究汇总成更大的整体结论。如果你将每个事后复盘分析视为一个展示系统在某个时间点状态的研究，那么将这些分析综合起来可以帮助识别新兴的模式和见解。我们建议利用每个事后复盘分析作为检查系统随时间变化的机会。考虑以下几点：&lt;/p>
&lt;ul>
&lt;li>这个事故是否从系统的长期轨迹进行审查？&lt;/li>
&lt;li>是否存在相同类型的故障重复出现？&lt;/li>
&lt;li>是否存在任何长期的强化或平衡循环？&lt;/li>
&lt;/ul>
&lt;p>整体系统思维的一部分是考虑系统随时间的变化。一般来说，避免同样的事故发生两次是件好事。&lt;/p>
&lt;p>我们已经探讨了系统分析在组织改进中的应用及其对你和你的团队的好处。现在让我们来看一个实际的例子。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>参见《DevOps 文化：Westrum 组织文化》。&lt;a class="link" href="https://cloud.google.com/architecture/devops?hl=zh-cn" target="_blank" rel="noopener"
>https://cloud.google.com/architecture/devops?hl=zh-cn&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>谷歌的 Project Aristotle 项目。&lt;a class="link" href="https://rework.withgoogle.com/" target="_blank" rel="noopener"
>https://rework.withgoogle.com/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>参见 Coursera 的“Developing a Google SRE Culture”课程。 &lt;a class="link" href="https://www.coursera.org/learn/developing-a-google-sre-culture" target="_blank" rel="noopener"
>https://www.coursera.org/learn/developing-a-google-sre-culture&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>要了解更多关于从错误中学习的信息，请参见《Site Reliability Engineering》第 15 章，“Postmortem Culture: Learning from Failure”。&lt;a class="link" href="https://sre.google/sre-book/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/sre-book/postmortem-culture/&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>同上，参见《Site Reliability Engineering》第 15 章，“Postmortem Culture: Learning from Failure”。&lt;a class="link" href="https://sre.google/sre-book/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/sre-book/postmortem-culture/&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>欲了解更多信息，请参见《Site Reliability Engineering》附录 D，“Example Postmortem” &lt;a class="link" href="https://sre.google/sre-book/example-postmortem/%ef%bc%8c%e4%bb%a5%e5%8f%8a%e5%85%b3%e4%ba%8e" target="_blank" rel="noopener"
>https://sre.google/sre-book/example-postmortem/，以及关于&lt;/a> Google Compute Engine 事故的公开通信。&lt;a class="link" href="https://status.cloud.google.com/incident/compute/16007" target="_blank" rel="noopener"
>https://status.cloud.google.com/incident/compute/16007&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第四章 缓解和恢复</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch4/</link><pubDate>Fri, 28 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch4/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第四章 缓解和恢复" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们已经讨论了如何扩展事故管理，使用组件响应者和 SoS 系统级响应者来帮助公司扩展时管理事故。我们还介绍了成功的事故响应组织的特征，并讨论了管理风险和防止值守人员倦怠。现在，我们来谈谈事故发生后的恢复工作。我们将从紧急缓解措施开始。&lt;/p>
&lt;h2 id="紧急缓解措施">紧急缓解措施
&lt;/h2>&lt;p>之前我们提到在服务事故期间“止血”。恢复工作中包括必要的紧急缓解措施(Urgent Mitigations)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，以避免影响或防止影响加剧。现在我们来谈谈这意味着什么，以及如何在紧急情况下，更容易的实施缓解措施。&lt;/p>
&lt;p>假设你的服务遇到了一个严重的问题。中断已经开始，并已经被检测到了，用户正在受到着影响，而你负责解决这个问题。你的首要任务应该是：立即停止或减轻对用户的影响，而不是立即找出问题的原因。想象一下，你在家里，屋顶开始漏水。你首先会放一个桶在漏水处，以防止进一步受到水的损害，然后再去拿出需要的工具，去修补屋顶（稍后我们会发现，如果屋顶问题是根本原因，雨水就是触发因素）。桶的作用是减小影响，直到修复好屋顶。为了在服务中断期间减轻对用户影响，你需要准备好一些应急措施。我们称这些应急措施为&lt;strong>通用缓解措施&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>通用缓解措施&lt;/strong>是指在你找出具体问题之前，可以采取的减小各种中断影响的行动。&lt;/p>
&lt;p>适用于你服务的缓解措施可能会有所不同，取决于用户受影响的方式。基本的措施包括：回滚代码、重新分配流量，以及增加服务器容量。这些临时措施旨在：为你和你的服务争取更多时间，以便找到彻底解决问题的方法。换句话说，它们修复的是中断的症状，而不是根本原因。你不需要等到完全的理解了中断的原因，就可以使用通用缓解措施。&lt;/p>
&lt;p>考虑进行研究并投资开发一些快速“一键修复”（即比喻中的桶）。记住，尽管桶是一个简单的工具，但它仍然可能被误用。因此，为了正确使用通用缓解措施，重要的是要在定期的恢复力测试中进行演练。&lt;/p>
&lt;h2 id="减小事故的影响">减小事故的影响
&lt;/h2>&lt;p>除了用于应对紧急情况或事故的通用缓解措施外，还需要考虑从长远角度减小事故的影响 (Reducing the Impact of Incidents)。&lt;strong>事故&lt;/strong>是一个内部术语。实际上，客户并不真正关心事故或事故的数量，他们关心的是可靠性。为了满足用户的期望，并实现用户所需的可靠性水平，需要设计和运行可靠的系统。&lt;/p>
&lt;p>想要实现这一点，需要在事故管理生命周期的每个阶段中协调的行动：准备、响应和恢复。考虑在事故发生前、发生期间，和发生后可以做些什么，从而改进系统。&lt;/p>
&lt;p>虽然很难直接衡量客户信任，但可以使用一些代理指标来评估提供可靠客户体验的效果。我们称客户体验的度量为服务质量指标 (SLI)。SLI 告诉你在任何时刻服务的表现如何，是否达到预期。&lt;/p>
&lt;p>在这个范围内，客户可以是终端用户、人类或系统（如 API），或另一个内部服务。内部服务类似于为其他内部服务提供核心功能，而这些服务最终面向终端用户。你需要确保关键依赖项的可靠性（即硬性依赖或不可缓解的依赖——如果它失败，你也会失败）。这意味着如果面向客户的服务依赖于内部服务，这些服务需要提供更高水平的可靠性。&lt;/p>
&lt;p>SLI 的可靠性目标称为服务质量目标 (SLO)。SLO 将目标汇总到一段时间内：它表示在某个管理时间窗口中，这是你要去实现的目标，体现了你的管理水平如何（通常以百分比衡量）。&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>可能大多数人都熟悉服务质量协议 (SLA)。SLA 定义了你向客户承诺的服务内容；即如果未能达到目标，你愿意采取的措施（如退款）。为了实现这一点，需要使 SLO（你的目标）设定的比 SLA 要更严格一些。&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们用来检查和衡量用户满意度的工具称为&lt;strong>用户旅程&lt;/strong>。用户旅程是以文本形式编写的陈述，用来描述用户的视角。用户旅程探讨了：用户如何与服务互动的过程，以实现自己想要的目标。那些最重要的用户旅程被称为&lt;strong>关键用户旅程&lt;/strong> (CUJ)。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>一旦定义了对你和用户或客户重要的目标，就可以开始考虑：当未能达到这些目标的时候，都会发生什么。&lt;/p>
&lt;h3 id="计算事故的影响">计算事故的影响
&lt;/h3>&lt;p>事故会影响可靠性目标，影响的大小：取决于故障的数量、持续时间、影响范围和规模。因此，想要减小事故的影响，首先需要了解可以采取哪些措施。让我们先看看应该如何量化和衡量事故的影响。&lt;/p>
&lt;p>图 4-1 显示了衡量影响的方法：计算不可靠的时间，包括检测到问题的时间和修复（缓解）问题的时间，然后将其乘以事故的次数，即事故的频率。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16.webp"
width="1352"
height="612"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16_hu_94a2e56a65e2b74c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16_hu_4fa35daaa2c9b6df.webp 1024w"
loading="lazy"
alt="图 4-1. 中断生命周期"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="530px"
>&lt;/p>
&lt;p>关键指标是检测时间、修复时间和故障间隔时间：&lt;/p>
&lt;ul>
&lt;li>检测时间（TTD）是从中断发生到某个人被通知或告警的时间。&lt;/li>
&lt;li>修复时间（TTR）是从某人被告警到问题缓解的时间。关键是缓解！这指的是响应者采取措施减轻客户影响的时间，例如通过将流量转移到其他区域。&lt;/li>
&lt;li>故障间隔时间（TBF）是从一次事故开始到，同类型事故下一开始的时间。&lt;/li>
&lt;/ul>
&lt;p>想要减小事故的影响，并使系统恢复到已知正常的状态，需要技术和“人”的因素的结合，例如：流程和支持。在谷歌，我们发现一旦涉及人为干预，中断至少会持续 20 到 30 分钟。通常，自动化和自愈系统是很好的策略，因为它们会有助于缩短检测时间和修复时间。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34.webp"
width="1346"
height="303"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34_hu_ac3aa611503e249c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34_hu_bbbff38263f49cf7.webp 1024w"
loading="lazy"
alt="不可用性公式"
class="gallery-image"
data-flex-grow="444"
data-flex-basis="1066px"
>&lt;/p>
&lt;p>需要注意的是，使用的方法也很重要。简单地降低告警阈值可能导致误报和噪音，过度依赖自动化快速修复可能减少修复时间，但会忽略根本问题。在下一节中，我们将分享几种策略，这些策略可以更有效地减少检测时间、修复时间和事故频率。&lt;/p>
&lt;h3 id="缩短检测时间">缩短检测时间
&lt;/h3>&lt;p>减小事故影响的一种方法是缩短检测事故的时间(Reducing the Time to Detect)（图 4-2）。在起草 SLO（可靠性目标）时，需要我们进行前置的风险分析，并确定出那些优先的待办事项，识别可能阻止实现 SLO 的因素，这也有助于缩短检测到事故的时间。此外，你可以采取以下措施来最小化检测时间：&lt;/p>
&lt;ul>
&lt;li>将 SLI（客户满意度指标）尽可能与用户的期望对齐【译者注：考虑用户体验的好坏，以及关键用户旅程的可用性】，这些用户可以是实际用户或其他服务。将告警与 SLO（你的目标）对齐，并定期回顾评审，确保它们仍然能代表用户的满意度。&lt;/li>
&lt;li>使用最新的信号数据。选择最佳的数据获取方式：流、日志或批处理。在这方面，在&lt;strong>告警速度&lt;/strong>与&lt;strong>噪音数&lt;/strong>之间找到合适的平衡度也很重要【译者注：SLI 告警的灵敏度高情况下，考虑到所选择 SLI 信号数据源的质量，如果假性告警越少，则噪音数量越低。】。噪音告警是 Ops 团队（无论是传统的 DevOps 团队还是 SREs）最常见的一个抱怨。&lt;/li>
&lt;li>使用有效的告警以避免告警疲劳。在需要立即采取行动时使用呼叫【译者注：短信、电话外呼等任何快速触达的通知方式】。只有正确的响应者——特定团队和所有者——才应该收到告警。另一个常见的投诉是收到不可操作的告警【译者注：与事故无关的人员也经常会在半夜被值守的人喊醒，冤】。&lt;/li>
&lt;/ul>
&lt;p>随之而来的问题是：“如果只对需要立即采取行动的事情进行呼叫，那其余的问题如何处理？”一个解决方案是：为不同情况使用不同的工具和平台。可能“正确的平台”是，一个工单系统或仪表板，或者仅需要根据该指标，用拉取的处理模式，进行相应的故障排除和调试。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52.webp"
width="1352"
height="617"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52_hu_f6762d29e67b647d.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52_hu_86c40635f309fdc8.webp 1024w"
loading="lazy"
alt="图 4-2. 中断生命周期：检测时间"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;h3 id="缩短修复时间">缩短修复时间
&lt;/h3>&lt;p>我们已经讨论了：用缩短检测时间作为减小事故影响的一种方法。另一种方法是：缩短修复时间(Reducing the Time to Repair)（图 4-3）。缩短修复时间主要涉及“人”的方面。使用事故管理协议和组织事故管理响应可以减少事故管理的模糊性，缩短对用户影响的时间。除此之外，你还需要培训响应者，制定明确的程序和手册，并降低值守的压力。让我们详细探讨这些策略。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12.webp"
width="1354"
height="619"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12_hu_956602e2a02617d5.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12_hu_fc7b0a17defb50a7.webp 1024w"
loading="lazy"
alt="图 4-3. 中断生命周期：修复时间"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;p>&lt;strong>培训响应者&lt;/strong>&lt;/p>
&lt;p>未准备好的值守人员会导致更长的修复时间。考虑对值守人员进行灾难恢复测试培训，或者进行我们之前提到的“厄运之轮”演习。另一种方法是通过导师指导进行值守准备。让值守人员成对工作（“配对值守 pair on call”），或者让新人在他们的轮班期间与有经验的值守人员一起工作（“跟班 shadowing”），有助于增强新队员的信心。记住，值守可能是有压力的。制定明确的事故管理流程可以减少这种压力，因为它消除了任何模糊性，并明确了所需的行动。&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>建立有组织的事故响应程序&lt;/strong>&lt;/p>
&lt;p>事故管理中存在一些常见问题。例如，缺乏责任感、沟通不畅、缺乏层次结构和自由发挥/英雄主义，可能导致更长的解决时间，也会增加值守人员和响应者的额外压力，并最终影响到客户。为了解决这个问题，我们建议通过建立一个层次结构明确的结构、任务和沟通渠道来组织响应。这有助于保持清晰的指挥链，并指定明确的角色。&lt;/p>
&lt;p>在谷歌，我们使用 IMAG（谷歌事故管理），这是一个基于消防员和医护人员使用的事故指挥系统（ICS）的灵活框架。IMAG 教你如何通过建立层次结构明确的结构、任务和沟通渠道来组织紧急响应。它建立了一种标准、一致的方式来处理紧急情况和组织有效的响应。&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33.webp"
width="1351"
height="629"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33_hu_54e371ecc590d62b.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33_hu_80dd4f5b22623faf.webp 1024w"
loading="lazy"
alt="图 4-4. 一个 ICS 层次结构示例"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>&lt;/p>
&lt;p>IMAG 协议为解决事故的人提供了一个框架，使紧急响应团队能够自我组织和高效工作，通过确保响应者和相关利益相关者之间的沟通，控制事故响应，并帮助协调响应工作。它规定事故指挥官（IC）负责协调响应并分配职责，而其他人向 IC 报告。每个人都有一个具体的、明确的角色——例如，操作负责人负责解决问题，沟通负责人负责处理沟通。&lt;/p>
&lt;p>通过使用这样的协议，你可以减少模糊性，明确团队合作，并减少修复时间。&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>建立明确的值守政策和流程&lt;/strong>&lt;/p>
&lt;p>我们建议记录你的事故响应和值守政策，以及在中断期间和之后的应急响应流程。这包括明确的升级路径和责任分配，以减少处理中断时的模糊性和压力。&lt;/p>
&lt;p>&lt;strong>编写有用的运行手册/操作手册&lt;/strong>&lt;/p>
&lt;p>文档很重要，它将工作经验转化为所有队员都能访问的知识，无论工作年限。通过优先记录和安排时间编写文档，并创建记录程序的操作手册和政策，队员们可以更容易识别事故的表现形式——这是一项宝贵的优势。操作手册一开始不必完备；从简单的开始，提供一个明确的起点，然后逐步改进。一个好的经验法则是谷歌的“看到问题，立即解决 see it fix it”的方法，并让新队员在入职时就来更新这些操作手册。&lt;/p>
&lt;p>将编写操作手册作为事后复盘分析的重要行动项目之一，并将其视为个人对团队的积极贡献，这通常需要领导的优先支持和资源分配。&lt;/p>
&lt;p>&lt;strong>减轻响应者的疲劳&lt;/strong>&lt;/p>
&lt;p>如第二章所述，响应者疲劳的心理成本是有据可查的。如果响应者疲惫，他们的解决问题能力会受到影响。确保班次平衡，如果不平衡，使用数据来找出原因，并减少琐事。&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>投资于数据收集和可观测性&lt;/strong>&lt;/p>
&lt;p>做出基于数据的决策很重要，缺乏监控或可观测性是一种反模式。如果你无法看清路况，你就不知道前进方向。因此，鼓励组织内的度量文化，收集贴近客户体验的指标，并衡量你在目标和错误预算消耗率方面的表现，以便及时反应和调整优先级。还要衡量团队的琐事工作量，并定期审查你的 SLI 和 SLO。&lt;/p>
&lt;p>尽可能收集高质量的数据，特别是更贴近客户体验的数据；这有助于排除故障和调试问题。收集应用程序和业务指标，以便拥有关注客户体验和关键用户旅程的仪表板和可视化。这意味着为特定受众和目标设计的仪表板。管理者对 SLO 的视角，将与用于在排查事故和故障过程中使用的仪表板非常不同。&lt;/p>
&lt;p>如你所见，有许多方法可以缩短修复时间，并最大限度地减小事故的影响。现在让我们看看延长故障间隔时间来减少事故影响的另一种方法。&lt;/p>
&lt;h3 id="延长故障间隔时间">延长故障间隔时间
&lt;/h3>&lt;p>为了延长故障间隔时间并减少故障次数，可以重构架构，并解决在风险分析和流程改进中识别出的故障点（图 4-5）。此外，还有一些措施可以帮助延长 TBF（故障间隔时间）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00.webp"
width="1353"
height="618"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00_hu_d18fa2ec6b63396c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00_hu_66cada0333efdbe3.webp 1024w"
loading="lazy"
alt="图 4-5. 中断生命周期：故障间隔时间"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;strong>避免反模式&lt;/strong>&lt;/p>
&lt;p>我们在本报告中提到了几种反模式，包括缺乏可观测性，缺乏正反馈回路，这会导致系统发生过载，并引发级联问题，如崩溃。这些反模式需要避免。&lt;/p>
&lt;p>&lt;strong>分散风险&lt;/strong>&lt;/p>
&lt;p>通过冗余、解耦责任、避免单点故障，和用全局优化来分散风险，并采用高级部署策略。考虑渐进式的滚动和金丝雀发布，将更新工作分布在数小时、数天或数周内，这样可以在所有用户受到影响之前，减少风险并识别问题。同样，进行自动化测试、滚动发布和自动回滚，以便及早发现任何问题。主动发现问题，总要比让问题来骚扰你会更好；那就要通过实践混沌工程和引入故障注入，以及自动化灾难恢复测试（如 DiRT，见第二章）来实现这一点。&lt;/p>
&lt;p>&lt;strong>采用开发实践&lt;/strong>&lt;/p>
&lt;p>采用促进质量文化的开发实践，并创建集成代码审查和健壮测试的过程，这些过程可以集成到持续集成/持续交付（CI/CD）流水线中。CI/CD 可以节省工程时间，并减小对客户的影响，使你能够自信地部署。&lt;/p>
&lt;p>&lt;strong>以可靠性为设计原则&lt;/strong>&lt;/p>
&lt;p>在 SRE 中，我们有一句话：“碰运气不是一种策略。” 当谈到故障时，问题并不是会不会发生，而是什么时候发生。因此，从一开始就以遵循：可靠性为设计原则，构建能够应对故障的健壮架构。通过以下问题来了解你如何应对故障：&lt;/p>
&lt;ul>
&lt;li>我的系统能够应对哪种类型的故障？&lt;/li>
&lt;li>它能容忍意外的单实例故障或重启吗？&lt;/li>
&lt;li>它如何应对区域性AZ或地区性Region故障？&lt;/li>
&lt;/ul>
&lt;p>意识到风险及其潜在影响范围后，进入风险缓解阶段（如在风险分析中所做的那样）。例如，为了缓解单实例问题，使用持久磁盘和配置自动化，并且备份数据。为了缓解区域和地区故障，可以在各个地区和区域分配资源并实施负载均衡。还可以进行横向扩展。例如，将单体架构解耦为微服务，更容易独立扩展它们（“做好一件事”）。横向扩展还可以意味着地理上（Region）的扩展，例如拥有多个数据中心以利用弹性。我们建议尽可能避免手工配置和特殊硬件。&lt;/p>
&lt;p>&lt;strong>优雅降级&lt;/strong>&lt;/p>
&lt;p>在你的架构中实现优雅降级(Graceful degradation)方法非常重要。将降级视为一种策略，例如限流和负载分流。问自己，如果不能为所有用户提供所有功能，我能否可以最小功能为所有用户服务？能否限流用户流量并丢弃高成本的请求？当然，什么是可接受的降级程度，要依赖于服务和用户旅程。返回 x 个产品和返回未更新的账户余额之间存在差异。但作为经验法则，能提供降级的服务，总比停止服务的好。&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>深度防御&lt;/strong>&lt;/p>
&lt;p>深度防御(Defense-in-depth)是构建系统以应对故障的一种方式，更准确地说，是容忍故障。如果依赖某个系统获取配置或其他运行时信息，确保有一个备用或缓存版本，当依赖项不可用时，而它们仍能继续工作。&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>N+2 资源&lt;/strong>&lt;/p>
&lt;p>在分布式系统中，拥有 N+2 资源是实现可靠性的基本原则。N+2 意味着：你有 N 的容量来处理高峰期的请求，并有另外 2 的实例，其中一个可用于应对意外故障，另一个可用于计划升级。如前所述，你的可靠性取决于关键依赖项的可靠性，因此在架构中选择正确的构建块（Building block）。在云平台上构建时，确保使用服务的可靠性水平，并将它们与你的应用目标相关联。注意它们的范围（例如，在 Google Cloud Platform 中，范围可以是区域性的、区域间的或全球的[zonal, regional, global]）。记住，在设计时就主动解决可靠性问题，可以降低后期的成本。&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup> 并不存在一刀切的解决方案，应让需求指导你来做出因地制宜的设计决策。&lt;/p>
&lt;blockquote>
&lt;p>非抽象大型系统设计 (NALSD)&lt;/p>
&lt;p>在讨论可靠性和 SRE 的设计时，我们不能不提到非抽象的大型系统设计。在谷歌，我们发现，在设计阶段解决可靠性问题可以降低未来的成本。如果采用迭代式系统设计和实施风格，可以用更低的成本，开发出健壮且可扩展的系统。我们称这种方法为非抽象大型系统设计 (NALSD)，它描述了谷歌用于生产系统的迭代式设计过程。你可以在谷歌的 SRE 课堂栏目中了解更多相关内容。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>从失败中学习&lt;/strong>&lt;/p>
&lt;p>最后，你可以从失败中学习，使未来更好（更多内容请参见第40页的“心理安全”）。如前所述，事后分析是实现这一目标的工具。确保你有一致的事后分复盘析流程，能够产出错误修复（bug fix）、缓解措施和文档更新的后续跟踪落地行动项。像跟踪其他错误（bug）一样跟踪事后 复盘分析的行动项（如果还没有这样做），并应该优先考虑事后复盘分析工作，而不是“常规日常”的工作。&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup> 我们将在下一节中更详细地讨论事后复盘分析。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>推荐阅读：Jennifer Mace 的《通用缓解措施》&lt;a class="link" href="https://www.oreilly.com/content/generic-mitigations/%e3%80%82" target="_blank" rel="noopener"
>https://www.oreilly.com/content/generic-mitigations/。&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>参见《SRE Google 运维解密》（O&amp;rsquo;Reilly）中的第 4 章，“服务质量目标 (SLOs)”。&lt;a class="link" href="https://sre.google/sre-book/service-level-objectives/" target="_blank" rel="noopener"
>https://sre.google/sre-book/service-level-objectives/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>参见 Adrian Hilton 2021 年 5 月 7 日的文章《SRE 基础 2021：SLIs vs SLAs vs SLOs》。&lt;a class="link" href="https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>参见《Google SRE 工作手册》（O&amp;rsquo;Reilly）中的第 2 章，“实施 SLOs”。&lt;a class="link" href="https://sre.google/workbook/implementing-slos/" target="_blank" rel="noopener"
>https://sre.google/workbook/implementing-slos/&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>参见 Jesus Climent 2019 年 12 月 5 日的文章《缩短生产事故缓解时间—CRE 生活教训》。&lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>参见《Google SRE 工作手册》中的第 9 章，“事故响应”。&lt;a class="link" href="https://sre.google/workbook/incident-response/" target="_blank" rel="noopener"
>https://sre.google/workbook/incident-response/&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>参见《SRE Google 运维解密》中的第 14 章，“管理事故”。&lt;a class="link" href="https://sre.google/sre-book/managing-incidents/" target="_blank" rel="noopener"
>https://sre.google/sre-book/managing-incidents/&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>参见 Eric Harvieux 2020 年 1 月 31 日的文章《使用 SRE 原则识别和跟踪琐事》。&lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/identifying-and-tracking-toil-using-sre-principles" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/identifying-and-tracking-toil-using-sre-principles&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>关于负载分流和优雅降级的更多内容，参见《SRE Google 运维解密》中的第 22 章，“解决级联故障”。&lt;a class="link" href="https://sre.google/sre-book/addressing-cascading-failures/" target="_blank" rel="noopener"
>https://sre.google/sre-book/addressing-cascading-failures/&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>参见 Ines Envid 和 Emil Kiner 在 Google 博客上的文章《深入了解 Google Cloud 网络：确保环境安全的三项深度防御原则》，2019 年 6 月 20 日。&lt;a class="link" href="https://cloud.google.com/blog/products/networking/google-cloud-networking-in-depth-three-defense-in-depth-principles-for-securing-your-environment" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/networking/google-cloud-networking-in-depth-three-defense-in-depth-principles-for-securing-your-environment&lt;/a>&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>参见《Google SRE 工作手册》中的第 12 章，“引入非抽象大型系统设计 (NALSD)”。&lt;a class="link" href="https://sre.google/workbook/non-abstract-design/" target="_blank" rel="noopener"
>https://sre.google/workbook/non-abstract-design/&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>参见 Google Research 的 Betsy Beyer、John Lunney 和 Sue Lueder 的文章《事后分析行动项：计划工作并完成计划》。&lt;a class="link" href="https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/" target="_blank" rel="noopener"
>https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/&lt;/a>&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第三章 扩展事故管理响应</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch3/</link><pubDate>Wed, 26 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch3/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第三章 扩展事故管理响应" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们已经讨论了通过事故响应演习、角色扮演和定期测试来练习事故响应准备。这些策略能帮助你在真实事故发生时做好准备并开始管理（见第31页“建立有组织的事故响应程序”）。但是，当你的组织开始扩展时【译者注：扩展是指将事故管理的流程在更大范围的业务系统上逐步应用推广的过程。】，如何管理事故呢？在本节中，我们讨论如何在大量的系统之上扩展事故管理（流程/实践）。&lt;/p>
&lt;p>在 Google，我们为所有系统提供了最佳的事故管理覆盖。Google 规模庞大，每年处理超过 2 万亿次搜索，需要大量的数据中心、至少一百万台计算机和超过 80000 名员工。所有这些活动都通过一个庞大且高度互联的系统系（ system-to-system 简称 SoS）进行，依赖其技术堆栈保持生产运行。支持这个技术堆栈意味着适当的人员随时待命，以便在问题出现时进行故障排除和修复。这些人员是我们站点可靠性工程团队中的响应人员，他们为系统提供事故管理覆盖，并在事故发生时进行响应。&lt;/p>
&lt;h2 id="组件响应者">组件响应者
&lt;/h2>&lt;p>在站点可靠性工程团队中，我们还拥有组件响应者，他们负责 Google 技术基础设施中某个组件或系统的响应（图 3-1）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47.webp"
width="802"
height="157"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47_hu_8a849b20ad612fcd.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47_hu_59b90565ff95ade7.webp 1024w"
loading="lazy"
alt="图 3-1. 组件响应者"
class="gallery-image"
data-flex-grow="510"
data-flex-basis="1225px"
>&lt;/p>
&lt;p>组件响应者是某个单一系统的专家，精通该问题领域，是优秀的故障排除专家，并在危机期间实践缓解策略。他们可以持续访问执行紧急响应所需的工具和系统，能够很好地应对压力，并在危机期间保持清晰的思路。&lt;/p>
&lt;p>单个组件响应者的责任范围有限，这使他们能够深入了解其领域及相关系统。这些响应者是防止故障从一个组件蔓延到整个堆栈的第一道防线。这些单独的组件比整体的系统体系级 SoS 堆栈要小，正如我们将在下面描述的“系统体系（SoS）响应者”一节中讨论的那样，通常具有明确且独立的系统边界。因此，可以设置合理的监控和告警机制，使组件响应者始终了解其系统的故障模式。&lt;/p>
&lt;p>当技术堆栈的范围超出一个人可理解和维护的能力时，我们将技术堆栈拆分，以便多个响应者可以分别对整个堆栈的单个组件提供覆盖。随着时间的推移，这些组件变得更加复杂，并进一步分解。通过保持有限的范围，主要响应者可以在任何给定时间解决小范围内的问题。然而，也存在风险，即忽视了跨多个组件的生产故障，或者如果问题超出其专业范围，则无法为组件响应者提供足够的支持。&lt;/p>
&lt;p>例如，假设一个底层故障在技术堆栈的显著部分发生级联效应。这种级联效应的速度超过了人类自我组织的速度。在一次影响范围广泛的事故中，我们很快就会达到每个组件团队都被呼叫、分配了响应人员并管理自己的状态。这些组件团队并行工作，但这些响应人员可能彼此并不知情（图 3-2）。其中一个响应人员处理的事故可能是根本原因，而其他则是后果。但究竟是哪一个呢？&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04.webp"
width="803"
height="210"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04_hu_bdfc307f406c60a3.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04_hu_a8c2a41a6f14b977.webp 1024w"
loading="lazy"
alt="图 3-2. 从组件到更大的场景"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="917px"
>&lt;/p>
&lt;p>在一个足够大且复杂的技术堆栈中，一个主要响应人员几乎不可能同时驱动缓解并维护所有依赖关系和被依赖关系的状态。为了缓解这种风险，除了出色的组件响应人员之外，我们还建立了一个二级响应人员的结构。我们在 Google 称这些二级响应人员为系统响应人员，接下来我们将讨论这一部分。&lt;/p>
&lt;h2 id="系统响应人员">系统响应人员
&lt;/h2>&lt;p>系统响应人员（SoS 响应人员）负责处理跨多个组件系统、跨系统边界或复杂情况的事故。这些 SoS 响应人员经过专业培训，具有适当的权限和地位，并有权领导有组织的协调响应。他们是第二道防线，更全面地关注问题，并在应对分布式计算故障时提供关键优势支持（图 3-3）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33.webp"
width="802"
height="123"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33_hu_48e14d0a1a46ef0c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33_hu_9c1c7c5509f9f967.webp 1024w"
loading="lazy"
alt="图 3-3. 系统响应人员"
class="gallery-image"
data-flex-grow="652"
data-flex-basis="1564px"
>&lt;/p>
&lt;p>我们认为 SoS 响应人员是多系统事故管理者，技术全能，关注整体；他们在处理需要更广泛视角的事故方面有专业知识。通常，这些事故需要多个团队的参与；例如，一次重大系统级 SoS 故障会导致许多服务中断。这些事故可能会引发或已经引发下游故障，并可能扩展到服务边界之外。此外，这些事故可能已经持续了 30 分钟或更长的时间，且没有解决迹象，影响客户。&lt;/p>
&lt;p>SoS 响应人员适合应对这些影响广泛的事故，因为他们知道如何组织他人并掌控复杂局面。他们还擅长诊断系统行为，找出根本原因，专注于扩展响应并广泛沟通事故情况。&lt;/p>
&lt;p>在 Google，我们有两种类型的 SoS 响应人员。尽管每种类型都有其独特的功能，但它们经常协同工作：&lt;/p>
&lt;ul>
&lt;li>产品专注的事故响应团队（IRTs）：这些团队保护特定产品领域的可靠性。例如，广告 IRT 和 YouTube IRT。并不是每个产品领域都需要事故响应团队，但随着产品不断推出新功能、变得更加复杂，并积累了技术债务，这些团队将非常有帮助。这些团队的成员不一定了解产品堆栈的每一个细节，但他们了解产品的整体运营和依赖关系。&lt;/li>
&lt;li>技术事故响应团队（Tech IRT）：这是我们最广泛关注的事故响应团队。该团队专注于跨产品的事故、责任不明的事故或根本原因不清的普遍事故。Tech IRT 是我们的最后一道防线。成员是资深的 Google 员工，他们至少在两个不同的团队中担任过组件响应者，广泛了解系统运行，最重要的是，他们具备出色的事故管理技能。&lt;/li>
&lt;/ul>
&lt;p>Tech IRT 的成员继续为原团队工作，同时轮流进行全球 24/7 的值守/值班。他们能够在这些重大紧急情况下继续工作，因为他们经常练习这项专门技能。&lt;/p>
&lt;p>Tech IRT 成员每年两次接受为期两周的生产培训，深入了解系统运行和故障的细节。他们还需要每季度展示有效使用紧急工具的能力。
图 3-4 描绘了 Google 的事故响应组织架构。随着架构级别的增加，产品日常功能的细节变得更加抽象。每个角色同样重要——金字塔的每个后续级别都承受较少的寻呼负载。如果组件响应人员无法解决问题且威胁到产品稳定性，他们可以将问题升级到产品专注的 IRT。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04.webp"
width="802"
height="315"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04_hu_b173384e2f86ce76.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04_hu_8f961171658098c5.webp 1024w"
loading="lazy"
alt="图 3-4. 事故响应组织架构"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;p>如果一个问题威胁到多个产品，或通过共享基础设施的解决方案可以更快缓解，Tech IRT 将被激活，作为所有下级问题的升级点，负责最广泛范围的操作。&lt;/p>
&lt;p>那么，是什么使得这个组织架构能够无缝运行呢？答案是共同的协议、信任、尊重和透明度。接下来我们将详细探讨这些。&lt;/p>
&lt;h2 id="事故响应组织架构">事故响应组织架构
&lt;/h2>&lt;p>成功的事故响应组织有四个特征：统一协议、信任、尊重和透明（见图 3-5）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24.webp"
width="805"
height="609"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24_hu_eb1275f84bd3a0df.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24_hu_778ab3637f5e1a42.webp 1024w"
loading="lazy"
alt="图 3-5. 成功事故响应组织的特征"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;h3 id="统一协议">统一协议
&lt;/h3>&lt;p>在 Google，我们广泛使用 FEMA 事故指挥系统（ICS）的内部变体，其中事故响应人员有明确的角色，如事故指挥官、记录员和通信员。通过使用共享且明确定义的流程，我们建立了有效的紧急响应习惯，包括保持活跃状态、明确的指挥链和减少整体压力。每个人都了解交接流程，知道应该交接给谁，以确保知识的有效传递。就像象棋不能在麻将桌上玩，在紧急情况下，所有人都必须按照同一个规则行事。&lt;/p>
&lt;h3 id="信任">信任
&lt;/h3>&lt;p>在事故发生期间，事故指挥官需要行使权威。他们需要指挥他人、组织混乱的能量，并判断合适的行动方案。对于许多组织来说，将权威级别与操作职责对齐是一个挑战，但我们的标准操作程序避免了只有高层业务主管才有权做出服务变更决策的惯例：我们将这种权威赋予具有背景知识和实时状态信息的主题专家（SME）。&lt;/p>
&lt;h3 id="尊重">尊重
&lt;/h3>&lt;p>确保所有响应人员在认为有必要时能够放心地升级情况非常重要。如果响应人员因为升级事故而受到审查、批评或被认为无能，他们可能不会在适当的时候进行升级。除了基本的礼貌，我们必须相信每个人在现有信息的基础上做出最佳决定。如果出现问题，关键不是责备某人，而是找出如何提供更准确和可操作的信息，以确保未来不再出错。这部分工作在事后分析过程中进行，Google 坚持严格的无责政策（稍后会详细介绍）【译者注：对事不对人策略】。&lt;/p>
&lt;h3 id="透明度">透明度
&lt;/h3>&lt;p>我们不进行信息隔离。当事故发生时，所有细节对所有人开放。如果禁止访问事故信息，就无法进行升级和互操作性——我们在事故解决后撰写的事后分析会在公司范围内的每周通讯中分享。我们鼓励通过阅读其他团队和产品领域发生的事故来进行跨团队学习。&lt;/p>
&lt;h3 id="风险管理">风险管理
&lt;/h3>&lt;p>除了事故响应组织结构的特征外，还需要考虑如何管理风险。从识别到解决事故的时间不应超过三天。正如之前所说，事故管理在时间和人力上都非常昂贵。长时间保持在事故管理的活跃状态会导致疲劳和倦怠，可能促使你开始考虑跳槽。事故是已经升级并需要立即有组织响应的问题。这种紧急状态并非自然状态——人类的大脑延髓不应该被长时间刺激，他们的身体也不应该长期分泌大量皮质醇。&lt;/p>
&lt;p>如果史前人类不断狩猎或被剑齿虎追捕，无法感到安全或休息，我们的进化会截然不同。如果你预计长时间处于战斗或逃跑模式，最终会导致团队成员的持续流失。&lt;/p>
&lt;h2 id="事故管理与风险的功能">事故管理与风险的功能
&lt;/h2>&lt;p>为了减少事故管理的时间，重要的是认识到事故管理和风险的功能。事故管理是一项短期任务，旨在迅速纠正危险情况。事故的严重程度可以分为几个简单的类别。在 Google，我们根据组织的产品适当地量化了这些类别（见表 3-1）。&lt;/p>
&lt;p>表 3-1. 严重性定义&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>严重性&lt;/th>
&lt;th>定义&lt;/th>
&lt;th>试金石&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重大&lt;/td>
&lt;td>面向用户的重大故障，产生负面新闻或对 Google 或特定 Google 客户造成巨大的收入影响。内部生产力故障只有在产生可见外部后果（如负面新闻周期）时才视为重大。&lt;/td>
&lt;td>可能或已对 Alphabet/Google 品牌和业务造成损害。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>严重&lt;/td>
&lt;td>对用户可见的故障，但不会对 Google 服务或特定客户造成持久损害，或对 Google 或其客户造成可观的收入损失，或 50% 或更多的 Google 员工受到显著影响。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，可能或将对 Alphabet/Google 品牌和业务造成损害。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等&lt;/td>
&lt;td>从差一点到重大/严重故障。大量内部用户受到显著影响。存在已知的解决方法，减轻了影响。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，可能会随着时间推移导致越来越多的不稳定性和更高的维护成本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>轻微&lt;/td>
&lt;td>外部用户可能未注意到故障。内部用户受到不便。导致网络、数据中心、实例等之间的流量发生意外波动。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，不太可能随着时间推移导致更多不稳定性，但代表正常操作条件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>微不足道&lt;/td>
&lt;td>事故对用户没有任何可见影响，对生产几乎没有实质性影响，但从中学到了宝贵的教训，需要以低优先级跟踪一些后续行动项目。&lt;/td>
&lt;td>此类事故如果持续发生且未得到缓解，不会被视为过程失效。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>忽略测试&lt;/td>
&lt;td>这甚至不是一次事故。去做其他事情吧。&lt;/td>
&lt;td>虚惊一场。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>事故的规模大致反映了情况的“风险性”（根本原因/触发/影响）。事故管理旨在缓解短期影响，为组织的决策者争取时间来决定下一步措施。事故管理并不意味着要持续到避免所有短期和长期影响。对于庞大的技术堆栈或积累的技术债务，可能需要数月甚至数年才能彻底解决根本原因/触发条件。事故应只在短期影响尚未缓解时保持“开放”状态，并进行积极的管理。&lt;/p>
&lt;p>在医院中，这相当于评估出血患者的紧急风险，并为其止血。那么接下来呢？医院会确定出血的原因并防止其复发。可能需要为患者制定长期计划，如避免再次遇到剑齿虎，或治疗引起出血的皮肤病。无论是哪种方式，一旦立即的危险消除，就会制定长期计划，包括必要时的全天候支持，以确保患者安全并防止再次出血。同样地，在你的技术堆栈中，一旦立即的危险解除，就应转向制定长期行动计划。&lt;/p>
&lt;p>在事故管理中，通常可以在几分钟内重现事故的时间线。如果处理的是紧急问题，每一分钟都可能影响用户或造成收入损失。因为每一分钟都很重要，事故管理对经理们造成了很大压力——正如本节前面提到的，这不是一种长期的积极体验。当处理事故的长期后果（解决根本原因或触发因素）时，理想情况下，不再有立即的用户伤害或重大利润损失。这很好。这些高优先级工作需要立即执行，但不需要像管理事故那样紧迫。这些工作的时间线可以按天或周来衡量，而不必像之前提到的事故时间线那样不超过三天。在不需要的情况下，不要保持战斗或逃跑模式。关闭事故，转向恢复。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第一章 概述</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch1/</link><pubDate>Tue, 25 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch1/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第一章 概述" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果没有猜错的话 ———— 在接下来的几周里，我们将会在个人和工作上面临巨大的压力，我们需要快速应对各种不断变化的状况。但我们已经为应对危机准备了十多年，并且已经做好了准备。在全球比以往任何时候都更需要信息、沟通和计算的时候，我们会确保 Google 能够提供帮助。&lt;/p>
&lt;p>——Benjamin Treynor Sloss，Google 站点可靠性工程团队工程副总裁，2020 年 3 月 3 日&lt;/p>&lt;/blockquote>
&lt;p>中断是不可避免的（这确实让人沮丧）。作为科学家和工程师，你们需要从长远角度看待问题，设计系统以实现最佳的可持续性、可扩展性、可靠性和安全性。但是，你们只能基于现有的知识进行设计。在实施解决方案时，你们也无法完全预知未来。你们不能总是预见到下一个零日事件、头条热搜话题、天气灾害、配置管理错误或技术变革。因此，你们需要随时准备应对这些可能影响系统的事件。&lt;/p>
&lt;p>谷歌在过去十年中最大的技术挑战之一是 COVID-19 新冠疫情爆发所带来的。新冠疫情引发了一系列快速出现的事故，我们需要迅速应对以继续为用户服务。我们必须大幅提升服务容量，让员工在家高效工作，并在供应链受限的情况下找到新的服务器修复方法。正如 Ben Treynor Sloss 所言，谷歌能够在这一系列重大变故中持续提供服务，因为我们已经为此做好了准备。十多年来，谷歌积极投资于事故管理，这种准备是提高事故响应能力最重要的事情。准备工作能增强恢复力。恢复力和处理中断的能力是衡量技术长期成功（以数十年为单位）的关键因素。除了做好工程设计，还需要时刻准备应对业务服务的中断。&lt;/p>
&lt;p>恢复力是公司运营的关键支柱之一。因此，事故管理是公司必不可少的流程。事故不仅对客户有影响，也对操作人员造成了负担。事故带来压力，通常需要人工干预。因此，有效的事故管理应该优先的考虑：预防性和主动性的工作，而不是被动应对。&lt;/p>
&lt;p>我们知道管理事故压力大，找到和培训响应人员也很困难；我们也知道有些事故不可避免，中断会发生。与其问“如果发生事故你会怎么做？”，不如问“事故发生时你会怎么做？”。通过减少这种模糊性，不仅能减轻操作人员的负担和压力，还能缩短解决时间，减少对用户的影响。&lt;/p>
&lt;p>我们写这份报告（白皮书）是为了总结一份：技术事故响应实践的指南。我们首先构建一些讨论事故的常用语言，然后深入探讨如何鼓励工程师、工程领导者和高管在组织内部思考事故管理。我们旨在涵盖从准备事故、响应事故、恢复事故，到保持健康组织的所有内容，以便大规模地应对各种突发情况。让我们开始吧。&lt;/p>
&lt;h2 id="什么是事故">什么是事故？
&lt;/h2>&lt;p>事故(incident)是一个含义广泛的词。其含义可能因不同群体而异。例如，在 ITIL 中，事故是指任何计划外的中断，如工单、报错或告警。无论这个词如何使用，重要的是要在其特定的定义上达成一致，以减少信息孤岛，确保每个人都在说同一种语言。&lt;/p>
&lt;p>在谷歌，事故是指：&lt;/p>
&lt;ul>
&lt;li>被升级的问题（因为影响太大，而无法单独处理）&lt;/li>
&lt;li>需要立即响应的问题&lt;/li>
&lt;li>需要有组织的进行响应的问题&lt;/li>
&lt;/ul>
&lt;p>有时，事故可能由服务中断引起，即服务在一段时间内不可用。中断可以是计划内的，例如在维护窗口期间系统故意不可用以进行更新。如果中断是计划好的并且已通知用户，则就不算是事故——并不需要开展立即、有组织的响应的事情。但通常情况下，我们指的是由未预见的故障引起的意外中断。大多数的意外中断都是事故，或最终会发展成为事故。&lt;/p>
&lt;p>事故可能对客户造成影响。它们还可能造成收入损失、数据损坏、安全漏洞等，这些都可能影响客户。当客户受到事故影响时，他们对你的信任可能会动摇。因此，你需要避免过多或过于严重的事故，以保持客户满意；否则，他们会选择离开。&lt;/p>
&lt;p>频繁的事故也会影响事故响应人员，因为处理事故的压力很大。找到具备适当技能来处理事故的站点可靠性工程师 (SRE) 既具挑战性又昂贵，因此你不希望通过让他们只负责事故响应来使其疲惫不堪。相反，你应该通过主动预防事故来提供他们技能成长的机会。在这份报告的后面，我们将进一步讨论这一点，以及减少压力和改善值班健康的方法。&lt;/p>
&lt;h2 id="并非所有问题都是事故">并非所有问题都是事故
&lt;/h2>&lt;p>区分事故和中断很重要，同样重要的是区分指标、告警和事故。如何区分指标和告警，告警和事故？并不是每个指标都会成为告警，也不是每个告警都是事故。为了帮助你理解这些术语的含义，我们将首先讨论监控和告警在维护系统健康中的作用。&lt;/p>
&lt;h3 id="监控">监控
&lt;/h3>&lt;p>监控是保持系统健康的最常见方法。根据《SRE Google 运维解密》的定义，监控是指收集、处理、汇总和展示系统的实时定量数据，例如查询计数和类型、错误计数和类型、处理时间和服务器在线时间。监控是一种度量。&lt;/p>
&lt;p>在度量方面，我们建议采取以客户为中心的方法来制定服务质量目标 (SLO；在第 26 页的“减少事故的影响”中有更详细的讨论) 和优化客户体验。这意味着收集能准确反映客户体验的指标，并尽可能收集多种度量，如黑盒、基础设施、客户端和应用程序指标。使用不同方法测量相同的值可以确保冗余和准确性，因为不同的测量方法各有优势。以客户为中心的仪表板也能很好地反映客户体验，对于故障排除和事故调试至关重要。&lt;/p>
&lt;p>重要的是，要专注于度量可靠性和对用户的影响，而不是度量已确认的事故个数。如果专注于后者，员工可能会因为害怕被惩罚而犹豫声明事故。这可能导致事故声明延迟，不仅浪费时间和丢失数据，还因为事后处理效果不佳。因此，声明事故并及时关闭比事后补救要好。&lt;/p>
&lt;p>在这方面，有时人们会将可靠性和可用性混用，但可靠性不仅仅是“服务可用性”，特别是在复杂的分布式系统中。可靠性是指在大规模下提供一致服务水平的能力，包括可用性、延迟和准确性等方面。这在不同服务中可能（也应该）有不同的体现。例如，YouTube 和 Google 搜索的可靠性是否相同？根据你的服务，不同用户的期望会有所不同，可靠性也可能有不同的定义。&lt;/p>
&lt;p>一般来说，如果系统的中断更少、更短、更小，它就更可靠。因此，最终取决于用户能容忍的停机时间。采用以客户为中心的方法，用户定义了你的可靠性。因此，需要尽可能接近地度量用户体验。（我们在第 26 页的“减少事故的影响”中对此进行了更详细的讨论。）&lt;/p>
&lt;h3 id="告警">告警
&lt;/h3>&lt;p>我们已经讨论了系统健康监控。现在让我们谈谈监控的关键组成部分：告警(Alerting)。当监控发现系统行为异常时，会发送一个信号，这个信号就是告警。告警可能意味着两件事：某些东西已经损坏，需要有人修复；或者某些东西可能即将损坏，需要有人检查。紧急程度——即何时需要采取行动——应指导你选择如何响应。如果需要立即采取（人工）行动，应发送紧急通知。如果在接下来的几个小时内需要人工行动，应发送告警。如果不需要立即行动——例如信息是用于分析或故障排除——则信息保持为指标或日志的形式。&lt;/p>
&lt;p>需要注意的是，告警的方式可能因组织偏好而异。例如，它可以在仪表板上显示，或以工单形式呈现。在谷歌，通常采用后者；监控系统在 Google 问题追踪器中创建一个具有不同优先级的“错误-bug”，这就是我们的工单形式。&lt;/p>
&lt;p>现在你已经了解了基础知识，让我们深入探讨可操作的告警。&lt;/p>
&lt;h3 id="可操作告警的重要性">可操作告警的重要性
&lt;/h3>&lt;p>如前所述，当特定条件满足时，告警会触发。但你必须谨慎，只针对真正重要和可操作的事项发出告警。考虑以下场景：作为当班人员，你在凌晨 2 点被呼叫，因为过去 5 分钟内 QPS 增加了 300%。这可能是一个流量波动大的服务，有时流量稳定，但偶尔会有大客户发出大量查询。&lt;/p>
&lt;p>这种情况下半夜叫醒你有何意义？实际上毫无意义。这个告警是不可操作的。只要服务没有崩溃的风险，就没有必要叫人起床。查看历史数据会显示服务需要应对这样的流量峰值，但这些峰值本身并不构成问题，不应生成告警。&lt;/p>
&lt;p>再考虑一个更微妙但更常见的可操作告警问题。你的公司需要每晚备份生产数据库，因此设置了一个每四小时运行一次的 cronjob 进行备份。一次备份由于瞬时错误失败——用于备份的副本发生了硬件故障，并被负载均衡器自动移出了服务模式——但随后几次备份都成功了。结果还是创建了一个工单。&lt;/p>
&lt;p>因为一次备份失败而创建工单是不必要的。这只会产生噪音，因为系统在无人干预的情况下自行恢复了。&lt;/p>
&lt;p>这种情况经常发生。虽然最终只需简单地关闭工单并附上“处理时已经好了”的信息，但这种行为存在一些问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>琐事 (toil)&lt;/strong> 有人不得不花时间查看工单、分析图表和报告，最终发现他们不需要采取任何行动。&lt;/li>
&lt;li>&lt;strong>告警疲劳 (alert fatigue)&lt;/strong> 如果 95% 的“数据库备份失败”告警只是被简单关闭，实际问题被忽视的风险会显著增加。&lt;/li>
&lt;/ul>
&lt;p>如前所述，事故是具有特定特征的问题。告警只是一个信号，表明可能有事故正在发生。你可能会遇到很多告警但没有实际事故。虽然这种情况不理想，但并不意味着你需要启动正式的事故管理技术；也许这是计划中的维护，你预期会收到这些告警。&lt;/p>
&lt;p>同样，你也可能有事故但没有任何告警——例如，你从安全团队得知他们怀疑生产系统被入侵，但你的团队没有触发任何相关告警。&lt;/p>
&lt;p>实际上，人们对告警和事故的感知有所不同：&lt;/p>
&lt;ul>
&lt;li>正式的事故管理比简单处理告警要更有压力。&lt;/li>
&lt;li>经验较少的响应者比经验丰富的响应者更不容易启动事故管理流程。&lt;/li>
&lt;li>事故更可能需要额外的团队资源，因此其他团队成员可以更早判断是否需要介入。&lt;/li>
&lt;/ul>
&lt;p>这种情况不仅限于你的团队，事实上，它适用于整个组织。&lt;/p>
&lt;p>告警通常比事故多。获取告警的基本指标（例如，每季度有多少告警）是有用的，但事故需要更详细的分析（例如，上季度的五个重大事故都是由于新功能在预生产环境中测试不足）。你不希望这些报告被所有收到的告警信息淹没。考虑到受众——告警指标主要对团队有用，而事故报告可能会被高层阅读，因此需要管理适用的范围。&lt;/p>
&lt;p>希望这能澄清何时你可以更自信地说“这不是事故”。然而，这也带来了一个二分法：如果有些事情不是事故，那意味着有些事情是事故。你该如何处理这些事故？我们将在下一节探讨。&lt;/p>
&lt;h2 id="事故管理生命周期">事故管理生命周期
&lt;/h2>&lt;p>最佳的事故管理不仅仅意味着尽可能快速地处理事故。良好的事故管理意味着关注事故的整个生命周期。在本节中，我们讨论一种系统化的事故管理方法。将事故视为系统中持续存在的风险。处理这些风险的过程称为事故管理生命周期。事故管理生命周期涵盖了准备、响应、恢复和缓解事故所需的所有活动。这是运营服务的持续成本。&lt;/p>
&lt;p>所谓生命周期，我们指的是事故存在的每个阶段。这些阶段如图 1-1 所示，具体如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>准备 Preparedness&lt;/strong> ：包括公司或团队为应对事故发生而采取的所有措施。这可能包括工程上的安全措施（如代码审查或发布流程）、事故管理培训，以及识别错误的实验或测试演习。这还包括设置监控和告警。&lt;/li>
&lt;li>&lt;strong>响应 Response&lt;/strong> ：当触发因素导致潜在风险变为实际问题时的应对措施。这包括响应告警、决定问题是否是事故，并与受影响的人员沟通。&lt;/li>
&lt;li>&lt;strong>缓解和恢复 Mitigation and recovery&lt;/strong> ：使系统恢复到功能状态的一系列行动。这包括为了避免影响或防止影响扩大的紧急缓解措施。恢复阶段还包括进行事后分析和反思，撰写事后报告。事后报告是一份关于事故的书面记录，包含采取的措施、影响、根本原因和防止再次发生或减少未来影响的后续行动。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44.webp"
width="932"
height="925"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44_hu_9e150a3cf62c54c8.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44_hu_3114e4922f7810c.webp 1024w"
loading="lazy"
alt="图 1-1. 事故管理生命周期"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>一旦恢复阶段结束，你将重新进入准备阶段。根据系统的复杂性，所有这些阶段可能同时进行——但可以确定的是，至少总有一个阶段在进行中。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书：SRE 容量管理最佳实践</title><link>https://martinliu.cn/blog/sre-best-practices-for-capacity-management/</link><pubDate>Mon, 17 Jun 2024 13:23:28 +0800</pubDate><guid>https://martinliu.cn/blog/sre-best-practices-for-capacity-management/</guid><description>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/pexels-fox-58267-9097039.webp" alt="Featured image of post Google 白皮书：SRE 容量管理最佳实践" />&lt;p>作为 SRE，您需要确定服务的初始资源需求，并确保服务在意外需求下仍能稳定运行。容量管理是指确保您的服务拥有足够的资源，从而实现可扩展性、高效性和可靠性。无论是用户端服务还是公司内部服务，都必须应对预期和意外的增长。我们将利用率定义为资源使用的百分比。确定初始资源利用率并预测未来需求并不容易。我们提供了一些估算利用率和识别盲点的方法，并讨论了构建冗余以避免故障的好处。利用这些信息，您可以设计架构，使每个组件的资源分配增加能够有效地线性提升整个服务的容量。&lt;/p>
&lt;h2 id="容量管理原则">容量管理原则
&lt;/h2>&lt;p>在本文中，服务被定义为提供一组功能的所有二进制文件（服务栈）的集合。成功的容量管理需要从两个复杂的角度出发：资源制备，即现在运行服务所需的初始容量；以及容量规划，以保障未来服务的可靠性。&lt;/p>
&lt;p>容量管理的核心原则包括以下三点，以保持服务的可扩展性、可用性和可管理性：&lt;/p>
&lt;ol>
&lt;li>服务必须高效利用资源。大型服务需要大量资源，部署和维护成本高。&lt;/li>
&lt;li>服务必须可靠运行。限制资源容量以提高效率可能导致服务故障和停机风险，因此需要在效率和可靠性之间找到平衡。&lt;/li>
&lt;li>必须预见服务的增长。增加服务资源可能需要较长时间，且存在实际部署限制。这可能涉及购买新设备或建设新数据中心，也可能需要增加其他依赖系统和基础设施的容量。&lt;/li>
&lt;/ol>
&lt;h2 id="容量管理的复杂性">容量管理的复杂性
&lt;/h2>&lt;p>大型服务如同复杂的生命体，其行为有时难以预期。做出可能改变服务范围的工程决策时，需要考虑以下几个方面：&lt;/p>
&lt;ul>
&lt;li>服务性能。了解不同组件在负载下的表现。&lt;/li>
&lt;li>服务故障模式。考虑已知故障模式下服务的表现，以及面对未知故障模式时的可能行为。通过列出可能的瓶颈和服务依赖项，做好准备。&lt;/li>
&lt;li>需求。首先要确定预期的用户数量和流量、用户分布的位置以及他们的使用模式。&lt;/li>
&lt;li>自然增长。估计随着时间推移，需求可能会如何增长。&lt;/li>
&lt;li>功能扩展。考虑新增功能或服务比预期更成功时，对长期资源需求的影响。&lt;/li>
&lt;li>扩展能力。了解在增加资源分配时，服务的扩展情况。&lt;/li>
&lt;li>市场分析。评估市场变化对获取额外资源能力的影响。研究新技术，这些技术可以提高服务的性能、可靠性或效率，以及实施这些技术的成本。调查如何快速采用新技术，例如用 SSD 替换 HDD。&lt;/li>
&lt;/ul>
&lt;p>容量管理的目标是控制不确定性。在未知环境中，服务必须现在可用，并在未来继续运行。这是一种充满挑战但值得追求的微妙平衡：在效率与可靠性、准确性与复杂性、努力与收益之间做出权衡。&lt;/p>
&lt;p>使用数据来驱动容量决策。尽管你仍然会犯一些不可避免的错误，并需要创造性地解决问题，但最终的结果是一个可靠的关键业务服务。&lt;/p>
&lt;p>资源制备解决的是战术问题：“如何保持服务马上能立即运行起来？” 而容量规划解决的是战略问题：“如何在可预见的未来保持服务运行？”&lt;/p>
&lt;p>以下章节将详细讨论这些主题。&lt;/p>
&lt;h2 id="资源制备">资源制备
&lt;/h2>&lt;p>我们将讨论集中在服务系统上，即通过查找数据来响应用户请求的服务。不过，这些原则同样适用于数据存储服务、数据转换服务以及其他大多数计算机任务。&lt;/p>
&lt;p>资源制备涉及确定服务所需资源的目标利用率并分配这些资源。目标利用率被定义为在保证服务可靠运行的情况下，特定资源类别的最高可能利用率。资源类别指的是特定类型的计算资产，比如 CPU、RAM 和存储。&lt;/p>
&lt;p>要为你的服务进行资源制备，需要使用需求信号作为输入，并创建包含具体资源分配的生产布局，如图 1 所示。服务通常使用多种资源类别。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37.webp"
width="940"
height="476"
srcset="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37_hu_488080937d391812.webp 480w, https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37_hu_da7ba864277c470b.webp 1024w"
loading="lazy"
alt="图 1: 资源制备解决方案中的需求信号和资源分配"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>&lt;strong>资源短缺的影响&lt;/strong>&lt;/p>
&lt;p>资源短缺会导致服务以不同方式失败，这取决于资源类别。&lt;/p>
&lt;p>当资源成为服务关键路径中的瓶颈时，用户会遇到延迟增加的情况。在最糟糕的情况下，瓶颈会导致请求积压，延迟不断增加，最终导致排队请求超时。如果没有缓解计划，服务将无法处理请求，进而发生故障。故障将持续，直到传入流量减少使服务恢复，或者服务重新启动。&lt;/p>
&lt;p>经常在关键路径中出现的资源包括：&lt;/p>
&lt;ul>
&lt;li>处理能力&lt;/li>
&lt;li>网络&lt;/li>
&lt;li>存储吞吐量&lt;/li>
&lt;/ul>
&lt;p>当资源成为非关键路径中的瓶颈时，服务的一些非时间关键功能（如维护或异步处理）会出现延迟。如果这些任务被延迟过长，它们可能会影响服务性能、功能、数据完整性，甚至在极端情况下导致故障。&lt;/p>
&lt;p>当服务用尽存储时，写入操作会失败。如果某些读取依赖于写入操作，例如服务或存储解决方案存储 Paxos 状态以进行一致性读取，或者存储解决方案跟踪所有访问的数据及其访问时间，这些读取操作也可能会失败。&lt;/p>
&lt;p>当其他资源（如内存或网络套接字）不足时，服务可能会崩溃、重启或挂起。资源不足的服务可能会因为垃圾收集而陷入频繁操作，或者以其他方式表现异常。这些故障会降低服务的容量，并可能触发需要人工干预的级联故障。&lt;/p>
&lt;p>有关缓解策略，请参见下文的“减少故障影响”部分。&lt;/p>
&lt;p>&lt;strong>估算利用率&lt;/strong>&lt;/p>
&lt;p>由于服务和资源类别的不同，每个服务的资源使用率和目标利用率都不同。为了准确估算特定服务的目标利用率，需要考虑以下几个方面。&lt;/p>
&lt;p>&lt;strong>峰值使用率&lt;/strong>&lt;/p>
&lt;p>峰值使用率是指在特定时间段内的最高使用率，取决于服务的性质和用户群体。例如，业务相关服务在工作日早晨可能达到使用高峰，而社交相关服务则在下午晚些时候、晚上、周末或社交活动期间达到峰值。突发事件也可能导致使用率骤降或飙升。全球服务的用户群分布在不同国家和时区，形成更复杂的日流量模式。&lt;/p>
&lt;p>假设负载不恒定，资源利用率在峰值流量期间不应超过服务分配资源的100%。这样，服务在应对峰值时不会因过度制备而浪费资源。&lt;/p>
&lt;p>&lt;strong>最大峰值利用率&lt;/strong>&lt;/p>
&lt;p>即使在峰值时，也不应让服务以100%的利用率运行。一些软件、语言或平台在CPU使用率接近100%时会出现性能问题或垃圾回收抖动。如果某个组件的内存利用率达到100%，服务可能会因内存不足（OOM）错误而崩溃。&lt;/p>
&lt;p>调整监控以捕捉足够小时间帧（微秒或秒）内的精确资源利用率是件繁琐的事情。因此，很难确定低延迟应用程序的资源使用峰值。&lt;/p>
&lt;p>&lt;strong>冗余&lt;/strong>&lt;/p>
&lt;p>发布问题、硬件故障、软件错误甚至计划维护都会导致服务组件失败或重启。这可能导致从单个组件崩溃到整个服务下线的各种故障。&lt;/p>
&lt;p>冗余是一种系统设计原则，指在替换失败组件时激活的重复组件。冗余程度由N+x表示，其中N是活动组件的总数，x是备份组件的数量。例如，N+3表示系统可以有三个组件故障，因为有三个备份组件可以替换它们。这样，无论组件总数（N）是多少，服务都能正常运行。&lt;/p>
&lt;p>冗余可以在区域内或跨区域应用。区域是位于不同物理地点的独立故障域，这样网络问题或自然灾害不会同时影响多个区域。&lt;/p>
&lt;p>&lt;strong>可用区域内冗余&lt;/strong>&lt;/p>
&lt;p>实现可用区域内的冗余相对简单。在一个区域内，需要保护服务免受二进制文件或物理机器故障的影响。通常，可以通过在每个区域运行额外的服务二进制文件实例，并使用负载平衡解决方案在出现故障时重定向流量来实现。冗余程度与基础设施的服务质量协议 (SLA) 相关。SLA 考虑了可同时处于故障状态的机器总数以及在新机器上重新启动二进制文件实例的速度。&lt;/p>
&lt;p>需要注意的是，可用区域内冗余无法保护服务免受导致整个区域瘫痪的故障（如电力、网络或自然灾害）的影响。&lt;/p>
&lt;p>&lt;strong>跨区域冗余&lt;/strong>&lt;/p>
&lt;p>跨区域冗余更加复杂。为了防止整个区域的中断，需要在多个区域部署副本或完整的服务堆栈副本，以实现跨区域的冗余，从而应对高峰期的服务负载。注意，每个副本必须有足够的容量，以便在声明的冗余情况下，任何数量的副本停机时都能服务所有预期负载。无论副本的数量（N）是多少，服务的区域冗余程度定义如下：&lt;/p>
&lt;ul>
&lt;li>N+0：服务运行但无法容忍任何区域中断&lt;/li>
&lt;li>N+1：服务能承受单个区域中断&lt;/li>
&lt;li>N+2：服务在两个区域中断时仍能运行&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>虽然部分冗余涉及容量，但也与服务架构本身有关。例如，一致性存储服务通常要求大多数副本处于运行状态，以确保写操作不会被回滚。
为 N+2 制备服务对可靠性有积极影响：可以计划整个区域的维护，但在维护期间会将冗余降至 N+1。服务仍然可以容忍另一个区域的意外事件。这将冗余降至 N+0，但不会导致中断。需要注意的是，切换到另一个区域可能会对可见的延迟产生影响。&lt;/p>
&lt;p>当冗余为 N+0 并且无法容忍进一步的故障时，优先任务是尽快缓解或解决意外事件。一个选项是完成或回滚计划的维护工作，以将服务恢复到 N+1。否则，任何其他区域出现事件都可能导致面向用户的中断。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54.webp"
width="1813"
height="707"
srcset="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54_hu_d334953dad671404.webp 480w, https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54_hu_ae384dffa3952b86.webp 1024w"
loading="lazy"
alt="图 2: 服务制备资源成本的示例比较（以三个副本和五个副本为例）"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="615px"
>&lt;/p>
&lt;p>以上算法解释：&lt;/p>
&lt;p>【需求】预期负载：每秒 100 次请求 (rps)&lt;/p>
&lt;p>&lt;strong>在 3 个副本上运行 N+2&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许 2 个副本宕机 (N+2)&lt;/li>
&lt;li>3 - 2 = 1 个副本继续运行，处理 100 rps&lt;/li>
&lt;li>每个副本被配置处理 100 rps / 1 个副本 = 100 rps/副本&lt;/li>
&lt;li>总制备容量为 100 rps/副本 x 3 个副本 = 300 rps&lt;/li>
&lt;li>在平稳状态下，N+2 的最大利用率为 100 rps / 300 rps = 33%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在 5 个副本上运行 N+2&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许 2 个副本宕机 (N+2)&lt;/li>
&lt;li>5 - 2 = 3 个副本继续运行，处理 100 rps&lt;/li>
&lt;li>每个副本被配置处理 100 rps / 3 个副本 = 34 rps/副本&lt;/li>
&lt;li>总制备容量为 34 rps/副本 x 5 个副本 = 170 rps&lt;/li>
&lt;li>在平稳状态下，N+2 的最大利用率为 100 rps / 170 rps = 59%&lt;/li>
&lt;/ul>
&lt;p>【方案对比】在 5 个副本上运行该服务的成本是运行在 3 个副本上的成本的 56.6%。这个比率是通过计算 170/300 得出的。&lt;/p>
&lt;p>&lt;strong>冗余的成本&lt;/strong>&lt;/p>
&lt;p>服务在越多的区域运行，运行任何级别冗余的成本就越低。考虑图 2 中描述的服务。它需要运行在 N+2 冗余模式下。在第一个设置中，它运行三个副本（N=3），在第二个设置中，它运行五个副本（N=5）。两种配置都有两个备用副本（+2），因此可以承受两个副本的故障。
接下来，检查五个副本的设置。其副本较小，即使两个副本失败并且两个备用副本都在使用中，仍有三个活动副本共享负载。这导致五个副本的 N+2 设置成本是三个副本服务使用相同冗余级别成本的 56.6%。参见图 2 中提供的计算。&lt;/p>
&lt;p>&lt;strong>同质和异质服务&lt;/strong>&lt;/p>
&lt;p>实现同质大小副本的服务冗余比实现异质大小副本的服务冗余更容易。您的服务必须准备好处理最大的区域故障。如果区域容量不同（即异质），在每个区域中，承受其他最大区域不可用的容量需求是不同的。结果是，较小的区域需要更多的资源，整体所需的资源来提供相同的负载更高。&lt;/p>
&lt;p>&lt;strong>复制和分布式流量&lt;/strong>&lt;/p>
&lt;p>为冗余制备资源还取决于服务流量的特性。无状态服务（如处理用户请求的 Web 服务器）接收分布在副本之间的流量。从存储服务读取的请求也可以分布在不同区域的副本之间。为这些服务制备 N+1 或 N+2 冗余是简单的，遵循前面例子的逻辑。处理跨区域复制请求（如写入）的服务行为不同。每次写入实体的请求需要最终写入每个副本，以保持服务数据在副本之间的一致性。当副本变得不可用时，复制写入请求不会对保持可用的副本产生额外的负担。然而，当不可用的副本重新上线时，会产生成本。此副本需要赶上停机期间错过的未完成写入。这一操作增加了其负担。保持运行的副本提供了同步恢复副本所需的数据，在恢复期间增加了所有副本的负载。理想情况下，应限制这一操作以避免影响整个副本集的低延迟流量。每个服务和每个组件接收的复制和分布流量的比例不同，这需要在资源制备时考虑。&lt;/p>
&lt;p>&lt;strong>对延迟不敏感的进程&lt;/strong>&lt;/p>
&lt;p>服务通常有对延迟不敏感的进程，如批处理作业、异步请求、维护和实验。然而，这些进程在处理生产负载（对延迟敏感）时给服务带来额外的压力。因此，服务需要额外的资源来容纳更高的峰值，增加了其成本。您可以通过分配较低优先级或在低负载期间调度来最小化对延迟不敏感请求的额外成本，以减少整体峰值。注意，这两种解决方案都需要经过适当测试并仔细部署以防止服务中断。&lt;/p>
&lt;p>&lt;strong>未知的额外资源&lt;/strong>&lt;/p>
&lt;p>最后一个要考虑的方面是未知因素。制备服务时有许多正当理由添加额外资源：例如，由另一个团队支持的底层库的性能回归，或实施外部团队要求（如加密所有 RPC）。如果出现问题，备用容量可以保持服务在延迟和错误方面按预期运行。然而，请记住，这一决定可能很昂贵，因此请确保在可靠性、可预测性和扩展性之间的权衡是值得的。&lt;/p>
&lt;h2 id="容量规划">容量规划
&lt;/h2>&lt;p>资源制备是指确定当前保持服务运行所需的资源量，而容量规划则是预测未来的资源需求以确保资源供应。&lt;/p>
&lt;p>&lt;strong>容量规划概述&lt;/strong>&lt;/p>
&lt;p>与资源制备类似，容量规划旨在确定维持服务所需的每种计算资源的数量。然而，容量规划需要在多个时间点上做出预测，例如三个月、六个月或一年的资源需求。&lt;/p>
&lt;p>对于现有服务，容量规划通过分析历史需求来预测增长，并在此基础上考虑服务的最大峰值利用率、冗余需求、对延迟不敏感的进程以及未知因素进行资源制备。通常，您还需要在预测中加入计划中的新资源消费者，如新服务、营销活动和新功能等。&lt;/p>
&lt;p>您需要为服务中的每个组件分配不同数量的每种资源。例如，对于 RAM，Web 服务器可能需要大量 RAM，而代理服务器可能只需要很少的 RAM。为了在规划未来容量时确定每种资源的需求量，需要考虑以下因素：&lt;/p>
&lt;ul>
&lt;li>您服务中的不同组件数量（如数据库、代理、应用）&lt;/li>
&lt;li>每个组件的实例数量（如 1 个数据库，2 个代理，2 个应用）&lt;/li>
&lt;li>您的服务运行的区域（如跨区域 N+1 或 N+2）&lt;/li>
&lt;li>您的预测所需的数据点数量&lt;/li>
&lt;/ul>
&lt;p>虽然这是复杂公式的一个简单示例，但像 RAM 这样的资源类别可能需要按照以下公式进行计算：&lt;/p>
&lt;blockquote>
&lt;p>（不同组件的数量）×（每个组件的实例数量）×（区域数量）×（数据点数量）×（其他影响因素）&lt;/p>&lt;/blockquote>
&lt;p>由此可见，当您考虑所有区域中所有服务器类型的所有资源类别并加入冗余时，所需确定的容量值数量将呈指数增长。&lt;/p>
&lt;p>&lt;strong>预测资源&lt;/strong>&lt;/p>
&lt;p>容量规划是一个极其复杂的过程，因为有无数因素在起作用，而且每个因素都可以独立变化。基于上述高级概述，预测时请考虑以下因素：&lt;/p>
&lt;ul>
&lt;li>按组件分类的资源类别 ：除了确定组件的总数外，还必须考虑每个组件使用的各种资源类别：例如 RAM、CPU、存储、网络等。一个组件可能使用一组资源类别，而其他组件可能使用完全不同的资源类别。如果您的服务包含许多组件，那么需要跟踪的资源类别会迅速增加。&lt;/li>
&lt;li>多个区域 ：如果需要在全球多个区域运行，可以想象预测各种机器（如 Web 服务器、数据库服务器、应用服务器、代理服务器等）CPU 等单一资源类别的难度会更大。再加上所有机器的其他资源类别，以及跨所有区域的冗余，在给定的时间段内（如六个月或一年后）进行规划时难度更大。&lt;/li>
&lt;li>服务需求：需求取决于新服务的成功和采用率，只有在服务推出后才能知道。需要随时间更新预测并修正长期预测。需要为突然的未计划负载增加做好准备，否则可能会导致服务中断。&lt;/li>
&lt;/ul>
&lt;p>其他意外事件如自然灾害、网络中断或停电会大幅改变流量模式。即使是计划中的事件，如社交活动或假期的开始或结束，也会以意想不到的方式影响服务。随着新功能的推出或用户基础的变化，这些事件每年的变化影响难以推测。&lt;/p>
&lt;p>不同时区的用户分布变化也会对服务产生影响。流量可能会在一天内分布更多或更少，意外地增加或降低峰值需求。&lt;/p>
&lt;p>&lt;strong>增长&lt;/strong>&lt;/p>
&lt;p>服务的增长取决于其成功与否。用户可能需要一些时间（以及营销活动）来了解您的服务并对其产生兴趣，而这种兴趣可能会随着时间慢慢增加或迅速飙升。其他互联网服务可能依赖于您的服务，它们的成功或失败可以直接影响您的服务。成功的外部服务可以为您带来更多流量，反之亦然。&lt;/p>
&lt;p>社会、经济、政治或其他因素可能会增加或减少您的用户流量。您需要确定您的增长率，并在容量规划会议中考虑这些因素。&lt;/p>
&lt;p>&lt;strong>预测示例&lt;/strong>&lt;/p>
&lt;p>为了说明服务所有者必须正确预测的各种资源类别值，我们使用一个简单的示例：&lt;/p>
&lt;ol>
&lt;li>两组件服务的资源类别：假设您有一个小型服务，如社交媒体应用。该服务由两台机器组成，一台 Web 服务器和一个数据库。Web 服务器使用 CPU 和 RAM，数据库使用 CPU、RAM、HDD 存储、HDD 吞吐量和 SSD 存储。这一共是六个独特的资源类别值。这远不是现实应用中的完整值集合。如果有三个副本，您需要定义 18 个值。如果按季度预测未来 12 个月，则需要定义 72 个值（每年四个季度 × 18）。&lt;/li>
&lt;li>影响您服务的趋势：您了解到，您的社交媒体服务受季节性趋势影响。在假期开始时（11 月至 12 月），流量会增加，春假和夏季开始时也会有流量高峰。预测时，不能只考虑资源的线性增长，还要考虑一年中高峰时段的流量峰值。每个月批处理任务（如数据清理或数据库压缩）期间，负载可能也会有所不同，甚至每周负载也会变化，这使得预测更加复杂。&lt;/li>
&lt;/ol>
&lt;h2 id="最佳实践">最佳实践
&lt;/h2>&lt;p>我们提出了一些容量管理的最佳实践，帮助您预见和解决常见问题和陷阱。&lt;/p>
&lt;p>&lt;strong>负载测试&lt;/strong>&lt;/p>
&lt;p>在目标利用率及以上运行服务的小副本，进行故障切换、缓存失效、发布等操作。评估服务如何应对和恢复过载，通过实验证实资源分配是否足以应对定义的负载。在从数据中推断估计值时要小心。如果一个分配有一个 CPU 的二进制实例每秒可以处理 100 个请求，那么通常可以假设两个分配有一个 CPU 的二进制实例总共每秒可以处理 200 个请求。但不能假设一个分配有两个 CPU 的二进制实例每秒可以处理 200 个请求，因为可能存在其他瓶颈。&lt;/p>
&lt;p>&lt;strong>全面评估容量&lt;/strong>&lt;/p>
&lt;p>尽管需要为未知情况添加额外容量，但要避免堆积过多资源而无意中使服务过度制备。应提供足够的备用资源，使服务能够应对突发问题。这可以在服务比预期更成功且资源不足时，争取一些额外时间来获取资源。&lt;/p>
&lt;p>&lt;strong>降低停机影响&lt;/strong>&lt;/p>
&lt;p>可以对服务进行准备，使其在资源耗尽时停机的影响降到最低。建议的预防措施包括：&lt;/p>
&lt;ul>
&lt;li>优雅降级：当服务负载过大时，禁用一些非关键功能以减少资源使用。&lt;/li>
&lt;li>拒绝服务 (DoS) 攻击保护：防止流量增加来自恶意方。&lt;/li>
&lt;li>有效超时：请求最终超时，服务放弃这些请求而不再浪费资源。&lt;/li>
&lt;li>负载分流：当服务负载过大时，快速拒绝请求，允许上层路由层重试请求或使其快速失败。这样可以避免服务落后并浪费资源在最终会超时的请求上。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>配额管理和限流&lt;/strong>&lt;/p>
&lt;p>部署配额系统有助于限制服务与后端之间的吞吐量，为使用同一后端的其他服务提供隔离。当服务发送的请求超过预期并达到配额限制时，后端会限制服务，而不是让自己过载并影响其他使用同一后端的服务。&lt;/p>
&lt;p>&lt;strong>监控&lt;/strong>&lt;/p>
&lt;p>通过监控服务收集的相关指标为资源制备和容量规划决策提供数据。使用我们上面的示例服务作为模型，以下是非常有用的：&lt;/p>
&lt;p>负载指标&lt;/p>
&lt;ul>
&lt;li>每秒的传入请求数&lt;/li>
&lt;li>对延迟不敏感的负载&lt;/li>
&lt;li>活跃用户数&lt;/li>
&lt;li>总用户数&lt;/li>
&lt;/ul>
&lt;p>资源指标&lt;/p>
&lt;ul>
&lt;li>资源分配&lt;/li>
&lt;li>实际资源使用情况&lt;/li>
&lt;li>配额使用情况&lt;/li>
&lt;li>被限制的请求数量&lt;/li>
&lt;/ul>
&lt;p>性能指标&lt;/p>
&lt;ul>
&lt;li>延迟&lt;/li>
&lt;li>错误&lt;/li>
&lt;/ul>
&lt;p>高阶健康指标（用于过滤其他受污染的指标数据）&lt;/p>
&lt;ul>
&lt;li>服务受到停机影响的时间&lt;/li>
&lt;li>服务正在进行维护的时间&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>告警&lt;/strong>&lt;/p>
&lt;p>通过告警进行资源制备和容量规划，以防止停机。一些有用的告警示例包括：当服务未达到预期的冗余水平时触发的告警，表示资源不足的告警，以及性能问题的告警等。&lt;/p>
&lt;p>&lt;strong>资源池化&lt;/strong>&lt;/p>
&lt;p>资源池化是将资源分组，使多个服务共享它们，而不是为每个服务单独分配。池化通常用于减少规划复杂性和资源碎片化，从而提高服务效率。实施该策略时，大型服务的规划仍需详细且精确，但小型服务可以共享一个大致和保守制备的资源池。这种方法减少了容量规划的工作量，但牺牲了服务的隔离性。&lt;/p>
&lt;p>&lt;strong>一般 SRE 最佳实践&lt;/strong>&lt;/p>
&lt;p>遵循适用于所有服务的基本 SRE 原则。例如，将容量状态作为配置存储在版本控制系统中，并要求对任何更改进行同行评审。自动化执行、逐步推出所有更改、持续监控服务，并准备在需要时进行回滚。&lt;/p>
&lt;p>在发生故障或其他问题时，进行无责后事件审查，诚实地从错误中吸取教训，并致力于改进系统，以避免重复这些错误。&lt;/p>
&lt;h2 id="评估服务容量">评估服务容量
&lt;/h2>&lt;p>在评估新服务或现有服务的容量时，我们建议按照以下步骤来确定其资源需求：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>硬件&lt;/th>
&lt;th>规格&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>处理器&lt;/td>
&lt;td>CPU 类型和核心数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>图形处理单元&lt;/td>
&lt;td>GPU 类型和数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>存储&lt;/td>
&lt;td>HDD（硬盘驱动器）和 SSD（固态硬盘）：&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 存储容量（TB）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 带宽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• IOPS（每秒输入输出操作）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>网络&lt;/td>
&lt;td>数据中心内部、数据中心之间、ISP 访问：&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 延迟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 带宽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>后端&lt;/td>
&lt;td>所需的服务和容量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>其他&lt;/td>
&lt;td>AI 加速器及其他特殊硬件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>估算服务所需的资源，以应对预期负载。使用表 1 的模板，填写不同资源类别的预期服务需求。&lt;/li>
&lt;li>计算并考虑服务各组件的目标利用率。您可能需要进行负载测试来评估：
&lt;ul>
&lt;li>峰值使用率&lt;/li>
&lt;li>最大峰值利用率&lt;/li>
&lt;li>冗余&lt;/li>
&lt;li>对延迟不敏感的过程&lt;/li>
&lt;li>未知情况下的备用资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>考虑以下因素：
&lt;ul>
&lt;li>优先级&lt;/li>
&lt;li>地区&lt;/li>
&lt;li>服务组件&lt;/li>
&lt;li>具体时间点及未来时间（如每月、每季度、六个月、一年等）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进行预测，考虑是否需要按以下方面规划容量：
&lt;ul>
&lt;li>优先级&lt;/li>
&lt;li>地区&lt;/li>
&lt;li>服务组件&lt;/li>
&lt;li>每年的时间点数量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>持续学习容量管理：
&lt;ul>
&lt;li>观看视频《分布式服务的容量管理复杂性》，了解该主题的详细技术讲解 [1]。&lt;/li>
&lt;li>阅读 ;login: 文章《容量规划》 [2]。&lt;/li>
&lt;li>查看 Google 的《Site Reliability Engineering》中的《软件工程在 SRE 中的应用》、《管理关键状态》和《大规模可靠产品发布》章节 [3]。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>在本文中，我们探讨了容量管理的组成部分及其复杂性。我们将这个主题分为两个部分：资源制备和容量规划。资源制备解决了战术问题，即“如何保证服务现在能正常运行？”；而容量规划则关注战略问题，即“如何确保服务在未来也能持续运行？”回答这些问题并不简单，每个问题都需要仔细审查服务的不同方面。&lt;/p>
&lt;p>在进行资源制备时，需要检查各种需求信号（输入）及其对资源分配（输出）的影响。了解服务可能面临的预期高峰需求以及需要构建的冗余量非常重要。你是否考虑过资源短缺和供应商供应的影响？&lt;/p>
&lt;p>容量规划迫使你尝试预测服务及其负载在不断变化的未来会是什么样子。为了做到这一点，你必须充分了解你的服务。例如，你需要确定高峰周期及其发生时间，确定需要运行的地点数量及每个地点的不同能力，并预测可能影响服务的自然、社会甚至法律事件。当需要增加容量时，你是否有批准或资金来支持这一增长？&lt;/p>
&lt;p>虽然我们提出的许多最佳实践都很重要，但遵循可靠的 SRE 原则有助于简化容量管理：进行适当的负载测试，实施广泛的监控和警报，使用源代码控制系统，了解服务的优点和缺点，制定容量计划，并准备在需要时预测增长和扩展。&lt;/p>
&lt;p>&lt;strong>致谢&lt;/strong>&lt;/p>
&lt;p>作者感谢 JC van Winkel、Michal Kottman、Grant Bachman、Todd Underwood、Betsy Beyer 和 Salim Virji 的建议。&lt;/p>
&lt;p>作者：&lt;/p>
&lt;ol>
&lt;li>Luis Quesada Torres 是谷歌的一名站点可靠性工程师和经理，他负责确保谷歌云的人工智能 (AI) 产品可靠高效地运行。在业余时间，Luis 拥有多种爱好：他在多个音乐流派中作曲和制作音乐，他喜欢玩滑板，并且他会说西班牙语、英语、德语、瑞士德语和世界语。他很快还会学习日语。你可以通过 &lt;a class="link" href="mailto:luis@google.com" >luis@google.com&lt;/a> 联系他。&lt;/li>
&lt;li>Doug Colish 是谷歌在纽约市的一名技术作家，支持站点可靠性工程 (SRE) 团队。他为谷歌的《构建安全可靠系统》一书的多个章节做出了贡献。Doug 拥有超过三十年的系统工程经验，专注于 UNIX 和安全。他的爱好包括对汽车进行细节处理和改装，参加音乐会，以及观看和讨论优秀电影。你可以通过 &lt;a class="link" href="mailto:dcolish@google.com" >dcolish@google.com&lt;/a> 联系他。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>参考文献&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>[1] L. Quesada Torres, “Complexities of Capacity Management for Distributed Services,” Google Tech Talk: &lt;a class="link" href="https://www.youtube.com/watch?v=pOo0oKNM9I8" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=pOo0oKNM9I8&lt;/a>.&lt;/li>
&lt;li>[2] D. Hixson and K. Guliani, “Capacity Planning,” ;login:,vol. 40, no. 1 (February 2015): &lt;a class="link" href="https://www.usenix.org/system/files/login/articles/login_feb15_07_hixson.pdf" target="_blank" rel="noopener"
>https://www.usenix.org/system/files/login/articles/login_feb15_07_hixson.pdf&lt;/a>.&lt;/li>
&lt;li>[3] B. Beyer, C. Jones, N. R. Murphy, and J. Petoff, eds., Site Reliability Engineering, Chapters 18, 23, and 27: &lt;a class="link" href="https://landing.google.com/sre/sre-book/toc/index.html" target="_blank" rel="noopener"
>https://landing.google.com/sre/sre-book/toc/index.html&lt;/a>.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>原文地址: &lt;a class="link" href="https://static.googleusercontent.com/media/sre.google/en//static/pdf/login_winter20_10_torres.pdf" target="_blank" rel="noopener"
>https://static.googleusercontent.com/media/sre.google/en//static/pdf/login_winter20_10_torres.pdf&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>❤️ Photo by FOX: &lt;a class="link" href="https://www.pexels.com/photo/clear-drinking-glass-with-brown-liquid-9097039/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/clear-drinking-glass-with-brown-liquid-9097039/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书：产品导向的 SRE 可靠性</title><link>https://martinliu.cn/blog/product-focused-reliability-for-sre/</link><pubDate>Wed, 12 Jun 2024 13:25:58 +0800</pubDate><guid>https://martinliu.cn/blog/product-focused-reliability-for-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/pexels-pavel-danilyuk-7868970.webp" alt="Featured image of post Google 白皮书：产品导向的 SRE 可靠性" />&lt;blockquote>
&lt;p>作者：Carl Crous, Parker Roth 和 Victoria Hurd；
译者：刘征
原文：&lt;a class="link" href="https://sre.google/resources/practices-and-processes/product-focused-reliability-for-sre/" target="_blank" rel="noopener"
>https://sre.google/resources/practices-and-processes/product-focused-reliability-for-sre/&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="介绍">介绍
&lt;/h2>&lt;p>站点可靠性工程师（SRE）传统上通过其服务间接支持产品，负责服务质量目标（SLO），并提高服务的可靠性。然而，这种方法存在一些局限，有可能影响产品和用户体验：&lt;/p>
&lt;ul>
&lt;li>服务仅能部分满足用户需求和业务目标。度量服务的可靠性只是对用户需求或业务目标的近似。&lt;/li>
&lt;li>用户界面（UI）越来越复杂。在 UI 和 SRE 度量的服务之间存在许多层次，导致产品覆盖的显著差距。&lt;/li>
&lt;li>服务增长可能轻易超过组织的工程增长，导致服务被忽视或团队负担过重。&lt;/li>
&lt;li>服务支持优化了产品整体可靠性和性能的一小部分，而在这些服务范围之外存在显著风险。&lt;/li>
&lt;li>服务本质上是同步的。异步流程常常被忽视或难以优先处理，因为其成功无法通过单一服务来度量。&lt;/li>
&lt;/ul>
&lt;p>本文探讨了这些限制，并讨论了一些 Google SRE 团队如何通过将支持重新聚焦于产品和最终用户需求来解决这些问题，而不是集中于基础设施和服务。我们还讨论了 SLO 策略，描述了 Google SRE 如何定义产品，并解释了如何决定哪些因素对实现产品可靠性至关重要。&lt;/p>
&lt;p>&lt;strong>产品参与度&lt;/strong>&lt;/p>
&lt;p>为了支持产品，SRE 需要熟悉产品及其功能的设计和开发。同时，还需要了解终端用户在使用产品时的目标。&lt;/p>
&lt;p>为了获取产品和用户信息，SRE 需要与产品经理和用户体验研究人员合作。这些人根据“要完成的工作”（Jobs to be Done）和 Google 的关键用户旅程（CUJ）等框架定义产品和功能，这些框架识别终端用户的目标和期望结果。&lt;/p>
&lt;p>使用这些信息，SRE 可以识别出对产品及其用户重要的内容，并用定义产品的相同语言来定义可靠性。&lt;/p>
&lt;h2 id="服务支持模型">服务支持模型
&lt;/h2>&lt;p>SRE 的核心责任是“负责其支持服务的可用性、延迟、性能、效率、变更管理、监控、应急响应和容量规划”[3]。&lt;/p>
&lt;p>在这种模型中，服务是 SRE 团队的主要“所有权单位”和“工作对象”。这种对服务的关注是 SRE 团队从传统上所建立的方式。它驱动了 SRE 按怎样的优先级别处理工作、度量性能，并扩大范围，从而能支持到更多的服务。&lt;/p>
&lt;p>从传统上看，SRE 在基于服务的工作中表现出色，能确保他们所支持的服务具有高可用性。然而，服务的可用性并不总是能等同于：用户对产品的满意，原因如下：&lt;/p>
&lt;ul>
&lt;li>产品仍然会发生超出 SRE 团队范围的故障，例如 Web端 或移动应用中的问题。&lt;/li>
&lt;li>SRE 团队花时间响应了可能对用户并没有影响的状况。例如，HTTP 404 错误可能并不会影响用户。&lt;/li>
&lt;/ul>
&lt;p>当 SRE 的职责范围仅限于某一组服务时，SRE 团队通常并没有足够的信息来有效解决以上问题。相反，SRE 被迫在并不了解服务应如何表现的情况下，来评估这些服务。&lt;/p>
&lt;p>SRE 团队其实可以接受对产品本身的责任，而不仅限于对服务可靠性的责任。这种在更高层面上的 &lt;strong>优先考虑产品，而不是服务&lt;/strong> 的承诺。我们称其为产品支持模型，它开启了一种新的可靠性思维方式。&lt;/p>
&lt;h2 id="产品支持模型">产品支持模型
&lt;/h2>&lt;p>这种新产品支持模型的核心是: SRE 负责产品关键功能的可靠性。过去，SRE 会被分配了&lt;strong>一组服务&lt;/strong>，它们在彼时都是受到重视的关键服务。现在，SRE 会被分配了&lt;strong>一组功能和用户想要的结果&lt;/strong>。在没有传统服务所有权固定边界的情况下，SRE 团队可以将其优先事项与业务和用户结果对齐，并在每一层服务堆栈中处理更广泛和更有影响力的工作。&lt;/p>
&lt;blockquote>
&lt;p>“如果你不能度量它，你就不能改进它。” — 彼得·德鲁克&lt;/p>&lt;/blockquote>
&lt;p>在工程团队能够管理产品的可靠性之前，必须先能够度量其可靠性。建立一套提供足够广度和深度覆盖的度量标准是至关重要的，这有助于团队识别最具影响力的工程工作，同时避免想要过度优化任何特定系统的诱惑。&lt;/p>
&lt;p>在团队能够度量产品的可靠性之前，必须先知道要度量什么，以及如何度量。需要度量的内容：来自于将产品建模为一组用户可见的行为或功能，并根据它们给用户带来的价值，对这些用户行为进行优先级排序。在掌握了这份优先级列表后，团队可以开始从支持团队/服务，转型为支持产品及其用户。&lt;/p>
&lt;p>图 1 说明了如何通过与利益相关者对齐、产品建模和度量的坚实基础，来实现提高产品可靠性的终极目标。同在这些概念上达成的共识，能使团队能够将资源投入到对最终用户和业务最具影响力的问题上。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw.webp"
width="3840"
height="1655"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw_hu_b1307bd8445ea78.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw_hu_a8e161bf10f27e14.webp 1024w"
loading="lazy"
alt="图 1：产品可靠性引导工作流程"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="556px"
>&lt;/p>
&lt;h2 id="开始">开始
&lt;/h2>&lt;p>在本节中，你将学习如何实施以产品为中心的可靠性参与（engage），包括以下关键步骤：&lt;/p>
&lt;ol>
&lt;li>与利益相关者对齐&lt;/li>
&lt;li>建模产品&lt;/li>
&lt;li>度量性能&lt;/li>
&lt;li>管理可靠性&lt;/li>
&lt;/ol>
&lt;p>每个步骤列出了为 SRE 团队带来价值的中间交付物及其解锁的机会。我们鼓励你按顺序进行，但也指出了可以利用现有指标和关系的领域。&lt;/p>
&lt;h3 id="1-与你的利益相关者对齐">1. 与你的利益相关者对齐
&lt;/h3>&lt;p>与任何 SRE 参与过程类似，第一步是确定相关的利益相关者。在基于服务的参与中，依赖于 SRE 和开发团队之间的合作，而以产品为中心的参与则需要更多样化的合作伙伴。这里的更广泛的合作伙伴通常包括以下角色：&lt;/p>
&lt;ul>
&lt;li>产品经理：定义产品策略和需求。&lt;/li>
&lt;li>UX 设计师和研究人员：将需求转化为用户体验。&lt;/li>
&lt;li>工程团队：开发必要的功能和基础设施以实现用户体验。【译者注：在以服务为支持对象的模式中，SRE 仅重点关注&amp;amp;合作此方】&lt;/li>
&lt;li>支持专家：通过直接或书面沟通与最终用户互动。&lt;/li>
&lt;/ul>
&lt;p>为了成功的管理产品可靠性，关键是要确定每个角色的责任。&lt;/p>
&lt;blockquote>
&lt;p>交付物：记录角色和职责的文档，例如 RACI 矩阵[7]。&lt;/p>&lt;/blockquote>
&lt;p>在确定了所有的利益相关者后，与他们会面沟通，启动 SRE 的合作伙伴关系。&lt;/p>
&lt;h3 id="2-建模产品">2. 建模产品
&lt;/h3>&lt;p>人们（用户）使用产品是为了实现他们在现实世界里的目标。为了帮助产品团队构建能够促进用户目标的产品和服务，你需要了解产品用户的目标。&lt;/p>
&lt;p>本节介绍了两个关键概念：用户目标和步骤。用户目标描述了用户的意图和他们想要实现的目标。例如，邮件服务的一个目标可能是“与人交流”。步骤是用户为实现其目标而采取的各个独立操作。&lt;/p>
&lt;p>“要完成的工作”（JTBD）[1,5] 框架将用户目标建模为工作，而 Google 的关键用户旅程（CUJs）[2] 将用户目标建模为伴随一系列任务或步骤的目标。&lt;/p>
&lt;p>了解用户在使用产品或功能时的目标是软件开发的有力工具，因为它为你提供了关于产品最重要方面的清晰信号。用户的意图也是 SRE 可以利用的强大可靠性工具。&lt;/p>
&lt;p>假设你的产品是使用“要完成的工作”框架构建的，那么你将拥有一份有待促进的&lt;strong>用户目标列表&lt;/strong>。产品经理、UX 设计师和其他非工程学科角色，也都可能拥有这份列表。这份列表提供了用户期望目标的高阶描述，基于跨职能的数据，为涉及软件开发生命周期的许多学科提供了共同的语言。利用这些共享的用户目标作为产品支持的基础是建模产品可靠性的基础第一步。&lt;/p>
&lt;p>然而，如果你还没有用户目标列表，可能就需要自己开发这份列表，这将带来显著的工程成本，并导致只有 SRE 愿意使用该列表。更好的方法是与产品经理合作，并鼓励他们采用某种框架，并来负责定义用户目标。&lt;/p>
&lt;p>用户目标被分解为：用户为实现其总体目标，所要采取的一系列步骤。每个步骤都是独立的工作单元，与其他步骤无关。这些步骤提供以下信息：&lt;/p>
&lt;ul>
&lt;li>解释当用户在使用产品时，他们在做什么，或用户目标是什么。&lt;/li>
&lt;li>定义每个步骤的开始条件和多个成功或失败条件。&lt;/li>
&lt;li>可以与产品界面或基础设施相关联的具体操作列表，例如用户发送电子邮件时调用的 RPC。&lt;/li>
&lt;/ul>
&lt;p>以上用户目标只是：一个将步骤组合在一起的组织元素。&lt;/p>
&lt;p>基于这些步骤，你可以确定完成这些步骤所需用到的产品界面和基础设施的哪些部分。某个界面或基础设施服务的某些部分可能会涉及到不同的目标，因此它们可以具有不同的重要性级别。&lt;/p>
&lt;blockquote>
&lt;p>交付物：一个产品的用户目标登记表，包含了所有用户目标和步骤的高阶描述。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>邮件服务产品定义示例&lt;/strong>&lt;/p>
&lt;p>让我们考虑一个允许用户发送和接收电子邮件的邮件产品，还具有一些增值功能。我们将根据表 1 中描述的目标和步骤来建模此产品，并在图 2 中进行了说明。表 1 提供了可以被产品开发和支持中涉及的多个学科使用的基本产品模型。&lt;/p>
&lt;p>表 1: 用户目标和步骤示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>目标&lt;/th>
&lt;th>步骤&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>撰写邮件&lt;/td>
&lt;td>登录&lt;/td>
&lt;td>用户在登录页面进行身份验证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开撰写对话框&lt;/td>
&lt;td>用户点击**“撰写”**按钮，撰写对话框被显示出来。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>查找地址&lt;/td>
&lt;td>用户开始输入收件人的电子邮件地址，系统显示匹配的地址供选择。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>检查拼写&lt;/td>
&lt;td>当用户输入消息时，系统会突出显示拼写错误。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>发送邮件&lt;/td>
&lt;td>用户点击**“发送”**按钮，邮件被排队等待发送。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>阅读邮件&lt;/td>
&lt;td>登录&lt;/td>
&lt;td>用户在登录页面进行身份验证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开收件箱&lt;/td>
&lt;td>用户打开收件箱页面，显示所有邮件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开邮件&lt;/td>
&lt;td>用户选择一封邮件，系统显示邮件内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>接收邮件（异步）&lt;/td>
&lt;td>当邮件服务收到新邮件时，它们会自动显示在用户的收件箱中。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail.webp"
width="3593"
height="1443"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail_hu_2f0bcefa17416bf8.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail_hu_d6a5aa2116503435.webp 1024w"
loading="lazy"
alt="图 2: 用户目标和步骤的流程图（见表 1）"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="597px"
>&lt;/p>
&lt;p>&lt;strong>产品重要性和优先级&lt;/strong>&lt;/p>
&lt;p>在转型到&lt;strong>产品支持模型&lt;/strong>时，请记住，SRE 团队在学习这种新方法时会面临更大的认知负荷。请通过战略性选择支持的方式和位置，来管理 SRE 团队的额外工作量。&lt;/p>
&lt;p>例如，你可能希望将大量支持集中在核心用户目标及其步骤上，并用高成本但准确的端到端 SLO 对其进行监控。在这种情况下，你还可以通过更便宜和传统的基于服务器的 SLO 支持较不重要的目标。&lt;/p>
&lt;p>安排 SRE 工作的优先级本身就是一个具有挑战性的问题。我们通过基于特定目标与产品关键绩效指标（KPI）之间的关系，来定义重要性来解决这个问题。这些指标通常已被用来评估停机的严重性，因此使用这些 KPI 来安排 SRE 任务的优先度，可以确保 SRE 跟上不断变化的产品需求。&lt;/p>
&lt;p>在 Google，我们使用特定产品的严重性指南（如 Google Cloud 重大事故 [6] 的场景）来指示停机对产品的严重性和影响。在 Google Ads 中，收入是评估停机严重性的关键指标，而在 YouTube 中，严重性指南包括用户观看视频的时间。参见邮件服务严重性示例，了解如何为典型的邮件服务定义严重性指南。这种分类主要用于衡量停机的影响，但也提供了一个明确的重要性信号，你可以将其应用于其他领域。&lt;/p>
&lt;p>严重性指南通常以对用户的影响为准，因此与用户目标和步骤密切相关。使用严重性指南，你可以根据严重停机对产品或功能的影响来组织用户目标和步骤，这被定义为产品重要性。参见邮件服务产品重要性示例，了解如何为典型的邮件服务定义产品重要性。&lt;/p>
&lt;p>这种重要性定义为优先安排 SRE 工作提供了明确的指导方针。确保整个基础设施有良好的基本覆盖，并制定评估更有针对性努力的投资回报的原则。考虑在关注不太重要的目标之前，你希望为最重要的目标实现什么级别的可靠性。&lt;/p>
&lt;p>通常，团队会陷入寻求一种新方法来解决可靠性问题的陷阱，然后试图将这种方法应用于所有场景，而不考虑适用性。然而，监控的初始化成本和在各处部署改进的持续维护成本的总和其实并不都合理的。例如，离线或批处理流量与互动用户流量相比，具有不同的可用性和延迟需求，因此每类流量需要不同的 SLO。&lt;/p>
&lt;p>更深入地了解对产品重要的内容还具有许多优势，从知道测试覆盖的重要性，到更好的事故响应。如果 SRE 知道问题很严重，他们会更快地反应和升级，从而更快地解决问题。&lt;/p>
&lt;blockquote>
&lt;p>交付物：一套与产品的用户目标和步骤一致的严重性和重要性定义。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>邮件服务严重性示例&lt;/strong>&lt;/p>
&lt;p>继续邮件服务产品定义示例，我们定义了产品的事故严重性分级如下：&lt;/p>
&lt;p>表 2: 事故严重性分级示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>严重性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重大&lt;/td>
&lt;td>任何影响接收或发送邮件的情况。对核心功能有 &amp;gt;20% 的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等&lt;/td>
&lt;td>对核心功能有 &amp;gt;5% 的影响。对辅助功能有 &amp;gt;20% 的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>轻微&lt;/td>
&lt;td>对任何功能有 &amp;gt;0% 的影响。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在这个例子中，核心功能是用户需要用来阅读和撰写邮件的功能，例如认证系统或地址簿是辅助功能，例如拼写检查和自动补齐等，虽然增加了价值，但并不是产品使用的关键。&lt;/p>
&lt;p>影响的定义因产品而异，取决于独特的用户和业务需求。一些产品可能只关注技术影响，例如失败请求的百分比或延迟超过可接受阈值的请求百分比。其他产品可能关注收入损失、品牌损害或其他与业务 KPI 更直接相关的概念。无论为产品选择哪些标准，考虑以下关键原则是很重要的：&lt;/p>
&lt;ul>
&lt;li>结果集合应覆盖用户感知行为和业务优先级的所有方面。&lt;/li>
&lt;li>应能够以及时和可持续的方式确定事故的严重性。&lt;/li>
&lt;li>产品和工程领导层之间应对事故严重性非分级有广泛一致的意见。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>邮件服务产品重要性示例&lt;/strong>&lt;/p>
&lt;p>使用邮件服务严重性示例中的严重性分级，下面我们来定义产品的重要性如下：&lt;/p>
&lt;p>表 3: 产品重要性定义示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>重要性&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用户目标 &amp;gt; 步骤&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>关键&lt;/td>
&lt;td>负责邮件传输和投递的服务，是核心功能的关键（非可有可无）依赖项。&lt;/td>
&lt;td>撰写邮件、 阅读邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重要&lt;/td>
&lt;td>非关键的核心功能依赖项（优雅降级）或辅助功能的依赖项。&lt;/td>
&lt;td>撰写邮件 &amp;gt; 检查拼写 、 阅读邮件 &amp;gt; 过滤垃圾邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无&lt;/td>
&lt;td>所有其他服务，通常是内部或未发布的功能。&lt;/td>
&lt;td>所有未被识别为产品优先级的其他产品功能。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可以看到，重要性定义是围绕用户目标（例如撰写和发送邮件）建模的，而不是系统如何实现这些需求。一些具体步骤（例如检查拼写和过滤垃圾邮件）如果不被视为目标的关键组成部分，其重要性可能会有所不同。一些方面没有明确列出，例如身份验证，因为这是大多数目标中的一个步骤。&lt;/p>
&lt;p>&lt;strong>附加价值&lt;/strong>&lt;/p>
&lt;p>虽然 &lt;strong>度量性能&lt;/strong> 讨论了如何使用这个产品模型作为衡量产品性能的基础，但这不是该模型提供的唯一价值。对产品的用户目标有清晰的理解，可以在对用户需求的达成共识的基础上，协调测试策略、产品使用指标和其他生产问题。&lt;/p>
&lt;h3 id="3-度量性能">3. 度量性能
&lt;/h3>&lt;p>服务质量目标（SLO）是任何 SRE 团队工作的关键组成部分，提供反映系统可靠性的实际指标。《Google SRE 工作手册》[4] 是定义 SLO 和服务质量指标（SLI）的详细资源，并描述了如何使用它们，特别是针对服务。&lt;/p>
&lt;p>基于服务的 SLO 通常无法提供足够的产品覆盖。一些问题无法通过对某个服务器的监控覆盖，例如网络间或移动应用程序中的问题，或异步操作产生的问题等。&lt;/p>
&lt;p>当 SRE 团队发现基于服务的 SLO 存在不足时，他们会开始以多种方式扩展 SLO。从而提供更广泛产品覆盖的 SLO 主要有三类：服务 SLO、客户端埋点和端到端 SLO。&lt;/p>
&lt;p>&lt;strong>服务 SLO&lt;/strong>&lt;/p>
&lt;p>服务 SLO 是最常见的 SLO 类型。它们通过服务本身的指标进行监控，例如应用服务器日志或实时监控指标【译者注：包括后台服务埋点的 APM 数据】。也可以通过服务上层的日志进行度量，例如负载均衡器。你还可以使用黑盒监控（如拨测）结果来度量服务正常运行时间。&lt;/p>
&lt;p>以下是服务 SLO 的主要特征：&lt;/p>
&lt;p>表格 4: 服务 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>低成本&lt;/td>
&lt;td>服务 SLO 常见且广泛使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高信心&lt;/td>
&lt;td>服务 SLO 的数据在你的控制之下，可以提供非常高的可用性保证，例如对 SLO 数据的 SLO 保证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>低延迟&lt;/td>
&lt;td>你可以以非常低的延迟收集和处理数据，从几秒到几分钟。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>覆盖范围狭窄&lt;/td>
&lt;td>这些 SLO 仅涵盖服务能看到的内容。通过在服务堆栈的更高层次度量 SLO，可以改善这一点。如果返回结果被服务视为成功，则 SLO 不受影响。然而，成功（正常）的结果并不总是保证结果有用（用户不受影响），例如返回空响应或向旧客户端返回不兼容的新数据。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>客户端埋点&lt;/strong>&lt;/p>
&lt;p>随着网络和移动应用程序的用户界面变得越来越复杂，越来越多的 SRE 团队开始直接支持这些界面。这可以通过直接从用户界面获取遥测数据来实现【译者注：包括真实用户监控-RUM】。&lt;/p>
&lt;p>这种遥测需要记录事件的日志或监控侧通道，这些事件可以处理并用于定义 SLO。&lt;/p>
&lt;p>这些数据通常需要批处理，并在后台发送，与交互式 RPC 请求分开。当应用程序关闭或失去网络连接时，一些遥测数据可能会丢失。所有这些因素都会影响数据的可靠性，预计会有一些个位数百分比的损失。此外，度量客户端设备上的信号还包括：测量设备的性能和互联网连接。&lt;/p>
&lt;p>然而，客户端 SLO 提供了用户实际体验到的产品性能的有用洞察信息。你可以使用这些 SLO 为连接较不可靠的用户提供更好的体验。当可以从用户界面度量开始和结束条件时，界面行为的复杂性，例如缓存、重试和异步 RPC 请求，都是透明的。&lt;/p>
&lt;p>在决定何时以及如何使用客户端 SLO 时，请考虑以下所有特征：&lt;/p>
&lt;p>表格 5 : 客户端 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>中等成本&lt;/td>
&lt;td>客户端 SLO 的埋点需要在用户界面中添加埋点探针功能以获取 RUM 数据，并需要一个系统来接收、处理数据，并设置 SLO 管理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>低信心&lt;/td>
&lt;td>预期会有数据丢失。监控可能会受到性能较差的客户端设备和互联网连接的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等延迟&lt;/td>
&lt;td>信号通常从客户端设备批量传输。这些信号量数据需要进行额外的处理后，才能用于 SLO 管理，从而导致 15 分钟到 1 小时的延迟。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>广泛覆盖&lt;/td>
&lt;td>来自客户端设备的指标允许 SLO 直接衡量用户对产品性能和可靠性的体验。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>端到端 SLO&lt;/strong>&lt;/p>
&lt;p>有些产品功能和业务指标不能通过服务或客户端埋点直接度量。这些通常需要结合来自多个来源的数据，并涉及异步任务。&lt;/p>
&lt;p>例如，用户可能要求生成报告。用户界面发送一个 RPC 请求，该请求在报告被排入系统队列后成功。但这并不意味着报告成功生成。某些后台系统从队列中取出报告并生成它，或未能生成。要度量报告是否成功生成，你需要将用户的原始 RPC 请求与最终的报告生成结果结合起来。&lt;/p>
&lt;p>端到端 SLO 通常根据用户交互来度量其 SLI，因此可以提供相当准确的结果。&lt;/p>
&lt;p>实现端到端 SLO 需要相当多的工程工作量，因为你需要完成以下任务：&lt;/p>
&lt;ul>
&lt;li>确定度量 SLI 所需的数据集。&lt;/li>
&lt;li>采集和存储所需的数据。&lt;/li>
&lt;li>汇总并结合来自多个来源的数据。&lt;/li>
&lt;/ul>
&lt;p>端到端 SLO 的主要特征如下：&lt;/p>
&lt;p>表格 6: 端到端 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>非常高的成本&lt;/td>
&lt;td>端到端 SLO 的埋点可能需要数月的工程工作。每个 SLO 都可能带来独特的工程挑战和约束。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高信心&lt;/td>
&lt;td>你可以使用多个数据源，并且可以通过交叉引用来跟踪任何数据源中的丢失数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高延迟&lt;/td>
&lt;td>结合来自多个来源的信号可能既耗时又复杂。持续处理新数据成本高，因此通常优先选择离线批处理解决方案（通常每天或每几小时运行一次）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>覆盖范围窄&lt;/td>
&lt;td>端到端 SLO 旨在覆盖非常特定的功能或业务指标，并且以最高的信心度进行。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>优先级&lt;/strong>&lt;/p>
&lt;p>网络、移动应用程序和其他互联网连接设备变得越来越复杂，这推动了微服务架构的兴起，简化和扩展了运行现代应用程序所需的服务。&lt;/p>
&lt;p>全球服务器数量呈指数级增长，这在 GCP 等公共云提供商的增长中可以看到。然而，全球软件工程师的数量增长较为缓慢。&lt;/p>
&lt;p>需要认识到，每个 SLO 都有维护其底层数据，以及响应 SLO 失效的持续成本。某些产品功能也可能会随着时间的推移变得不那么重要，而其他功能可能在产品的整个生命周期中保持关键地位。&lt;/p>
&lt;p>软件工程师和站点可靠性工程师需要优先考虑哪些 SLO 仍然相当重要，它决定了 SRE 要在哪些方面投入时间以提高产品的可靠性。&lt;/p>
&lt;p>&lt;strong>产品 SLO&lt;/strong>&lt;/p>
&lt;p>产品级 SLO 是围绕用户实现目标的步骤定义的。通过利用&lt;strong>用户目标步骤&lt;/strong>信息注释（编者注：打标签或者元数据）和扩展，任何 SLO（如服务、客户端或端到端）都可以转换为产品级 SLO。&lt;/p>
&lt;p>进行将 SLO 与用户目标相互关联的工作看似比较简单，却能够使你理解 SLO 对用户的意义何在，以及它对产品的重要性。&lt;/p>
&lt;p>当 SLO 是以服务和基础设施为框架时，设置目标或延迟阈值存在一定挑战。但当 SLO 带有了用户目标的附加背景信息时，度量的内容会变得更加清晰。例如，与其问“用户数据服务器上的地址查找服务应该有多可靠和快速？”，不如问“用户在查找电子邮件地址时可以容忍多少错误，这些地址应该多快返回？”&lt;/p>
&lt;p>结合产品功能的关键性，你可以验证 SLO 设置是否合适，且不过于严格。这种方法为你提供了更宽的 SLO 目标范围，反应出了什么对产品重要。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4.webp"
width="814"
height="325"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4_hu_faf1c015c8c71e03.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4_hu_4f97212a4a26cea0.webp 1024w"
loading="lazy"
alt="图 3: 产品 SLO 如何围绕用户目标和步骤定义的示例"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="601px"
>&lt;/p>
&lt;blockquote>
&lt;p>交付物：列出覆盖不同 SLO 类型（可用性、延迟）和监控方法（服务端、客户端、端到端）的产品 SLO 的优先级排序清单。实施最高优先级的 SLO，并将较低优先级的 SLO 创建为待办事项，稍后再进行优先级排序。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>遥测&lt;/strong>&lt;/p>
&lt;p>在实施产品 SLO 之前，必须先采集相关指标（也称为 SLI），从而跟踪相关的产品功能。为开发出这些指标，需将产品 SLO 模型的概念世界与实际基础设施生产环境对应起来。这是实施产品可靠性模型的关键价值驱动因素。&lt;/p>
&lt;p>例如，团队对 SLO 性能的理解曾经仅限于“数据库写入的可用性为 98%”。而专注于产品的 SLO 需要说明清楚，这 2% 的错误是否导致了 100% 的“保存电子邮件草稿”步骤的失败。&lt;/p>
&lt;p>将概要的可用性度量指标转化为：准确且可操作的产品性能指标的关键在于，理解每个请求所支持的产品功能。除了简单的可观测性需求外，功能请求级信息还可用于流量路由和负载分发策略，确保低优先级功能不会损害更关键的功能。&lt;/p>
&lt;p>虽然你可以通过多种方式将请求与产品功能关联起来，但有需要考虑这样两种主要的方式：客户端注释和服务器端注释。&lt;/p>
&lt;p>表 7: 客户端注释和服务器端注释的比较&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注释类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>客户端注释&lt;/td>
&lt;td>更新用户界面（网页和移动应用程序），将用户目标步骤的元数据附加好，并传播到后端服务的 RPC 请求上。这在技术上具有挑战性，需要 UI 团队协助设计，并最终负责维护这些注释。&lt;/td>
&lt;td>使用客户端注释是最准确的映射用户通过界面实现目标的方法。注释是由单个的 RPC 请求携带传播的，因此具有最高的保真度。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>服务器端注释&lt;/td>
&lt;td>分析后端服务器所接收到的 RPC 请求，并推断用户的目标步骤。&lt;/td>
&lt;td>当修改客户端的成本太高或你不拥有客户端（如 REST 服务）时，必须使用此方法。服务器端注释不如客户端注释准确，因为服务器需要做出许多假设来推断 RPC 请求所服务用户步骤（功能）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可能无法注释所有流量。根据产品的关键性分级，你可以决定哪些地方值得添加注释；你可能只注释那些最关键的用户目标。&lt;/p>
&lt;p>注释一个 RPC 请求后，你的服务需要在整个基础设施堆栈中传播该注释。这有助于你在许多 SRE 工具和流程中理解用户的目标及其重要性，包括以下内容：&lt;/p>
&lt;ul>
&lt;li>在监控仪表板和应用程序日志中，通过用户目标步骤了解问题及其影响。&lt;/li>
&lt;li>快速确定哪个用户目标受到了问题影响，从而确定事故的严重性。&lt;/li>
&lt;li>识别只考虑特定的用户目标步骤的服务质量目标 (SLO)，并忽略不重要请求（如批处理和测试流量）。&lt;/li>
&lt;/ul>
&lt;h3 id="4-可靠性管理">4. 可靠性管理
&lt;/h3>&lt;p>现在你已经确定了利益相关者、用户目标和步骤、关键性定义以及产品 SLO，你已准备好支持产品。&lt;/p>
&lt;p>我们建议你从小规模开始支持一个产品或服务。可以先为一些 SLO 启动某一个目标或步骤，然后迭代扩展团队的责任和范围。支持产品是一个持续进行的过程。在每个阶段，你将与利益相关者一起确定在下列投资领域之间的权衡：&lt;/p>
&lt;ol>
&lt;li>改进支持目标集的指标，以增加这些目标符合预期的信心。&lt;/li>
&lt;li>扩展支持目标集，确保产品的所有方面都符合预期。&lt;/li>
&lt;li>解决由投资领域 #1 和 #2 产生的指标所突显的性能差距。&lt;/li>
&lt;/ol>
&lt;p>确保在所有三个领域都有所投资。在领域 #1 和 #2 投资不足会导致团队错过领域 #3 中最有影响力的问题。另一方面，仅在领域 #1 和 #2 投资不会导致对用户和组织业务目标有帮助的改进。使用在关键实施步骤中收集和产生的信息，帮助组织确定在每个领域投资多少。&lt;/p>
&lt;p>&lt;strong>纳管&lt;/strong>&lt;/p>
&lt;p>纳管是 SRE 团队评估其将承担责任的产品或服务的接手的过程。此过程通常包括了解产品或服务以充分支持，并确保其符合 SRE 团队定义的一系列要求。&lt;/p>
&lt;p>在 SRE 团队承担产品的用户目标和步骤责任之前，团队需要定义一个正式的纳管流程，以确保以下内容：&lt;/p>
&lt;ul>
&lt;li>目标和步骤足够重要。&lt;/li>
&lt;li>步骤映射到所使用的服务，并在这些服务中进行了注释。&lt;/li>
&lt;li>潜在的 SLO 已被识别，并在整体产品优先级中进行了优先排序。&lt;/li>
&lt;li>SLO 稳定，支持它们不会对团队或服务所有者构成过度负担。&lt;/li>
&lt;/ul>
&lt;p>SRE 团队推动这个过程，与相关利益相关者会面，并与产品团队合作解决任何不足之处。&lt;/p>
&lt;p>&lt;strong>迭代&lt;/strong>&lt;/p>
&lt;p>在完成一个目标和其部分步骤的纳管过程之后，你可以通过以下方式迭代和改进团队的覆盖范围：&lt;/p>
&lt;ul>
&lt;li>纳管更多的用户目标和步骤。&lt;/li>
&lt;li>优化已经纳管的用户目标和步骤的覆盖范围。&lt;/li>
&lt;li>改进工具，以更好地支持用户目标和步骤。&lt;/li>
&lt;/ul>
&lt;p>我们建议不要试图支持每一个用户目标，而是为你支持的产品中最重要的方面设定一个门槛。同样，我们建议你决定哪些用户目标使用更昂贵的 SLO 方法进行埋点。一些用户目标可能只需要基于服务的 SLO，而其他用户目标可能会受益于客户端或端到端的埋点。&lt;/p>
&lt;p>最后，为了确定在哪里和何时投资改进工具，请评估支持的可持续性。工具不足会导致扩展受限，使团队在支持目标集的无效分类、调试和缓解工作中不堪重负。&lt;/p>
&lt;p>&lt;strong>离岗&lt;/strong>&lt;/p>
&lt;p>为了确保团队专注于产品的正确部分，我们建议团队定期重新评估支持的用户目标、步骤和 SLO。一些 SLO 可能随着时间的推移变得不那么重要，而一些用户目标可能会变得过时。&lt;/p>
&lt;p>维护一个所有支持的用户目标、步骤和 SLO 的优先列表是很重要的。使用此列表来验证团队是否在最重要的领域上花费时间和资源。当列表中的项目不再重要（或远不如不支持的项目重要）时，请考虑将它们离岗，以便团队可以重新专注于产品的最重要方面。&lt;/p>
&lt;p>&lt;strong>服务器支持&lt;/strong>&lt;/p>
&lt;p>在关注产品的同时，不能忽视支撑产品的基础设施服务器。始终需要确保服务器及其提供的服务保持健康。无论服务器对产品有多么重要，确保服务器健康是必要的，因为你花费了资源来运行它们。&lt;/p>
&lt;p>在 Google 专注于产品之前，提出了提供基础支持的概念。基础支持是一组由 SRE 定义的标准和最佳实践，使他们能够在不了解服务器具体用途的情况下为任何服务器提供一般支持。例如，基础支持可以要求某些库和框架提供常见功能，如负载平衡、服务间通信（RPCs），甚至是由主要负责服务器的开发团队拥有的最小 SLO。在这种情况下，平台而不是 SRE 提供基础可靠性支持，从而使 SRE 能够专注于不包含在基本策略中的更具影响力的可靠性改进。&lt;/p>
&lt;p>对于最关键的基础设施，可能需要额外的支持，但这不是强制性的。如果 SRE 主要负责最关键的用户目标，关键基础设施中的重大故障将导致产品级别 SLO 失败。此外，基础设施层面上的故障如果不影响产品 SLO，将不会提醒 SRE，可以由拥有该服务的开发团队处理（如未发布的功能和不太关键的批处理服务的问题）。&lt;/p>
&lt;p>将 SRE 支持集中在产品 SLO 上而不是服务上，可以使 SRE 支持更多产品，并将这种支持与产品最重要的部分对齐。&lt;/p>
&lt;h2 id="产品可靠性模型的前提条件">产品可靠性模型的前提条件
&lt;/h2>&lt;p>产品导向支持模型并不适用于所有用例。在实施前，建议你评估项目是否满足以下要求，以确定模型的适用性。&lt;/p>
&lt;p>&lt;strong>明确的角色和责任&lt;/strong>&lt;/p>
&lt;p>该模型需要比传统以服务为导向的参与，需要牵扯更多的利益相关者。传统的 SRE 参与通常局限于工程团队，而产品导向的参与则需要与更多角色（如 PM 和 UX）协作。与利益相关者进行有效的互动需要明确的角色和责任分工。即使是加载主页这样简单的操作，也需要有人明确速度标准。如果无法达成共识，就无法用这些结果来度量和管理产品的可靠性。&lt;/p>
&lt;p>&lt;strong>用户目标和步骤定义&lt;/strong>&lt;/p>
&lt;p>正如在“建模产品”中提到的，采用产品导向支持模型需要明确的用户目标和步骤定义。&lt;/p>
&lt;p>SRE 可以尝试为现有产品重新调整和推导用户目标，但失去了组织级别的支持，它的许多其他优势也将丧失。如果决策者不接受产品的定义，也不及时维护，它将很快过时且不准确。&lt;/p>
&lt;p>因此，拥有正确的利益相关协作，并维护好产品模型是关键要求。&lt;/p>
&lt;p>&lt;strong>易于维护的服务器&lt;/strong>&lt;/p>
&lt;p>服务器支持需要提供产品支持模型所需的详细信息。&lt;/p>
&lt;p>基本要求是单个服务器必须相对容易支持。这需要足够的标准和框架，使开发团队能够自行部署和维护，并在必要时由 SRE 提供帮助。&lt;/p>
&lt;p>如果 SRE 大部分时间都在支持某个服务器，他们将没有精力关注产品级别的问题。&lt;/p>
&lt;p>&lt;strong>与用户功能的直接映射&lt;/strong>&lt;/p>
&lt;p>必须尽可能在接近用户的地方度量用户目标和步骤（例如，在用户界面或处理用户界面请求的服务器中），因此更紧密地与堆栈入口点的服务器对齐。&lt;/p>
&lt;p>提供服务API的基础设施服务通常解决特定问题，可能与用户目标无关。例如，数据存储服务可能有一个低级API，仅包含与用户目标无关的简单加载和存储命令。&lt;/p>
&lt;p>以下是将产品支持模型应用于基础设施服务的几种选项：&lt;/p>
&lt;p>表 8: 基础设施服务的产品支持模型的应用选项&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选项&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>将基础设施客户端视为用户，并为基础设施的API定义用户目标和步骤。&lt;/td>
&lt;td>这是最不理想的选项，因为它等同于没有用户目标的产品。然而，在某些情况下，基础设施本身可以被视为一个产品。在这些情况下，产品决策者必须定义该产品，而不是SRE的责任。&lt;/td>
&lt;td>可能适用于基础设施本身被视为产品的情况。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配置基础设施客户端，根据其终端用户的输入提供用户目标信息。&lt;/td>
&lt;td>此选项通过以下方式帮助基础设施团队：提供有关终端用户目标的有价值信息；帮助基础设施团队识别对终端用户重要的RPC请求。&lt;/td>
&lt;td>提供有关终端用户目标的有价值信息；识别对终端用户重要的RPC请求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不采用产品聚焦方法。&lt;/td>
&lt;td>基础设施服务由其服务API定义，可能会从传统的服务支持模型中受益。如果你希望获得产品支持模型的好处，考虑通过其他方式实现这些好处。&lt;/td>
&lt;td>传统的服务支持模型可能更适合基础设施服务。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>产品支持模型为 SRE 团队提供了一种框架，使他们能够将支持工作集中在对用户和业务最重要的方面。该模型使 SRE 团队与组织的其他团队保持一致，并支持统一的术语和目标。&lt;/p>
&lt;p>该模型通过帮助 SRE 团队理解产品的关键点，并利用这些知识更好地填补服务支持模型的空白，解决了传统服务支持模型的许多问题。最终，产品支持模型让 SRE 团队专注于用户，确保产品满足最终用户的实际需求。&lt;/p>
&lt;h2 id="参考文献">参考文献
&lt;/h2>&lt;p>[1] Ulwick, A.W. 和 Osterwalder, A. (2016). Jobs to be done: Theory to practice. [在线] Idea Bite Press. 可在： &lt;a class="link" href="https://jobs-to-be-done-book.com/" target="_blank" rel="noopener"
>https://jobs-to-be-done-book.com/&lt;/a>&lt;/p>
&lt;p>[2] chang, austin (2017). What To Do If Your Product Isn&amp;rsquo;t Growing. [在线] Initialized Capital. 可在： &lt;a class="link" href="https://medium.com/initialized-capital/what-to-do-if-your-product-isnt-growing-7eb9d158fc" target="_blank" rel="noopener"
>https://medium.com/initialized-capital/what-to-do-if-your-product-isnt-growing-7eb9d158fc&lt;/a>&lt;/p>
&lt;p>[3] Beyer, B., Jones, C., Petoff, J. 和 Murphy, N. (2016). Site reliability engineering: How Google runs production systems. Sebastopol, Ca: O&amp;rsquo;reilly Media.&lt;/p>
&lt;p>[4] Beyer, B., Murphy, N., Rensin, D.K., Kawahara, K. 和 Thorne, S. (2018). The site reliability workbook: Practical ways to implement SRE. Cambridge O&amp;rsquo;reilly.&lt;/p>
&lt;p>[5] Kalbach, J. (2020). The jobs to be done playbook: Align your markets, organizations, and strategy around customer needs. New York: Two Waves Books.&lt;/p>
&lt;p>[6] Google Cloud. (n.d.). Incidents and the Google Cloud Service Health Dashboard | Support Documentation. [在线] 可在： &lt;a class="link" href="https://cloud.google.com/support/docs/dashboard#major_incident" target="_blank" rel="noopener"
>https://cloud.google.com/support/docs/dashboard#major_incident&lt;/a> [访问时间：2023 年 4 月 20 日]。&lt;/p>
&lt;p>[7] Wikipedia Contributors (2019). Responsibility Assignment Matrix. [在线] Wikipedia. 可在： &lt;a class="link" href="https://en.wikipedia.org/wiki/Responsibility_assignment_matrix" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Responsibility_assignment_matrix&lt;/a>&lt;/p>
&lt;p>❤️ Photo by Pavel Danilyuk: &lt;a class="link" href="https://www.pexels.com/photo/group-of-people-discussion-on-a-wooden-table-7868970/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/group-of-people-discussion-on-a-wooden-table-7868970/&lt;/a>&lt;/p></description></item><item><title>Dynatrace 出品 2023 年 SRE 状态报告</title><link>https://martinliu.cn/blog/state-of-sre-in-2023/</link><pubDate>Mon, 10 Jun 2024 09:29:28 +0800</pubDate><guid>https://martinliu.cn/blog/state-of-sre-in-2023/</guid><description>&lt;img src="https://martinliu.cn/blog/state-of-sre-in-2023/pexels-pavel-danilyuk-9143840.webp" alt="Featured image of post Dynatrace 出品 2023 年 SRE 状态报告" />&lt;blockquote>
&lt;p>本文来源 Dynatrace：&lt;a class="link" href="https://www.dynatrace.com/news/blog/state-of-sre-in-2023/" target="_blank" rel="noopener"
>《State of SRE in 2023》&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>站点可靠性工程（SRE）在组织中变得越来越重要，因为它们希望跟上快速数字化转型的步伐。现在比以往的任何时候，客户更期望高质量、可靠的数字服务，提供无缝的用户体验。SRE 确保了整个数字环境的可靠性和一致性，为组织提供了框架，使其能够持续为客户交付这些理想的体验。&lt;/p>
&lt;p>Dynatrace 产品营销总监 Saif Gunja 主持了 2023 年 SRE 状态网络研讨会。参加研讨会的专家成员包括 Kyndryl 的 Danne Aguiar、Red Hat 的 Hilliary Lipsig 和 SquaredUp 的 Stephen Townshend。他们讨论了最佳实践、新兴趋势、建立服务质量目标（SLO）的有效思维方式等。主持人和小组成员共同分享了他们的见解，探讨了组织如何增强其 SRE 努力。&lt;/p>
&lt;h2 id="有效的站点可靠性工程需要企业范围的转型">有效的站点可靠性工程需要企业范围的转型
&lt;/h2>&lt;p>如果没有对 SRE 实践的统一理解，部门之间很快会形成孤岛。缺乏协作会导致观测数据的分散，使团队在交付价值时几乎没有信息可依赖。没有成熟的 SRE 应用实践，生产力会因此受到影响。&lt;/p>
&lt;p>接受 SRE 的文化转变是打破这些孤岛的关键。研讨会专家成员强调了：整个组织向 SRE 采用的文化转变的必要性。他们还强调了高层支持对于文化转变的重要性。Townshend 说：“没有高层支持，你会遇到瓶颈，由于优先事项的竞争，你根本无法取得任何 SRE 的进展。”&lt;/p>
&lt;p>Gunja 表示同意。他说：“如果这不是一种文化变革，如果不是自上而下的变革，那么很可能会失败。即使是自上而下的变革，仍然会有很多障碍需要克服。”&lt;/p>
&lt;p>Lipsig 从另一个角度看到了这种现象。在她的组织中，自上而下的 SRE 采用显著改善了孤岛的文化。她说：“我看到很多以前不存在或者有些紧张的关系在过去 12 个月里有了很大的改善。”显然，高层的支持简化了各团队对 SRE 的理解，增加了组织内的协作和教育。&lt;/p>
&lt;p>然而，尽管这种转型对于实现业务目标是必要的，许多高层管理人员仍然犹豫是否采用 SRE 实践。这往往是由于缺乏对 SRE 在实现关键绩效目标（服务质量目标，SLO）中的作用的理解。&lt;/p>
&lt;p>为克服这一障碍，研讨会专家成员建议：工程师通过业务数据向高层管理人员传达 SRE 的价值。在收集这些指标后，工程师可以展示：在企业内大范围的应用 SRE 实践，如何有助于减少琐事、员工倦怠（各种卷）、运营费用和未达标的服务质量目标（SLO）数量。&lt;/p>
&lt;h2 id="服务质量目标slo应聚焦并由高阶业务目标驱动">服务质量目标（SLO）应聚焦，并由高阶业务目标驱动
&lt;/h2>&lt;p>在创建 SLO 以度量 SRE 成功时，重要的是要考虑这些目标将如何为组织带来益处。有时，工程团队可能会专注于技术细节，而忽视了整体业务目标。团队应确保即使是最小的 SLO ，也能使之与业务增长相关。&lt;/p>
&lt;p>然而，想要理解技术 SLO 如何影响业务结果，其实并不总是那么直观。例如，减少平均修复时间（MTTR）对收入的影响有多大？要回答这些问题，跨职能合作对于组织的成功至关重要。不同技能团队之间的沟通可以帮助澄清 SLO 与业务结果之间的联系。&lt;/p>
&lt;p>需要注意的是，创建以业务为中心的 SLO 并不意味着仅关注高阶目标。实际上，研讨会专家成员强调了创建更小的 SLO 以更好地度量进展的重要性。通过识别小的胜利，团队可以避免被实现更大目标的压力所压垮。这些小的胜利，如实施无责根本原因分析过程，可以采取多种形式，不一定涉及数字指标。&lt;/p>
&lt;p>对于构建以业务为中心的 SLO 的组织，Aguiar 提出了一些建议。他说：“如果你的公司有服务质量协议（SLA），就从那里开始。你可以用这个由 SLA 设置的特定 SLO 进行实践，然后再定义其他的。”&lt;/p>
&lt;p>Lipsig 也提供了一些建议。她说：“选择一项衡量客户在使用你的产品时是否成功的指标，然后研究如何度量它。” 以业务为中心的 SLO 是由客户成功驱动的：当客户成功时，业务也会成功。因此，仔细考虑客户需求是创建有效 SLO 的关键。&lt;/p>
&lt;h2 id="客户同理心是优化站点可靠性工程sre实践的关键">客户同理心是优化站点可靠性工程（SRE）实践的关键
&lt;/h2>&lt;p>软件工程往往是一门缺乏人情味的学科。SRE 通常不直接面对客户，因此容易误解客户的痛点。这种缺乏了解会导致缓慢的故障解决时间和无效的方案。此外，客户可能会因组织内协作不佳而感到沮丧，导致客户留存率下降。&lt;/p>
&lt;p>在 SRE 中，跨部门合作对于建立客户关系至关重要。研讨会专家成员鼓励工程师与客户成功团队协作，以更好地了解客户的情况，并满足关键需求。Lipsig 分享道：“我与我们的客户成功工程师建立了非常好的合作关系。” 但她也强调了内部合作的重要性：“与客户建立信任并不是我一个人可以完成的。”&lt;/p>
&lt;p>了解客户需求有助于在组织与客户之间建立信任，从而让客户更愿意接受 SRE 团队的建议，这也赋予工程师更多的主动权。&lt;/p>
&lt;p>小组成员还强调了在处理客户互动时“软技能”的重要性。尊重和耐心地与客户沟通是建立信任的关键。他们还指出，这种做法不仅适用于客户，也适用于组织内部的同事。&lt;/p>
&lt;h2 id="生成式-ai-与站点可靠性工程的未来">生成式 AI 与站点可靠性工程的未来
&lt;/h2>&lt;p>“AI 在应用性能管理（APM）领域并不新鲜，”Aguiar 提醒道。最近在生成式 AI 方面的突破可能为各种组织中的 SRE 团队提供优势。例如，生成式 AI 具有提供更直观的数据查询方法的潜力。通过其自然语言处理能力，这样的能力使得在不使用格式化查询语言的情况下，获取数据分析洞见。成为可能。减少了数据访问的障碍和孤立。&lt;/p>
&lt;p>生成式 AI 还可以通过允许用户提出有关架构和数字环境的具体问题来优化根本原因分析。快速、可靠的答案获取，促进了团队之间的快速学习。这将减少平均修复时间（MTTR）并提高生产力。&lt;/p>
&lt;p>研讨会专家成员推测，AI 将通过高效执行任务改善 SRE 团队的生活质量。Aguiar 预测，生成式 AI 的一个关键功能是基于过去的经验创建操作手册（Playbook）。这将有可能在很大程度上消除手动干预和冗长的流程，以解决常规发生的事故。然而，Lipsig 提醒小组成员，SRE 在各个组织中的表现 有所不同。她说：“我们会看到很多不同类型的影响，而不是生成式 AI 带来的一个确定性的影响。”&lt;/p>
&lt;p>生成式 AI 是 SRE 团队可以独特应用于其实践中的一种有前途的新手段。它可以实现更高的效率，但它并不能完全替代某些现有的可靠性措施。&lt;/p>
&lt;h2 id="成功的站点可靠性工程重在预防而非被动响应">成功的站点可靠性工程重在预防而非被动响应
&lt;/h2>&lt;p>意外的系统中断、服务器过载和其他不可预见的事件，不仅会严重影响 SRE 的生产力，还会对组织的盈利能力造成潜在的灾难性影响。这些问题可能导致大量计划外的工作，使 SRE 处于被动状态，效率和进展受到阻碍。在这种被动模式下进行根本原因分析，通常时间漫长且代价昂贵，使 SRE 资源紧张。为了改变这种情况，SRE 团队必须启动计划内的工作，开始采取主动的防范措施。&lt;/p>
&lt;p>主动 SRE 模型的一个关键组成部分是实施端到端监控，包括不直接由 SRE 团队管理的系统。通过保持对客户和供应商系统的强大可观测性，团队可以在软件问题扩散之前识别出潜在问题。强大的黑盒监控、负载均衡分析和定期系统检查，都是有效的主动措施，可以显著提高生产力和预防事故。&lt;/p>
&lt;p>随着组织在数据收集和存储上投入大量资源，SRE 团队更有动力从被动工作模式转变。宝贵的数据在被动模式下未被充分利用，仅用于应急响应而非预防。组织应通过创建强调预防的工作流程，充分发挥数据驱动见解的潜力，而不是仅仅依赖于应急处理。&lt;/p>
&lt;p>“我们开始在服务质量指标（SLI）违反时响应警报，以便始终保持我们的服务质量目标（SLO），”Lipsig 说道，谈到 Red Hat 的 SRE 如何处理事故时。“我们从不会超出我们的错误预算。” 一旦团队开始主动使用数据，“他们可以用这些数据做有意义的工作，而不仅仅是用于应急响应。”&lt;/p>
&lt;h2 id="提升协作是达成-slo-的关键">提升协作是达成 SLO 的关键
&lt;/h2>&lt;p>在当今的技术环境中，对于云原生架构下的软件工程方法存在显著争论。无论是 SRE、DevOps 还是平台工程，研讨会专家成员都认为部门分类远不如实际工作重要。团队应专注于有效和高效地达成 SLO，而不是纠结于职位头衔。要打破 DevOps、SRE 和平台工程是对立的思维定式，是缓解孤岛效应和确保 SLO 满足的关键一步。&lt;/p>
&lt;p>“SRE 是关于设计、构建和大规模运营可靠服务，” Townshend 说道。“只要我在做这些事情，我认为我就是成功的。”&lt;/p>
&lt;p>❤️ Photo by Pavel Danilyuk from Pexels: &lt;a class="link" href="https://www.pexels.com/photo/a-person-using-a-laptop-outside-at-night-9143840/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/a-person-using-a-laptop-outside-at-night-9143840/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第六章：不限于谷歌</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/</link><pubDate>Sat, 04 May 2024 01:01:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第六章：不限于谷歌" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>为完善本报告中的观点，我们与来自不同行业的三位 SRE 领导者进行了交谈，他们在过去几年中以各种形式采用了 SRE。每个人都有关于采用 SRE 的独特故事以及他们可能会做出不同选择的见解，此外还有关于在他们的行业或组织中使 SRE 工作的洞见。&lt;/p>
&lt;h2 id="医疗保健--joseph">医疗保健 // Joseph
&lt;/h2>&lt;p>Joseph Bironas 自从担任 Google SRE 领导者后，一直在多个医疗保健组织中领导 SRE 的采用。因此，他能够提供一个行业层面的观点，说明在这一领域实施 SRE 如何与其他技术和初创文化不同。由于其生命攸关的工作流程的性质，可靠性通常是首要考虑的问题。然而，医疗保健行业面临着组织模式、文化、预算和监管要求方面的特定挑战。&lt;/p>
&lt;p>在与一家专注于利润空间极窄的医疗设备制造及 FDA 监管领域的公司合作后，Joseph 观察到，虽然可靠性被视为一种需求，但在该行业中 SRE 的成本效益却未被充分理解。因此，SRE 和基础设施团队可能会发现自己成为“全能工程”，被纳入 IT 成本中心，职责范围大幅增加。&lt;/p>
&lt;p>你可能会问，将 SRE 团队归属在 IT 成本中心下有什么问题？当企业习惯于通过广泛的 IT 框架（如 ITIL）进行管理时，很难对 SRE 做出价值判断，而 SRE 只是 ITIL 的一部分——ITIL 还处理像硬件采购等 SRE 不涉及的事情。更重要的是，管理所有公司和生产 IT 的 CIO 并不是做出软件系统可靠性判断的最佳人选。相反，归属于专注于软件的领导者（例如工程高级副总裁（SVP）或 CTO）更为合理。&lt;/p>
&lt;p>该领域的组织往往面临着希望采用 SRE 而尚未采用 DevOps 实践的陡峭曲线。例如，由于涉及法规和全组织合规控制的复杂性，他们每月只发布一次软件，并且几乎没有 CI/CD 自动化。许多医疗保健组织根本不愿快速部署：对于某些客户来说，快速部署意味着测试不足或安全性不足。&lt;/p>
&lt;p>实施变革（如转向 SRE）的意愿在整个行业中差异很大，可能是由于领导优先事项和风格的不同。Joseph 描述了一个团队能够派遣设计师到现场收集需求，建立新工作流程，通过更好的产品革新护理的场景。在另一个场景中，一个不同的团队只被激励比现任者做得更好，这不需要同样的投资水平。在第三个场景中，一个团队被惯性困扰，在做出任何变革或投资之前等待自上而下的命令。根据 Joseph 的经验，更进步的领导往往对客户对可靠性的需求更敏感。&lt;/p>
&lt;p>与初创文化相比，这些团队的一些变革非常缓慢。一个团队质疑他们是否能在 18 个月内完成“任何事情”（如采用 SRE）——对于初创企业来说，这段时间几乎是永恒的。在考虑这种节奏的组织中的重大变革时，你必须有模型来帮助理解计划的投资回报。了解 J 曲线（见屋顶射击与登月计划（roofshots versus moonshots））在这里很重要，以避免在低谷中放弃努力，错过真正的回报。Joseph 建议每季度与团队进行检查，以保持进展的稳定节奏。他建议在专注于 SLO 之前，从事件响应开始转向 SRE，并通过事件评审（例如，持续六个月）建立持续学习的循环。为了进行“真正的投资”而不是无声地失败，你可能需要寻求高管的赞助，实施顶层 OKR，或专注于使努力在你的组织中“真实”的任何事情。关键不仅是从这个循环中学习，还要将所学付诸实践。&lt;/p>
&lt;p>另一个在医疗保健行业中常见的错误是忽视 SRE 的“软件方面”，当团队习惯于专注于传统运维工作时，认为“通过软件可以大幅减少 IT 支出”这种核心价值通常是领导者所陌生的概念，甚至可能被一些根深蒂固的系统管理员和操作人员故意抵制或破坏。忽视这一方面会使 SRE 显得非常无效。软件工程也很困难且昂贵。即使你购买了商业 SRE 相关工具（尽管有多年的大量贡献者，但这些工具仍不完美），你也无法逃避集成工作，这在很大程度上是一项软件工程工作。&lt;/p>
&lt;p>为可靠性制定预算也可能是一个问题。Joseph 指出，“这个行业没有 [Google 在建立 SRE 时拥有的] 广告收入曲线。” 这影响了他们像 Google 那样专业化和投资的能力，导致他们更多地依赖商业解决方案。业务预算和规划通常仍然采用瀑布模式，这对 SRE 工作来说是一个挑战——探索、理解和设计新解决方案所需的时间不适合瀑布式工作方式。&lt;/p>
&lt;p>从中得到的启示是，这些问题可以适用于所有行业。Joseph 分享了一个故事，说明即使是不完美的尝试也可以是一个有价值的起点。在他曾合作的一家公司中，领导层希望有一个极其简单的错误预算版本。他们没有选择适合其关键用户旅程 (CUJ) 的 SLO，而是为所有内容设定了一个单一的 SLO（99.95% 可用）。这个目标虽然简单易懂，但却削弱了整个工程团队对 SLO 概念的信心。状态和无状态应用程序、批处理和实时应用程序都采用相同的 SLO，这最终是无用的，并削弱了对该技术的信心。这也导致了毫无意义的错误预算，因此这些预算同样被削弱，任何试图使用这些错误预算的过程也被削弱。&lt;/p>
&lt;h2 id="零售业--kip-和-randy">零售业 // Kip 和 Randy
&lt;/h2>&lt;p>The Home Depot（THD）的 Commodore “Kip” Primous 和 Randall Lee 分享了这家大型零售商如何采用 SRE 的经验、成功之处以及面临的一些挑战。THD 是 Google Cloud Platform（GCP）的早期大型零售客户之一，在采用云服务的过程中，他们也遵循最近出版的 SRE 书中的原则采用了 SRE。六年后，他们当初期望构建的与现在存在的截然不同。&lt;/p>
&lt;p>Kip 最初是“点商”业务部门的可靠性工程（RE）经理，负责 THD 电子商务网站“浏览堆栈”的工作。Randy 比 Kip 早加入 THD，他们分享了一个共同的 SRE 目标：通过更好的平台提高弹性。他们最初考虑建立自己的云和数据中心，但后来评估了各种云服务提供商，并最终选择了 GCP。在向云迁移的过程中，唯一成功的方法是同时改变他们的工作方式，采用类似 SRE 或“DevOps 2.0”的方法。&lt;/p>
&lt;p>最初，THD 的目标是摆脱庞大的单体商业服务。Aurora 项目由副总裁资助并推动，目的是实现规模经济，减少运营团队的规模，将团队从数百名承包商转变为显著减少的全职员工。还有一个普遍的意图是提高可靠性，减少对组织内部其他可能不完全一致的团队的依赖。点商团队希望能够以“互联网速度”运作。&lt;/p>
&lt;p>对齐非常重要。在迁移到云之前，每次部署都“像发射航天飞机：需要多年努力的协调”。团队觉得目前的 DevOps 模式在 THD/点商内部已经走到了尽头。通过引入 RE，团队能够在新平台和新的职责下采用新的工作模式，并有能力解决任何与可靠性相关的问题。他们雇佣了很多云原生工程师，并尽可能地实现自动化。他们能够突破限制现有 DevOps 团队的边界。&lt;/p>
&lt;p>从 2015 年到 2017 年，SRE 团队能够快速独立地行动，因为他们在新的云基础设施上使用现代工具和硬件工作。然后在 2018 年，企业团队赶上了步伐——SRE 不再是唯一在 GCP 上工作的团队。令人欣慰的是，双方在企业团队更新传统模型时实现了融合——例如，承认在新的短暂虚拟机环境中不应再跟踪单个机器的补丁。通过一系列建设性的对话将团队聚集在一起，点商 RE 团队能够与新成立的集中企业团队合作，帮助建立更符合企业需求的流程和更好的安全准则。此外，他们能够将 GCP 平台的大部分管理工作（如计费、权限、配额等）从 RE 团队转移到企业团队。&lt;/p>
&lt;p>在 THD 进行 SRE 之旅的过程中，Kip 和 Randy 观察到了一些模式和经验，这些经验和模式可能适用于其他行业。让其他团队采用 SRE 概念的过程花了几年时间，并且是循环进行的：推动合规自动化、成本改进、访问控制和网络安全的改进。每次互动都需要大量讨论和教育。在故障或停机很少的平静时期，紧迫感可能来自外部事件。Equifax 故障或 Akamai 或 Facebook 的 DNS 问题可能会引发新一轮的可靠性改进。&lt;/p>
&lt;p>高管的支持对 SRE 在 THD 内部的成功采用至关重要。在点商团队通过使用 SRE 模型成功迁移到云后，SRE 角色在公司内变得与高绩效同义。许多其他团队希望复制这一模型，有些团队即使没有明确的 SLO 要求也被迫实施 SRE。然而，并不是所有团队都像点商团队那样幸运，可以从零开始并采用云原生。这导致一些团队难以认识到 RE 团队所带来的价值，有时会误解角色和责任的期望。当一个团队与组织中的“非官方” RE 互动时，这种模糊性可能会导致问题，因为这些 RE 可能无法在同一水平上工作或使用与原始团队相同的原则。例如，有些人“只是按按钮”，而没有真正的自动化琐事计划。这样的经历会让团队对未来与其他 RE 团队的合作失去兴趣。&lt;/p>
&lt;p>Kip 还警告说，如果每隔几年没有新的 SRE 启发的努力，可靠性标准会退化。RE 团队打破了壁垒，但这些壁垒正在重新建立。团队认为，“可靠性不是我的问题，这是 RE 的问题！”这传递了错误的信号。Randy 补充说，一个运行良好的 RE 团队如果没有不断强化和教育 RE 的实践和原则，以及明确的角色和责任定义，就会倒退。&lt;/p>
&lt;p>目前，THD 正在“加倍”投入 RE，但如果变革没有坚持 SRE 的原则，这实际上可能是一种反模式。SRE 不是解决所有问题的万能药，但当一个团队看到 SRE 的成功时，很难不想将 SRE 应用于各个方面。最近，Kip 被要求在分销中心和供应商支持的物理硬件上运行 RE，这并不适合 SRE。虽然总是有机会提高这些系统的可靠性，但在非云原生环境中应用许多 RE 实践更具挑战性。对于某些业务领域，可能更好的前进路径不是 SRE，而是价值流图（Value Stream Mapping）或精益（Lean）等实践。为了避免这些问题，更有意义的是将 SRE 作为“拉动”模型，而不是“推送”模型：不要强迫团队使用 SRE，而是将其作为一种服务提供，让团队自主选择。&lt;/p>
&lt;p>Kip 和 Randy 的最大建议是专注于高管教育，并认识到拥护者的价值。如果没有自上而下的支持，很难为任何有意义的变革筹集资金。通过产品开发团队获得资金会导致这些团队“从不想支付这笔税”的现象。每当他们支付这笔税时，只希望 SRE 直接为他们的产品工作并朝着他们的产品目标努力。&lt;/p>
&lt;p>在 THD，最初有一位高级领导倡导创建和发展点商 RE 团队以及其他领域的 RE 团队。THD 现在处于一个尴尬的境地，有许多 RE 团队在不同的项目上工作，应用 SRE 原则的能力各不相同。Randy 和 Kip 认为，拥有一个更高级的领导者可能会改善 THD 的状况。一个负责所有 RE 角色的可靠性副总裁（VP of Reliability）可以提供规模经济。没有中央 RE 组织，SRE 角色可能会演变成不同组织中的 SRE 完全做着不同的事情，并遵循不同的标准和原则。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>我们希望这份报告能够为企业如何采用 SRE 以及可能面临的挑战提供一些见解。我们认为，如果您清晰地定义 SRE 原则，将这些原则映射到具体的实践和能力，并优先培养团队内的成长，成功的机会会更高。我们还展示了一些团队在企业内部启动 SRE 实践的过程中所经历的例子，以及他们所面临和克服的具体挑战。&lt;/p>
&lt;p>我们相信这份报告将有助于您采用 SRE，带来更可靠的技术体验。希望通过这种采用，运营团队可以变得更可持续，服务更具扩展性，开发速度得到提升。&lt;/p>
&lt;p>“愿所有请求顺利，警报永不响起。”&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;p>James Brookbank 是 Google 的一名云解决方案架构师。解决方案架构师通过解决复杂的技术问题并提供专业的架构指导，帮助 Google 的客户更轻松地使用云服务。在加入 Google 之前，James 曾在多家大型企业工作，专注于 IT 基础设施和金融服务。&lt;/p>
&lt;p>Steve McGhee 是一位可靠性倡导者，帮助团队了解如何最佳地构建和运营世界级的可靠服务。在此之前，他在 Google 担任了超过 10 年的 SRE，学习如何在搜索、YouTube、Android 和云中扩展全球系统。他曾在加利福尼亚、日本和英国管理多个工程团队。Steve 还曾在一家加利福尼亚的企业工作，帮助他们向云迁移。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第五章：积极培育成功</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/</link><pubDate>Fri, 03 May 2024 23:55:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第五章：积极培育成功" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一旦你决定 SRE 值得在你的组织中推行并决心投资于它，确保你的投资取得成功至关重要。在系统中引入变革总是困难的，但要让这种变革持续下去则更难。以下是一些关于如何在你的组织中保持 SRE 运作的建议。&lt;/p>
&lt;h2 id="思考要大行动要小">思考要大，行动要小
&lt;/h2>&lt;p>“如果你不能衡量它，你就不能管理它”这句话经常与 Edwards Deming 联系在一起。然而，完整的引用是“认为你不能衡量它就不能管理它，这是一个代价高昂的谬论。”SRE 的核心是一种以指标驱动的方法。然而，无论有多少 SLO 或 SLI，都无法帮助你理解你的 SRE 实践是否有效并与企业战略一致。你必须通过持续的实验和学习来发现这一点。&lt;/p>
&lt;p>在前面的章节中，我们要求你“思考要大”，但在培养成功方面，你应该“行动要小”。任何形式的大规模变革都需要通过迭代和渐进的方式实现，SRE 也不例外。但有一个明显的警告——如果你的时间线太短，你将无法取得有意义的改变，所以要准备好找到平衡。&lt;/p>
&lt;p>Google 内部使用目标和关键结果 (OKR) 来共享目标和对齐团队，即使在实现这些目标的方法不总是明确时。你的组织可能有自己的流程来实现这一点，但必须扩展到包括明确的迭代和定期审查 SRE 团队的各项指标（如琐事、警报、软件工程影响、容量计划等）。由于采用的非线性特性，你的进展总会有挫折，因此这也应该视为过程中的正常部分。&lt;/p>
&lt;h2 id="文化比战略更重要">文化比战略更重要
&lt;/h2>&lt;p>Google 的一个假设，即 SRE 故事中的一个关键未书写部分，是内在的创新性 Google 文化。Google 还分享了我们进行的研究来描述这些属性。事实证明，团队成员是谁远不如团队成员如何互动、安排工作和看待他们的贡献重要。&lt;/p>
&lt;p>我们了解到，有五个关键动态使成功团队在 Google 中与其他团队区分开来：&lt;/p>
&lt;ul>
&lt;li>心理安全 : 我们是否能够在团队中冒险而不感到不安全或尴尬？&lt;/li>
&lt;li>可靠性 : 我们是否可以指望彼此按时完成高质量的工作？&lt;/li>
&lt;li>结构和清晰度 : 我们团队的目标、角色和执行计划是否清晰？&lt;/li>
&lt;li>工作的意义 : 我们是否在做对每个人来说都非常重要的事情？&lt;/li>
&lt;li>工作的影响 : 我们是否从根本上相信我们正在做的工作很重要？&lt;/li>
&lt;/ul>
&lt;p>我们看到的许多关于 SRE 采用的典型问题，如成本影响、特定行业关注、技术债务等。然而，这一发现的最好之处在于，像所有好的事物一样，这五个动态基本上是免费的！无论你的行业或情况如何，都可以优先考虑这些因素。Google 的高绩效团队依赖这些文化规范使 SRE 成功，使 SRE 成为这种文化基础上的自然行为。&lt;/p>
&lt;h2 id="忽视文化不会有帮助等待也无济于事">忽视文化不会有帮助；等待也无济于事
&lt;/h2>&lt;p>听我们谈论文化对成功采用 SRE 至关重要，通常令人沮丧，这暗示你应该等到文化达到一定程度后才能采用 SRE。套用一句流行的谚语，最好的改变文化的时间可能是 20 年前，但第二好的时间是现在。除了可靠性问题，不让你的文化对可靠性反馈做出响应还有其他重大后果。&lt;/p>
&lt;h2 id="培养-sre-的含义是什么">培养 SRE 的含义是什么？
&lt;/h2>&lt;p>要培养和发展 SRE，需要考虑一些关键活动。&lt;/p>
&lt;ol>
&lt;li>次线性扩展 : 我们之前提到过这一点，但需要澄清，这不是“用更少的资源做更多的事”，而是通过自动化和持续改进的文化来改变我们处理可靠性问题的方式。SRE 明确设计不是通过增加人数来扩展的，因此要抵制在现有软件流水线中增加更多人的诱惑，而是用 SRE 来自动化或省略这些步骤。&lt;/li>
&lt;li>建立和保留可持续的、快乐的团队 : 尽管科技行业已经从项目导向转向产品导向，但仍然很常见的是将个体视为可以随意在不同活动之间调动的可替换资源。这直接冲突于我们的文化建议。不要指望这样做还能在 SRE 上取得成功。&lt;/li>
&lt;li>承认 SRE 不是静态的——它本质上是一个动态角色，会随着时间成长 : 减少琐事和实施自动化的演变过程的一部分意味着 SRE 会在你的组织中发展。你仍然可以为此预算和计划，但目标是结果而不是具体任务和固定的团队规模。这一开始会感觉很奇怪，因为它与很多自上而下的计划活动相冲突。然而，当 SRE 动态地重新组建团队时，这通常是你正在取得成功的标志。&lt;/li>
&lt;li>评估你在组织内的可靠性思维水平和目标 : 达到高水平的 SRE 采用需要比预期更长的时间。在 Google 内部，我们认为达到产品战略级别的可靠性可能需要 3 到 5 年的时间。鉴于保持这一水平需要持续努力，恢复旧习惯也很常见。因此，花时间和精力不断评估和调整这种新的思维方式。&lt;/li>
&lt;/ol>
&lt;h2 id="sre-的关怀与培育">SRE 的关怀与培育
&lt;/h2>&lt;p>一旦启动 SRE，你需要照顾并培育你新生的组织。随着 SRE 实践的发展，你需要考虑以下几点。&lt;/p>
&lt;p>&lt;strong>将一个立足点团队发展成更大的组织&lt;/strong>&lt;/p>
&lt;p>不要从你最大的难题或每个人都不敢碰触的核心巨型单体应用开始。你需要在一个支持性的环境中通过一些快速的成功来起步，建立你的团队、原则和实践。相反，也不要从一个玩具服务开始。SRE 只有在有重要可靠性需求的地方才有价值。一旦你有了立足点，你需要不断学习，安全地扩展。处理大量不太重要的服务可能看起来很有吸引力，但要抵制这种诱惑。SRE 的价值在于高可靠性服务。其他服务应该遵循“你构建它，你运行它”的模型。&lt;/p>
&lt;p>&lt;strong>SRE 组织结构：独立的 SRE 组织与嵌入式团队&lt;/strong>&lt;/p>
&lt;p>自成立以来，Google 一直有一个专门的 SRE 组织，我们认为这样做有很多好处，例如可靠性文化、发布优先级、招聘等等。我们经常被要求将其与 DevOps 的“打破孤岛”方法进行比较。理解独立的 SRE 管理链不应该成为孤岛是至关重要的。SRE 有多种与开发团队合作的方式，从嵌入个体到轻度咨询。尽管如此，没有专门的组织结构也可能成功地部署 SRE，但需要广泛的高级领导支持。&lt;/p>
&lt;p>&lt;strong>晋升、培训和补偿&lt;/strong>&lt;/p>
&lt;p>SRE 是开发人员，应该期望获得至少与组织中其他开发人员相等的补偿和激励。晋升率也是衡量是否与其他团队平等的一个重要指标。你应该定期比较薪酬和晋升率，以消除任何差距。防止任何认为这种薪酬水平允许你虐待 SRE 的假设（例如，长时间工作）。注意，SRE 对进行有意义和有影响力的工作的期望会更高。&lt;/p>
&lt;p>值班是一项令人恐惧和疲惫的活动，需要仔细的准备和培训。还必须以有意义的方式补偿值班团队。如果你对直接补偿有限制，那么可以通过采用创意的方式（例如调休）来实现。&lt;/p>
&lt;p>&lt;strong>沟通和社区建设&lt;/strong>&lt;/p>
&lt;p>SRE 使能涵盖了各种活动，例如正式培训课程、技术讲座、读书小组等。大部分工作是间接完成的，通过提供时间和资源进行实验（例如 20% 工作时间）。自主权和授权是建设社区的关键，这需要通过积极的领导方式来实现。这意味着设定明确的领导愿景或北极星，并在组织内显著地树立授权的榜样。在任何形式的变革中，沟通的量很容易被低估，而 SRE 也特别擅长检测不真实的信息。&lt;/p>
&lt;p>&lt;strong>评估你的 SRE 采用是否有效&lt;/strong>&lt;/p>
&lt;p>在采用 SRE 的过程中，获得大量的 SRE 工件是很常见的，例如 SLO、SLI、错误预算、仪表板等。这些都是组织的代理指标，但它们不会总是给你一个全面的可靠性变化的图景。为此，你可能需要考虑一些更非常规的视角。如果事情确实进展顺利，良性循环会随着时间的推移显得更加平静。与其仅仅在事故与事故之间救火，不如有一种主动预防火灾的感觉。这可能会让人不安，特别是如果你的组织习惯于通过忙碌来展示其价值。在这一点上，抵制进行战术优化以重新获得忙碌感觉的诱惑。你的 SRE 会在经历失败并提升能力时自然地改进 SLO 和错误预算。&lt;/p>
&lt;h2 id="航向">航向
&lt;/h2>&lt;p>采用更主动的方法可以让你有更多时间专注于战略愿景。你会开始更清楚地了解组织中不同服务实际需要的可靠性水平。利用这些数据并设定新的预期结果来决定优化的重点。也许你的一些内部系统被标记为业务关键，但你的 SRE 们现在知道它们只需要 99.9% 的服务水平目标（SLO）。其他系统可能现在需要更高的可靠性水平，而判断你是否成功的一个可靠方法是当你开始看到其他团队对获得 SRE 好处的兴趣。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第四章： SRE 实践</title><link>https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/</link><pubDate>Thu, 02 May 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/</guid><description>&lt;img src="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第四章： SRE 实践" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一旦你建立了第一个 SRE 团队并掌握了这些原则，就该制定一套实践了。团队的实践由以下组成部分：成员能做什么、他们知道什么、他们拥有的工具，以及他们对这些工具的使用舒适度。&lt;/p>
&lt;p>团队的任务和环境最初决定了他们的工作内容。通常情况下，这意味着那些“开发团队未做的一切”，可能是一些列危险的稳定性缺陷。通过将团队聚焦于部分运维职责，他们可以产生一个能力循环，随着时间的推移相互增强。如果将他们投入到一个未定义范围的复杂环境中，那么结果必然是琐事和沮丧。另一个常见的反模式是将 SRE 工作添加到已经超负荷的团队中。&lt;/p>
&lt;p>团队的知识可以通过教育来扩展，无论是通过自我组织的还是企业集中组织的形式。应该鼓励团队定期举行团的内（间）的交叉培训会议，例如，每周一小时的会议，欢迎研讨任何关于生产环境的问题，无论是新成员还是资深成员都参与其中。如果问题有人能回答，则可以进行经验学习。如果没有人知道答案，可以转变为协作调查。根据我们的经验，这些会议对团队中的每个人都非常有价值。初级团队成员可以学习到新事物，资深成员也有机会传播他们的知识，通常还会发现一些大家都不知道的新事物。类似地，可以开展厄运之轮“Wheel of Misfortunes” 或桌面演练，在非正式的环境中，让团队成员讨论：他们在紧急情况下的角色和响应方式，对于让人们在无压力的环境下，更加舒适地接触生产环境非常有帮助。重现最近的所发生的故障是一个容易开始的起点。如果一个团队成员可以扮演指挥者的角色（会议主持人），并按照现实生产工作中的情况展示证据，其他团队成员就可以讨论：他们会怎么做和/或直接使用什么工具来调查事故发生期间的系统。&lt;/p>
&lt;p>还应该鼓励团队：从开发团队那里获得更多，有关他们正在运维的系统的知识。这不仅是更好地理解现有系统的很好的练习，也是直接引入新监控工具、讨论和规划系统变更（如性能改进）或解决可伸缩性或一致性问题的机会。这些对话在建立团队之间的信任方面通常非常有价值。&lt;/p>
&lt;p>团队的能力也可以通过引入新的第三方工具、开源软件工具或团队编写自己的工具来扩展。&lt;/p>
&lt;h2 id="从哪里开始">从哪里开始？
&lt;/h2>&lt;p>在为我们的团队赋予新的能力时，应该从哪里入手呢？可靠性和 SRE 的领域非常广泛，并不是所有 SRE 都能适合于一个全新的团队。我们建议从一套能够帮助团队学习成长的，并有具体的下一步工作内容的实践开始。抽象地说，我们推荐使用所谓的“计划－执行－检查－行动（PDCA）”模型。通过根据系统当前的工作状态来决定下一步计划，你的每一步都将需要是能落地的。我们将在本章后面的内容里，解释如何构建这些能力的平台，以及建议从哪里开始。这些初期的能力将形成一个良性循环，团队就不必猜测：接下来应该构建或采用什么，他们将能够根据对系统的观察自然而然地得出下个迭代的工作内容的结论。&lt;/p>
&lt;h2 id="你的目标是什么">你的目标是什么？
&lt;/h2>&lt;p>设定适当的目标非常重要。并不是所有系统都需要达到“五个九”（99.999%）的超高可靠性。我们建议根据你的服务和应用的可靠性需求进行分类，并相应地设定投入水平。如我们之前提到的，记住每提升一个“九”成本可能是前一个“九”的十倍，即99.99%的成本可能是99.9%的十倍。虽然这个说法很难精确证明，但这个原则是成立的。因此，如果在没有深思熟虑的情况下，就盲目或过于广泛地设定目标，可能会让你的投入变得非常昂贵，并在投入中陷入新的困境。过分追求不必要的高可靠性目标也可能导致团队顶尖人才的流失。如果你的目的只是到达近地轨道，那就没有必要设定登月的目标。&lt;/p>
&lt;p>确保你成功的路径是一个可循序渐进实现的目标，而不是期望通过一次性的大型项目或革命性变革来实现。在这里，渐进式改进才是关键。&lt;/p>
&lt;p>当你的团队开始尝试新的实践时，确保记录下所取得的成果，并在团队内部及对外宣传这些成果。同行间的认可非常重要，可以通过在团队站立会议中表扬成员、在会议上让人们分享他们是如何避免灾难的、在内部通讯中发布近失事件，以及向整个组织展示如果没有采取预防措施会发生什么等方式来进行。庆祝这类工作成果非常重要，尤其是在过去没有这样做习惯的环境中。口头表扬和书面表扬可以与奖金或礼物相结合。即使是小礼物，也能产生很大的鼓励作用。&lt;/p>
&lt;h2 id="如何到达目标">如何到达目标
&lt;/h2>&lt;p>不要制定一个长期且过于详细的计划，例如三年的详细规划。相反，你应该专注于确定前进的大方向。了解你的长期目标，但根据当前完成的任务来决定下一步。确立了方向之后，不必急于全面改变现有的团队和流程来适应新模式。相反，应该逐步引导团队步入正确的方向发展。&lt;/p>
&lt;p>我们将这种方法称为“战争迷雾”策略，意味着你清楚最终的目的地，但也为途中可能遇到的任何小问题做好了准备。在这个过程中，短期规划和灵活性至关重要，尤其是在初期，迅速取得成效，并立即展示其影响力，对于一个刚刚起步的项目和团队的士气有着极大的积极作用。设定可达成的短期目标来解决当下问题，同时开始构建可通用、可复用的长期能力，让多个团队都能受益。通过构建一个能够提供这些能力的基础设施，你可以放大投资的影响力。我们将在本章后面进一步详细阐述这个平台和能力的概念。&lt;/p>
&lt;p>组织内不同的产品开发团队在需求和现有能力方面都有所不同。在引入 SRE 时，你应当在参与模式（engamement model）上保持灵活，以适应各个团队的具体情况。通过理解产品团队的现状，你可以解决当前的问题，同时引入全组织范围的标准和最佳实践。当 SRE 团队刚开始运作时，如果有很多团队都想寻求他们的帮助，他们可能会感到负担过重。通过制定明确的参与“菜单”，你可以避免一次性的合作，或其他不可持续的合作模式。参与模式有几种类型，包括嵌入式、咨询式、基础设施支持等，这些在谷歌客户可靠性工程（CRE）团队的博客文章以及《Googel SRE 运维解密》的第32章中有很好的描述。&lt;/p>
&lt;p>对于 SRE 的采用，明确的汇报结构在早期就很关键。我们建议建立一个独立的组织，并且 SRE 领导应在管理团队中拥有一席之地。通过将 SRE 的领导层与产品开发部门分开，SRE 团队将更容易专注于可靠性这个核心目标，而不会受到那些更关注速度和功能交付的团队的直接压力。然而，在这样做时，要避免形成一个孤立的“运维”部门，因为 SRE 与企业其他部分的紧密合作至关重要。开发团队应该与这些共享的 SRE 团队开展紧密合作的投入，从而确保从 SRE 团队获得的价值大于自行构建 SRE 功能。&lt;/p>
&lt;h2 id="sre-成功的关键">SRE 成功的关键
&lt;/h2>&lt;p>SRE 的成功不仅仅取决于实践方法，如服务水平目标（SLO）和事故回顾（postmortem）。这些实际上是创造 SRE 工作文化起步阶段的产物。因此，成功地采用 SRE 不仅需要模仿这些实践，还必须采纳一种兼容的文化才能取得成功。&lt;/p>
&lt;p>这种文化建立在团队自身的信任和安全感之上。当团队负责控制重要系统时，他们必须感到在心理上是安全的。他们必须能够在不担心惩罚的情况下对同事和领导说“不”。他们必须感到自己的时间被重视，他们的意见受到倾听，他们的贡献得到认可。最重要的是，SRE 不应该感到自己比开发部门的同事更为“另类”或“次等”。基于历史上的原因 Dev 与 Ops 对立模型是一种常见陷阱。&lt;/p>
&lt;p>无责事故回顾就是一个著名的例子。通过记录“出了什么问题”，团队可以协作地确定导致故障的各种因素，无论是技术问题还是程序问题。经常，当人为错误发生时，将错误归咎于“人的因素”可能很有诱惑力，但这已被证明是没有意义的，也不是改进系统的有效方式。相反，SRE 倡导无责文化。可以这样理解：系统应该让人很难犯错。应当有自动化和检查措施来验证操作者的输入，并且鼓励用同行审查（peer review）来促进双方的共识和协作。当人们在报告中自由地提及自己的名字，并且知道不会因为可能发生在任何人身上的简单错误而受到羞辱、降级或负面绩效评估时，这表明你已经实现了无责事故回顾。如果你看到事故回顾中使用了“工程师”或用“人员1”这样的表述，你可能认为这是一种良好的无责实践，但这实际上可能反映了潜在的文化问题，必须直接解决。如果文件中的名字被隐去并替换为“工程师”或“人员1”，但在事故回顾之外仍然对工程师进行指责，那么责任文化问题就没有得到解决。你绝对不应该自动化地从记录或文件中删除任何人的名字——由于这并不能解决根本的文化问题，只会使文件更加难以阅读和理解。与其表面上删除名字，不如直接解决潜在的文化问题，从而实现真正的无责文化。&lt;/p>
&lt;p>一个不良文化的标志是&lt;em>西瓜指标&lt;/em>：外表看似绿油油，实则内部问题重重。这类指标反映了团队的努力，它们被精心设计，看上去很美好，但实际上隐藏了真正的缺陷。这与古德哈特法则类似，即任何成为目标的指标就不再是好的衡量指标。例如，过分关注支持工单数量，或整体平均解决时间（MTTR）往往会被滥用，不管是故意的还是出于好意，但都不主动认知自己的错误。通过度量团队的活动，我们把这些活动变成了目标，而不是客户的成果。相反，团队应该定义自己的成功指标，这些指标直接反映了客户满意度、系统稳定性和开发速度等因素。&lt;/p>
&lt;p>SRE 不应仅仅被视为“20%的时间”角色，而应该是组织内一个明确的职位和头衔。应该有一个公开的职业晋升路径，包括转岗要求和晋升期望。团队间的级别和薪酬应该公平对等。转岗不应该有任何显著的影响。&lt;/p>
&lt;p>判断一个成熟的 SRE 团队是否成功的好方法是：观察人员转入和转出SRE的情况。确保人员转移是常规的且没有任何官僚主义或限制，这样你可以快速了解人们是否感到在 SRE 团队中“被困”，或者它是否是一个理想的角色。通过观察从开发转移到 SRE 的自愿转移率，你可以判断这一角色是否吸引人。&lt;/p>
&lt;p>SRE 必须知道他们的时间是被重视的，尤其是当他们的工作需求超出了“正常工作时间”。例如，在谷歌，当 SRE 需要在正常工作时间以外值班时（即“on-call”），他们应该获得加班费补偿。谷歌的一些团队允许值班工程师在金钱补偿和休假之间二选一，按值班时间的一定比例看，通常设置一个值班时间的上限。不应该对一个团队提出超出其交付能力的需求，因此，确保值班池足够大是很重要的。常见的错误是：仅将值班池限定为 SRE 人员，这是不必要的限制。值班池也应该是基于自愿加入的。一旦团队感觉他们的时间被滥用，就会导致士气的迅速下降。&lt;/p>
&lt;p>另一个文化抓手是规划和目标设定。由于 SRE 最接近生产问题，他们通常很清楚最重要的是什么，哪些问题最紧急，哪些问题造成了最大的痛苦。允许 SR E团队设定自己的优先级和路线图，你就赋予了团队权力，他们将会更加有效率和愉快的工作。管理层应遵循共同制定，并达成对预期成果的共识的做法。业务需要加速开发吗？用户需要更快获得发布结果（新版本）吗？一个常见的反模式是泰勒主义，即领导者专权设定和优先考虑详细的计划和任务，然后将它们分配给下属。&lt;/p>
&lt;h2 id="构建能力平台">构建能力平台
&lt;/h2>&lt;p>SRE 团队可以构建一个平台，向合作团队提供能力，理想情况下，随着时间的推移，他们的贡献将扩展到整个组织。通过在共享服务、实践、规范和代码中引入弹性机制，这些团队可以开发出由：自动化、代码、共享库、管道、流程、规范、文档、手册组成的共享平台，甚至包括那些只存在于人们头脑中的特殊未记录知识。与其让每个团队都试图创建自己的最佳实践，不如将这些实践融入到平台中。产品可以从头在平台上构建（所谓的“数字原住民”），也可以移植到平台上。随着平台能力的增长，团队对其操作特性越来越有信心和体感舒适，逐渐将更加关键的工作负载都可以迁移过来。通过采纳这种将能力编码到平台中的模型，SRE 团队可以通过将能力同时应用到多个服务中来放大他们的影响力。平台是一个内部产品，应该像产品一样进行管理，将服务团队视为客户，接受功能请求，并跟踪缺陷（见图4-1）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities.webp"
width="647"
height="378"
srcset="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities_hu_b381b09c21c8284.webp 480w, https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities_hu_e985e87f25e35293.webp 1024w"
loading="lazy"
alt="图 4-1. 能力平台示意图"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>当一个 SRE 团队开始来构建这个平台时，他们会面临一个问题：“首先应该构建什么能力？”通过分析前期采用 SRE 的低风险服务，你就可以将需求列表最小化为一个最小可行产品（MVP）。随着时间的推移，你会添加更多的能力。但下一步是什么呢？有两个来源：你的开发人员和你的环境。也就是说，根据他们的需求来构建，例如，“我们需要一个消息总线！”以及根据你所知道他们将需要的来构建，例如，“必须有一个可扩展的服务发现系统，否则这将无法工作。”&lt;/p>
&lt;p>对于环境所需的能力，这些通常包括：&lt;/p>
&lt;ul>
&lt;li>对 DevOps 进行优化改进，例如：增强软件开发生命周期（SDLC），更快、更安全地发布更多代码；&lt;/li>
&lt;li>可靠性工程的改进：最小化那些已经潜伏于系统中的错误带来的风险。&lt;/li>
&lt;/ul>
&lt;p>为了增强可靠性工程，我们推荐在团队中培养一种持续改进的机制。如果你不确定应该从哪里开始，可以从分析已经发生的系统中断事故入手，采取以下措施：&lt;/p>
&lt;ul>
&lt;li>制定服务水平目标（SLO），明确可接受的系统性能标准。&lt;/li>
&lt;li>建立一套正式的事故响应流程，确保在发生故障时迅速有效地响应。&lt;/li>
&lt;li>开展无责任的事故回顾和审查，鼓励团队成员坦诚地分析问题，而不担心受到指责。&lt;/li>
&lt;li>利用风险建模来确定改进的优先顺序，确保优先处理最关键的风险点。&lt;/li>
&lt;li>使用错误预算或其他风险管理方法，来消化待解决的可靠性问题，以保持系统的整体稳定性。&lt;/li>
&lt;/ul>
&lt;p>让这种持续改进成为推动团队不断创新的动力。例如，如果有一次的部署导致了整个服务器群的宕机，你可能需要探索减少此类风险的方法，比如通过限制影响范围、实施金丝雀发布，或使用其他灰度（渐进式）部署策略。如果发现了内存泄露问题，你可以在部署的前置流程中加入新的压力测试方法。这些新能力将被集成到你的基础设施平台中，为平台上的每项服务提供额外的保护和收益。随着这些通用的缓解策略逐步的证明了它们的价值，单次修复的情况将会大幅降低。&lt;/p>
&lt;h2 id="领导力">领导力
&lt;/h2>&lt;p>想要构建一个这样的技术平台，你就需要投入宝贵的工程资源，这些资源本可以用于开发新的业务功能。这就要求从基层到高层都需要施必要的加影响力。在功能开发和系统稳定性之间进行权衡时，决策者必须具有全局视野并得到适当的激励。我们越来越多地看到“首席可靠性官”这一职位，他们在组织内应当占有一席之地，参与制定战略性的可靠性决策（这一概念在马克·施瓦茨的《在桌边》一书中有所讨论）。虽然这是 SRE 成功实施的关键角色，但并不是一个常见的职位名称，通常是现有高管的额外职责。&lt;/p>
&lt;p>&lt;strong>了解效果&lt;/strong>&lt;/p>
&lt;p>一个运作良好、重视可靠性的组织会展现出几个明显的特征。首先是面对可靠性问题时，能够及时缓解或暂停新功能的发布。如果唯一目标是快速发布，可靠性和其他非功能性需求就会被牺牲。你的组织是否总是将可靠性工作位居新功能开发之后？是否有因“时间不足”而永远无法完成的项目？重要的是，这并不意味着：你应该放慢代码交付流程的速度，而是保持持续的推进。&lt;/p>
&lt;p>另一个成功的迹象是，个体英雄主义不再受到赞扬，反而积极的劝阻。当系统的成功依赖于少数人的担当时，团队就会形成一种不可持续的英雄主义文化，这种文化终将崩塌。英雄们会被鼓励独占特定领域知识，而不愿意去系统地预防问题的发生。这与《凤凰项目》一书中的布伦特角色类似。依赖个体英雄不仅效率低下，而且可能非常危险。团队必须积极阻止个体英雄行为的发生，同时保持团队责任感，因为英雄主义在短期内看似合理，但实际上不可取。&lt;/p>
&lt;p>一个表现良好的团队还会在出现中断前就对可靠性工作进行投资，并作为主动规划的一部分。在表现不佳的团队中，我们看到仅在发生一系列中断之后，才开始对可靠性进行投资。虽然这可能是必要的增加，但这种投资需要长期维持，而不是被视为一次性的应对措施或在情况好转后就被撤销。&lt;/p>
&lt;p>进一步说明，设想你的组织对于可靠性有两种不同的态度：和平时期和战时。它们分别对应于“一切正常”和“所有人都知道问题即将爆发”。通过区分这两种状态，你可以做出关于投资的决策。在战时，你会在平台的隐性特性、基础设施、流程和培训上投入更多的时间和金钱。而在和平时期，你也不会放弃这些工作，但你肯定会减少投资。&lt;/p>
&lt;p>然而，谁决定公司何时进入战时？这个决定是如何做出的？它如何在整个公司传达，而不造成恐慌或人才流失？一种方式是使用优先级代码，比如黄色警报或红色警报。这些是帮助团队确定工作优先级的组织实践。黄色警报意味着在一个季度内，当前的技术问题可能会变成一定的业务紧迫性。红色警报则表示问题可能在几天内发生，或者是已经存在的稳定性威胁。这些警报应该有明确的标准，所有领导团队成员都必须理解并同意这些标准。宣布这些警报必须得到领导层的批准才能产生预期效果。这些警报的结果应该是改变团队当前的工作优先级，可能会暂停现有的工作（如红色警报的情况），批准大批量投入，并能够直接协调其他团队来提供帮助。优先级警报对企业来说是一项代价昂贵的操作，因此你应该确保它们有明确的预期结果。这些结果应该在一开始就定义好退出标准，并在完成时清晰地传达出结束的信号。否则，团队会经历信号疲劳，而不再进行适当的响应。&lt;/p>
&lt;p>&lt;strong>选择投资于可靠性&lt;/strong>&lt;/p>
&lt;p>那么，作为一个可靠性领导者可能会做出哪些较不戏剧性的改变呢？这将涉及政策和投入。当政策是从基层向上的推动时，那么设置的全组织范围政策往往会是不一致的。如果存在一个领导的角色，由他来进行审核、消除重复、批准和传播这些政策，那将更为有效。同样，公司的资金支出，包括人员、硬件、软件、差旅和服务，通常是以分层的方式进行的。&lt;/p>
&lt;p>在构建前面提到的结构之前，必须考虑组织内可靠性的价值。为了使其有意义，组织必须将可靠性视为一项投资，甚至是业务产品差异化的竞争因素，而不是成本中心。应该明确可靠性是最重要的隐性产品特性。一个不可用、卡顿或充满 bug 的产品，无论具有多么丰富的功能，对客户的价值都会大打折扣。想要设定这个方向，你必须在高层进行操作，以确保持一致性，特别是：如果这是一个新的方向。&lt;/p>
&lt;p>一个简单的论点是，可靠性还可以作为更容易理解的概念的代名词，例如代码质量。如果系统出现了用户可见的问题，那么诸如灰度变更等可靠性实践的应用，就可以使系统在直接解决代码质量问题之前，让最终用户感觉更加稳定。例如，通过只对1%的用户发布带有缺陷的版本，那么99%的用户就不会发现问题。这使得系统看起来比实际上好100倍，并显著的降低了支持成本和声誉的损害。&lt;/p>
&lt;p>&lt;strong>做出决策&lt;/strong>&lt;/p>
&lt;p>在你将可靠性设定为对更强大产品的投资后，你就可以制定更长远的计划了，并会产生更大的影响。传统模式将 IT 视为成本中心，完全倾向于随着时间的推移逐渐降低成本投入。但最终，如果服务不可用了，无论它的后续运维成本是多么的廉价都将失去意义。你仍然可以实施成本的削减，但应该是在实现了可靠性目标之后再予以考虑。如果你发现维持所设定的可靠性目标的成本过高，你可以明确重新定义这些目标——比如，降低一个“9”的标准——并评估由此产生的权衡。&lt;/p>
&lt;p>要实现这些目标，你可能需要说服某个管理委员会、决策者群体或高层管理。你需要他们的支持，以便随着时间推移为供给和维护团队，提供必要的资源，并培训及进一步发展团队成员。这应该被视为长期投资，并明确得到相应的资金支持，而不是隐藏在其他预算项里。&lt;/p>
&lt;blockquote>
&lt;p>反模式：忽略奥德修斯
在涉及可靠性时，一个常见的反模式是让停机或其他“坏消息”影响你的计划周期，即使这些情况是预期的。领导层在面对坏消息时，往往会感到需要“做点什么”，而“坚持计划”通常看起来没有影响力。然而，如果计划已经考虑到了停机，除非对系统的理解发生重大变化，否则“坚持计划”正是正确的做法。“奥德修斯契约 (Ulysses pact)”这个术语在这里是一个有用的例子。领导者奥德修斯告诉他的团队在他被绑在桅杆上时，坚持计划，驶过塞壬。当他的团队坚持计划（尽管他在挣扎和乞求停下），他表扬了他们。他们没有被短期思维所诱惑。他们的计划考虑了长期影响，并在混乱开始前制定了一个清晰的计划。
如果允许团队在当下做出决定，你往往会选择忽略一个好的计划，而做出情绪化或以自我为中心的选择。一个经典的例子是领导者介入故障处理中，而没有全面了解情况，尽管一个有能力的团队已经在控制局势。这通常是公司文化的结果。一种高薪人员的意见 (HiPPO) 文化可能对事件管理和整体可靠性产生极其不利的影响。相反，听从奥德修斯，坚持计划，不要弃船。这不仅适用于事件响应，还适用于错误预算耗尽或在面对“非常糟糕”的事件时跟踪 SLO。如果你的计划是在错误预算耗尽时停止功能发布，但你每次都为“这个重要功能”做例外，你的领导力将受到严重削弱。一个有效的改善措施是引入“银弹”，即领导者被授予三颗银弹，用于在必要时覆盖预期计划。通过引入这种人为的稀缺性，领导者必须做出明确的权衡。同样，如果单一的坏事件消耗了一个 SLO，不要忽略它。召集团队分析这如何改变你们对系统的共同理解。这种类型的故障以前从未被考虑过吗？对故障的响应是否不足？&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：同时采用
另一个反模式是尝试在不进行修改的情况下混合旧模型和新模型。这会使团队偏离正确的方向，应避免这种情况。例如，在 ITIL 问题管理中，通常期望一个中心团队通过问题经理来减少问题的原因并缩短解决时间。相比之下，SRE 期望嵌入的工程师通过事后总结和评审来推动他们自己的问题解决。虽然结果仍然一致（更少且更短的停机时间），但方法和角色大不相同。尝试同时做这两件事，你最终会陷入混乱，并且这两种方法的预期结果相互冲突，效果不佳。
我们称这些 SRE 和非 SRE 原则的糟糕混合为“有毒组合”，类似于医学术语中指的不良药物混合。单独使用时每种原则可能是有益的，但两者结合在一起会导致意外的坏结果。我们经常发现使用两者的初衷是好的，通常是为了让现有员工参与进来，或者为了报告的连续性。然而，这种做法的吸引力远不及其带来的更糟的结果：更长的停机时间，更多的琐事和更低的可靠性。&lt;/p>&lt;/blockquote>
&lt;h2 id="人员配置和留任">人员配置和留任
&lt;/h2>&lt;p>在人员配置和角色定义上也可能出现反模式。在建立 SRE 团队时，很容易会选择从外部聘请 SRE 来对现有团队进行整顿。但这实际上可能导致精力的浪费，通常新聘请的 SRE 无法理解团队或现有技术的细微差别，回归到应用以前使用的方法，而不知道这些方法在新工作中是否合理。&lt;/p>
&lt;p>我们建议将现有团队发展成 SRE 团队。仅仅重新命名是不够的，但提供一个结构化的学习路径和一个成长和发展的环境肯定是有效的。当然，有些情况下过渡可能会失败。如果个人没有被设置在一个成功的环境中，而是被期望仅通过“阅读书籍”立即成为高级 SRE，他们可能会感到沮丧并寻找其他工作。同样，一些工程师看不到变革的理由，没有激励机制，或者非常抵制接受新角色。通过提供带薪教育、时间和学习的空间，并提供背景信息帮助团队理解变革的必要性，你可以成功地将团队过渡到 SRE 角色。这需要时间、精力和耐心。在过渡不成功的情况下，进行离职面谈是很重要的，特别是要解决过渡的问题，个人的感受和效果。你可能会发现你的计划中的缺陷，或发现它没有按你预期的方式执行。最后，当你要求团队做更复杂且影响更大的工作时，请注意这确实是更高价值的工作，团队应该为此获得相应的报酬。也就是说，当你的团队开始像 SRE 那样运作时，你应该支付他们 SRE 的薪酬，否则他们会转到能这样做的地方去。如果你提供团队学习高价值技能的机会，而他们离开去别处使用这些技能，你只能责怪自己。&lt;/p>
&lt;h2 id="技能提升">技能提升
&lt;/h2>&lt;p>在培养和过渡现有员工成为 SRE 时，制定一个技能提升计划至关重要。这包括“需要哪些技能”和“如何获得这些技能”——即角色需要的技能以及如何使员工掌握这些技能。技能差距分析和调查等工具在这方面非常有用，用来核实对工作所需基础技能的假设。这些技能在 SRE 文献中往往没有具体提及，但它们对于 SRE 在全组织范围内扩大贡献至关重要。例如，传统运维团队对软件工程基础（如版本控制、单元测试和软件设计模式）不熟悉并不罕见。确保这些基本技能包含在你的技能提升计划中，并针对每个学习者的特点进行调整至关重要，这不仅是为了在团队中建立足够的技能基础，还为了为个人提供一个顺利过渡到新角色预期的路径（从而减少团队成员的流失）。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第三章：SRE 原则</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/</link><pubDate>Wed, 01 May 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第三章：SRE 原则" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在我们探讨具体的实践方法之前，首先要明白的是原则的重要性，这就像法律中遵守法律的字面含义和精神含义。单单实践方法本身并不足够；SRE 的核心精神在于它的原则中。实践方法也面面俱到————它们只是原则的外在体现，也会随着时间和组织的不同而随机应变。&lt;/p>
&lt;p>原则是你转型基础的基本真理，它们在你的决策过程中提供帮助和指导。实现业务目标通常有多种方式，因此鼓励人们充分理解和执行核心原则，要优于：设定一套面子工程的详尽的规则，那只让人按照字面意义去机械的执行，而忽视了核心精神。以 Google 的原则为例，虽然我们有多种：关于如何设计和构建新服务的内部政策，但我们始终坚持的核心原则是：“以用户为中心，其他一切都会随之而来”。&lt;/p>
&lt;p>你的重点应该是：激发每个层次的人，使其都展示领导力，而不是从各种方面剥夺他们的个人意识，不是用指令束缚他们。特别是，业务部门和经理需要认可转型的原因和动机，并必须愿意在他们的专业领域的范围内调整和进行详细的指导。一旦说服了这些有影响力的人，他们就会成为你最大的资产（资源），如果没有被说服，他们就会成为你最大的障碍。&lt;/p>
&lt;p>与原则类似，良好的政策关注的是产出，而不是任务的完成；然而，它们更像观察视角方面的指导。它们是你用于牵引业务的抓手，而不是对抗业务流程的工具。政策和政策框架应该让人们在明确的界限内安全地运行。同时，它们也应该包含合理的默认设置，以便引导行为朝着正确的方向发展。&lt;/p>
&lt;blockquote>
&lt;p>反模式：&lt;strong>关于如何实施SRE，预先规划一个大而全的计划或设计。&lt;/strong>&lt;br>
本质上，你需要花费大量的时间来学习，我们建议：你构建一个由一致的原则指导的反馈循环（也就是说，通过反馈改进，形成一个良性的循环）。&lt;/p>&lt;/blockquote>
&lt;p>我们将简要介绍 SRE 书中的每一个原则，以及如何在你的组织中应用它们。若想要获得更多细节，我们建议你阅读《Google SRE运维解密》一书中的相关章节。&lt;/p>
&lt;h2 id="拥抱风险">拥抱风险
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第三章&lt;/em>&lt;/p>
&lt;p>这是在初始阶段最难迈出的一步。我们通常把这个问题描述为：可靠性与速度之间的权衡；然而，这并不一定是真的。对企业来说，对于理解可靠性，最有帮助的方式，是将其与指数级的运维成本联系起来。大约每提高一个&amp;quot;9&amp;quot;（例如，从 99.9% 提高到 99.99%）都会导致成本增加一个数量级，无论是软件、硬件还是人力资源。考虑是否能从这种投资中获得良好的回报，有助于根据业务需求进行调整。故障的类型也非常重要。例如，需要全天候运行的服务会更适合实施 SRE（相比那些公司内部的一周只运行 8 小时，每周 5 天的系统）。另外，对于那些没有得到积极维护的服务，SRE 的作用将会大打折扣，因为这些服务在持续改进方面的机会本来就会很少。尤其是在你故意不进行太频繁的版本发布，或不在编写新的代码时，这点尤为明显。&lt;/p>
&lt;blockquote>
&lt;p>反模式：&lt;strong>服务 100% 可靠性目标。&lt;/strong>
对于几乎所有事情来说，100% 都不是正确的目标。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：在“常规”的运维中实现了 99.999% 的可靠性&lt;br>
月度指标或维护窗口可能会掩盖灾难带来的巨大影响。&lt;/p>&lt;/blockquote>
&lt;h2 id="服务质量目标">服务质量目标
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第四章&lt;/em>&lt;/p>
&lt;p>在你开始考虑实施 SLO 和 SLA 之前，先从服务质量指标（SLI）开始，并根据你系统的实际观测数据，来制定和校准的 SLI，然后用来支持 SLO/SLA 协商（利益干系人间的对齐）。不要让你现有的业务承诺影响你对 SLO/SLI 准确性和相关性的判断————你可以选择使用指标来驱动工作的变化，或者反之亦然。总之，不能进行粉饰，或者挑选优点展示。而要，花时间理解你的客户想要的是什么，而不能，为了支持&amp;amp;证明你理论，使用方便的数据点。简单来说，让事实证据（SLI/SLO）来驱动你的结论（SLA）。尝试关注那些 &amp;gt;99.9% 的服务，对于 &amp;lt;99.9% 的服务而言，SRE 可以先不参与相关维护工作（直到它们产生了需求）。我们反复强调：如果一个服务不从 SLO/SLI 中受益，那么它可能也不会从 SRE 中受益。最后，如果在 SLO 不违规的情况下，你就不能对软件或流程做任何变更了，那么 SRE 对你的收益也会甚微。&lt;/p>
&lt;blockquote>
&lt;p>反模式：SLO = SLA
你应该总是将 SLO 设置得比 SLA（例如，SLO：99.95%，SLA：99.9%）更严格。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：SLI = OKR（目标和关键结果）/KPI（关键绩效指标）&lt;br>
Goodhart 的法则在这里适用：当一个度量成为了目标，它就不再是一个好的度量。&lt;/p>&lt;/blockquote>
&lt;h2 id="消除琐事">消除琐事
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第五章&lt;/em>&lt;/p>
&lt;p>这可能是最重要的原则之一，因为它与 SRE 成功所需的创新文化密切相关。大多数时候，企业领导层希望加快进度，并通过确保将所有资源都 100% 的利用来实现这一点。如果你真的希望能确保：你的团队正在做正确的事情，而不是快速地做错误的事情，那么你的目标应该是少于 50% 的繁琐工作（或者我们所说的琐事）。这是可靠性（和速度）在大规模下的秘密。不要将其等同于技术债务，即可以把它们都攒起来，以后一起偿还，或者以“琐事周”的形式，每个季度解决一次这个问题。一旦琐事压制住了你的团队，那么所有 SRE 的所有其他活动都会停滞不前。你必须为组织来定义：什么是琐事，并且这必须由 SRE 实践者来决定，而不是自上而下的指令。琐事的定义也会随着时间的推移而改变（定义再次由实践者更新）。&lt;/p>
&lt;blockquote>
&lt;p>反模式：将琐事作为一个可有可无的原则&lt;br>
忽视消减琐事会对应用 SRE 产生很大的影响。如果你没有时间减少琐事，那么你就没有时间实施 SRE。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：琐事是某个人/某个团队的工作，而不是每个人的工作&lt;br>
最接近工作的人需要是修复它的人。如果你试图把这个工作转嫁出去，它会驱动错误的行为。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：琐事清除周&lt;br>
每季度举行一次“琐事清除周”是常见的诱人的做法，但这是这样是行不通的。你需要采取更系统、更持续的消除琐事的方法。&lt;/p>&lt;/blockquote>
&lt;h2 id="监控分布式系统">监控分布式系统
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第六章&lt;/em>&lt;/p>
&lt;p>可观测性是一门独立的专门学科，它需要像其他开发实践一样受到同等的重视和思考。实际上，大多数企业应当预期投资于多种系统，这些系统将帮助团队更高效地工作。单一的监控平台（大而全的统一控制台）并不能很好地运作；同样，使用数百种功能叠加在一起的工具也不可行。通过理解你独特的 SRE 用户路径，以及他们需要使用多种工具来诊断和解决系统间的逻辑关系，找到适合你的平衡点。将可观测性系统视为：需要投资和精心设计的内部产品，强调工具的实用性，而不是“完美”的仪表板，因为系统总是在变化。记住，告警过度和告警不足同样的糟糕：告警不应直接发送给人类，除非需要他们采取行动。构建这种告警学习循环是加速学习的常见方法；弄的不合理，会迅速使 SRE 精疲力竭。&lt;/p>
&lt;blockquote>
&lt;p>反模式：告警信息过载
告警的电子邮件充斥了你的收件箱，我们会忽略所有信息，这意味着高优先级的告警也无法得到必要的响应，因为告警噪音太多。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：“NoOps”工具会替代 SRE
工具可以增强 SRE 的能力，但还不能替代他们。完全消除运维是不可能的，这样会迅速的让你的 SRE 团队渐行渐远。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：告警即是原因
你可以记录很多事情，但告警总是针对症状而不是原因发出。&lt;/p>&lt;/blockquote>
&lt;h2 id="google-自动化的演变">Google 自动化的演变
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第七章&lt;/em>&lt;/p>
&lt;p>当涉及到极高的可靠性水平 (99.99% 或更高) 时，自动化是最重要的，因为在这个时候，如果需要人工介入，你几乎总是会经历的的是：服务水平目标 (SLO) 违约。随着系统错误预算的逐渐缩减，干预的平衡点也随之变化，最终转变为主动维护，会采用的技术手段包括优雅降级、重试等。自动化本身也会成为一个常见的问题，花时间修复不良流程是非常重要的，但很难融入团队文化。自动化也需要和系统其他部分一样的容易维护。&lt;/p>
&lt;blockquote>
&lt;p>反模式：不管流程的质量或适用性，默认一切自动化
最好的代码是并不写的代码！对于不很频繁的流程，操作手册（Playbook）是一个很好的中间解决方案。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：对于“非常重要”的部分也不要人工介入
只有当你真正需要又人来做决定，并且他们有权这样做时，才让人工介入。&lt;/p>&lt;/blockquote>
&lt;h2 id="发布工程">发布工程
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第八章&lt;/em>&lt;/p>
&lt;p>发布工程与你的 DevOps 团队可能已经在进行的持续集成/持续交付 (CI/CD) 实践有广泛重叠。要充分利用这些现有工作，而不试图自上而下的强加另一套实践。强调结果和流程指标以对齐团队，并确保你在一个平台团队 (或根据规模的不同而有多个团队) 上有足够的投资。&lt;/p>
&lt;p>尽可能提前发布相关的工作，即尽早让测试团队也参与进来，并在所有阶段考虑测试。&lt;/p>
&lt;p>不要让开发人员负担过重，但确保发布周期的每个部分都被视为有价值的，并与其他部分保持一致。对于 SRE 来说，发布流水线是导致大多数问题的原因 (因此也是解决问题的关键)。与值班和维护人员也需要紧密的配合。&lt;/p>
&lt;blockquote>
&lt;p>反模式：DevOps/SRE 团队负责所有的发布
那是让不同职位的人都来干运维的活。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：发布工程必须引入 CI/CD
持续交付本身就是一门学科，你的平台和开发团队需要在这方面打好基础 (SRE 可以提供帮助)。&lt;/p>&lt;/blockquote>
&lt;h2 id="简单性">简单性
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第九章&lt;/em>&lt;/p>
&lt;p>团队的认知负荷很重要，并且会随着团队职责的扩展或缩减而变化。确保允许团队合并或拆分，从而让认知负荷匹配。基本上，复杂性意味着很多事情都会很难理解；因此，要尽可能的激励：减少不必要的复杂性，并将复杂的事情拆分成更小、更易管理的部分，例如领域驱动设计 (DDD)。另一个从 DevOps 中重用的重要概念是：高上下文 (High Context) 与低上下文 (Low Context)，以及 SRE 的一些概念如操作手册（Playbook）、文档、灾难恢复测试 (DiRT) 演习等，这些都是使事情变成低上下文的重要部分。拥有更少的代码和更少的产品特性，可能会与大多数产品的激励相悖，因此：要考虑其可靠性影响时，请确保对此进行控制。&lt;/p>
&lt;blockquote>
&lt;p>反模式：简单意味着我能理解它
用一个高管专用的仪表盘，并不可能有意义地显示所有内容。更不要试图强行的实现它。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：基于年度评估的静态团队
动态团队的形成需要一年多次。&lt;/p>&lt;/blockquote>
&lt;h2 id="如何引入这些原则">如何引入这些原则？
&lt;/h2>&lt;p>如何将这些原则映射到你组织？将这些原则完全与您的组织对齐的可能性很小，但这没关系！你的 SRE 版本并不需要完全和 Google 的相同，只需要原则一致。但是，请确保你特意地选择将要追求的目标，检查与现存原则之间的差异，并利用这段时间仔细检查面子指标 (参见 Eric Ries 在《精益创业》中解释的“成功剧场”)。在不稳定的基础上进行变革可能很难，因此如果你没有信心，请假设你需要检查和改变。尽量不要在原则上犹豫不决，如果你认为某事无法完成，那么推迟它的实施，要比假装工作更好。&lt;/p>
&lt;h2 id="防止组织破坏性错误">防止组织破坏性错误
&lt;/h2>&lt;p>变更可能会潜在的产生非常不同影响。采纳新原则时，进行的一些变更不一定总是有效。变更所带来影响，通常比能否恢复原样更不重要，这意味着最难逆转的变更，通常也会造成最大的痛苦。专注于更容易逆转的改变，即使这些变更是错误的，它们仍然会带来经验教训。例如，如果第一次重组不成功，你可以随时进行另一场重组，但你不能让解雇的人重新回到公司。&lt;/p>
&lt;blockquote>
&lt;p>反模式：解雇所有不会编程的运维人员
除了显而易见的道德或法律影响，你根本无法逆转这个决定。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：给所有开发人员生产的 root 访问权限
良好的安全和运维实践包括：与过往的任何时候相比，最小可用权限最适用于自动化。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：选择业务中最关键的系统作为起点
你不会在马拉松训练计划的第一天就跑 26 英里。&lt;/p>&lt;/blockquote>
&lt;h2 id="建立安全失败的环境">建立安全失败的环境
&lt;/h2>&lt;p>为你的采纳之旅创建一个安全失败的环境，期望失败会发生，但确保你从中学习并长进。在做复杂的事情时，请确保有主题专家（SME）的参与，但在做复杂的事情时，请确保你要么奖励失败，要么有失败预算。在大多数组织中，真正奖励失败很难，因此有时失败预算更合适。这意味着：你根据成功的前 n% 进行衡量，而不是平均/中位数。领导团队中这些行为的榜样作用至关重要，否则他们将无法在整个组织中融入这些行为。&lt;/p>
&lt;blockquote>
&lt;p>反模式：我们会支持你的任何冒险，只要结果成功就行
真正的风险预算意味着接受一系列的失败。&lt;/p>&lt;/blockquote>
&lt;h2 id="当心优先级分歧">当心优先级分歧
&lt;/h2>&lt;p>整个领导团队完全支持你的可能性很小。更可能的是，人们想要可靠性，但对变更和成本有合理的担忧。我们建议承认变更的 J 型曲线，如图 3-1 所示，这意味着在一开始的几个相对容易的胜利之后，实现有影响的变更的曲线变得困难。例如，采用自己的新自动化可能感觉像是一个倒退，然后才会实现显著的收益。通过进行屋顶射击而不是月球发射来确保成功。你仍然可以追求显著的改进，但一开始要保守一些。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23.webp"
width="721"
height="448"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23_hu_7970b27cc0910f84.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23_hu_1426f8e751a5c3df.webp 1024w"
loading="lazy"
alt="图 3-1. 变革的 J 曲线，来自 DORA 2018 年 DevOps 状态报告"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;blockquote>
&lt;p>反模式：过早放弃。例如，尝试 SRE 六个月，然后在没有立即胜利的情况下停止
这并不意味着你需要立即完成所有事情，但在几个季度之后，必须有一个明确的方向感，表明在朝着正确的方向前进。&lt;/p>&lt;/blockquote>
&lt;h2 id="如何取得支持">如何取得支持
&lt;/h2>&lt;p>如何获得这些原则的支持，获得你需要的关键批准和支持？通过考虑 John Kotter 或 BJ Fogg 提到的一般企业变革原则，确保你为 SRE 成功做好准备。即使你的领导团队不完全相信你正在尝试的事情，也没关系，但你需要确保至少有足够的紧迫感来进行变革，并有动机去实施它。&lt;/p>
&lt;p>在技术领域，我们经常奖励解决问题，而不是防止问题的发生，SRE 原则和实践的采用，可能会成为这种操作模式的牺牲品。通过找到适合你组织的指标来确保 SRE 采纳的持续价值是显而易见的。例如，在零售业，你可能专注于在黑色星期五期间最大化销售额，而在医疗保健领域，你可能专注于持续合规性和可用性，在金融领域，可能是关于交易系统的吞吐量或完成分析流水线处理的速度。&lt;/p>
&lt;blockquote>
&lt;p>反模式：如果你构建 SRE，他们就会来
实践不能孤立存在。你必须开始实际的工作，才能做出真正的改进。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：稳步上升的进展
现实世界的变革有起有落。如果你没有失败，那么你就没有在学习。&lt;/p>&lt;/blockquote>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第二章：SRE 方法对可靠性的意义何在？</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/</link><pubDate>Tue, 30 Apr 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第二章：SRE 方法对可靠性的意义何在？" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>可靠性并非新鲜事物。企业一直将其视为业务系统需要不断提升的重要品质，无论是在服务质量、可靠性还是系统正常运行时间方面。那么，SRE方法又有何独特之处呢？为何当下引起如此关注？它与传统方法有何异同？对企业来说，又意味着什么？&lt;/p>
&lt;h2 id="将可靠性作为产品的关键差异化因素">将可靠性作为产品的关键差异化因素
&lt;/h2>&lt;p>为什么企业要建立 SRE 团队或者追求可靠性呢？他们希望实现什么样的结果？行业技术的流行趋势总是在不断的变化（技术、流程），但它们需要有实质性的商业价值才能被企业留存下来。考虑到可靠性和安全性，它们起初都不是产品明显的差异化因素，而是被视为必备的需求而已。只有在出现问题，并且期望产品具有高可靠性，或其依赖性时，它们才会变得更加突出。例如，多年前，安全漏洞和黑客攻击相对较少见，因此安全性是存在的，但并不会出现在面向消费者，或企业的产品营销材料中。现在，随着漏洞越来越普遍，并成为人们关注的焦点，我们将安全性视为产品的差异化因素之一。&lt;/p>
&lt;p>可靠性（更常见的是可用性或正常运行时间）往往主要会在服务级别协议（SLA）和类似协议或期望设定的详细条款中提及。然而，我们在客户满意度（CSAT）评分、像 Downdetector 这样的第三方网站，以及将更多的生活和业务转移到互联网的整体趋势中，才会感受到可靠性的存在。在 COVID-19 疫情期间，许多软件即服务（SaaS）产品经历了业务的高速增长，并且不得不大幅提高对 SaaS 产品可靠性的期望。&lt;/p>
&lt;p>除了“可用性”之外，作为可靠性特性常见的代名词，我们还可以想到：耐久性、数据持久性、在负载下的速度或性能、一致性和返回结果的质量等各种特性描述，与作为消费者级和互联网服务客户隐性的可靠性诉求相似的特性。&lt;/p>
&lt;p>一旦我们理解到了：可靠性实际上是产品的高期待特性，我们甚至可以大胆地说，它是产品最需要必备的特性。因为，如果产品一旦不可用了，那么它的任何功能（增删改查&amp;hellip;）也都无法发挥作用。如果产品在性能或质量方面的糟糕使用体验导致用户感到沮丧，那么产品服务将不会令用户满意。如果产品服务在高峰时段、关键业务时刻无法使用了，那么产品服务就会让用户感到不值得拥有，而离你而去。&lt;/p>
&lt;p>谷歌搜索以“始终可用”的特点而闻名，以至于认为它是无处不在的服务（甚至用于测试网络是否通畅）。谷歌搜索的可用性是它与竞争对手进行对比时的关键差异化因素，与速度、质量、易用性和用户体验并列。这并非偶然，而是谷歌十多年来的一个刻意选择和投资的成果。&lt;/p>
&lt;h2 id="应该何时关注可靠性">应该何时关注可靠性？
&lt;/h2>&lt;p>当初创公司考虑是否要在可靠性方面进行投资时，可能会认为可靠性还是为时尚早。特别是当他们考虑到像谷歌这样的大型组织所采取的全面措施时。这是可以理解的，因为：初创公司首要的工作是构建一个最小可行产品（MVP），而不是一个耐用的、有韧性的服务。然而，一旦产品的可行性确定了，那就应尽快将可靠性纳入产品路线图，与安全性和其他“横向”工作（国际化、可访问性等）一起开展起来。&lt;/p>
&lt;p>在这些初创公司或早期企业中，关于可靠性的高成本定制化开发投资可能尚早，但与安全管理类似，在可靠性管理领域中，也有许多产品通过开源软件，以及通过第三方提供的服务和工具变得更加通用化。可以尽早的开始利用这些通用的工具和服务，从而避免在后期，不得不在已经发展壮大的复杂系统中进行痛苦的集成工作，或是被动响应可靠性问题。积极的前瞻性考虑是可靠性，及其相关准备工作的关键。另外，值得注意的是，尽管像谷歌这样的公司在内部构建了许多可靠性管理系统，但这绝不是最具成本效益的方法。利用外部的服务和工具是很早就经过验证的最佳实践。外部采购胜过内部自研是值得推荐的做法，特别是在诸如安全性（“永远不要自己编写加密算法”）和可靠性等领域，因为，自研可能会产生大量边缘场景和副作用。虽然，目前可靠性管理供应商领域的成熟程度和规模尚不如安全性，但它正在增长中，并且会对不断发展的公司产生重大影响。&lt;/p>
&lt;p>在规划稳定性投资时，麦肯锡的“增长的三个阶段”模型（见图 2-1）可能会对你有所帮助。它描述了公司未来发展的三种思考方式：&lt;/p>
&lt;ul>
&lt;li>阶段 1 是当前已经很重要的工作领域。&lt;/li>
&lt;li>阶段 2 是预期中新的增长领域。&lt;/li>
&lt;li>阶段 3 是未来潜在的长期增长领域，目前处于研发阶段。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58.webp"
width="442"
height="275"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58_hu_9cb5f5a23052c6ff.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58_hu_5858d9837be89d07.webp 1024w"
loading="lazy"
alt="图 2-1：增长的三个阶段"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>通过考虑对每个阶段的不同投资水平，各个团队就可以拆解可靠性领域中不断涌现的工作内容。&lt;/p>
&lt;p>首先，让我们从阶段 1 模型的产品开始，我们应该专注于确保：让可靠性工作能够为公司当前的业务模式保驾护航，同时助力短期需求的持续创新。这相关的工作包括：对于传统的运维工作，可以通过 SRE 实践进行自动化。其他工作内容还包括：服务监控（服务质量目标 [SLO]）、事故响应和持续集成/持续交付（CI/CD）等等。&lt;/p>
&lt;p>阶段 2 模型产品考虑的是：将核心业务扩展到新的市场和面向新客户。将现有的可靠性功能进行扩展，从而支持到更广泛的消费者，并可能在必要的情况下在全球范围内扩展基础设施。这些情况都将带来新的可靠性挑战，例如：分布式团队（7x24覆盖）、针对多个客户群体的容量规划、多区域部署，以及传统的维护窗口应用就不太现实了，这类工作事项本质上仅适用于本地化产品，而不适用于全球化产品（不是“所有用户都在深夜中”）。&lt;/p>
&lt;p>最后，与阶段 3 模型产品相关的可靠性工作包括：公司可能扩展其业务提供的方式。为了应对未来颠覆性机遇或应对竞争威胁，公司应该用新的能力和新的商业模式来实现。投资于阶段 3 的公司将确保其平台和架构不会被绑定在单一的商业模式上，而是允许各种形态的系统的生成和演变，同时保持控制和质量标准。在这里，系统需要是可靠的，但不能僵化。诸如集中式批准委员会和自上而下的架构标准等工作会扼杀阶段 3 模型产品所需的创新。&lt;/p>
&lt;p>因此，将 SRE 应用于阶段 1 可以对您当前重要的业务产生立竿见影的影响。将 SRE 作为阶段 2 的核心基础可以保障未来的成功。然而，阶段 3 并不是开展 SRE 的最佳领域，因为在那里做投资的可行性还不明朗。&lt;/p>
&lt;h2 id="为什么-sre站点可靠性工程在现在才开始流行">为什么 SRE（站点可靠性工程）在现在才开始流行?
&lt;/h2>&lt;p>为什么 SRE 不是在 20 世纪 70 年代或者 2010 年被发明并流行起来？显然，基于互联网的服务的复杂性近年来已经明显增长，尤其值得注意的是伴随着云计算的崛起。从商业上讲，我们将云视为分布式系统的后浪，而分布式系统是计算机科学中的一个深入研究的领域。只有在过去的十多年里，这个计算机科学的分支才对个人消费者（例如，Google，Facebook，Apple）和企业（如 Salesforce）产生了重要影响，或者说，它的原则早已经被服务提供商（如 Akamai，Stripe）广泛有效地用于提供可扩展的互联网系统，更不用说云服务提供商了。&lt;/p>
&lt;p>“数据仓库级计算”（这是 Google 的一个概念，将数据中心比喻为一个超级的数据仓库计算机的模式）的引入改变了企业构建、交付、运营和扩展服务的方式。这些新模式明显改变了企业对待成本（CapEx）的方式，从租赁或建造空间和购买计算机系统的资本支出模型转向了按需租赁计算服务片段的运营支出模型（OpEx）。然而，这还涉及到系统设计、架构和应对不断变化的故障模式的问题。&lt;/p>
&lt;p>传统的基础设施遵循类似建筑行业或金字塔的模型：从底部向上构建的大而坚固的基座。如果基座出现了问题，对其上面的所有东西都会是灾难。我们将这种模型称为基于组件的可靠性模型，或者联合模型，即需要使系统中的所有组件都可用，系统才能正常运行；如图 2-2所示，&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14.webp"
width="442"
height="219"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14_hu_f28c0dffab661422.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14_hu_87e007e0d267e178.webp 1024w"
loading="lazy"
alt="图 2-2：可靠性金字塔 "
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;p>在云计算中使用的新模型是概率可靠性或交集模型，由于架构选择是期待故障的，所以只要系统的一部分子集可用，系统就可以正常工作。&lt;/p>
&lt;p>虽然这个概念并不新颖或难以理解，但对于云服务的使用者来说，特别是当我们提出“迁移上云”的建议时，这并不显而易见，因为他们认为旧模型和新模型之间存在这等同性。虽然在新平台上运行旧模型是完全可能的，但必须考虑许多其他因素，这经常会让那些没有做好准备的人感到困惑。例如，传统的 IT 部门可能会为任何特定的虚拟机（VM）的正常运行时间而感到自豪，而对云 VM 则预期其实生命更为短暂：它们会被任意地创建和销毁，而且这个过程通常会非常快。&lt;/p>
&lt;p>企业在像 Google，Facebook 和 Apple 这样的现代公司中看到了成功的案例，发现了两个主要的优势：（1）大规模创新，以及（2）大规模可靠系统。这些公司不仅可以构建新系统，而且可以保持它们的可用性，敏捷性和正确性。这个组合对于企业来说非常有吸引力，因为这使企业也能够快速响应市场需求，并向整个市场提供广泛的解决方案。&lt;/p>
&lt;h2 id="超越-google-的光环">超越 Google 的光环
&lt;/h2>&lt;p>当然，Google 并不总是如此庞大。实际上，在早期，Google 以更传统的方式管理服务器群。使 Google 与众不同的是，它早期从垂直扩展转向了水平扩展其服务器群，也就是说，从购买更大更强大的计算机转向了购买更多更便宜的计算机。&lt;/p>
&lt;p>你可以通过走过早期托管设施的走道看到这种变化。虽然在第一次互联网热潮期间，许多租户的机架里都有看起来很酷、昂贵的硬件，但 Google 却使用的是大量标准商用硬件，预期任何时候某个机器都可能会发生故障，并在软件设计中也考虑到这种故障。&lt;/p>
&lt;p>引发这个转变的一个重要因素是，这是一个有意为之的选择：在进行水平扩展的过程中，避免相关的运营成也线性增长。也就是说，从财务的角度看，当水平扩展时，也持续雇佣更多人来维护新增的机器是没不合理的。&lt;/p>
&lt;p>在这种技术和财务选择的双重推动下，Google做出了自己的选择——这就是 SRE 部门的诞生。Google 只是在大多数其他公司之前做出了这个选择，因为它是一个非常早期的互联网规模化公司。&lt;/p>
&lt;p>我们相信，许多公司现在面临的扩展挑战与 Google 当时面临的挑战相似。只不过现在这些公司有公共云的优势，而不必在自己的数据中心中填充大量的标准商用硬件。我们相信，Google 能够通过发展 SRE 职能部门来克服这种方法的变化，这意味着 SRE 也可以帮助在其他公司克服同样的难关。&lt;/p>
&lt;p>我们在 Google 学到的一个关于 SRE 与传统 IT 运维人员配备水平的重要观点是，那就是亚线性扩展。我们的意思是，运维一个系统的团队的规模不应该与系统本身的增长速率相同。如果你的系统的使用量翻倍了，那么你也不应该需要两倍的运维团队。Google 选择不按机器数量进行扩展，而是按其他更高级的指标进行扩展：集群、服务或平台。通过关注更高的抽象层级，团队可以做更多的事情，而开销更小。 这些抽象层级往往是由那些以前运维过这些系统的人来构建和扩展的。&lt;/p>
&lt;p>复杂性可以增加对 SRE 的需求，但你的SRE人员配备应该比服务的接入增长得更慢，这个概念被称为亚线性扩展。这实际上直接与减少团队中的重复劳动琐事的原则有关。随着系统的增长和衍生，团队需要做更多的重复的任务来保持系统的健康。SRE 管理必须积极防止并跟踪这一点。如果团队允许过多的重复劳动琐事发生，不主动察觉，这可能会是一个下滑的开始，会导致团队无法维持，同时宕机时间也会增加。&lt;/p>
&lt;h2 id="为什么不选择更传统的运维方式">为什么不选择更传统的运维方式？
&lt;/h2>&lt;p>你的组织可以通过利用 Google 从垂直扩展转向水平扩展的经验，以及通过发展 SRE 而产生的相关变化，更早地享受到规模的优势，同时也可以节省资金。想一下另一种方式：为了降低扩展团队的成本，而随着复杂性的增加，团队的责任也在增加，人们也可能会从外部寻找更便宜的劳动力（例如，“外派员工”或“正确的离岸外包”）。这是处理规模和复杂性时一个太常见的方法。这通常会导致系统增长受阻，导致发生停机事故，实际上随着时间的推移，增加的成本会更高。这些意外的成本可能不仅来自停机或对品牌的损害，还可能来自于执行或扩展速度降低、新产品的上市时间延长，甚至最终被竞争对手超越等其他形式的业务收入损失。在选择如何优化运营和可靠性投资的成本时，组织需要考虑全局。&lt;/p>
&lt;p>因此，配备合适的 SRE 团队是很重要的。其实你不需要都去雇佣博士学历，但你也不能吝啬。尽量不要只关注运维人员的单位成本，而是要关注整个系统的综合成本。做个类比，工业食品包装使用着价值百万的机器设备，将桃子装入罐头盒中。你可能会想，“为什么不雇佣非熟练工人？那会比百万美元的机器便宜得多。”乍一看，这听起来更便宜。然而，当你考虑到雇佣非熟练工人的整个系统成本时，实际上更贵。因此，使用价值百万的机器的整个系统最终比雇佣非熟练工人更好、更便宜。如果你让他们，SRE 和平台工程师来为你建造你的罐头机器人。不要因为你过去常做的事情，就强迫他们手动填装桃罐头。&lt;/p>
&lt;p>如果没有高效能的员工，采用像 SRE 这样的高性能实践会更困难。那么现有的团队是不是就没有希望了？一点也不。完全有可能，并且强烈建议开发现有的人才。团队可能会试图雇佣一个外部专家，甚至是一个拥有 SRE 经验的外部团队，但这可能是一个错误。同样，期望通过外派员工或离岸外包获得（长期的）SRE 能力，也不太可能得到你期望的结果。SRE 人员的单位成本往往比传统的运维团队高，试图削减人员预算，或者想在在配备 SRE 团队时，以低成本获得高价值的方式往往都会失败。如果你的组织重视可靠性，你应该能够合理化这个成本，我们将在后面的部分探讨如何做到这一点。&lt;/p>
&lt;p>将运维只看做成本中心是一个常见的错误。你应该考虑收入和总拥有成本的全局，避免局部优化成本，并认识到，只关注短期削减成本最终可能会让你的公司付出更大的代价。例如，通过评估发生事故的情况，估计事故将对收入或品牌的影响，投资一个 SRE 团队的定位，就可以视为一种长期的保险，包括一系列的事故缓解和预防策略。理想情况下，这个团队不仅仅是“保险”，实际上还是驱动改善（可靠性！）向客户交付创新的驱动力。考虑以你的阶段 2 模型产品为目标，并统筹规划你的平台。不要只解决今天的问题；还要为将来做计划。&lt;/p>
&lt;p>考虑转型现有员工的好处。只要给予正确的激励、机会和足够的时间，一个组织就可以改变其常态，并优雅地接受其人员的现代化角色和责任，同时也尽可能地减少了不必要的人员流动。因为，毫无疑问，一个组织最宝贵的资产永远是它的人员。在评估员工的技能集时，不应低估了他们对公司核心业务的真正理解。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第一章：初探企业 SRE</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/</link><pubDate>Tue, 30 Apr 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第一章：初探企业 SRE " />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>将 SRE 导入当前的各种传统企业，是一项看似可能艰巨的工作，因此 Google SRE 整理了一些建议，希望能帮助到更多企业。通过评估企业现有的环境、设定合理的预期，并确保企业朝着正确的方向迈出正确的步伐，企业可以从评估 SRE的原则和实践，从评估SRE在组织中的运作方式开始。&lt;/p>
&lt;h2 id="演进优于革命">演进优于革命
&lt;/h2>&lt;p>企业的一个显著特点是：会始终拥有以前的 IT/管理信息系统（MIS）方法和原则的历史，Google SRE将详细讨论一些常见的方法。无论当前状态如何，Google SRE发现在采用 SRE 时，选择通过演进和补充现有框架的方式，而不是直接与其对抗会取得最大成功。此外，SRE 与其他任何技术的采用过程类似，都会受到历史遗留的影响（参见维基百科关于路径依赖的页面）。简而言之，这意味着：在像企业这样的复杂系统中，在不同地方应用相同的改变，也将产生出不一致而非收敛的结果。Google SRE将从一些成功的采用了不同的流行框架的示例开始讨论。&lt;/p>
&lt;h2 id="sre-实践可与-itsm-框架共存">SRE 实践可与 ITSM 框架共存
&lt;/h2>&lt;p>信息技术基础架构库（ITIL）是一组详细的 IT 活动实践，如 IT 服务管理（ITSM）。并非每个企业都使用 ITIL，但如果企业的相关组织在一定程度上采用过 ITIL，则应准备好 SRE 和 ITIL 实践之间会存在着重叠。此外，由于 ITIL 是一个框架，企业的定制化实施可能与库中的内容有很大差异。&lt;/p>
&lt;blockquote>
&lt;p>关键点：ITIL 有五本核心书籍，用数千页的篇幅涵盖了：关于如何构建和运行 IT 服务的内容，其中的很多主题与可靠性无关，也有很多内容故意未被 SRE 涵盖。ITIL 是一个框架，而 SRE 是一组实践，因此它们肯定是兼容的，但是在翻译术语（例如，“warranty”，“utility” 等）时可能会遇到挑战。此外，SRE 在变更管理和服务的拥有权等领域有着明确的观点，因此即使结果是一致的，也要做好调整的准备。&lt;/p>&lt;/blockquote>
&lt;p>对于调和现存的一些常见 SRE 的反模式，可能也会比较有挑战。变更咨询委员会（CAB）是变更控制的常见模式。SRE 所秉持的持续交付的方式，意味着要让这个机构简化和战略化：企业可以在 Google 的 DevOps 研究和评估（DORA）的文章中，了解到更多有关简化变更审批的内容。类似地，对于网络运维中心（NOC，或者中国的 ECC）而言，则应该将其从事件驱动模型转变为更具前瞻性的方式，重点是对其进行自动化和赋能。在这两种情况下，重点是演进当前的运作模式，而非立即替换它们。&lt;/p>
&lt;h2 id="devops敏捷精益">DevOps/敏捷/精益
&lt;/h2>&lt;p>DevOps 有多种定义。为了简单起见，Google SRE 假定它包括其他方法的相关部分，如敏捷（SAFe、DAD 和 LeSS）和精益（Six Sigma、看板）。Google 的 DORA 研究表明，SRE 和 DevOps 是互补的，因此如果企业的组织在一定程度上采用了 DevOps，则通常会有所裨益。与 ITIL 一样，我们要预见到 SRE 和 DevOps 实践存在着一些重叠，并且企业的定制化实施可能与《DevOps Handbook - DevOps 实践指南》存在着广泛的差异。Google SRE将在后面更详细地介绍特定的 SRE 实践，但 SRE 与 DevOps 相关最大的许多能力（例如版本控制、同行评审等）也通常被视为采用 SRE 的先决条件。无论企业选择通过 DevOps 还是 SRE 倡议来构建这些能力，这些都由企业来决定，但为了确保采用 SRE 的成功，那些重要的 DevOps 能力仍然需要提前准备继续。&lt;/p>
&lt;blockquote>
&lt;p>关键点：当企业在调和 DevOps 和 SRE 的差异时，倡议务实的原则；想要完成大规模演进变革的成功，还是要通过迭代和循序渐进的方式来实现。重要的是：需要把特定的工作活动拆解出来，并专注于对人员的赋能，而不是花费不必要的时间和精力来获取一个完美的“空架子”。&lt;/p>&lt;/blockquote>
&lt;p>尽管 DevOps 和 SRE 是互补的，但它们在一些领域还可能会令人难以调和。例如，企业可能已经决定将开发和运维报告层次结构替换为跨职能的 DevOps 团队。在这种情况下，重新引入像 SRE 这样的专门职能则需要进行认真的考虑。&lt;/p>
&lt;h3 id="千里之行始于足下">千里之行，始于足下
&lt;/h3>&lt;p>无论您的企业正在使用着什么方法和框架，了解并诚实地对待企业今天的现状都很重要。正如《Google SRE 运维解密》 一书所言，“希望不是一种策略！” 如果企业认为：当前的企业环境中即没有任何缺失，也不存在任何改进的机会，那么企业应该问自己：为什么要采用 SRE。同样，企业现有的一些技术或员工的想法，在刚开始的时候，看起来也可能与企业的 SRE 愿景并不一致。在做出任何改变以前，花时间来了解这些也很重要。&lt;/p>
&lt;h3 id="明确企业的期望和愿景">明确企业的期望和愿景
&lt;/h3>&lt;p>接下来，企业了解自己期望的结果很重要。SRE 会包含许多技术和文化的组成部分，但它们都指向一个相同的目标，即：实现可靠性的目标。企业应该提前预计到：企业需要花费大量的时间和精力，来定义SRE 的技术和文化与现有框架的交互方式。只是简单地说“提高可靠性”是行不通的。同样，如果企业期望的结果与可靠性无关（例如：成本、速度），那么就需要准备额外的工作成本，来让SRE 实践与企业的整体愿景进行适配。&lt;/p>
&lt;h3 id="sre-开始与人">SRE 开始与人
&lt;/h3>&lt;p>随着时间的推移，流程和技术会潮起潮落，而人员和实践则能够接受和适应它们。如果，企业是从培训和招聘开始的，那么企业可以不断的添加或删除技术和流程。而建立 SRE 能力则是一个渐进的过程；所以，不要试图通过简单的招聘来取得成功。将招聘看做是培训方式的一种加强版，而不是取代培训。记住，SRE 需要一种 “生机文化”（与病态和官僚的企业文化并列） 才能取得成功，所以确保这一点至关重要。&lt;/p>
&lt;h3 id="拥抱自身的特殊性">拥抱自身的特殊性
&lt;/h3>&lt;p>在企业的某个特定组织内采用 SRE，其实并没有一个标准化的最佳实践的做法。企业能成功的方式才是它唯一正确的方式。Google SRE 现在已经对很多组织的工作成果进行了大量的研究，知道了一些行之有效的方式，还有一些无效的做法；然而，企业必然还是会犯一些新颖的错误。将这些组织的经验视为真正的学习工具，将各种有效的改进循环融入你当前的企业的组织中。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》Google SRE 企业路线图白皮书</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/</link><pubDate>Tue, 30 Apr 2024 11:23:43 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》Google SRE 企业路线图白皮书" />&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54.webp"
width="661"
height="991"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54_hu_facdffe1a239d453.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54_hu_2cbd16391d2212c5.webp 1024w"
loading="lazy"
alt="Enterprise roadmap to SRE"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>这份文档是一本关于如何构建和维持一个站点可靠性工程（SRE）职能部门的书籍，名为《企业 SRE 路线图》（Enterprise Roadmap to SRE），由 James Brookbank 和 Steve McGhee 撰写。这本书由O&amp;rsquo;Reilly Media, Inc.在 2022 年出版，旨在帮助大型和复杂的组织（即企业）采用SRE。&lt;/p>
&lt;p>下面是对本白皮书的简要概述。&lt;/p>
&lt;p>&lt;strong>前言&lt;/strong>&lt;/p>
&lt;p>SRE 的实施与挑战&lt;/p>
&lt;p>Google 的两本 O&amp;rsquo;Reilly 书籍——《站点可靠性工程》和《站点可靠性工作手册》——展示了为什么承诺整个服务生命周期可以使组织成功地构建、部署、监控和维护软件系统。前者由 Betsy Beyer、Chris Jones、Niall Richard Murphy 和 Jennifer Petoff 编辑，后者由 Betsy Beyer、Niall Richard Murphy、David K. Rensin、Kent Kawahara 和 Stephen Thorne 编辑。&lt;/p>
&lt;p>本报告旨在在这些书籍的基础上，深入探讨在大型复杂组织（即企业）中采用 SRE 的挑战。尽管 SRE 在过去几年中非常流行，但我们从许多企业获得的反馈表明，SRE 的热情与实际采用之间存在差距。&lt;/p>
&lt;p>我们认为这是一个需要弥合的重要差距，因为可靠性正日益成为企业的重要区分点。云采用和 COVID-19 大流行引发的技术变革速度和规模，通常需要不同的技术来应对增加的复杂性。&lt;/p>
&lt;p>如果您参与生产系统的可靠性，或者依赖其可靠性，并且需要了解更多关于 SRE 采用的信息，这些主题将引起您的兴趣。这包括执行和领导角色，也包括个体贡献者（如云架构师、站点可靠性工程师 [SRE]、平台开发人员等）。无论您的角色是什么，如果您设计、实施或维护技术系统，这里都有适合您的内容。&lt;/p>
&lt;p>&lt;strong>第1章：企业 SRE 入门&lt;/strong>
介绍如何将 SRE 引入现有企业，建议首先评估现有环境，设定期望，并确保在评估 SRE 及其在组织内可能的工作方式时，朝着正确的方向迈出合理的步伐。&lt;/p>
&lt;p>&lt;strong>第2章：为什么要采用 SRE 提高可靠性？&lt;/strong>
讨论了为什么企业希望建立 SRE 团队或追求可靠性，以及他们希望实现的结果。作者指出，可靠性是产品最需要具备的特性，因为如果产品不可用了，那么它的任何特性都无法被利用到。&lt;/p>
&lt;p>&lt;strong>第3章：SRE 原则&lt;/strong>
在讨论具体实践之前，作者强调了原则的重要性。SRE 的原则包括 拥抱风险、服务质量目标（SLOs）、消除琐事（Toil）、分布式系统的监控等。&lt;/p>
&lt;p>&lt;strong>第4章：SRE 实践&lt;/strong>
一旦建立了 SRE 团队并对原则有了一定了解，就可以在组织中，开始实施一套 SRE 实践。团队的实践取决于成员能做什么、他们知道什么、他们拥有什么工具，以及他们对所有这些的舒适度。&lt;/p>
&lt;p>&lt;strong>第5章：积极培育成功&lt;/strong>
讨论了如何确保 SRE 在组织中成功的实施，包括采取小规模行动、建立和保持可持续的快乐团队、承认 SRE 是一个动态的角色，并随着时间的推移而发展。&lt;/p>
&lt;p>&lt;strong>第6章：不仅Google可以，企业亦可行&lt;/strong>
作者与三位不同行业的 SRE 领导者进行了交谈，他们在过去几年中以各种形式采用了 SRE ，分享了他们独特的故事，包括采用 SRE 的工作方式、他们可能会采取的不同方法，以及对 SRE 在他们的行业或组织中有效运作的洞察。&lt;/p>
&lt;p>&lt;strong>结论&lt;/strong>
作者希望本白皮书能帮助企业采用 SRE，并为每个人带来更可靠的技术体验。他们认为，通过明确定义 SRE 原则，将这些原则映射到实践和能力上，并优先发展和培养团队内部的这些能力，可以提高成功的机会。&lt;/p>
&lt;p>&lt;strong>关于作者&lt;/strong>
James Brookbank 是 Google 的云解决方案架构师，专注于为 Google 客户解决复杂的技术问题并提供专业的架构指导。Steve McGhee 是可靠性倡导者，帮助团队了解如何构建和运营世界级的可靠服务。在担任此职位之前，他曾任职 Google 的 SRE 超过10年，学习如何扩展全球系统。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>SRE实战引擎：构建高效稳定的生产环境 | SRE培训 | SRE认证 | SRE课程</title><link>https://martinliu.cn/course/sre-foundation/</link><pubDate>Wed, 10 Jan 2024 16:19:04 +0800</pubDate><guid>https://martinliu.cn/course/sre-foundation/</guid><description>&lt;img src="https://martinliu.cn/course/sre-foundation/sref.webp" alt="Featured image of post SRE实战引擎：构建高效稳定的生产环境 | SRE培训 | SRE认证 | SRE课程" />&lt;h2 id="课程简介">课程简介
&lt;/h2>&lt;ul>
&lt;li>课程名称：《SRE实战引擎：构建高效稳定的生产环境》&lt;/li>
&lt;li>交付形式：线上或线下&lt;/li>
&lt;li>时长：2天&lt;/li>
&lt;/ul>
&lt;p>探索SRE核心理念和实践，瞭解如何成为顶尖的SRE/DevOps专业人才。通过深度学习SRE核心基础，剖析SLO实际运用，领悟业务系统稳定性的真谛。参与实战演练，提升问题解决能力，深度理解SRE实践流程。成为SRE领域的专业人才，推动业务系统更安全、更高效运行。挑战自我，成就卓越生产环境。&lt;/p>
&lt;h2 id="课程对象">课程对象
&lt;/h2>&lt;ul>
&lt;li>DevOps工程师、运维工程师、软件工程师&lt;/li>
&lt;li>想成为SRE/DevOps工程师的人员&lt;/li>
&lt;li>服务交付经理、项目经理、产品经理&lt;/li>
&lt;li>已经有ITIL/DevOps或敏捷相关认证的人员&lt;/li>
&lt;/ul>
&lt;h2 id="课程目标">课程目标
&lt;/h2>&lt;ul>
&lt;li>在组织中对SRE相关的基础理念、核心实践达成高度一致和认同&lt;/li>
&lt;li>彻底梳理SRE的知识体系的五大核心基础和相互之间的关系&lt;/li>
&lt;li>对SRE的实施过程和相关案例做针对性的研讨&lt;/li>
&lt;li>详细理解在组织中制定SLO的流程和实施方式&lt;/li>
&lt;/ul>
&lt;h2 id="课程大纲">课程大纲
&lt;/h2>&lt;h3 id="第一天">第一天
&lt;/h3>&lt;blockquote>
&lt;p>模块 1: SRE 概述&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>SRE 的定义和来历&lt;/li>
&lt;li>探究SRE的发展历程和其在IT领域的演变。&lt;/li>
&lt;li>分析SRE与DevOps之间的密切关系。&lt;/li>
&lt;li>介绍SRE管理的核心体系。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 2: SRE 的核心基础&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>SRE的五大核心基础&lt;/li>
&lt;li>深入理解SRE的核心概念，重点关注SLO的实际应用。&lt;/li>
&lt;li>实践中探讨SRE在监控告警方面的应用，突破与传统运维管理的区别。&lt;/li>
&lt;li>探讨如何通过消除琐事和简化系统，摆脱繁琐的人工运维。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 3: SRE 的实践和流程&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>SRE的实践和流程详解&lt;/li>
&lt;li>深度解析SRE的九大实践，包括具体操作和案例研究。&lt;/li>
&lt;li>探讨SRE的五大特征，并对比其与ITIL流程的不同之处。&lt;/li>
&lt;li>分析实际的SRE参考案例，提供深入的研讨和实际应用的机会。&lt;/li>
&lt;/ul>
&lt;h3 id="第二天">第二天
&lt;/h3>&lt;blockquote>
&lt;p>模块 4: 工作坊 -《SLO兵法》实施 SRE 艺术&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>引入SLO的实际工作坊，加深对运用核心概念的理解。&lt;/li>
&lt;li>回顾SRE的核心概念，为深入的SLO实践打下基础。&lt;/li>
&lt;li>定制SLO和SLI流程，包括用户旅程和系统边界的法则。&lt;/li>
&lt;li>分组进行实际的SLO实战演练，加强团队合作和实际应用的能力。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 5: 云原生环境下的非抽象大系统设计&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>合理运用云基础设施的特性对业务系统进行设计与规划&lt;/li>
&lt;li>深入探讨抽象系统设计和非抽象设计的概念。&lt;/li>
&lt;li>讨论大规模业务系统的规划，强调设计决策对系统稳定性的影响。&lt;/li>
&lt;li>探讨分布式架构和可恢复系统的设计原则。&lt;/li>
&lt;li>结合课堂练习对设计概念进行实际运用，并进行综合总结。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 6: 综合答疑&amp;amp;总结&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>回答学员提出的问题，深化对课程内容的理解，并进行全面总结，确保学员能够充分领会并应用所学的关键概念。&lt;/li>
&lt;/ul>
&lt;h2 id="课程收获">课程收获
&lt;/h2>&lt;ol>
&lt;li>提升系统稳定性与降低宕机风险：通过学习SRE的核心理念，你将具备优化系统稳定性的实际技能。这意味着你能够更有效地防范和减少系统宕机事故，提高系统整体的可靠性，为组织创造更加稳健的运行环境。&lt;/li>
&lt;li>提升问题定位与解决能力：通过深入学习SRE实践和理念，你将获得强大的问题解决技能，能够更快速、精准地应对系统运行中的各种挑战，从而提升业务服务可用性和安全性。&lt;/li>
&lt;li>深度理解SLO制定流程：本课程详细解析SLO的制定流程和实施方式，使你能够更具深度和系统性地实施监控、度量和告警，从而更好地保障服务稳定性。&lt;/li>
&lt;li>应对系统性知识体系挑战：通过深入梳理SRE的知识体系，你将建立起更为系统和全面的知识结构，帮助你更从容地面对系统运维中的各类挑战。这不仅仅是技术层面的提升，更是对问题综合性思考的能力的锻炼。&lt;/li>
&lt;li>实施过程和案例研讨：课程注重实际应用，通过深入研讨实施过程和解析相关案例，你将培养解决实际问题的实践经验。这将使你更加熟悉实际工作中的情境，并能够灵活运用所学知识解决具体问题。&lt;/li>
&lt;li>专业认证和技能提升：本课程为已持有相关IT认证的专业人员提供更深层次的专业学习。增强解决问题的综合能力，提升在解决实际问题时的信心和熟练度。&lt;/li>
&lt;/ol></description></item><item><title>精通可观测性：系统运维实践的跃迁</title><link>https://martinliu.cn/course/o11y-foundation/</link><pubDate>Wed, 10 Jan 2024 16:19:04 +0800</pubDate><guid>https://martinliu.cn/course/o11y-foundation/</guid><description>&lt;img src="https://martinliu.cn/course/o11y-foundation/o11yf.webp" alt="Featured image of post 精通可观测性：系统运维实践的跃迁" />&lt;h2 id="概述">概述
&lt;/h2>&lt;ul>
&lt;li>课程名称：《精通可观测性：系统运维实践的跃迁》&lt;/li>
&lt;li>交付形式：线上或线下&lt;/li>
&lt;li>时长：2天&lt;/li>
&lt;/ul>
&lt;p>探索可观测性工程的理念和实战，打破传统，挑战未知。适合运维、DevOps、产品与项目管理者，聚焦可观测性的核心理论与实践。洞悉独特的软件工程方法，深入结构化事件与链路追踪，掌握OpenTelemetry探针标准。从调试到管理层决策，全方位提升。领悟SLO与告警处理的实际应用，推动团队协作与文化建设。通过参考案例与成熟度模型，助力未来发展。勇攀高峰，塑造全新视角。&lt;/p>
&lt;h2 id="课程对象">课程对象
&lt;/h2>&lt;ul>
&lt;li>运维工程师、运维经理、DevOps工程师&lt;/li>
&lt;li>想成为SRE/DevOps工程师的人员&lt;/li>
&lt;li>产品经理、项目经理、运维交付经理&lt;/li>
&lt;li>已经有ITIL/DevOps或敏捷相关认证的人员&lt;/li>
&lt;/ul>
&lt;h2 id="课程目标">课程目标
&lt;/h2>&lt;ol>
&lt;li>基础理论与实践： 掌握可观测性的核心理论，将其应用于实际的软件系统调试与优化。&lt;/li>
&lt;li>监控数据与调试： 学习如何利用监控数据进行高效调试，提升系统故障排查的能力。&lt;/li>
&lt;li>技术工具应用： 使用结构化事件和链路追踪等工具，深入了解OpenTelemetry探针标准。&lt;/li>
&lt;li>大规模可观测性管理： 分析投资回报率，制定有效的数据存储策略，优化采样方法降低成本。&lt;/li>
&lt;li>团队可观测性实践： 推广可观测性实践，促进团队内外的协作，建立可观测性联盟。&lt;/li>
&lt;li>SLO与告警处理： 利用SLO提高系统可靠性，并处理基于SLO的告警，提升预测和响应能力。&lt;/li>
&lt;li>可观测性文化与合作： 培养可观测性文化，通过商业案例了解投资回报，创建可观测性联盟，应用成熟度模型指导未来发展。&lt;/li>
&lt;/ol>
&lt;h2 id="课程大纲">课程大纲
&lt;/h2>&lt;h3 id="第一天">第一天
&lt;/h3>&lt;blockquote>
&lt;p>模块 1: 可观测性概述&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>可观测性的学术定义&lt;/li>
&lt;li>软件系统中的可观测性应用&lt;/li>
&lt;li>软件可观测性错误描述&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 2: 可观测性与调试实践&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>监控数据与调试的关系&lt;/li>
&lt;li>可观测性实现更好调试的方法&lt;/li>
&lt;li>Parse公司转型实践经验&lt;/li>
&lt;li>可观测性与DevOps、SRE、云原生的关联&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 3: 结构化事件与链路追踪&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>结构化事件在调试中的应用&lt;/li>
&lt;li>链路追踪的重要性与实践&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 4: 使用 OpenTelemetry 的探针&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>探针的简介与作用&lt;/li>
&lt;li>开源探针标准及其使用示例&lt;/li>
&lt;/ul>
&lt;h3 id="第二天">第二天
&lt;/h3>&lt;blockquote>
&lt;p>模块 5: 通过事件分析实现可观测性&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>从现有数据出发的调试&lt;/li>
&lt;li>第一性原理调试&lt;/li>
&lt;li>AIOps的误导性承诺&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 6: SLO 与告警处理&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>使用SLO提高可靠性&lt;/li>
&lt;li>处理基于SLO的告警&lt;/li>
&lt;li>可观测性与软件供应链的关系&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 7: 大规模可观测性的实践与管理&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>可观测性投资回报率分析&lt;/li>
&lt;li>高效数据存储策略&lt;/li>
&lt;li>精准且经济的采样方法&lt;/li>
&lt;li>遥测管理流水线的建立与挑战&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>模块 8: 传播可观测性文化&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>可观测性的商业案例&lt;/li>
&lt;li>创造可观测性联盟与商业智能工具结合&lt;/li>
&lt;li>可观测性成熟度模型与未来趋势预测&lt;/li>
&lt;/ul>
&lt;h2 id="课程收获">课程收获
&lt;/h2>&lt;ol>
&lt;li>深化可观测性理解： 学员将深入理解可观测性的核心概念与实践，解决在复杂软件系统中的调试与排查难题，提升系统稳定性。&lt;/li>
&lt;li>提升技术应用水平： 通过掌握结构化事件、链路追踪和OpenTelemetry探针等技术工具，学员能够更高效地应用于实际场景，优化软件质量与性能。&lt;/li>
&lt;li>优化管理决策： 学员将能够分析可观测性的投资回报率，制定高效的数据存储策略，为大规模系统的管理决策提供数据支持，降低运维成本。&lt;/li>
&lt;li>促进团队协作与文化建设： 学员通过推广可观测性实践，促进团队内外的协作，建立可观测性联盟，推动团队在系统优化方面取得更大的成就。&lt;/li>
&lt;li>提高预测与响应能力： 学员将能够利用SLO提高系统可靠性，处理基于SLO的告警，提升对系统行为的预测和响应能力，减少潜在的系统宕机风险。&lt;/li>
&lt;/ol></description></item><item><title>‘SLO兵法’实施 SRE 的艺术 | SRE培训 | SRE认证 | SRE课程</title><link>https://martinliu.cn/course/slo-art-of-implement-sre/</link><pubDate>Wed, 10 Jan 2024 15:19:04 +0800</pubDate><guid>https://martinliu.cn/course/slo-art-of-implement-sre/</guid><description>&lt;img src="https://martinliu.cn/course/slo-art-of-implement-sre/art-slo.webp" alt="Featured image of post ‘SLO兵法’实施 SRE 的艺术 | SRE培训 | SRE认证 | SRE课程" />&lt;h2 id="课程简介">课程简介
&lt;/h2>&lt;ul>
&lt;li>课程名称：‘SLO兵法’实施 SRE 的艺术&lt;/li>
&lt;li>交付形式：线上或线下&lt;/li>
&lt;li>时长：一天&lt;/li>
&lt;/ul>
&lt;p>欢迎踏上《SLO兵法》的探索之旅，一场引领你进入Site Reliability Engineering（SRE）精髓的深度学习之旅。这门课程将为你揭示系统稳定性的奥秘，为构建可靠、稳定、安全的服务打开全新的思维之门。&lt;/p>
&lt;p>&lt;strong>为何选择《SLO兵法》？&lt;/strong>&lt;/p>
&lt;p>这不仅仅是一门课程，更是通往业务系统可靠性和可观测性的钥匙。对于所有希望在生产环境领域取得卓越业务战绩的你，《SLO兵法》将成为你事业道路上的重要里程碑。&lt;/p>
&lt;h2 id="课程对象">课程对象
&lt;/h2>&lt;ul>
&lt;li>DevOps工程师、SRE工程师&lt;/li>
&lt;li>开发人员、应用架构师、服务交付经理&lt;/li>
&lt;li>产品经理、项目经理、一线运维经理&lt;/li>
&lt;li>敏捷教练，DevOps教练&lt;/li>
&lt;/ul>
&lt;h2 id="课程目标">课程目标
&lt;/h2>&lt;ul>
&lt;li>在组织中对SRE相关的核心理念基础、SLO实践流程达成高度一致和认同&lt;/li>
&lt;li>详细了解在组织中为业务系统制定 SLO的详细实施的方式&lt;/li>
&lt;li>彻底梳理SRE知识体系结构和最相关的重要技术实践&lt;/li>
&lt;li>对SLO的实施过程和相关案例做针对性的研讨&lt;/li>
&lt;/ul>
&lt;h2 id="课程大纲">课程大纲
&lt;/h2>&lt;blockquote>
&lt;p>第一模块: 对齐 SRE 中与 SLO 相关的术语概念&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>SLI、SLO 概念解析：深入剖析 SLI（Service Level Indicator）和 SLO（Service Level Objective）的核心概念，确保学员对这两个关键术语有清晰准确的理解。&lt;/li>
&lt;li>SLO 与客户体验之间的关系：探讨 SLO 与客户体验之间的紧密联系，帮助学员建立起对服务质量目标与最终用户体验之间的敏感性。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>第二模块: 业务系统为何需要 SLO ？&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>可靠性是应用系统的最重要特性：强调应用系统可靠性的至关重要地位，为学员树立系统稳定性管理的核心价值观。&lt;/li>
&lt;li>深入理解 SLO 目标数值的设定原则：深入研究 SLO 目标数值的设定流程，引导学员理解背后的原则与方法，以确保系统的运行水平符合组织的期望。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>第三模块: 使用错误预算&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>理解错误预算的概念和应用：解读错误预算的概念，着重探究其与 SLO 密切的逻辑关系，帮助学员理解如何通过错误预算合理管理业务系统风险。&lt;/li>
&lt;li>错误预算与运维操作和监控告警的关系：深入研究如何运用错误预算进行运维操作的优化，以及如何构建有效的 SLO 监控告警规则，确保在业务系统发生关键异常时能够准确、迅速的响应。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>第四模块: 实战演练 - 实施SLO案例实战&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>阅读学员手册：引导学员仔细阅读学员手册，以建立对实操案例的基本理解。&lt;/li>
&lt;li>讲解小组工作流程：解释小组工作流程，确保学员能够理解并分组准确执行实际操作。&lt;/li>
&lt;li>小组工作成果展示：学员展示他们在演练案例中所完成的成果，促进知识分享与团队协作。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>第五模块：综合答疑&amp;amp;总结&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>回答学员提出的问题，深化对课程内容的理解，并进行全面总结，确保学员能够充分领会并应用所学的关键概念。&lt;/li>
&lt;/ol>
&lt;h2 id="课程收获">课程收获
&lt;/h2>&lt;p>通过参与本课程，您将在SRE领域获得深刻的收获：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>深度理解SLI和SLO的核心概念：&lt;/strong> 您将建立清晰准确的理解，为准确设定和管理 SLO 提供坚实基础。&lt;/li>
&lt;li>&lt;strong>系统可靠性为大的核心价值观：&lt;/strong> 通过强调其重要性，帮助您确立 SRE 的核心价值观。使您能够全面了解如何优化系统稳定性，提升服务质量和安全性。&lt;/li>
&lt;li>&lt;strong>精通错误预算和运维操作的关系：&lt;/strong> 使您能够合理控制运维操作风险，并灵活正确运用错误预算。这将大幅提升您对系统健康状况的实时了解，降低潜在问题对业务的风险。&lt;/li>
&lt;li>&lt;strong>实战演练加深理解：&lt;/strong> 这种实战演练环节将帮助您将所学知识灵活应用于实际案例，提高课后在生产上推行的能力。&lt;/li>
&lt;/ol></description></item><item><title>为 Hugo 网站添加 Elastic RUM 用户体验监控</title><link>https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/</link><pubDate>Fri, 08 Dec 2023 09:44:13 +0800</pubDate><guid>https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/</guid><description>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/pexels-amina-filkins-5424636.webp" alt="Featured image of post 为 Hugo 网站添加 Elastic RUM 用户体验监控" />&lt;p>&amp;ldquo;Elastic RUM&amp;rdquo; 是指 Elastic Observability 中的实时用户体验监控（Real User Monitoring，RUM）功能，是 Elastic Stack 中的一部分。Elastic Stack 是一个开源的数据存储和分析平台，包括 Elasticsearch、Logstash、Kibana 和 Beats 等组件，用于处理和分析各种类型的数据。&lt;/p>
&lt;p>Real User Monitoring（RUM）是一种用于监控网站或应用程序性能的技术。它通过追踪和分析实际用户与网站或应用程序交互的数据，从而提供有关用户体验的实时信息。RUM 的关键目标是了解用户在访问网站时经历的性能和交互情况，以便开发人员和运维团队可以识别并解决潜在的性能问题，从而提高用户满意度。&lt;/p>
&lt;p>Elastic RUM 的优势包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>实时性能监控：&lt;/strong> Elastic RUM 提供实时性能监控，使你能够迅速发现并解决用户可能遇到的性能问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>端到端可观测性：&lt;/strong> 与 Elastic Stack 的其他组件集成，Elastic RUM 可以与日志、指标和其他数据源一起使用，为你提供端到端的可观测性，帮助你全面了解应用程序的运行状况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户行为分析：&lt;/strong> Elastic RUM 能够捕获用户与应用程序的交互信息，使你能够分析用户行为、浏览模式和访问路径，从而优化用户体验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可定制性：&lt;/strong> 你可以根据特定的需求和业务场景定制 Elastic RUM 的配置，以满足不同应用程序和网站的监控需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成弹性搜索：&lt;/strong> Elastic RUM 与 Elasticsearch 弹性搜索紧密集成，允许你使用 Elasticsearch 强大的搜索和分析功能来查询和可视化实时用户体验数据。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Elastic RUM 通过提供实时性能监控和与 Elastic Stack 的集成，帮助开发人员和运维团队更好地理解和优化用户体验，提高应用程序的性能和可用性。&lt;/p>
&lt;h2 id="elastic-rum-概述">Elastic RUM 概述
&lt;/h2>&lt;p>Elastic APM实时用户体验监控（RUM）JavaScript代理提供了对你的Web应用程序的详细性能指标和错误跟踪。它内置了对流行平台和框架的支持，并提供了用于自定义仪表化的API。&lt;/p>
&lt;p>该代理还支持所有出站请求的分布式跟踪。这使你能够分析整个微服务架构的性能——一切尽在一个视图中。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ul>
&lt;li>代理使用浏览器定时API（如导航定时、资源定时、绘制定时、用户定时等），并捕获以下信息：&lt;/li>
&lt;li>页面加载指标&lt;/li>
&lt;li>静态资产的加载时间（JS、CSS、图像、字体等）&lt;/li>
&lt;li>API请求（XMLHttpRequest和Fetch）&lt;/li>
&lt;li>单页面应用程序导航&lt;/li>
&lt;li>用户交互（触发网络活动的点击事件）&lt;/li>
&lt;li>用户中心指标（长任务、FCP、LCP、FID等）&lt;/li>
&lt;li>页面信息（访问的URL和引荐者）&lt;/li>
&lt;li>网络连接信息&lt;/li>
&lt;li>JavaScript错误&lt;/li>
&lt;li>分布式跟踪&lt;/li>
&lt;li>拆分指标&lt;/li>
&lt;/ul>
&lt;h2 id="准备-js-agent-代码">准备 JS Agent 代码
&lt;/h2>&lt;p>本文以 Hugo 网站为例，介绍如何为 Hugo 网站添加 Elastic RUM 监控。我使用 Elastic Cloud 的 SaaS 服务作为数据存储和分析平台，你也可以使用自己搭建的 Elastic Stack 集群。&lt;/p>
&lt;p>本博客所使用的主题是 &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener"
>hugo-theme-stack 由 Jimmy 设计&lt;/a>。为其他主题添加 Elastic RUM 的过程类似，只是配置文件的位置和内容可能有所不同。&lt;/p>
&lt;p>根据 Elastic Cloud 的页面上的配置向导，我们可以找到 Elastic RUM 的 JavaScript 代码，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://your-cdn-host.com/path/to/elastic-apm-rum.umd.min.js&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elasticApm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;my-service-name&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://d4c649267e404779a895b41199d5db98.apm.ap-east-1.aws.elastic-cloud.com:443&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上代码片段，你需要根据你的前端部署的实际情况，进行调整后，才能正常工作。&lt;/p>
&lt;p>如下图所示：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum.webp"
width="1038"
height="1304"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum_hu_43083fad69b6534d.webp 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum_hu_4eb8eb57ccc4a961.webp 1024w"
loading="lazy"
alt="Elastic APM RUM"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="191px"
>&lt;/p>
&lt;p>在 APM 的配置向导里，我们先点击 RUM（JS）这个标签，然后页面中会出现为前端项目添加 Elastic RUM 的 JavaScript 代码的两种方式。&lt;/p>
&lt;ol>
&lt;li>可以使用 &lt;code>npm install @elastic/apm-rum --save&lt;/code> 将代理作为依赖项安装到您的应用程序。然后可以在您的应用程序中初始化和配置代理。适用于与大多数的前端项目。而 Hugo 是一个静态网站生成器，不需要使用 npm 安装 Elastic RUM。&lt;/li>
&lt;li>本文直接使用的是选项二。将 Elastic RUM 的 JavaScript 代码复制到 Hugo 网站的 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中。&lt;/li>
&lt;/ol>
&lt;p>下面是我在 Hugo 网站的 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中添加的 Elastic RUM 的 JavaScript 代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/js/elastic-apm-rum.umd.min-5.15.0.js&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elasticApm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;martin-blog&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">environment&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;production&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;1.5.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://d4c649267e404779a895b41199d5db98.apm.ap-east-1.aws.elastic-cloud.com:443&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相关参数的说明如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>serviceName&lt;/code>：服务名称，这里我使用的是 Hugo 网站的名称。&lt;/li>
&lt;li>&lt;code>environment&lt;/code>：环境名称，这里我使用的是 &lt;code>production&lt;/code>。&lt;/li>
&lt;li>&lt;code>serviceVersion&lt;/code>：服务版本，这里我使用的是 Hugo 网站的版本号。&lt;/li>
&lt;li>&lt;code>serverUrl&lt;/code>：Elastic Cloud 的 APM 服务地址。&lt;/li>
&lt;li>&lt;code>src=&amp;quot;/js/elastic-apm-rum.umd.min-5.15.0.js&amp;quot;&lt;/code> 这里我将 Elastic RUM 的 JavaScript 代码下载到了 Hugo 网站的 &lt;code>static/js&lt;/code> 目录下，然后在 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中引用。你也可以将其放在一个可用于你的多个网站共享参考的 CDN 上，然后使用 CDN 的地址。&lt;/li>
&lt;/ul>
&lt;p>对 Elastic RUM JS Agent 的其他详细参数的使用参考文档见：&lt;a class="link" href="https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html" target="_blank" rel="noopener"
>https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html&lt;/a>&lt;/p>
&lt;h2 id="hugo-站点的改造">Hugo 站点的改造
&lt;/h2>&lt;p>根据你所使用的 theme 的不同，你需要找到在 &lt;code>footer&lt;/code> 中添加 Elastic RUM 的 JavaScript 代码的位置。根据我的Hugo主题用户文档的介绍：&lt;a class="link" href="https://stack.jimmycai.com/config/header-footer" target="_blank" rel="noopener"
>https://stack.jimmycai.com/config/header-footer&lt;/a>。&lt;/p>
&lt;p>我在 Hugo 网站的根目录下创建了目录：&lt;code>layouts/partials/footer&lt;/code>，然后创建了文件：&lt;code>custom.html&lt;/code>，并将 Elastic RUM 的 JavaScript 代码添加到了这个文件中。&lt;/p>
&lt;p>我的具体实现结果，可以参考我的网站的代码：&lt;a class="link" href="https://github.com/martinliu/martinliu.github.io.git" target="_blank" rel="noopener"
>https://github.com/martinliu/martinliu.github.io.git&lt;/a>&lt;/p>
&lt;h2 id="elastic-rum-的效果">Elastic RUM 的效果
&lt;/h2>&lt;p>在完成了以上的步骤后，我们可以在 Elastic Cloud 的 RUM 和 APM 页面上看到 Hugo 网站的用户体验监控数据了。&lt;/p>
&lt;p>点击Kibana界面左侧导航栏里的 &lt;code>User Experience 仪表板&lt;/code> 就可以看到下图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2.webp"
width="3982"
height="3736"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2_hu_ac8b311efee575c9.webp 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2_hu_800ab14f631afa0a.webp 1024w"
loading="lazy"
alt="Elastic APM RUM 用户体验分析"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;h3 id="页面加载持续时间">页面加载持续时间
&lt;/h3>&lt;p>这个高层次的概述是你分析的起点，回答了诸如：“我的服务器响应请求需要多长时间？”、“解析和绘制内容花费了多少时间？”、“我的网站接收了多少页面浏览？”等问题。&lt;/p>
&lt;p>仅从这些指标中观察，你可能无法解决任何问题，但当你深入挖掘数据时，你将对整体情况有所了解。&lt;/p>
&lt;h3 id="用户体验指标">用户体验指标
&lt;/h3>&lt;p>用户体验指标帮助你了解你的网站的感知性能。例如，首次内容绘制是浏览器开始呈现内容的时间戳。换句话说，用户在这个时候首次得到页面正在加载的反馈。&lt;/p>
&lt;p>指标参考如下：&lt;/p>
&lt;ul>
&lt;li>首次内容绘制：侧重于初始呈现，测量从页面开始加载到页面的任何部分显示在屏幕上的时间。代理使用浏览器中可用的Paint定时API来捕获时间信息。&lt;/li>
&lt;li>总阻塞时间：在首次内容绘制和事务完成之间发生的每个长任务的阻塞时间之和（持续时间超过50毫秒）。总阻塞时间是时间到交互（TTI）的极好伴侣，后者是实验室指标，不能通过浏览器API在领域中获取。代理根据页面加载生命周期中发生的长任务数量捕获TBT。&lt;/li>
&lt;li>长任务：长任务是任何占用UI线程较长时间（大于50毫秒）并阻止执行其他关键任务（帧速率或输入延迟）的用户活动或浏览器任务。&lt;/li>
&lt;li>长任务数量：长任务的数量。&lt;/li>
&lt;li>最长长任务持续时间：页面上最长长任务的持续时间。&lt;/li>
&lt;li>所有长任务的总持续时间：所有长任务的总持续时间&lt;/li>
&lt;/ul>
&lt;p>这些指标讲述了关于用户如何体验你的网站的重要故事。但开发人员不应该成为解释和采取这些信号的专家；他们应该花时间对这些指标提供的机会做出反应。因此（以及许多其他原因），Elastic已经采纳了Google核心Web Vitals。&lt;/p>
&lt;p>核心Web Vitals是Google最近推出的一项倡议，旨在引入一组新的度量标准，通过量化真实用户体验更好地分类良好和糟糕的网站。这是通过查看三个关键指标来实现的：加载性能、视觉稳定性和互动性：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals.webp"
width="1920"
height="570"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals_hu_b1e2b469771a5660.webp 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals_hu_28e028dfe7e20933.webp 1024w"
loading="lazy"
alt="Web要点"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>
（图片来源：&lt;a class="link" href="https://web.dev/vitals%ef%bc%89" target="_blank" rel="noopener"
>https://web.dev/vitals）&lt;/a>&lt;/p>
&lt;ul>
&lt;li>最大内容绘制（LCP）: 加载性能。LCP是页面的主要内容可能已加载的时间戳。对于用户来说，这是您网站的感知加载速度。为了提供良好的用户体验，Google建议将LCP控制在2.5秒以下。&lt;/li>
&lt;li>首次输入延迟（FID）: 加载响应性。FID测量用户首次与页面互动（如点击）之间的时间，以及页面能够响应这些互动的时间。为了提供良好的用户体验，Google建议将FID控制在100毫秒以下。&lt;/li>
&lt;li>累积布局偏移（CLS）: 视觉稳定性。由于异步资源加载或动态内容添加而导致内容移动了吗？CLS测量这些令人沮丧的意外布局变化。为了提供良好的用户体验，Google建议将CLS得分控制在0.1以下。&lt;/li>
&lt;/ul>
&lt;h3 id="加载查看分布">加载/查看分布
&lt;/h3>&lt;p>操作系统、浏览器家族和地理位置都可能对访问者体验你的网站产生巨大影响。这些数据可以帮助你了解用户何时、从哪里访问你的网站，并帮助你优化的优先级——例如，为访问你的站点最多的浏览器优先进行改进。&lt;/p>
&lt;p>不要忘记，这些数据还会影响搜索引擎页面排名和内容站点在热门故事中的位置——而无需使用AMP。&lt;/p>
&lt;h3 id="错误细分">错误细分
&lt;/h3>&lt;p>JavaScript错误可能对用户在你的网站上的体验产生负面影响。但是，用户软件和硬件的差异使得几乎不可能测试每种组合。而且，随着JavaScript变得越来越复杂，对用户体验监控和错误报告的需求也在不断增加。错误监控通过在生产环境中显示发生在你的网站上的JavaScript错误，使这些错误可见。&lt;/p>
&lt;p>点击Kibana界面左侧导航栏里的 &lt;code>APM 服务&lt;/code> ，选择我的 blog 的服务名称，就可以看到下图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3.webp"
width="1775"
height="1206"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3_hu_78aa68da46561099.webp 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3_hu_33772c748ab24625.webp 1024w"
loading="lazy"
alt="Elastic APM"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>由于 Elastic RUM 和 Elastic APM 实现的是全链路的追踪，如果我的 Blog 会访问到其他后台服务，而且那些后台服务也接入了 APM 监控，那么在 APM 的界面里，就可以看到端到端的追踪监控视图。&lt;/p>
&lt;p>虽然，我的这个 Blog 网站是一个无后台的静态网站，但是在 APM 中也能看到很多数据分析，包括：&lt;/p>
&lt;ul>
&lt;li>延迟&lt;/li>
&lt;li>吞吐量&lt;/li>
&lt;li>事务&lt;/li>
&lt;li>错误&lt;/li>
&lt;/ul>
&lt;p>当然，我们还可以根据这些数据，使用 Elastic 的机器学习进行异常检查分析，从而并不需要为任何一个指标的数值做阀值告警管理；当然如果某个指标恰好是我们所需要的 SLI，那么我们可以在 SLO 管理功能中，其设置 SLO 的数值，并增加告警策略。&lt;/p>
&lt;p>在完成了以上配置之后，Elastic RUM 帮助我发现了一个问题：Blog 网站的部分图片使用了腾讯云的对象存储，我的腾讯云账户由于欠费，对象存储服务应该是已经停止服务一段时间了，因此部分图片已经无法正常加载，影响到很多篇文章上图片的正常显示。我会根据 Elastic RUM 的错误告警，尽快将那些无法加载图片的文章页面进行修复。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>本文介绍了如何为 Hugo 网站添加 Elastic RUM 监控。Elastic RUM 是 Elastic Observability 中的实时用户体验监控（Real User Monitoring，RUM）功能，是 Elastic Stack 中的一部分。&lt;/p>
&lt;p>如果读者也运行着 Hugo 的网站，可以参考本文，完成 Elastic RUM 的接入。当然其他的静态网站生成器构建的网站也可以参考这个过程，只是具体的实现方式可能有所不同。这里所介绍的知识和配置方式，也同样适用于你正在工作的前端项目。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.elastic.co/guide/en/observability/current/user-experience.html" target="_blank" rel="noopener"
>Elastic RUM 产品文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html" target="_blank" rel="noopener"
>Real User Monitoring JavaScript Agent 配置参考&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/what-is/real-user-monitoring" target="_blank" rel="noopener"
>Elastic RUM 概述&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/cloud/" target="_blank" rel="noopener"
>Elastic Cloud&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/apm" target="_blank" rel="noopener"
>Elastic Cloud APM 解决方案&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/apm/real-user-monitoring" target="_blank" rel="noopener"
>Elastic Cloud APM RUM 概述&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Feature picture ❤️ Amina Filkins: &lt;a class="link" href="https://www.pexels.com/photo/crop-man-with-documents-and-laptop-at-table-5424636/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/crop-man-with-documents-and-laptop-at-table-5424636/&lt;/a>&lt;/p></description></item><item><title>《可观测性工程》为软件系统开启第三只眼👁</title><link>https://martinliu.cn/blog/observability-engineering-book/</link><pubDate>Tue, 22 Aug 2023 11:10:46 +0800</pubDate><guid>https://martinliu.cn/blog/observability-engineering-book/</guid><description>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/pexels-skitterphoto-63901.webp" alt="Featured image of post 《可观测性工程》为软件系统开启第三只眼👁" />&lt;p>“可观测性工程”(Observability Engineering) 是一个近年来在软件工程和系统管理领域中逐渐受到关注的概念。它主要关注的是：如何更好地理解、监控和调试复杂的分布式系统。&lt;/p>
&lt;p>DevOps浪潮已经给“软件工程”相关的实践带来了极大的影响。首先表现在各个职能团队已经越来越更加紧密的协作和沟通，部门墙正在逐渐消失，有更多的产品团队转型为“Two pizza team”风格的全功能团队，开发、测试、运维、数据库专家、云计算专家都融合在一起，自给自足的独立发布产品。其次软件流水线的工艺也更加的自动化，有朋友曾这样告诉我：他们的 CI/CD 已经可以实现每日多次自动化发布，产品团队每周持续交付到了手发麻的程度。&lt;/p>
&lt;p>然而，不管我们如何娴熟的使用云平台、容器平台和微服务所带来的高可靠性、自愈能力和稳定性等等优势。当我们在生产环境中 debug 故障的时候，我们依然是云里雾里的凭经和灵感验猜测，还是不得不在多种监控工具之间解读着七长八段的数据， MTTR 故障修复时间仍然长的忍无可忍。我们应该能逐渐意识能到：应用系统的现代化所带来的也不都是好处，还有更多的是“复杂度”。软件应用系统本身和其运行环境的复杂度都在逐渐攀升，四分五裂的运维管理的工具集正在迅速蔓延。&lt;/p>
&lt;p>在最近的三年多以来，我逐渐开始对曾经经典的“可观测性 == 三根支柱”的理解有所动摇；简单的信号量数据的叠加和关联就足够了么？监控工具手段的更新换代是否就可以实现可观测性。在持续没有找到答案的时候，《observability engineering》这本书出版了。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/learning.oreilly.webp"
width="250"
height="328"
srcset="https://martinliu.cn/blog/observability-engineering-book/learning.oreilly_hu_827b7146e8eb3117.webp 480w, https://martinliu.cn/blog/observability-engineering-book/learning.oreilly_hu_b2344bcdef03d1fd.webp 1024w"
loading="lazy"
alt="Observability Engineering"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/p>
&lt;ul>
&lt;li>作者： Charity Majors, Liz Fong-Jones, George Miranda&lt;/li>
&lt;li>出版日期： 2022 年 5 月&lt;/li>
&lt;li>出版社： O&amp;rsquo;Reilly Media, Inc.&lt;/li>
&lt;li>URL：&lt;a class="link" href="https://www.oreilly.com/library/view/observability-engineering/" target="_blank" rel="noopener"
>https://www.oreilly.com/library/view/observability-engineering/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Liz Fong-Jones 曾经是 Google 资深的 SRE 工程师和布道师。我几乎看过她的所有相关视频，也转发了一些在我的 B 站里。她离开了 Google 之后，与 Charity 一起创立了 Honeycomb 公司。 George Miranda 是后加入 Honeycomb 公司的员工，他加入这本书的写作时，这本书已经基本是个半成品。&lt;/p>
&lt;p>本书是第一本只讨论“可观测性”这一主题的书籍，围绕这个主题做了相当深度和广度的讨论。这本书的完整目录在网上都可以找到，下面是关于核心内的脑图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/o11y-book.webp"
width="2340"
height="2002"
srcset="https://martinliu.cn/blog/observability-engineering-book/o11y-book_hu_665a633191ea5a8b.webp 480w, https://martinliu.cn/blog/observability-engineering-book/o11y-book_hu_fda687c736cc051d.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;blockquote>
&lt;p>“可观测性” - 应该成为软件在交付生命周期中的不容忽视的一个重要属性。不只是一个技术问题，在软件系统中实现和提升可观测性同样需要 DevOps 风格的多团队协作。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;可观测性工程&amp;quot;的价值 - 增强可观测性的主要好处是提高系统的可靠性、性能和安全性。当系统出现问题时，拥有良好的可观测性意味着可以更快地发现、定位和解决问题。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>“可观测性工程”的文化和实践：可观测性不仅仅是一组工具或技术，它也是一种文化和实践。这意味着，开发者和运维人员需要紧密合作，共同关心系统的健康和性能。&lt;/p>&lt;/blockquote>
&lt;p>随着现代软件系统变得越来越复杂，可观测性工程成为了确保高可用性、性能和用户满意度的关键要素。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/s34584939.webp"
width="391"
height="500"
srcset="https://martinliu.cn/blog/observability-engineering-book/s34584939_hu_13a9e48ce1ebc81.webp 480w, https://martinliu.cn/blog/observability-engineering-book/s34584939_hu_ab12851022edd5ed.webp 1024w"
loading="lazy"
alt="中文版"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;p>《可观测性工程》这本书分为五个部分，从历史到未来，从理论到落地，从团队到组织，从商业到文化，内容非常全面。对不同角色和职位的人都有不同的意义：&lt;/p>
&lt;ul>
&lt;li>运维：学习掌握本书的内容，可以提升你的眼界和实践能力；你会更好的识别和反思当前所处的困局，你会从分门别类的监控工具集应用，转向“聚焦生产环境问题的快速识别和解决”。&lt;/li>
&lt;li>SRE：使你对基于 SLO 的监控更加有信心，特别是升级你对遥测数据采集、数据结构、后台存储和在团队中推广等方面的认知。你将会更有效的和产品团队合作。&lt;/li>
&lt;li>开发：希望这是你学习可观测性的第一本书，本书的前三个部分就是你需要学习掌握的部分。掌握了可观测性驱动开发的概念，你以后就会对应用系统的运行状态了如指掌，它是你 DevOps 和 SRE 技能组合中不可缺少的一个部分。&lt;/li>
&lt;li>经理和管理者：建议完整的阅读本书的所有内容，重点理解第一、四和五这三个部分。如果您已经熟知可观测性这个概念，可以直接重点阅读第四和第五部分。这是你在产品团队中，在整个组织里大范围落地可观测性左移的必备常识。分布在各个章节里的真实案例分析是不可错过的内容。&lt;/li>
&lt;li>CxO：建议至少阅读中的案例研究，然后重点了掌握第四和第五部分。从这些内容中，你可以轻易的了解到投资可管的测性的技术要点，用于前期的投资和收益的评判，用于中后期管理的成熟度模型（PS：适用于产品团队自身的成长和进度评估，不建议用于产品团队间/部门间的横向比较和绩效考核）。&lt;/li>
&lt;/ul>
&lt;p>《可观测性工程》书籍中的亮点和创新之处在于：将可观测性的基础知识部分，用开发一种全新的可观测性程序的方式进行描述。首先解释：这个程序最底层的构建要素的角度是什么？分析可观测性的最底层数据结构是什么？然后，我们可以很容易的将这些数据应用到用它们来描述：应用系统在生产环境中的状态的变化过程。同时还提到了如何对接开源的 OpenTelemetry 数据；希望开发的同学能对此种描述方法倍感亲切，同时让运维和 SRE 同学也能拥有一个全新的视角。&lt;/p>
&lt;p>《可观测性工程》一书的另外一个独特之处，是在第八章中引入的“用第一性原理调试应用故障”。虽然可观测性管理的基本流程也是收集、存储和分析使用数据的过程，这看起来和其它单点的监控功能相似。但是，有没有一个统一的思路可以贯穿这个过程始终，并且推动这个过程不断的循环起来。我总是听说马斯克怎样运用第一性原理指导他在造车和火箭过程中的各种创新，并没有想到和监控运维管理会有什么关系。但是本书中所描述的“核心分析循环”还是令我耳目一新。在生产环境排错的过程中，所有人都将关注点和焦虑点都放在“谁？什么时候？可以在系统中定位到哪个最准确的唯一（假想中的）的根因（root cause）”。这种过分关注的结果想法，让我们已经忽略了，在 Debug 过程中，我们应该使用什么思路，去探索未知现象中隐藏的未知的应用运行的多重故障原因。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/core-analysis-loop.webp"
width="513"
height="514"
srcset="https://martinliu.cn/blog/observability-engineering-book/core-analysis-loop_hu_37dbc4f8d83e1806.webp 480w, https://martinliu.cn/blog/observability-engineering-book/core-analysis-loop_hu_c9867f955abe76c6.webp 1024w"
loading="lazy"
alt="本图源于 Honeycomb 文档网站"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>“核心分析循环”并不是系统宕机后的救命稻草，而是一种理性冷静的思考方法，你可以在事故的前中后的任何时刻想到它。它能指导我们进行更加深度的分析思考，在一个理智的探索过程中，你会更加有条理的得出一连串假设，并逐个求证，在评判各种已知数据的时候，你同样需要不停的怀疑一切，推翻一切结论的勇气。切勿让单点工具的片面观察角度、对历史经验数据的依懒性，限制了我们 debug 生产系统的想象力，限制了人脑更适合做网状的复杂关联分析的能力。&lt;/p>
&lt;p>下面是本书中的一些精彩片段。&lt;/p>
&lt;blockquote>
&lt;p>【序言 - Cindy Sridharan】：本书没有关注协议或标准，甚至各种遥测信号的低级表示，而是将可观测性的三大支柱
设想为结构化事件、假设的迭代验证以及“核心分析循环”的三位一体。根据第一性原理对可观测性的构建要素进行整体重构，有助于强调仅通过遥测信号（或简单使用获取这些信号的工具）并不能最大限度地践行观测系统的所有行为。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>【11.6 章 &amp;ndash; 可观测性左移】：可观测性驱动开发允许工程团队将他们的玻璃城堡变成可以互动的游乐场。生产环境不是一成不变的，而是充满了活力。工程师应该有能力和自信来应对任何异常并且取得胜利。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>【14.4 章 - Slack 案例研究结论】：我分享了Slack 如何探测CI 流水线以及如何调试分布式系统的示例。开发人员了解生产环境中的代码情况，首先要考虑的应该是调试分布式系统的复杂性。但是，在发布到生产环境之前，如何正确理解和调试分布式系统同样具有挑战性。&lt;/p>&lt;/blockquote>
&lt;p>我个人认为：本书完整的回答了大量的问题，可观测性是什么？如何构建？如何左移？实现可观测性管理平台中的重要技术要点？如何在团队和组织中落地和规模化可观测性？怎样构建可观测性文化？等等。即使作者在序言和文中郑重提出，作者团队尽量避免持有任何立场，避免推广其公司产品和技术的意图。但是从文章中所引用的工具界面上看，从对核心数据结构“事件”的论述过程中看，从所引用的他们与 Slack 公司的合作案例上看；都难免脱离所在公司产品的身影。而公正的看，我们无法称之为瑕疵和片面。读者需要在理解此背景的前提下，批判性吸收书里的内容，从而避免在理解上以偏概全的可能性。本书的行文内容上看，那些高调的、上得了厅堂的内容可以用来与 CxO 对话；那些深入的、下得了厨房的代码可以用来与开发工程师沟通。本书使用了大量的篇幅在讨论“可观测性”的来龙去脉，讨论与传统监控的区别和关系，论述落地实现的细节；总的来说：这是一本在“可观测性”主题上用心良苦的作品。意在苦口婆心的引导大家走上构建应用系统可观测性的正确道路。&lt;/p>
&lt;p>下面是在 Amazon 上关于本书的评论总结：&lt;/p>
&lt;ol>
&lt;li>本书深入介绍了可观测性的实际含义，强调它能够解决新问题，构建可观测系统不一定需要添加新遥测数据。&lt;/li>
&lt;li>书中讨论了可观测性的基本概念，指出它是社会技术系统，能够促进开发人员和业务人员之间的沟通。&lt;/li>
&lt;li>可观测性在大型公司内部的推广是社会问题，需要说服管理层，书中提供了这方面的指导。&lt;/li>
&lt;li>书籍中有关构建可观测性堆栈的高级方法的简要说明。&lt;/li>
&lt;li>可观测性不仅仅是监控，它强调了从&amp;quot;为什么&amp;quot;出发，涉及实现细节和相关技术。&lt;/li>
&lt;li>评论者强调可观测性是在分布式系统中获取有用信息的关键，提到了跟踪数据流和高基数跟踪的重要性。&lt;/li>
&lt;li>书中包含了一些行业领导者的案例研究，介绍了他们如何应用可观测性方法监控生产环境。&lt;/li>
&lt;li>书中涉及了日志、度量、span、追踪、警报等概念，强调了原则胜过具体代码。&lt;/li>
&lt;li>评论者强烈推荐本书，认为它适用于任何希望为客户构建系统的人，并具有实际应用价值。&lt;/li>
&lt;li>评论者认为本书是向可观测性转变的人的必读之作，介绍了关键概念和工具的应用。&lt;/li>
&lt;/ol>
&lt;p>中文版书籍在各大电商平台有出售。感兴趣的朋友可以入手学习。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/observability-engineering-book/f11f3a292df5e0fe61162f18516034a85edf7299.webp"
width="600"
height="392"
srcset="https://martinliu.cn/blog/observability-engineering-book/f11f3a292df5e0fe61162f18516034a85edf7299_hu_6736d5cdd89cbb70.webp 480w, https://martinliu.cn/blog/observability-engineering-book/f11f3a292df5e0fe61162f18516034a85edf7299_hu_42cb802b7eceedd3.webp 1024w"
loading="lazy"
alt="第三只眼"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="367px"
>&lt;/p>
&lt;p>最后，我认为一个软件系统应该拥有三只眼：&lt;/p>
&lt;ol>
&lt;li>👁 稳定之眼：从 SRE 站点稳定性工程的角度讲，系统的稳定性是最重要的feature，没有之一。我深度认同这个观点。稳定性包含了服务必须具备的可用性和足够的性能。只有运行在生产环境中，被用户能正常访问和使用的代码才能发挥出它应有的价值。在运行的过程中，应用系统会宕机，运行环境可能会出问题，这都会导致应用系统的无法访问和使用；或者系统的 Bug 导致的高错误率，让系统处于半死不活的状态，用户也能从界面上看到千奇百怪的错误。系统是否进入了非正常的不可用状态？系统是否正在经历着性能抖动的过程？错误率是否高涨到即将溃坝？这些现象本质是产品的稳定性不足导致的，而这些现象是否可见，故障根源是否能快速定位？我们就需要用到第三只眼。&lt;/li>
&lt;li>👁 混沌之眼：这是一只作死之眼，它是混沌工程。混沌工程旨在对生产环境中注入人为的故障，在云环境中可以使用的手段很多：随机的关闭虚拟机、随机的杀死正在运行的进程、在网络中注入导致网络拥塞的数据包等等。在错误注入的过程中，我们关注于应用系统还是否能正常使用？应用系统如果宕机了的话，它的故障模式是怎样的？然而，可视化这个过程，可视化应用宕机现场的细节，都需要用到第三只眼。对于混沌工程的复盘和数据分析能帮助应用系统提高稳定性，消除单点故障，提升故障容忍度和自动化迁移等等。&lt;/li>
&lt;li>👁 可观测之眼：可观测性是应用系统本身的一种属性，可观测性的呈现不仅需要在应用程序代码中进行埋点增强（充分条件），还需要方便的采集遥测数据，这些都需要用到可观测性管理平台：可观测信号量的收集、上报、存储和展现分析等功能。可观测性管理平台是‘可观测性’显现（外显）/表现出来的必要条件。&lt;/li>
&lt;/ol>
&lt;p>以上是我对《可观测性工程》这本书的简介，希望对大家学习可观测性知识有所帮助。在结尾我用比喻的方式引出了应用系统应该拥有的三只眼的观点，它们是相辅相成且相互成就的关系。&lt;/p>
&lt;p>❤️ Feature Photo by RealToughCandy.com: &lt;a class="link" href="https://www.pexels.com/photo/person-holding-a-sticker-11035393/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/person-holding-a-sticker-11035393/&lt;/a>&lt;/p></description></item><item><title>SRE 实践的知识体系梳理</title><link>https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/</link><pubDate>Mon, 10 Oct 2022 23:13:43 +0800</pubDate><guid>https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/</guid><description>&lt;img src="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/1_er5uoPoOmLkfuxjTAy2zwQ.webp" alt="Featured image of post SRE 实践的知识体系梳理" />&lt;blockquote>
&lt;p>直播预告。在 10 月 19 日晚上，我会在社区里再次为大家梳理一下 SRE 的知识体系模型，还是用脑图的方式，向大家讲解 SRE 都有相关部分组成。&lt;/p>&lt;/blockquote>
&lt;p>本次直播活动的录播视频。&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1XD4y1r7dS"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;p>下面这幅脑图是在我翻译完了《SRE Workbook》之后编写的，用了我好几天的时间，并且前后改了好几版。&lt;/p>
&lt;p>编制这个脑图的出发点在于：SRE 从来源到 5 大基础模块，到推广实施的方法论都看似比较完整，比较成体系。这种脉络明晰的知识体系（knowledge body）本来就有画出脑图的可能性；而且脑图应该是一种比较便于吸收和学习的形式。&lt;/p>
&lt;p>脑图的第一个版本是从 《SRE Workbook》的目录开始的，我尝试用最精简的方式，梳理每一章节中的知识点。可是在编制了前两章以后，就发现这个工作量其实非常的大。然后，我果断的放弃了“完美”的目标，然后将目标定位为：先完成一版。下图就是这样一个版本。后续我们讨论还有那些改进和与社区协作的想法。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/SRE-Workbookv1.5.webp"
width="1921"
height="15987"
srcset="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/SRE-Workbookv1.5_hu_61f82fdac5c220dc.webp 480w, https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/SRE-Workbookv1.5_hu_a661ec00a8092114.webp 1024w"
loading="lazy"
alt="SRE 知识体系脑图"
class="gallery-image"
data-flex-grow="12"
data-flex-basis="28px"
>&lt;/p>
&lt;p>后续的未尽事项：&lt;/p>
&lt;ul>
&lt;li>细化现有版本，将《SRE Workbook》中的知识点尽量都涵盖尽量。&lt;/li>
&lt;li>将 SRE 的第一本出版物《Google SRE 运维解密》也梳理进来，由于它已经被 Workbook 彻底包含，并且多次引用。&lt;/li>
&lt;li>将 SRE 安全那本书也梳理进来，由于安全的特殊性，独立做一个节点梳理比较现实；如果能融入的更好，则更加。&lt;/li>
&lt;li>需要找到一种方便人们协作的线上脑图协作软件，应该至少具备一下功能：
&lt;ul>
&lt;li>多人协作&lt;/li>
&lt;li>评论知识点&lt;/li>
&lt;li>支持导入导出标准格式的脑图文件&lt;/li>
&lt;li>支持导入导出 pdf，png，jpg ，html 等方便人们引用的文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>欢迎范围和参考 Google 官方 SRE 独立站点。&lt;a class="link" href="https://sre.google/" target="_blank" rel="noopener"
>https://sre.google/&lt;/a>&lt;/p>
&lt;p>网站中的相关出版书籍如下。&lt;/p>
&lt;h2 id="site-reliability-engineering">Site Reliability Engineering
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre1.webp"
width="400"
height="512"
srcset="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre1_hu_94e2de5906117909.webp 480w, https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre1_hu_b3c8f442a2e5f62.webp 1024w"
loading="lazy"
alt="sre book 1"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;ul>
&lt;li>中文版书名：&lt;a class="link" href="https://book.douban.com/subject/26875239//" target="_blank" rel="noopener"
>SRE：Google运维解密&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/sre-book/table-of-contents/" target="_blank" rel="noopener"
>英文版线上阅读&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="the-site-reliability-workbook">The Site Reliability Workbook
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre2.webp"
width="399"
height="512"
srcset="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre2_hu_111a9b7fc9de9485.webp 480w, https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre2_hu_8169309579248d35.webp 1024w"
loading="lazy"
alt="sre book 2"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="187px"
>&lt;/p>
&lt;ul>
&lt;li>中文版书名：&lt;a class="link" href="https://book.douban.com/subject/35224058/" target="_blank" rel="noopener"
>Google SRE 工作手册&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/sre-book/table-of-contents/" target="_blank" rel="noopener"
>英文版线上阅读&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="building-secure--reliable-systems">Building Secure &amp;amp; Reliable Systems
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre3.webp"
width="399"
height="512"
srcset="https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre3_hu_84977fa4db40cb6d.webp 480w, https://martinliu.cn/blog/sre-knowedge-body-mind-map-live-show/sre3_hu_6e082624ad279f22.webp 1024w"
loading="lazy"
alt="sre book 3"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="187px"
>&lt;/p>
&lt;ul>
&lt;li>中文书名：&lt;a class="link" href="https://book.douban.com/subject/35585206/" target="_blank" rel="noopener"
>《Google系统架构解密》&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/static/pdf/building_secure_and_reliable_systems.pdf" target="_blank" rel="noopener"
>英文版 PDF 版 官方免费下载&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>可汗学院如何在一周内成功处理2.5倍的流量？</title><link>https://martinliu.cn/blog/how-khan-academy-successfully-handled-2-5x-traffic-in-a-week-cn/</link><pubDate>Thu, 25 Mar 2021 00:21:05 +0800</pubDate><guid>https://martinliu.cn/blog/how-khan-academy-successfully-handled-2-5x-traffic-in-a-week-cn/</guid><description>&lt;img src="https://martinliu.cn/img/cos/2021-03-24-sunrise-5863751_1920.png" alt="Featured image of post 可汗学院如何在一周内成功处理2.5倍的流量？" />&lt;p>可汗学员处理流量突然暴增的过程离不开 SRE 的设计和工作。他们的应对策略包括使用云和CDN。&lt;/p>
&lt;p>可汗学院是一家非营利性机构，其使命是为任何人、任何地方提供免费的世界级教育。&lt;/p>
&lt;p>本文原文出处：&lt;a class="link" href="https://blog.khanacademy.org/how-khan-academy-successfully-handled-2-5x-traffic-in-a-week/" target="_blank" rel="noopener"
>https://blog.khanacademy.org/how-khan-academy-successfully-handled-2-5x-traffic-in-a-week/&lt;/a>&lt;/p>
&lt;p>这篇文章的发布时间在去年（2020 年 5 月），大约是全球疫情最严重的时候。以下是正文。&lt;/p>
&lt;p>说到快速扩展&amp;hellip;&lt;/p>
&lt;p>几个月前，我发布了一些关于扩展的想法，并承诺很快会发布更多的内容。好吧，说到快速扩展&amp;ndash;在3月份的短短两周内，可汗学院网站的使用量就增长到了去年同期的2.5倍，并且一直维持到现在。由于冠状病毒大流行，世界各地的学校都关闭了，学生、家长和老师都转向了远程教育，可汗学院能够做出反应，提供高质量的内容和课堂体验&amp;ndash;而且是免费的。在4月份，我们在平台上为3000万学习者提供了服务。最近一项针对家长的全国性调查发现，可汗学院是 &lt;a class="link" href="https://tytonpartners.com/library/2177-2/" target="_blank" rel="noopener"
>&amp;ldquo;使用最多的在线资源&amp;rdquo;&lt;/a>。&lt;/p>
&lt;p>我很自豪，我们吸纳了这种快速增长，同时并没有干扰到我们的用户。除了在几天内迅速做出反应以缓解压力点之外，我们还提前做好了准备，而这种准备也得到了回报。我们之所以能够轻松地进行扩展，很大程度上是因为我们的架构以及谨慎选择外部服务并正确使用它们的严谨做法。&lt;/p>
&lt;p>因此，在这篇文章中，我将讨论对我们网站的可扩展性起关键作用的架构方面。&lt;/p>
&lt;p>我们架构的两个基本组件在这里为我们提供了特别好的服务。我们使用谷歌云，包括AppEngine、Datastore和Memcache，以及Fastly CDN，它们是无服务器和缓存策略的支柱，这是我们扩展性的关键。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2021-03-24-scaling-traffic-in-a-week.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="无服务器基础设施">无服务器基础设施
&lt;/h2>&lt;p>使用 GCP 的 AppEngine，这种完全管理的环境，意味着我们可以非常容易地扩展，几乎不费吹灰之力。即使在流量大幅增加的情况下，我们的网站也能保持良好的性能，而且干预最少。我们自己不需要担心负载平衡，因为服务器实例会根据需要启动，也不需要任何干预。我们同样使用 Datastore，它可以自动扩展存储和访问容量，与 App Engine 扩展 Web服务器实例的方式非常相似。&lt;/p>
&lt;h2 id="缓存">缓存
&lt;/h2>&lt;p>Fastly CDN使我们能够缓存所有静态数据，并最大限度地减少服务器跳转。巨大的可扩展性，它还能帮助我们优化托管资源，在我们的App Engine无服务器模式中，托管资源的成本随着使用量的增加而线性增长。如架构图所示，所有的客户端请求都会经过Fastly，这样我们可以防止不必要的服务器流量，提高性能。我们主要从YouTube加载视频，其次从Fastly加载。这样也可以降低成本，以及保证视频的快速加载。&lt;/p>
&lt;p>除了在Fastly中缓存静态数据外，我们还广泛缓存常见的查询、用户偏好和会话数据，并利用这些来加快数据获取性能。我们除了围绕 Datastore 行使其他关键的最佳实践外，还大量使用Memcache，以确保快速响应时间。&lt;/p>
&lt;p>我们的网站可靠性(SRE)团队当然需要做好扎实的监控准备&amp;ndash;我们也是做到了。我们注意到头几天出现了一些降速，并发现是部署导致了这些衰减。在我们的要求下，Google 增加了我们的 Memcache 的容量，一周内我们就可以轻松恢复到正常的连续部署模式。这个速度是至关重要的，因为我们的团队正在快速的开发资源，以指导新网站用户尽可能轻松地上手使用我们的服务。&lt;/p>
&lt;p>总的来说，我们努力工作，谨慎选择服务，遵循最佳实践，并根据需要开发自己的服务。有了正确的技术、精心的准备，以及我们了不起的工程团队的现场调整，我们已经能够不间断地为现在比以往任何时候都更依赖我们的学生、家长和教师提供服务。&lt;/p></description></item><item><title>战斗机飞行员如何进行事故管理（译文）</title><link>https://martinliu.cn/blog/fighter-pilots-and-incident-management-cn/</link><pubDate>Tue, 23 Mar 2021 19:45:57 +0800</pubDate><guid>https://martinliu.cn/blog/fighter-pilots-and-incident-management-cn/</guid><description>&lt;img src="https://martinliu.cn/img/cos/2021-03-23-f-16-fighter-pilot-1-scaled.jpg" alt="Featured image of post 战斗机飞行员如何进行事故管理（译文）" />&lt;p>你的事故管理与战斗机飞行员的有什么共同点？经验丰富的战斗机飞行员，Transposit 的 Anthony &amp;ldquo;AB &amp;quot; Bourke 说，他最近在DevOps企业峰会的快乐时光上做了这个演讲。&lt;/p>
&lt;blockquote>
&lt;p>教练观点：incident management 在目前的所有出版物中，甚至大部分翻译软件中，都被翻译为 “事件管理”。在 IT 行业中，这个词汇的首次出现大约是在 20 年前，从 ITIL 引入运维管理的时候，从第一波 ITIL 在国内传播布道的时候，它就一直被翻译为 “事件管理”，“事件” 其实是一个没有好坏之分，好恶差异的中性词，不带有严重后果的含义。但是如果你在美剧中，在美国 NBC 新闻频道仔细的听；incident 往往和某人遭遇交通事故受伤亡相关；和就在今天美国科罗拉多的一个商场里发生的 10 人死亡的枪击案件相关。大部分企业的 ITIL/ITSM 软件中事件管理流程里所管理的其实都是 Event Management，而不是事故。希望本文能引起大家的注意。本文中将其翻译为“事故管理”，事故应该是 Incident 这个单词在 IT 服务管理这个语境里应该有的，精确的含义。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2021-03-23-2021.10.20a.jpg"
loading="lazy"
>&lt;/p>
&lt;p>本文出处：&lt;a class="link" href="https://www.transposit.com/blog/fighter-pilots-and-incident-management/" target="_blank" rel="noopener"
>https://www.transposit.com/blog/fighter-pilots-and-incident-management/&lt;/a>&lt;/p>
&lt;p>想象一下。在你所从事的工作中，你是最棒的，你被招募为蓝天上的飞翔天使。&amp;ldquo;所以，现在我们希望你驾驶着你的喷气式飞机，在很低的高度上高速飞过大量的人群，并发出巨大的噪音。然后我们要做编队飞行，你和你领导机翼间隙只有18英寸。还有一件事我得提一下，有一半的时间里，我们希望你们是倒立的，倒过来的；&lt;strong>所以就像你的IT业务服务遭受了灾难一般，后果非常严重&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>他说的没错。事实上，作为一名值守的工程师，在新冠疫情期间，应付的是应用系统发生的各种状况，值守工程师承受的压力比以往任何时候都大，有多少时候会有 &amp;ldquo;倒飞&amp;quot;的感觉？这可能是一种令人头晕目眩的体验。而失败的后果往往很严重，同时大家对 &amp;ldquo;完美任务 &amp;ldquo;的期望也从未如此的高。&lt;/p>
&lt;p>在事故管理的坚实基础上，我们可以从战斗机飞行员那里学到什么？能否帮助我们运行和保障业务关键任务服务的安全？&lt;/p>
&lt;h2 id="如实汇报不可打折">如实汇报不可打折
&lt;/h2>&lt;p>虽然我们认为：飞行员所完成的史诗般的飞行，是他们工作中最重要的部分，但伯克强调，其实汇报与任务本身同等重要。&lt;/p>
&lt;p>每次任务结束后，无一例外的，战斗机飞行员在汇报上所花费的时间，几乎是他们飞行时间的两倍。事实上：&amp;ldquo;无论我们认为自己已经有多好了，无论我们的计划有多优秀，无论我们的技术有多完美，无论我们的人员素质多么无敌，其实战斗机飞行员并没有执行过所谓的完美任务。&amp;rdquo; 我们的大部分学习，并不是发生在任务或事故本身，而是发生在事后，是在我们恢复之后，在和同事讨论的过程中，用清醒的头脑看待所发生的事情。&lt;/p>
&lt;p>我们能，也应该将这种纪律性带入自己的事故管理实践中。&amp;ldquo;不要将这种汇报的概念，看作是只能在军队中发挥作用的东西，&amp;rdquo; 伯克说。&amp;ldquo;想一想，你是如何提高你在给予和接受反馈方面的标准的。&amp;rdquo; 你不仅会加速新员工的成长体验，而且你还会发现，你团队中经验丰富的人也能够突破他们自己的玻璃天花板，同时避免他们无法提升，无法适应不可避免的变化。&lt;/p>
&lt;h2 id="透明度是汇报的关键">透明度是汇报的关键
&lt;/h2>&lt;p>跟我们一起飞上一段旅程吧！假设你就是一名中级军官，你刚刚和一群军官一起执行训练任务归来，还有一名二星将军还在回家的路上。当你汇报任务时，你在视频中观察到，将军现在已经在目标之外的100英里了，而且他应该在离开目标50英里的时候，就将“主臂”置于保险状态，可是他现在的&amp;quot;主臂 &amp;ldquo;开关放了在手臂的位置上（这意味着武器仍然是发射就绪状态）。你会指出这个将军的操作失误么&amp;ndash;他可是负责着你的涨薪、晋升和降级？&lt;/p>
&lt;p>当伯克提出这个问题时，我们中的许多人都觉得，对一个权威人物，指出他们犯了一个错误的想法是非常恐怖的。但随后，他介绍了闭口不言的潜在后果。你们中队所驾驶的F16战机的载弹量是2000磅，它可以每分钟发射6000发子弹。在你返航接近基地时，错误的按下一个按钮，可能就是一个致命的错误，这会将自己部队的基地给摧毁掉。有了这些补充说明后，答案就很明显了。透明度不能是可有可无的。&lt;/p>
&lt;p>汇报的做法会让团队在下一次任务（或事故）来临时变得更强大，适应性更强。但汇报成功的奥秘并不神秘，但往往却求之不得：完全透明。&lt;/p>
&lt;p>在汇报过程中，官衔等级应该被抛弃，自我要放在一边。&amp;ldquo;当汇报室的门关上时，一些神奇的事情就会发生，&amp;ldquo;伯克说。&amp;ldquo;军衔铭牌从我们的胸前脱落了，我们举行的汇报并没有等级制度，唯一的目的就是学习和改善。&amp;rdquo; 伯克敦促队友成为 &amp;ldquo;自己最大的敌人&amp;rdquo;，暴露自己的错误，并承诺今后要做出改变。队友们不是将责任推给他人，而是从同伴那里获得信心。&lt;/p>
&lt;p>创造这种环境需要领导层有意识地付出努力，为各种等级的队友提供一个安全的空间，让他们坦诚相待。&amp;ldquo;我们的IT领导者必须找到一种方法，来创造这样的环境，让他们的员工能够给他们提供所需的诚实、实时的反馈，以帮助他们做出正确的决策，使他们领先于威胁，领先于竞争者，领先于不可避免的变化。&amp;rdquo;&lt;/p>
&lt;h2 id="通过事后回顾总结提升事故管理">通过事后回顾总结提升事故管理
&lt;/h2>&lt;p>接受伯克的说法：&amp;ldquo;汇报是世界上最强大的工具，组织中人员的经验可以得到加速度成长，帮助你团队中的每个人都成为奇才，并推动产生更好的成果。&amp;rdquo; 如果我们真正想实践持续改进，事后总结应该是一致的、彻底的、广泛分享的。&lt;/p>
&lt;ul>
&lt;li>第一步是确保你的团队在每一个事件发生后都要进行事后分析。&lt;/li>
&lt;li>其次，事后总结需要检查事故解决过程中实际发生的细节，而不仅仅是产生问题的原因。在一个安全的环境中，团队成员会很自在地分享他们可以做得更好的地方，并确定需要改进的地方。&lt;/li>
&lt;li>最后，还要在整个组织内分享学习成果，这样经验就不会被忽略，否则就无法积累组织的知识。你永远也不知道，谁可能需要在下一次事故中实施这些经验，这些学习将帮助他们更好地准备起来，应对各种状况。&lt;/li>
&lt;/ul>
&lt;p>我们的任务可能在飞行高度上有所不同，但在原则上非常相似。承受极端的压力。高风险。以及永无止境的学习空间。借鉴战斗机飞行员的实战经验，我们可以成为自己组织中的特立独行者，将我们的流程提升到新的高度。透明度、诚实，以及对学习和改进的承诺，将会使我们的事故管理飞速发展。&lt;/p></description></item><item><title>《2020 年 SRE 报告》by Catchpoint</title><link>https://martinliu.cn/blog/2020-sre-report-by-catchpoint/</link><pubDate>Mon, 01 Mar 2021 11:29:33 +0800</pubDate><guid>https://martinliu.cn/blog/2020-sre-report-by-catchpoint/</guid><description>&lt;img src="https://martinliu.cn/img/2021/03/2020-sre-report.jpg" alt="Featured image of post 《2020 年 SRE 报告》by Catchpoint" />&lt;p>2020 年是不寻常的疫情年，所有行业都受到了巨大的影响， SRE 纯分布式工作方式的转型也是本报告的亮点之一。报告从 4 个方面详细介绍了疫情年中 SRE 的众生相。&lt;/p>
&lt;p>本报告出自：&lt;a class="link" href="https://pages.catchpoint.com/2020-sre-report" target="_blank" rel="noopener"
>https://pages.catchpoint.com/2020-sre-report&lt;/a>&lt;/p>
&lt;p>本文是个人学习的结果，非 Catchpint 官方出品，观点尽量与官方保持一致，但个别地方可能难免会出现偏差，有任何质疑请参考原文，或者与我交流。&lt;/p>
&lt;h2 id="概要">概要
&lt;/h2>&lt;h3 id="sre--调查贡献者">SRE 调查贡献者
&lt;/h3>&lt;p>Catchpoint 要特别感谢 Sanjeev Sharma、Marc Hornbeek、Archana Joshi 和 Niladri Choudhuri。他们的见解和贡献为整个报告奠定了基础。&lt;/p>
&lt;p>我们还要特别感谢 Nithyanand Mehta。Nith 关于成熟度的内部白皮书为本报告的一些关键谈话点提供了灵感。&lt;/p>
&lt;p>感谢 Eveline Oehrlich 和 DevOps Institute 的同事。他们的反馈和时间是至关重要的贡献，超过了本文档所能捕捉到的内容。&lt;/p>
&lt;h3 id="支持伙伴">支持伙伴
&lt;/h3>&lt;p>如果没有 Blameless、Gremlin、Honeycomb、NS1、LaunchDarkly 和 Packet 这些了不起的合作伙伴，Catchpoint就 不可能开展本次 &amp;lsquo;SRE from Home&amp;rsquo; 的调查。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-01%20at%2012.01.12%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-01 at 12.01.12 A"
>&lt;/p>
&lt;h2 id="前言">前言
&lt;/h2>&lt;p>长期以来，人们一直在讨论客户期望值不断提高的恶性循环，认为这是推动在快速、边缘分布式的环境中提供服务的复杂性不断增加的原因。可靠的方式。今年，我们特别考虑到在家工作的突然增加；我们认为我们的员工和客户一样分布在世界各地。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre2.jpg"
loading="lazy"
>&lt;/p>
&lt;p>我们真的很感激大家为 2020 年的 SRE 报告提供数据，这样就有了两组清晰的数据。今年的报告包括 &amp;ldquo;在家工作前 &amp;ldquo;和 &amp;ldquo;在家工作后 &amp;ldquo;两个时间段的调查结果和数据，提供了业界最独特的视角之一，说明了 2020 年里 SRE 的特殊意义。&lt;/p>
&lt;p>我们评估了600多百名调查对象的数据。在分析数据的同时，我们希望能对当今 SRE 先锋们的趋势、现状和面临的挑战进行真实、人性化的观察。&lt;/p>
&lt;p>我们衷心感谢为本报告做出贡献的所有个人，现在我们也同样感谢您，读者。我们希望您能像我们享受研究和写作一样，享受阅读的乐趣。&lt;/p>
&lt;p>与Catchpoint以前的 SRE 报告一样，我们考虑了那些被认定为从事 SRE 类工作的个人的数据，尽管头衔可能还没有用到 &amp;quot; SRE &amp;ldquo;。&lt;/p>
&lt;h2 id="介绍">介绍
&lt;/h2>&lt;p>从&amp;quot;当你要求软件工程师设计一个运维团队时会发生什么？&amp;rdquo; 这个问题出发，将会得出的答案是：&amp;rdquo; SRE 团队负责其服务的可用性、延迟、性能、效率、变更管理、监控、应急响应和容量规划。&amp;rdquo; 如果说 SRE 是广义的 DevOps 原则的狭义实施，那么它们的主要区别就是 SRE 的核心重点是可靠性。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre-1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>以上述问答为基础，今年的 SRE 2020报告强调了一个目标，这个目标可能是关于与所有相关从业者的共同目标，无论他们的头衔是什么： &lt;strong>通过设计可观测的系统来防止服务中断，而不是去被动的修复服务中断&lt;/strong> 。让我们从一个明确的融合点开始，并向后延伸，使大型或小型组织都能根据这个 2020 年的基线数据进行自我评估。&lt;/p>
&lt;p>如果一个共同的目标是解决复杂的问题，那么这个旅程应该是什么样的呢？在一个由边缘计算工作推动的微服务世界中，这个旅程涉及到的组件比以前更多了，这些现在需要在在家工作的现实中重新评估这些组件。这包括暴露出那些可能会被忽视，或以前并不存在的领域。考虑诸如士气、员工体验和人类健康等问题，与传统的资产类别，如组织结构、工具堆栈、硬件和软件一起考虑。&lt;/p>
&lt;h2 id="关键要点1-可观测性组件存在而可观测性存在么">关键要点1 ：可观测性组件存在，而可观测性存在么？
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/img/2021/ch1.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>找出你所提供的服务在哪里汇聚成了典型的 &lt;strong>数字&lt;/strong>体验消费点；从那里往后梳理。不仅要考虑到你的代码，还要考虑到网络、第三方和所有交付链中的组件；从客户的应用体验好坏的角度来评估 &lt;strong>可观测性&lt;/strong>三个支柱。问自己：&amp;ldquo;客户的体验是由于那些代码、互联网和网络、第三方或其他交付链组件所构成的？&amp;quot;。&lt;/p>&lt;/blockquote>
&lt;p>如果我们提供的能力是通往积极业务成果的门户，那么在当今这个边缘分布、以体验为中心的世界中，几乎没有人可以争驳斥，通过设计和构建可观测系统来进行预防是一种必要的能力。&lt;/p>
&lt;p>当提出 &amp;quot; SRE 使用的工具类别是什么？&amp;ldquo;这个问题时，高达93%的人选择了监控，而53%的人选择了可观测性。当我们深入到进一步的指标问题时，一束耀眼的光芒向我们提出了挑战，并邀请我们对一些监控性的进行深入研究。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145734184864.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>监控和告警 93%&lt;/li>
&lt;li>仪表板 73%&lt;/li>
&lt;li>基础设施作为代码 71%&lt;/li>
&lt;li>分析与趋势 56%&lt;/li>
&lt;li>应用程序发布和部署管理 55%&lt;/li>
&lt;li>APM代码追踪 53%&lt;/li>
&lt;li>可观测性 53%&lt;/li>
&lt;li>安全 47%&lt;/li>
&lt;li>测试 41%&lt;/li>
&lt;li>遥测 38%&lt;/li>
&lt;li>混沌工程 26%&lt;/li>
&lt;li>ITSM工具 26%&lt;/li>
&lt;li>价值流管理10%&lt;/li>
&lt;/ul>
&lt;p>如果说可观测性的学术定义是：&amp;ldquo;根据系统外部暴露的信息，可以推断出系统内部工作状态的好坏&amp;rdquo;，那么我们在说暴露的时候，一定要附加一个情境性的定义，通常是只对于 &lt;em>消费者、客户或者员工的体验&lt;/em>。&lt;/p>
&lt;blockquote>
&lt;p>考虑一下: 如果一个用户的数字体验由第三方、网络（互联网和内部）、代码和基础设施组成，所有这些要素都汇聚在一个关键点上，就构成了我们所谓的体验。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>而不要拘泥于关于&lt;strong>可观测性&lt;/strong>在实践、度量和追踪（三根支柱）的商业定义，谨防将过多的关注点放在 &lt;em>白盒内部&lt;/em>。&lt;/p>&lt;/blockquote>
&lt;p>71%的受访者表示&lt;strong>错误率&lt;/strong>是一种他们所跟踪的关键指标。表示客户满意度（数据见下一节）是一个高度优先级，但测量&lt;em>错误率&lt;/em>而不是&lt;em>最终用户响应时间&lt;/em>，将导致持续关注&lt;strong>从内到外&lt;/strong>而不是&lt;strong>从外到内&lt;/strong>。与其争论各种白盒与黑盒监控理论，不如专注于&lt;strong>理解体验&lt;/strong>，进而研究用户体验交付的组件之间的关联性。&lt;/p>
&lt;p>&lt;strong>贵组织跟踪以下哪些指标？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145744115347.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>错误率71%&lt;/li>
&lt;li>终端用户响应时间69%。&lt;/li>
&lt;li>MTTR 60%&lt;/li>
&lt;li>MTTD 42%&lt;/li>
&lt;li>错误/性能预算 36%&lt;/li>
&lt;/ul>
&lt;p>同样值得讨论的是，第三方的关注度或可视性的泛滥。根据 HTTP Archive 的数据，93% 的页面至少包括一个第三方域名；平均一个页面包括 9 个不同的第三方域名！这说明，第三方域名的重要性。然而，只有 11% 的受访者表示他们的自动化工作流程扩展到了第三方供应商。&lt;/p>
&lt;p>鉴于可观测性的支柱也必须适用于第三方组件，也许可以理解为什么只关注白盒内部的引力。就像 SRE 致力于设计可观测性系统是相对新鲜的一样，使用数字体验监控来揭示第三方系统，并收集数据也是比较新的。不过，这里却蕴含着一个黄金机会，可以考虑将黑匣数字体验监控延伸到第三方。仅仅依靠白盒监控意味着你并不知道用户看到了什么，尤其是与第三方有关的情况。例如，无法加载的页面或无法导航的应用程序可能是 CDN、传输网络或 DNS 供应商状态不正常的后果。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145747826279.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>11%的受访者表示，事件管理的自动化工作流程包括含第三方供应商的所有的工作流程。&lt;/li>
&lt;li>37%的受访者认为第三方是导致居家办公时事故增加的原因（仅次于流量/容量问题）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>使用了何种仿真监控策略？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145754797127.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>测试 API&lt;/li>
&lt;li>测试网络&lt;/li>
&lt;li>多步骤交易&lt;/li>
&lt;li>测试 DNS&lt;/li>
&lt;li>压力测试&lt;/li>
&lt;li>测试 CDN&lt;/li>
&lt;li>没用使用&lt;/li>
&lt;/ul>
&lt;p>对于仿真用户测试，这里的一个关键指标是，只有 39% 的用户在使用了仿真的多步骤交易来模拟用户体验。&lt;/p>
&lt;p>与其他监控特定组件（如DNS或CDN）的用例相比，或与完全不使用任何仿真监控的受访者相比。&lt;/p>
&lt;p>&lt;strong>SRE团队在多大程度上实施了全面的应用程序和基础设施性能监控和告警？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145757182600.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>监控和告警的自动化程度高。监控系统足够智能，能够辨别是否需要对特定事件发出告警。44%&lt;/li>
&lt;li>我们有系统级的性能监控和自动告警，但没有应用级的。 21%&lt;/li>
&lt;li>我们可以看到一些应用和系统的情况，但在一些关键领域，我们没有能力监控。20%&lt;/li>
&lt;li>有的只是实时监控的仪表盘。没有自动化的。 12%&lt;/li>
&lt;li>没有实时监控，值守的团队会收到来自客户支持的人工提醒。 4%&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145764118295.jpg"
loading="lazy"
>&lt;/p>
&lt;p>89%的受访者表示他们执行监控活动，44%的受访者表示监控和告警是高度自动化的。这是个好消息，说明白盒内部考虑的周全。但坏消息是，对内部的明确关注导致我们想当然了，关注数字体验的外在黑盒监控仍然被误解。对于这一点，我们提供了以下观点，供企业在通过设计可观测系统成熟到预防措施时进行评估。&lt;/p>
&lt;blockquote>
&lt;p>找出你所提供的服务在哪里汇聚成了典型的 &lt;strong>数字&lt;/strong>体验消费点；从那里往后梳理。不仅要考虑到你的代码，还要考虑到网络、第三方和所有交付链中的组件；从客户的应用体验好坏的角度来评估 &lt;strong>可观测性&lt;/strong>三个支柱。问自己：&amp;ldquo;客户的体验是由于那些代码、互联网和网络、第三方或其他交付链组件所构成的？&amp;quot;。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>在服务层面是否有健康监控，以便能够检测到中断或性能问题（在服务层面）？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145765275496.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>每个服务都有自己的监控和告警，并且有自己的健康检查API，可以插入到我们的可观测性框架中。43%&lt;/li>
&lt;li>有些服务有自己的监控和告警，有健康检查API，但有些服务却没有。27%&lt;/li>
&lt;li>每个服务都有自己的监控和告警。没有健康检查API或可观测性框架。19%&lt;/li>
&lt;li>没有服务级监控。 9%&lt;/li>
&lt;li>不适用。我们的系统中没有独立的服务。我们都是单体应用。2%&lt;/li>
&lt;/ul>
&lt;p>可观测性就是要回答以前无法回答的问题，因为它与 &amp;ldquo;为什么&amp;quot;有关。&amp;ldquo;为什么&amp;quot;用户无法访问我的网站？&amp;ldquo;为什么&amp;quot;用户无法访问自己的数据？&amp;ldquo;为什么&amp;quot;用户的情绪如此失望？&lt;/p>
&lt;p>回答 &amp;ldquo;为什么&amp;quot;的能力应该由一个框架来驱动，而不是由某个单点工具。这是一个如此重要的指标性问题，我们提出来作为本节的结尾。如果43%的受访者将他们的数据插入可观测性能力框架，那么57%的受访者则没有这样做。在下一节中，我们将通过一些关键的 &amp;ldquo;开发&amp;rdquo; 与 &amp;ldquo;运维&amp;quot;数据来进一步探索这一差距。&lt;/p>
&lt;h2 id="关键要点-2-人肉运维负荷的代价">关键要点 2 ：人肉运维负荷的代价
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre3.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>实施 DevOps 的 SRE 原则，通过设计和构建可观测性的系统来预防事故。努力将可靠性进一步向左移动，获得降低成本、团队调整和业务收益等成果。以开发工作与运维工作各占一半时间为基准，在运维工作中 On-Call 值守的比例不超过 25%。然后，当你向着预防的最终目标进行管理场景的迭代时，找出制约因素，从而消除约束点。达成最后成果以奠定了一个 SRE 团队的基础。当你消除约束点时，之后相应的更新你的场景。&lt;/p>&lt;/blockquote>
&lt;p>如果维持系统的成本有高达90%是发生在系统的部署之后（即向右转移），那么为什么企业还是以操作型、被动式为主的方式来进行？在这本章的这个小节中，我们探讨了这一问题，并提出企业的 SRE 有机会向左转移，帮助企业履行所有的工作，并转化为成熟的、可观测性的能力。&lt;/p>
&lt;p>Google 建议应该有一个上限目标，即50%的运维工作和50%的开发工作（或者称为&amp;quot;55分&amp;rdquo;）。在理想情况下，运维工作的数量应该比这少得多。运维工作中的 On-Call 部分应该不超过25%。开发活动与运维活动各占一半工作量的目标似乎是一个空想。根据调查数据显示，大部分工作都是以运维类活动为主。&lt;/p>
&lt;p>&lt;strong>SRE 的工作时间中开发工作的比例占多少&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145777848228.jpg"
loading="lazy"
>&lt;/p>
&lt;p>当受访者被问到：“SRE 的工作时间中开发工作的比例占多少？”这个问题时，只有 14% 的人表示超过 50%。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145778274283.jpg"
loading="lazy"
>&lt;/p>
&lt;p>当被问到基本相同的问题时（但列出具体的选择让人们选择），如 &amp;quot; 在这些活动中哪些活动是SRE工作的一部分？&amp;ldquo;时，结果令人大开眼界。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145781100582.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>25% : 选择开发活动（如：开发应用，写有助于运维的软件）&lt;/li>
&lt;li>75% : 选择运维活动（如：处理工单，事故响应）&lt;/li>
&lt;/ul>
&lt;p>在家工作两个半月后，净增10%的受访者表示，他们的活动已经转变为包含更多的运维工作。&lt;/p>
&lt;p>&lt;strong>居家工作的 Dev vs Ops&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.25.46%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.25.46 A"
>&lt;/p>
&lt;p>&lt;strong>在家工作以来，你的工作活动有什么变化？（Dev vs Ops）&lt;/strong>
&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.26.09%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.26.09 A"
>&lt;/p>
&lt;ul>
&lt;li>太多的开发 5%&lt;/li>
&lt;li>多了一些开发 11%&lt;/li>
&lt;li>大致相同 57%&lt;/li>
&lt;li>更多运维 17%&lt;/li>
&lt;li>太多的运维 9%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在你的组织中，谁在执行 SRE 工作活动？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.28.36%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.28.36 A"
>&lt;/p>
&lt;ul>
&lt;li>我们有一个专门的SRE团队，独立于其他运营/管理团队。46%&lt;/li>
&lt;li>DevOps团队处理SRE活动。19%&lt;/li>
&lt;li>业务和系统管理小组负责SRE活动。16%&lt;/li>
&lt;li>SRE活动在全组织范围内开展，而不是局限于一个团队。13%&lt;/li>
&lt;li>SRE对我们来说还是个新事物，我们还不清楚这是否需要单独的。7%&lt;/li>
&lt;/ul>
&lt;p>如果我们都在通过设计和实施可观测系统来进行预防，那么我们还有很长的路要走。首先，我们要走的路很长。最重要的是，考虑采用&amp;rdquo;&lt;strong>建立它，就会实现&lt;/strong>&amp;ldquo;的方法来改造一个 SRE 组织。首先要从识别那些作为是DevOps 的 SRE 工作开始。根据我们的调查，83%的人认为自己在做 SRE 活动。不过，我们提醒大家，你认为正在从事的 SRE 活动，并不意味着你是一个 SRE 。这是因为我们必须将其作为一个整体来考虑，而不是将其作为一部分或几块。 SRE 团队的定义越来越明确，但跨度也越来越大。在不同的焦点上，确实使 SRE 工作被埋没或隐藏起来。&lt;/p>
&lt;p>46%的人声称有一个专门的 SRE 团队。然而，53%的人表示，他们在生命周期的后期才参与其中，因此遇到了挑战，52%的人表示说他们花了太多时间排错（稍后再谈）：关键的 SRE 反模式指标。&lt;/p>
&lt;p>对事故和问题作出反应是 SRE 生活的一部分。如果我们重新提出了一个核心目标，即通过设计预防措施来实现可观测系统，那么旅程的阶段可能是这样的。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.36.40%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.36.40 A"
>&lt;/p>
&lt;blockquote>
&lt;p>被动的 -&amp;gt; 主动的 -&amp;gt; 前瞻/预防的&lt;/p>&lt;/blockquote>
&lt;p>在这种情况下，我们问 SRE 们都进行哪些被动性活动。在这一问题上，我们问道：&amp;rdquo; SRE 从事哪些被动活动？这里的目的是帮助确定公司可能在哪些方面开始成熟起来。根据自己的业务和组织的背景，从被动到主动。&lt;/p>
&lt;p>从每一个问题的结果来看，事后回顾和应对系统产生的告警分别名列前茅。然而，读者查看这些结果的另一种方法，是将他们分类看。然后判断你是否应该在某个分类上更成熟。例如，如果事后回顾类型与分析包括 SLI 和 SLO 在内的度量指标有重叠，然后再考虑是否可以将整体分析作为预防之路的起点。&lt;/p>
&lt;p>&lt;strong>在你的组织内， SRE 参与了哪些 &amp;ldquo;被动 &amp;ldquo;活动？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.35.25%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.35.25 A"
>&lt;/p>
&lt;ul>
&lt;li>通过计划的活动对问题进行事后分析。80%&lt;/li>
&lt;li>响应系统生成的告警信息 75%&lt;/li>
&lt;li>分析指标，包括 SLI、SLO、SLA等指标 72%&lt;/li>
&lt;li>文档记录所获的知识 69%&lt;/li>
&lt;li>基础设施问题的维修 68%&lt;/li>
&lt;li>On-Call 轮值 68%&lt;/li>
&lt;li>审查并回应客户报告的支持工单 58%&lt;/li>
&lt;li>一般行政任务（如进度报告、内务管理）49%&lt;/li>
&lt;li>重现客户报告的问题 47%&lt;/li>
&lt;li>为客户安装、配置和/或调试应用程序。41%&lt;/li>
&lt;/ul>
&lt;p>如果没有人在做救火的反应，那么我们可以认为我们所做的一切都是主动的。与其孤立地辩论一项活动的性质，不如转移话题，提问&amp;quot;我们这样做能防止什么事情发生？&amp;quot;。这样，在讨论 SRE 章程是什么样子的时候，对话就可以转向基于结果的方式。理想情况下，我们希望将服务运维优化到不再需要持续的人力工作的程度，这样 SRE 团队就可以专注于高价值的活动。&lt;/p>
&lt;p>&lt;strong>你在哪些 &amp;ldquo;主动&amp;quot;活动上花费了适度或大量的时间？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.49.01%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.49.01 A"
>&lt;/p>
&lt;ul>
&lt;li>自动化任务，使其无需手动执行。61%&lt;/li>
&lt;li>监控和分析系统指标，以发现可能导致未来出现故障或SLA问题的趋势。56%&lt;/li>
&lt;li>支持部署后行动 54%&lt;/li>
&lt;li>SRE专用系统规划 53%&lt;/li>
&lt;li>编写优化运维操作的软件 48%&lt;/li>
&lt;li>与开发部门合作，帮助开发应用程序 42%&lt;/li>
&lt;li>系统的预防性维护 41%&lt;/li>
&lt;li>容量规划活动 38%&lt;/li>
&lt;li>通过混沌工程等实践进行弹性检查。19%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>作为 SRE 工作的一部分， SRE 要做哪些活动？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.54.12%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.54.12 A"
>&lt;/p>
&lt;ul>
&lt;li>监控 89%&lt;/li>
&lt;li>事故响应/故障单和解决升级问题 83%&lt;/li>
&lt;li>指标分析 78%&lt;/li>
&lt;li>帮助基础设施和业务能力规划的努力 74%&lt;/li>
&lt;li>与开发部门合作，帮助他们开发应用程序 74%&lt;/li>
&lt;li>记录所获知识 71%&lt;/li>
&lt;li>编写软件帮助操作 65%&lt;/li>
&lt;li>质量保证测试和发布 30%&lt;/li>
&lt;/ul>
&lt;p>当去掉主动或被动的限定词，问&amp;rdquo; SRE 在这些活动中，哪些是作为 SRE 工作的一部分&amp;quot;时，我们看到监控和事故管理被列为首要活动。同样重要的是，编写优化运维操作的软件被排在第五位。牢记开发应该是最主要的活动类型（相对于运维），考虑是什么原因导致了目前的状态。&lt;/p>
&lt;ul>
&lt;li>章程是否不正确或不存在？&lt;/li>
&lt;li>是否没有考虑到 SRE 原则的必要性？&lt;/li>
&lt;li>是否没有评估以客户为中心提供服务的方法？&lt;/li>
&lt;li>还能问什么？接着问&amp;quot;为什么&amp;rdquo;？&lt;/li>
&lt;/ul>
&lt;p>一旦 SRE 的工作和价值得到认可，就可以开始得到回报。为了帮助获得支持，将对话与某种业务背景联系起来。例如，当可靠性被提前考虑而不是推迟考虑时，就会降低系统的拥有成本。让一个可靠的系统，更加可靠要容易得多。&lt;/p>
&lt;p>将谈话的重点放在解决复杂问题和实现业务目标的动力和愿望上；将这一数据点作为基线。&lt;/p>
&lt;p>&lt;strong>您如何考虑 SRE 和DevOps团队的关系？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.56.33%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.56.33 A"
>&lt;/p>
&lt;ul>
&lt;li>41% 的人说DevOps和 SRE 是同一个团队的一部分。&lt;/li>
&lt;li>26% 的人说DevOps和 SRE 是互补的。&lt;/li>
&lt;li>19% 表示不知道&lt;/li>
&lt;li>11% 表示二者是竞争关系&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在度量变更的业务影响方面，这些指标各有多重要？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%209.58.23%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 9.58.23 A"
>&lt;/p>
&lt;ul>
&lt;li>客户满意度下降 82%&lt;/li>
&lt;li>收入损失 79%&lt;/li>
&lt;li>客户流失 79%&lt;/li>
&lt;li>雇员生产力下降 69%&lt;/li>
&lt;li>社交媒体的吐槽 59%&lt;/li>
&lt;/ul>
&lt;p>幸运的是，调查对象能够阐明如何从业务角度衡量成功。&lt;/p>
&lt;p>修炼能力是获得正向业务成果的通道。当进行&amp;quot;我们为什么需要 SRE &amp;ldquo;的对话时，不要只谈能力或只谈积极的结果。相反，要将它们结合起来，说&amp;quot;这些能力将帮助我们实现这些结果&amp;rdquo;。&lt;/p>
&lt;p>&lt;strong>有多少个专职与 SRE 活动的团队成员？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202020-10-02%20at%2010.56.40%20AM.jpg"
loading="lazy"
alt="Screen Shot 2020-10-02 at 10.56.40 A"
>&lt;/p>
&lt;p>在本节结束时，有一个巨大的机会，可以在早期阶段将被动的业务工作向左移。从&amp;quot;不仅仅是帮助开发&amp;rdquo;，而是&amp;quot;从工作结果中获取反馈，并将其作为一种投资，用于帮助构建/提升产品或服务的可观测性&amp;rdquo;。例如，在 SRE 拿起那个传呼机后（开始 OnCall 工作），他们所记录的注意事项，可能会引指导下一波服务的开发工作，以避免落入相同的坑。&lt;/p>
&lt;p>我们最后的想法是， SRE 参与整体生命周期的想法适用于任何组织的规模。换句话说，旅程的各个阶段还是一样的。&lt;/p>
&lt;blockquote>
&lt;p>实施 DevOps 的 SRE 原则，通过设计和构建可观测性的系统来预防事故。努力将可靠性进一步向左移动，获得降低成本、团队调整和业务收益等成果。以开发工作与运维工作各占一半时间为基准，在运维工作中 On-Call 值守的比例不超过 25%。然后，当你向着预防的最终目标进行管理场景的迭代时，找出制约因素，从而消除约束点。达成最后成果以奠定了一个 SRE 团队的基础。当你消除约束点时，之后相应的更新你的场景。&lt;/p>&lt;/blockquote>
&lt;h2 id="关键要点3-远程工作转型带来了机遇和挑战">关键要点3 ：远程工作转型带来了机遇和挑战
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre3.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>将新出现的或以前被忽视的挑战转化为战略上差异化的机会。关注士气、员工体验、工作/生活平衡、员工参与度和情绪等挑战，可以展示公司员工至上的心态，吸引或留住顶尖人才。&lt;/p>&lt;/blockquote>
&lt;p>任何其他头衔的 SRE 仍然会创造商业价值。但是，企业是否重视他们的 SRE 呢？&lt;/p>
&lt;blockquote>
&lt;p>如果说，&amp;ldquo;正确对待你的员工，他们就会正确对待你的客户 &amp;ldquo;只是一句座右铭，那么现在愿它成为你的战斗口号。&lt;/p>&lt;/blockquote>
&lt;p>在 SRE 2020 调查问卷的一组有关在家工作前的问题中，受访者指出了他们面临的一些关键挑战。然后，在两个半月的在家工作后，又有更多的挑战浮出了水面。&lt;/p>
&lt;p>这包括以前可能被忽视的挑战，或者对一些人来说不存在的挑战，它们都浮出了水面。诸如士气、员工体验、工作/生活平衡、员工参与度和情绪等挑战；现在企业有机会将其转化为战略性的差异化资产了，公司展示出员工至上的心态。换句话说，如果说 &amp;ldquo;正确对待你的员工，他们就会正确对待你的客户&amp;quot;这句话，在以前只是一句座右铭，那么现在愿它成为一个战斗口号。&lt;/p>
&lt;p>&lt;em>居家工作之前&lt;/em>&lt;/p>
&lt;p>&lt;strong>哪些问题具有一定或极强的挑战性？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.38.55%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.38.55 P"
>&lt;/p>
&lt;ul>
&lt;li>常常在生命周期后期参与 53%&lt;/li>
&lt;li>调试时间过长 52%&lt;/li>
&lt;li>缺乏其他团队的支持 47%&lt;/li>
&lt;li>培训预算不足 46%&lt;/li>
&lt;li>监控技术过于耗时 45%&lt;/li>
&lt;li>在非办公时间经常提供支持 39%&lt;/li>
&lt;li>工作压力过大，缺乏支持 38%&lt;/li>
&lt;li>工具预算不足 36%&lt;/li>
&lt;/ul>
&lt;p>&lt;em>居家工作之后&lt;/em>&lt;/p>
&lt;p>&lt;strong>&amp;lsquo;在家&amp;rsquo;后，你面临着哪些问题？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.39.00%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.39.00 P"
>&lt;/p>
&lt;ul>
&lt;li>工作/生活平衡 60%&lt;/li>
&lt;li>团队沟通 56%&lt;/li>
&lt;li>重点/清晰度 51%&lt;/li>
&lt;li>设施，包括设备和宽带 42%&lt;/li>
&lt;li>隔离/鼓励 41%&lt;/li>
&lt;li>激励 39%&lt;/li>
&lt;li>心理健康、压力或情绪健康 37%；&lt;/li>
&lt;li>工具技术栈 23%&lt;/li>
&lt;li>界定成功指标 22%&lt;/li>
&lt;li>On-Call 值守 12%&lt;/li>
&lt;li>其他 7%&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre4.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;在这段经历中，我发现我发现：每天在家带孩子是压力最大的部分。一般来说，保持工作与生活的平衡是很困难的，但当你经常失去注意力时，很难不觉得自己和其他人是一样的努力工作（即使你的公司是支持你的）。&amp;rdquo;&lt;br>
&amp;ndash; 受访者反馈&lt;/p>&lt;/blockquote>
&lt;p>在我们 2019 年的 SRE 报告中，得分高的&lt;strong>琐事泛滥&lt;/strong>是最严重的，59%的受访者认为组织中的琐事太多。在我们的 SRE 2020 报告中，我们重新验证了这一发现，并扩展到按分布式的数据形式展示。&lt;/p>
&lt;p>&lt;strong>SRE 的工作有百分之多少是琐事？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.41.30%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.41.30 P"
>&lt;/p>
&lt;p>&lt;strong>SRE 的工作有百分之多少是琐事？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.41.36%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.41.36 P"
>&lt;/p>
&lt;p>41%的受访者表示，他们的工作有一半或更多是琐事。考虑到： 1）高琐事率 2）附加问题中60%的受访者将工作/生活平衡列为在家工作后的头号挑战，我们建议企业从战略上考虑降低职业倦怠（透支/996）的方案。&lt;/p>
&lt;p>在此，我们将琐事（本身可能正是人们时常需要的精神激活剂）与倦怠（我们要避免的结果）区分开来。&lt;/p>
&lt;p>一个组织在处理大量的工作时，要考虑到缺乏自动化的根本原因。如果结论是由于缺乏技能或人力，那么前进的道路可能会与长期积累的大量技术债务不同。&lt;/p>
&lt;p>如果团队的目标一致，或者优先级一致，那么自动化能力是否可以扩大？首先梳理开发+运维是否有根本性的缺失？最起码，在&amp;quot;开发&amp;quot;与&amp;quot;运维&amp;quot;时间各占一半的情况下，要有一个基准线，以了解工作量的差距。然后，与管理者对话，使团队有一个合理的期望；而不是，例如，觉得他们应该做到‘零运维’的工作。&lt;/p>
&lt;p>&lt;strong>SRE 的琐事主要来源是那些？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.43.07%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.43.07 P"
>&lt;/p>
&lt;ul>
&lt;li>可以自动化的人工维护任务 29%&lt;/li>
&lt;li>关于可自动化的应用程序发布的工作 19%&lt;/li>
&lt;li>可以自动化的人工值守任务 18%&lt;/li>
&lt;li>解决假阳性/阴性问题 16%&lt;/li>
&lt;li>非紧急服务相关信息 13%&lt;/li>
&lt;li>解决与服务无关的信息 12%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>使用自动化进行自修复的问题和事件的百分比是多少？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.44.18%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.44.18 P"
>&lt;/p>
&lt;p>45%的人说监控技术太耗时。这是一个机会，可以通过可观测性能力将重点放在预防措施上，同时还可以扩展到使用软件（而不是人）来解释数据，并判断是否需要采取行动。与其生成告警，再要求人来决定是否需要采取行动，到不如只在应该由人采取行动的时候，才触发告警。然后让系统实际执行行动。&lt;/p>
&lt;p>为了帮助企业实现这种向可操作性告警方向转变，我们说：&amp;ldquo;你不可能对所有的事情都进行监控和告警，所以先从最重要的事情：开始对‘用户体验’监控和告警&amp;rdquo;。在这种情况下，各种人工智能(&amp;ldquo;AI&amp;rdquo;)或机器学习(&amp;ldquo;ML&amp;rdquo;)能力才可能会有用武之地。&lt;/p>
&lt;p>16%的人认为解决假阳性/阴性是一个主要的苦恼来源。&lt;/p>
&lt;p>&lt;strong>您是否使用自动化工具进行容量规划和制备？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.45.02%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.45.02 P"
>&lt;/p>
&lt;ul>
&lt;li>手工容量规划+自动化制备&lt;/li>
&lt;li>手工制备+自动化容量规划&lt;/li>
&lt;li>容量规划和制备都是手工的&lt;/li>
&lt;li>是的，容量规划和制备都是自动化的&lt;/li>
&lt;li>容量规划根据预算周期或者是否冻结走&lt;/li>
&lt;/ul>
&lt;p>看到这个数据，我们有些惊讶。在我们的2018年 SRE 报告中，65%的受访者表示，他们全部或部分使用云计算。我们预计这个数字从那时起就会增加（尽管我们今年没有明确提出这个问题）。随着云提供的各种功能，包括各种 &amp;ldquo;特性/函数即服务&amp;rdquo;，我们对评估什么是可自动化的，以减少琐事和随后的透支的建议仍然是相同的：当在分析组织中为何存在大量琐事时，缺乏自动化解决方案，最可能被认为是根本原因。那如果得出的根因结论却是：技能或能力的欠缺呢？那么在前方的道路上，可能就不会在长期的积累大量技术债务了。&lt;/p>
&lt;p>&lt;strong>您的 SRE 团队成员有哪些培训和认证？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.45.53%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.45.53 P"
>&lt;/p>
&lt;ul>
&lt;li>内部辅导和培训方案 78%&lt;/li>
&lt;li>云厂商认证（如 AWS，GCP，Azure） 51%&lt;/li>
&lt;li>工具厂商的培训或特殊工具 40%&lt;/li>
&lt;li>个人或者团队参加第三方 DevOps 课程 29%&lt;/li>
&lt;li>个人或者团队参加第三方 SRE 课程 24%&lt;/li>
&lt;li>个人或者团队参加第三方 ITILv3 课程 16%&lt;/li>
&lt;/ul>
&lt;p>缺乏预算和培训（来自前面的挑战清单），再加上大量的琐事，就会导致透支。正如我们增编问题的数据所显示的那样，这些问题更加严重，工作/生活平衡（60%）和专注/清晰（51%）是在家工作之后，关于‘幸福感’（well-bing）的两个最高挑战。&lt;/p>
&lt;p>内部辅导和培训是之间存在着关联性的方案(78%)，但对 SRE 培训的预算不足。这表明&lt;strong>内部计划&lt;/strong>可能不那么有效。该数据也让我们不得不问，是否调试时间过长（52%）？是因为培训在这里也是一个空白。既然内部培训是最主要的培训方式，那么就要看这些项目的效果。培训教练或团队领袖是否是该领域的专家？这是否是一个挑战？希望做内部培训是否是没有预算的直接后果？牢记我们的愿望是：让员工提高工作效率，那么深入的 &lt;strong>SRE 培训&lt;/strong> 和扎实的理解 SRE 角色是必不可少的，通过设计和实施系统的可观测性，来实施预防措施的路线图。&lt;/p>
&lt;p>我们还是将&lt;strong>缺乏工具预算的问题&lt;/strong>也纳入了培训的这一章节，因为缺乏预算是两者之间的共同主题。不幸的是，员工生产力下降的指标，是商业影响的第二低指标，因此投资于培训可能是应该开始做了。&lt;/p>
&lt;p>在 2019 年的 SRE 报告中，琐事和压力是首当其冲的焦点。我们可能用的是一些预期的反应来调查。&lt;/p>
&lt;p>&lt;strong>你在家后面临哪些心理/个人幸福感的挑战？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.47.10%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.47.10 P"
>&lt;/p>
&lt;ul>
&lt;li>工作/生活平衡 60%&lt;/li>
&lt;li>专注/清晰 51%&lt;/li>
&lt;li>隔离 41%&lt;/li>
&lt;li>动力 39%&lt;/li>
&lt;li>精神健康、压力或情感幸福感 37%&lt;/li>
&lt;li>其它 2%&lt;/li>
&lt;/ul>
&lt;p>以上问题的解决思路包括：&lt;/p>
&lt;ul>
&lt;li>使用自动化消除琐事&lt;/li>
&lt;li>通过无职责文化，消除事故回顾的压力&lt;/li>
&lt;li>通过可观测性的能力转换到主动度量，在根本上减少事件&lt;/li>
&lt;/ul>
&lt;p>大多数组织的强制在家工作的政策，都凸显了更加关注员工的幸福感的必要性。当读者看到这个关于在家的数据集时，请问：&amp;ldquo;这个数据集的结论，如何使年初调查数据的结论变得更好或更坏？&amp;quot;。例如，那些感觉到被隔离的人，在之前，他们会觉得沟通或缺乏支持是问题么？会对其有什么影响？他们会不会可能感到得到了更多或更少的支持？&lt;/p>
&lt;p>将新出现的，或以前被忽视的挑战转化为战略上的差异化机会。关注士气、员工体验、工作/生活平衡、员工参与度和情绪等挑战，可以展示公司员工至上的心态，以吸引或留住顶尖人才。&lt;/p>
&lt;h2 id="关键要点4-远程-sre-光明的未来">关键要点4 ：远程 SRE 光明的未来
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre5.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>重新评估各种业务连续性方案。考虑是否需要调整&lt;strong>恢复时间&lt;/strong>和&lt;strong>恢复时间点&lt;/strong>。在进行灾难或连续性演习时，确定现在可以实施预防措施的机会领域。在您的 SRE 章程中记录任何新的洞见。&lt;/p>&lt;/blockquote>
&lt;p>在我们的 SRE 2018 年调查中，按《纽约时报》的风格，这个标题是这样说的。&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;如果你想远程工作， SRE 角色可能不适合你。虽然有些 SRE 是远程工作的，但 81% 的 SRE 表示，他们团队的所有或大部分工作都在办公室里进行的。&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>我们想到的第一个问题是：&amp;ldquo;当世界重新开放时，你的员工中，有百分之多少会首选&amp;quot;远程/在家办公&amp;rdquo;（有多少比例的人的次要选择是&amp;quot;现场/办公室&amp;rdquo;）？&amp;rdquo; 在一个异步、世事纷繁的时代，这个数据可能不会让你感到惊讶。&lt;/p>
&lt;p>&lt;strong>预期远程工作人员的百分比&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.50.10%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.50.10 P"
>&lt;/p>
&lt;p>考虑到从全员现场、到分布式劳动力的转变，我们希望进一步研究其他变化因素，为决策者提供一个投资方向。需要应对哪些新的挑战？&lt;strong>事件管理&lt;/strong>是什么样的？如果没有了办公桌，将如何运行他们的灾难恢复桌面演习？&lt;/p>
&lt;p>我们不想在说&amp;quot;远程 SRE 的未来很遥远&amp;quot;的时候，做出&amp;quot;水很深 &amp;ldquo;式的说法。而是说，远程 SRE 的未来是光明的，但也要注意以下几点。&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;小学教师工资发的不够&amp;hellip;&amp;hellip;&amp;rdquo;
&amp;ndash;调查对象&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre6.jpg"
loading="lazy"
>&lt;/p>
&lt;p>牢记本报告之前关于&lt;strong>希望通过设计和实施可观察系统&lt;/strong>来预防事故的评论。然后考虑这些直接、宏观的问题，对你的 SRE 章程有什么影响。&lt;/p>
&lt;p>主动式与被动式相比（向更多的被动式净增2%）没有开发与运维相比（向更多的运维净增10%）的差距那么大。在这里，我们再次参考在家工作前的数据，表明75%的受访者在做运维活动（而25%在做开发活动）。&lt;/p>
&lt;p>&lt;strong>自从 &amp;ldquo;在家工作 &amp;ldquo;后，你的活动有什么变化？(主动与被动)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145887375405.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>太多主动了 4%&lt;/li>
&lt;li>主动多些 14%&lt;/li>
&lt;li>基本一致 60%&lt;/li>
&lt;li>有点被动 16%&lt;/li>
&lt;li>太被动了 4%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>自从 &amp;ldquo;在家工作 &amp;ldquo;后，你的活动有什么变化？(开发与运维)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145888275975.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>太多开发了 5%&lt;/li>
&lt;li>开发多了一些 11%&lt;/li>
&lt;li>差不多持平 57%&lt;/li>
&lt;li>运维多了一些 17%&lt;/li>
&lt;li>太多运维了 9%&lt;/li>
&lt;/ul>
&lt;p>我们想了解事件的绝对数量以及相对数量（下一页）。需要提醒的是，&amp;ldquo;在家工作后&amp;quot;这组调查问题，在家工作的两个半月后提出的。&lt;/p>
&lt;p>&lt;strong>在家后，你负责的站点或应用经历的事故更多/少吗？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145889082162.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>无/零 17%&lt;/li>
&lt;li>1 次 9%&lt;/li>
&lt;li>2~5 次 42%&lt;/li>
&lt;li>6~10 次 11%&lt;/li>
&lt;li>要多得多 21%&lt;/li>
&lt;/ul>
&lt;p>对于，&amp;ldquo;自家工作以来，发生的事件多还是少&amp;rdquo;，数据形成了一条正态分布的钟形曲线。不过，在这个问题中，最突出的是7%的人不知道!&lt;/p>
&lt;p>&lt;strong>在家后，你所负责的站点或应用经历了更多/少的事故&lt;/strong>
&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.57.02%20PM-1.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.57.02 P"
>&lt;/p>
&lt;ul>
&lt;li>更少 9%&lt;/li>
&lt;li>差不多相同 73%&lt;/li>
&lt;li>更多事故 9%&lt;/li>
&lt;li>不知道 7%&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145898292315.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>流量增长和/或容量问题 54%&lt;/li>
&lt;li>第三方问题 37%&lt;/li>
&lt;li>发布管理相关变更 25%&lt;/li>
&lt;li>测试和质量控制 25%&lt;/li>
&lt;li>安全 4%&lt;/li>
&lt;li>其它 16%&lt;/li>
&lt;/ul>
&lt;p>流量和(或)容量问题的增加被认为是导致事故增加的首要因素。&lt;strong>第三方&lt;/strong>被认为是第二大因素，这也是为什么，我们在本报告的第一部分中，讨论了有必要考虑如何处理第三方依赖的策略。&lt;/p>
&lt;p>我们想指出，只有那些表示自从在家工作后发生更多事故的受訪者们，才被问及这个问题。但我们想把数据包括在内，考虑到尽职。&lt;/p>
&lt;p>净+9%的受访者表示，自从在家之后，事件管理变得更加有效。这是一个令人振奋的数据，我们不知道更好的事件管理是否与公司做更少的发布有关（根据 Atlassian 的这个数据，66%的受访者已经放慢了他们软件的发布频率) 注意14%的受访者选择了&lt;strong>无法评价&lt;/strong>和&lt;strong>识别机会&lt;/strong>，看看是否是由于在家的原因。&lt;/p>
&lt;p>&lt;strong>请评价贵公司自&amp;quot;在家&amp;quot;以来事故管理流程的有效性&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145899532646.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;在家 &amp;ldquo;时，效果较差（MTTR较高）5%。&lt;/li>
&lt;li>大约相同的MTTR 66%&lt;/li>
&lt;li>&amp;ldquo;在家&amp;quot;时更有效(MTTR较低) 14%。&lt;/li>
&lt;li>无法评价 14%&lt;/li>
&lt;/ul>
&lt;p>我们在 &amp;ldquo;在家后&amp;rdquo; 调查中问的最后一个直接问题是：&amp;ldquo;你或你团队中的任何人，是否不得不去现场？&amp;rdquo; 对于回答&amp;quot;是&amp;quot;这个问题的14%的人，我们后续的开放式问题：&amp;ldquo;有多少次？他们的答案各种都有，有总是和每班一个人（跟着太阳走）的，有只有一次和每两周一次的。&lt;/p>
&lt;p>&lt;strong>从&amp;rsquo;在家&amp;rsquo;开始，你有没有不得不去现场过？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/16145899912972.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>是的 14%&lt;/li>
&lt;li>不是 86%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;lsquo;在家&amp;rsquo;后，事故管理在哪些方面变得更具挑战性？&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%208.59.41%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 8.59.41 P"
>&lt;/p>
&lt;ul>
&lt;li>检测事故发生/宕机 9％&lt;/li>
&lt;li>查明事故根本原因 9％&lt;/li>
&lt;li>向正确的团队升级 28%&lt;/li>
&lt;li>修复根因 8%&lt;/li>
&lt;li>验证修复是否成功 13%。&lt;/li>
&lt;li>以上的都不是 51%&lt;/li>
&lt;/ul>
&lt;p>在我们努力结束今年的报告之际，我们提供最后一个数据点。公司重新评估他们将如何继续运营。我们问道：&amp;ldquo;你们多久执行一次针对在家场景的灾难恢复演练&amp;rdquo; 当你考虑到你的各种恢复时间可能是如何 受影响的情况下，考虑到以前的路径，到预防性的座右铭，因此你要努力设计和实施系统的可观察的问题。&lt;/p>
&lt;p>&lt;strong>你们多久执行一次针对在家场景的灾难恢复演练？&lt;/strong>
&lt;img src="https://martinliu.cn/img/2021/Screen%20Shot%202021-02-28%20at%209.00.47%20PM.jpg"
loading="lazy"
alt="Screen Shot 2021-02-28 at 9.00.47 P"
>&lt;/p>
&lt;ul>
&lt;li>完全没有 40%&lt;/li>
&lt;li>还没有；我们正在计划26%&lt;/li>
&lt;li>随机19%&lt;/li>
&lt;li>每月5%&lt;/li>
&lt;li>每周5%&lt;/li>
&lt;li>其它5%&lt;/li>
&lt;/ul>
&lt;p>可观测性是指能够回答&amp;quot;为什么我们客户体验到了这个效果？&amp;rdquo; 是不是因为第三方，应用代码、传输网络或其他交付链中的组件，如DNS或CDN？然后使用这些答案来迭代改进现有的，或新建的产品或服务。&lt;/p>
&lt;p>当&amp;quot;内建&amp;quot;可靠性时，要考虑到开发和运维之间的分裂。在您制定 SRE 章程时，您可以将其与业务工作进行比较。这里的目标是：尽早将可靠性纳入其中，因为提升一个已经靠谱了的系统，还是要来的要更容易些。&lt;/p>
&lt;p>最后，考虑到您的员工队伍的分布性质，并承认可能被忽视或被忽视的一系列挑战。无论存在与否，都要考虑到诸如，琐事、缺乏支持、工作/生活平衡，以及，孤独感可能会导致的某些操作规则或流程被取消，都要从根上重新进行评估。&lt;/p>
&lt;h2 id="方法论">方法论
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/img/2021/sre7.jpg"
loading="lazy"
>&lt;/p>
&lt;p>2020年1月，Catchpoint进行了一项通过电子邮件列表和社交媒体推广的 SRE 调查。 该调查询问了来自不同行业的技术专业人员，调查关于他们作为&lt;strong>站点可靠性工程师&lt;/strong> SRE 角色。通过报告，这组问题被称为&amp;quot;预先&amp;quot;问题集。&lt;/p>
&lt;p>2020年6月，Catchpoint 又进行了一项增补调查，加入了关于新冠疫情（COVID 19）后，居家办公的考虑。这组问题旨在询问各种&amp;quot;发生了什么变化&amp;quot;的问题，被称为&amp;quot;后疫情&amp;quot;或&amp;quot;在家 &amp;ldquo;问题集。&lt;/p>
&lt;p>在编写本报告时，收到了共有594名调查对象的反馈。在预定的时间里，其它人在格式化本报告和编写附录的过程中在也纷至沓来，统计周期的只对本报告的统计数字产生了较小的影响，不超过1%。&lt;/p></description></item><item><title>Elastic 可观测性工作坊</title><link>https://martinliu.cn/blog/workshop-elastic-observability/</link><pubDate>Sat, 06 Feb 2021 10:36:12 +0800</pubDate><guid>https://martinliu.cn/blog/workshop-elastic-observability/</guid><description>&lt;img src="https://martinliu.cn/img/2021/Hubble_01.jpg" alt="Featured image of post Elastic 可观测性工作坊" />&lt;p>本工作坊包括本地虚拟机版本、AWS 和腾讯云共三个版本，目标是用实践的方式理解 Elastic 可观测性解决方案。可观测性是解决运维云原生应用的复杂性和分布式式难点的关键所在。&lt;/p>
&lt;h2 id="简介">简介
&lt;/h2>&lt;p>Elastic 可观测性解决方案是基于 Elastic Stack 的一站式解决方案。该解决方案具有完备的日志、指标、APM 和可用性采集能力，可以在大规模/云原生的环境下，完成服务质量目标（SLO）的管理。本实战工作坊基于多层架构的宠物诊所为示例应用程序，手把手的引导参与者搭建可观测性管理平台，体验分层次的收集整合、分析、关联和搜索运维数据的全过程。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/elastic-obv-solution.png"
loading="lazy"
alt="可观测性解决方案"
>&lt;/p>
&lt;h2 id="为什么要做这个工作坊">为什么要做这个工作坊？
&lt;/h2>&lt;p>从理论的理解到技术工具的实操掌握需要一个过程。&lt;/p>
&lt;ul>
&lt;li>关于可观测性的各种一小时左右的技术、方案、产品分享，完全无法让听众正确理解可观测性的相关概念&lt;/li>
&lt;li>而通过实操性质的，上机动手实验则可以让新手迅速入门，使熟手快速全面的提高&lt;/li>
&lt;li>大量 ELK 用户只使用到了日志管理的部分功能，还不了解任何一种可观测性管理方案的全貌&lt;/li>
&lt;li>社区里的朋友们对可观测性心存大量误解，如“ APM 工具就等于可观测性” 等等，因此相关的正确观念和技术急需尽快普及&lt;/li>
&lt;/ul>
&lt;p>通过半天的实战演练，彻底学会相关知识。&lt;/p>
&lt;h2 id="动手实验">动手实验
&lt;/h2>&lt;p>本工作坊的最佳参与方式是在老师的引导下，在线下/线上同步进行。其次是在视频的指导下自学。所有动手实验的目标是：理解可观测性解决方案的各个组成部分，以及为什么要使用这些工具？而且这个整个方案的实施过程和顺序也是经过精心设计的，目标是让理论和实际彻底融会贯通。&lt;/p>
&lt;p>您将会学到：&lt;/p>
&lt;ol>
&lt;li>搭建单节点 Elasticsearch 服务，并且配置好 Kibana 管理图形管理界面。&lt;/li>
&lt;li>学习可观测性的基本概念和实施步骤&lt;/li>
&lt;li>搭建和配置服务健康检查的探针&lt;/li>
&lt;li>部署采集操作系统性能监控指标的流程&lt;/li>
&lt;li>配置操作系统日志的采集和分析工具&lt;/li>
&lt;li>搭建用于 APM 追踪分析的后台服务&lt;/li>
&lt;li>运行一个多层架构的宠物商店应用，对各个子服务进行 APM 监控埋点&lt;/li>
&lt;li>配置常用的服务质量监控大屏&lt;/li>
&lt;/ol>
&lt;p>本工作坊课程基于如下的应用系统。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/16042852442364.png"
loading="lazy"
alt="架构图"
>&lt;/p>
&lt;p>应用基本概况：&lt;/p>
&lt;ul>
&lt;li>多层宠物商店应用系统&lt;/li>
&lt;li>所有组件都部署在一个虚拟机上&lt;/li>
&lt;li>包括前端、后端和内置的数据库&lt;/li>
&lt;li>使用到的技术有 JavaScript、NodeJs 和 Java Spring 等。&lt;/li>
&lt;li>本应用系统是被监控的对象&lt;/li>
&lt;/ul>
&lt;p>Elastic Stack 的基本状况：&lt;/p>
&lt;ul>
&lt;li>版本 7.9.3&lt;/li>
&lt;li>组件 Elasticsearch、Kibana、APM、Filebeat、Metricbeat 和 Heatbeat。&lt;/li>
&lt;/ul>
&lt;p>实验环境：&lt;/p>
&lt;ul>
&lt;li>本地虚拟机环境，打包好的虚拟机里包含了所有必要的软件包和演示应用。&lt;/li>
&lt;li>AWS 云环境，本课程所使用的公共 AMI 操作系统镜像：宁夏区 &lt;code>ami-0e5a0e294902966af&lt;/code> 北京区 &lt;code>ami-0e1382088b62cb38d&lt;/code>&lt;/li>
&lt;li>腾讯云环境，基于腾讯云提供的 Elasticsearch 服务，演示用的虚拟机在制作中，稍后会发布到云市场。&lt;/li>
&lt;li>阿里云环境，基于阿里云提供的 Elasticsearch 服务的课件正在开发中。&lt;/li>
&lt;/ul>
&lt;h2 id="可观测性构建四步法">可观测性构建四步法
&lt;/h2>&lt;p>可观测性依赖于应用系统自身和监控工具平台的配合实现。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/e2e85893b5dd8014.jpeg"
loading="lazy"
alt="可观测性"
>&lt;/p>
&lt;p>分层次的构建可观测性的推荐过程如下：&lt;/p>
&lt;ol>
&lt;li>STEP0：使用 Heatbeat 构建轻量灵活的服务健康检查能力&lt;/li>
&lt;li>STEP1：使用 Metricbeat 构建全面细致的指标采集能力&lt;/li>
&lt;li>STEP2：使用 Filebeat 构建高维度的日志采集能力&lt;/li>
&lt;li>STEP3：使用 APM 构建分布式应用系统的全堆栈追踪能力&lt;/li>
&lt;/ol>
&lt;p>通过以上的四个构建步骤，使用 Elastic Stack 实施四大服务质量监控能力的构建，搭建了持续统一运维管理的工具平台。&lt;/p>
&lt;p>使用 SRE 基于‘用户旅程’或‘系统边界’的 SLO 分析设定方法，从 Elastic Stack 的已有数据采集能力中，选取第批直接可用的 SLI 采集点。在基于 SLO 的监控过程中，不断的优选 SLI，调整告警的数量和质量，为开发团队提供持续有效的反馈。&lt;/p>
&lt;p>使用 Canvas 的画布功能，定制如下的 SLO 监控大屏。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/2020-11-05_00-13-06.jpeg"
loading="lazy"
alt="2020-11-05_00-13-06"
>&lt;/p>
&lt;h2 id="工作坊课件">工作坊课件
&lt;/h2>&lt;p>讲师 PPT 下载： &lt;a class="link" href="https://docs.qq.com/slide/DUGRzYVVTU3ZxblBP" target="_blank" rel="noopener"
>https://docs.qq.com/slide/DUGRzYVVTU3ZxblBP&lt;/a>&lt;/p>
&lt;h3 id="本地虚拟机环境">本地虚拟机环境
&lt;/h3>&lt;p>可以使用本地的 VirtualBox 或者 VMWare 的虚拟机环境，配合以下课件完成所有练习。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://elk-workshop.github.io/codelabs/one-nodes-es-server/#0" target="_blank" rel="noopener"
>‘Elastic Stack 单节点搭建’ 课件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://elk-workshop.github.io/codelabs/elastic-observability-foundation/#0" target="_blank" rel="noopener"
>‘Elastic 可观测性方案’ 课件&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="aws-云计算环境">AWS 云计算环境
&lt;/h3>&lt;p>可以使用 AWS 云计算（中国区北京或宁夏区）环境，配合以下的课件完成所有练习。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://elk-workshop.github.io/codelabs/one-nodes-es-server/#0" target="_blank" rel="noopener"
>‘Elastic Stack 单节点搭建’ 课件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://elk-workshop.github.io/codelabs/elastic-observability-foundation/#0" target="_blank" rel="noopener"
>‘Elastic 可观测性方案’ 课件&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="腾讯云计算环境">腾讯云计算环境
&lt;/h3>&lt;p>可以使用腾讯云计环境，配合以下的课件完成所有练习。&lt;/p>
&lt;ol>
&lt;li>在本环境下，不需要搭建 Elastic Stack 的服务器，参展下面课件的第二步骤，创建 Elasticsearch 服务集群。&lt;/li>
&lt;li>&lt;a class="link" href="https://elk-workshop.github.io/codelabs/elastic-observability-foundation-qq/#0" target="_blank" rel="noopener"
>‘Elastic 可观测性方案’ 课件&lt;/a>&lt;/li>
&lt;li>腾讯云环境录播网址：&lt;a class="link" href="https://cloud.tencent.com/developer/salon/live-1304" target="_blank" rel="noopener"
>腾讯课堂查看&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="阿里云计算环境">阿里云计算环境
&lt;/h3>&lt;p>可以使用阿里云环境，配合以下的课件完成所有练习。&lt;/p>
&lt;blockquote>
&lt;p>课件开发中。&lt;/p>&lt;/blockquote>
&lt;h2 id="如何参与本工作坊">如何参与本工作坊？
&lt;/h2>&lt;p>本工作坊会在多个社区中举办，具体安排如下：&lt;/p>
&lt;ul>
&lt;li>定期在 Elastic 社区中举办可观测性主题的线上或者线下的社区活动，具体报名方式，
&lt;ol>
&lt;li>请关注 Elastic 公司的官方微公众号 “Elastic搜索”。&lt;/li>
&lt;li>关注 Elastic 公司社区在百格的社区活动报名网址：&lt;a class="link" href="https://www.bagevent.com/org/738410" target="_blank" rel="noopener"
>https://www.bagevent.com/org/738410&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Elasitc 用户日 专场活动，接受企业的团队预约，可以在约定的时间里，通过线上或者线下的方式进行，建议参与学习交流的人数在 10~20 人。 预约邮件： &lt;a class="link" href="mailto:zheng.liu@elastic.co" >zheng.liu@elastic.co&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>由于 Elastic Stack 产品的更新迭代速度特别快，本工作坊的软件版本和学习课件也会不定期更新。欢迎大家积极参与 Elastic 技术社区的交流和学习活动。&lt;/p></description></item><item><title>SLA、SLO 和 SLI 还是傻傻分不清么？</title><link>https://martinliu.cn/blog/sre-sla-slo-sli/</link><pubDate>Thu, 05 Mar 2020 17:37:29 +1100</pubDate><guid>https://martinliu.cn/blog/sre-sla-slo-sli/</guid><description>&lt;img src="https://martinliu.cn/images/abstract-6.jpg" alt="Featured image of post SLA、SLO 和 SLI 还是傻傻分不清么？" />&lt;p>SLA、SLI 和 SLO 是 SRE 工程实践里非常核心的概念，但是大家在同时提到这些概念的时候，经常容易混淆。&lt;/p>
&lt;p>长篇大论的文章反而容易使人更加疑惑，还不如画一张示意图说明一下，帮助大家一次性彻底梳理清楚这些不可以含糊不清的核心概念。说明一下，下图假设所讨论的 SLA 个数为 1，使用了软件工程中 ER 图的表达方式，但也有所变化。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/sla-sli-slo.jpeg"
loading="lazy"
alt="SLA、SLO、SLI"
>&lt;/p>
&lt;p>一图讲清 SLA、SLO、SLI&lt;/p>
&lt;p>本文不讲 why，只是帮助大家梳理清楚这些概念在以上人机系统中的相互关系。虽然不想做名词解释。但是为了方便起见，整理一个术语清单。&lt;/p>
&lt;ul>
&lt;li>SLA = Service Level Agreement = 服务质量/水平协议&lt;/li>
&lt;li>SLO = Service Level Objective = 服务质量/水平目标&lt;/li>
&lt;li>SLI = Services Level Indicator = 服务质量/水平指标&lt;/li>
&lt;/ul>
&lt;p>下面用人、事、物的逻辑进行阐释。&lt;/p>
&lt;h2 id="人和事">人和事
&lt;/h2>&lt;p>用从上到下，从左到右的顺序。&lt;/p>
&lt;p>客户 - 每 1 个客户在使用产品服务时，都显性或隐性的基于某 1 个 SLA，SLA 和客户之间是一种 1 对 1 的文档关系，这份协议文档就显性或者隐性的存在于系统中。客户使用 1 种，或者 n 种连接方式访问产品服务的 1 个或者 n 个应用系统。&lt;/p>
&lt;p>销售 - SLA 本身是所销售产品服务的一部分，它规定了承诺给客户的产品功用和质量。基于 SLA，客户可以选择用付费或者免费的方式使用产品。1 个/份 SLA 的销售工作可以由 1 到 n 位销售完成。销售和客户都幻想着几乎完美的 SLA，这样代表企业利益的销售，以及产品的客户就都可以达到双赢的局面，皆大欢喜。&lt;/p>
&lt;p>产品 - 通过与销售的间接互动，或者直接的客户调研，产品经理能够确定应用系统所应该具有的功能和发展方向。&lt;/p>
&lt;p>SRE - SRE 和产品共同制定了每个 SLA 相关应用系统的 SLO，SLO 定量的定义了每 1 个应用系统所应该具备的服务质量，1 个应用系统的 SLO 被该产品服务的 SLO 文档定义，在该文档中 SLO 被映射到 1 个或者 n 个 SLI，每个 SLI 都需要用监控工具持续采集数据，通常它们的数值单位各不相同。所有 SLO 都是用百分比数值形式表达的，例如：99.99% 的成功率，90％ 的请求延迟 &amp;lt; 400 毫秒等。SRE 和产品经理/专家还应该共同关注运行应用系统的基础设施层，确保基础设施的可用性和容量足以满足目标数量的用户访问，而且还要考虑和设计底层资源的容灾和跨区多活等复杂场景。&lt;/p>
&lt;p>开发/运维 - 重要但暂不做讨论。&lt;/p>
&lt;h2 id="事">事
&lt;/h2>&lt;p>用从下往上的顺序。&lt;/p>
&lt;p>IaaS 云服务 - 也可以是其它类型的可以供应用系统运行的环境。这里存在着 1 到 n 种子服务。它和上层的 n 个应用系统通常是 n 对 n 的关系。&lt;/p>
&lt;p>应用系统 - 1 个到 n 个应用系统构成了 1 个产品服务（内含SLA），在和客户的互动中实现着产品服务的业务价值。&lt;/p>
&lt;p>文档 - 以网页或者纸张的形式向用户描述了某个应用服务所提供的服务内容和质量信息。向用户提供这个文档并不是强制、显性和必须的。&lt;/p>
&lt;h2 id="结束">结束
&lt;/h2>&lt;p>请根据以上解释，结合你的实际工作场景，想象并描绘一下 SLA 、SLO 和 SLI 在你周围的人事物中关系网。在SRE 的工作实践中，定义 SLO，并梳理 SLI，将量化以后的目标和说明文档化，并让各个干系人认同并签署，是一项基础的起步工作。&lt;/p>
&lt;p>本文参考了 Google 出品的两本SRE 书籍，这两本书的英文版在 Google 的官网可以免费在线阅读。SRE Workbook 的简体中文版会在2020 年中出版。&lt;/p></description></item></channel></rss>