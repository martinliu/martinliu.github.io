<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>自动化 on Martin Liu's Blog</title><link>https://martinliu.cn/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/</link><description>Recent content in 自动化 on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 18 Sep 2025 17:26:30 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>DevOps 的七个隐形痛点（以及五个靠谱解法）</title><link>https://martinliu.cn/blog/7-hidden-pains-every-devops-engineer-faces/</link><pubDate>Thu, 28 Aug 2025 15:30:00 +0800</pubDate><guid>https://martinliu.cn/blog/7-hidden-pains-every-devops-engineer-faces/</guid><description>&lt;img src="https://martinliu.cn/blog/7-hidden-pains-every-devops-engineer-faces/1_jBaUuJtCdz0DTwlD0JF9dw.jpeg" alt="Featured image of post DevOps 的七个隐形痛点（以及五个靠谱解法）" />&lt;p>舞台上的 DevOps 常被描绘成技术乌托邦：自动化流水线顺滑运行，开发与运维无缝协作，代码提交到上线一气呵成。可在我七年、三家公司的一线实践里，另外一面从不出现在主题演讲里。&lt;/p>
&lt;p>下面这 7 个“隐形痛点”，几乎每位 DevOps 都会遇到。&lt;/p>
&lt;h2 id="1-没人愿意做的大扫除">1. 没人愿意做的“大扫除”
&lt;/h2>&lt;blockquote>
&lt;p>“像打扫房子一样——每天清一点，比几个月不管再硬抠强太多。”&lt;/p>&lt;/blockquote>
&lt;p>我接手过一批年久失修的仓库，本以为只是更个依赖，结果一路演变成数周拉锯战：硬编码的功能分支、成百上千个孤儿仓库、以及对版本控制“我行我素”的开发者。&lt;/p>
&lt;p>最扎心的是：&lt;strong>从初创到巨头，技术债都会悄悄堆积，最后往往让 DevOps 收拾残局。&lt;/strong>&lt;/p>
&lt;h2 id="2-提速透支未来">2. “提速”=“透支未来”
&lt;/h2>&lt;blockquote>
&lt;p>“有人为了‘这一次快一点’绕过流程，等出事了再说 DevOps 拖慢速度。”&lt;/p>&lt;/blockquote>
&lt;p>我经历过团队为了赶版本绕过 CI/CD：三个月后，我们还在填坑——环境不一致、配置缺失、只在生产复现的幽灵 Bug。&lt;/p>
&lt;p>讽刺的是：&lt;strong>绕过护栏的人，很少是修坑的人。&lt;/strong>&lt;/p>
&lt;h2 id="3-请你看下日志吧的沟通鸿沟">3. “请你看下日志吧”的沟通鸿沟
&lt;/h2>&lt;p>“我的流水线挂了，能帮修下吗？”——这是 DevOps 的日常高频语句。可很多时候，&lt;strong>日志已经把问题写明白了&lt;/strong>。
我曾陪一位开发排查一上午，最终错误是“Service Account 缺少存储桶权限”。我指出时，对方说：“我以为那是背景噪音。”&lt;/p>
&lt;p>这不是技术问题，而是沟通问题：对 DevOps 明晃晃的信息，对部分开发并不显眼。&lt;/p>
&lt;h2 id="4-身份危机devops--ops">4. 身份危机：DevOps ≠ Ops
&lt;/h2>&lt;p>很多岗位把 DevOps 和传统运维混为一谈。
有的所谓 “DevOps 工程师”，实际是换了头衔的系统管理员；也有的更像开发，只是多了点云权限。
现实是：&lt;strong>DevOps 处在一个光谱上&lt;/strong>——有的周几乎全是运营工作，另一些时期几乎全是开发，不同公司/团队/项目的比例差异巨大。&lt;/p>
&lt;h2 id="5-yaml-工程的瘟疫">5. YAML 工程的瘟疫
&lt;/h2>&lt;blockquote>
&lt;p>“30 个 K8s 集群、几十万个 Pod、数个 GitOps 仓库、上十万份 YAML。”&lt;/p>&lt;/blockquote>
&lt;p>YAML 本身不难，难在规模。一份“简单”的部署配置，能迅速演化成少数人看得懂的迷宫。
我曾为一个神秘的 K8s 故障排查数天，根因竟是某个在多仓库间复制的 YAML 文件里——一个&lt;strong>错位的空格&lt;/strong>。&lt;/p>
&lt;h2 id="6-漏网之鱼全都变成你的问题">6. “漏网之鱼”全都变成“你的问题”
&lt;/h2>&lt;p>数据库、监控、告警、安全、合规、成本优化……很多组织把一切边界模糊的事都丢给 DevOps。
范围过宽，焦点就会被稀释，&lt;strong>职业倦怠&lt;/strong>如影随形。正如同事所言：“所有‘没人接’的，最后都是你的。”&lt;/p>
&lt;h2 id="7-隐形的悖论">7. 隐形的悖论
&lt;/h2>&lt;blockquote>
&lt;p>“只有出问题时，人们才想起我们。”&lt;/p>&lt;/blockquote>
&lt;p>当一切顺滑时，没有人注意到精心打磨的流水线、前瞻性的监控和成百上千小时的部署优化；一旦出事，所有目光立刻投向 DevOps。
&lt;strong>成功意味着无感失败；失败意味着全员关注。&lt;/strong>&lt;/p>
&lt;h2 id="五个确实有效的应对策略">五个确实有效的应对策略
&lt;/h2>&lt;p>这些年踩过无数坑之后，我总结了 5 个在不同团队都验证过的做法：&lt;/p>
&lt;h3 id="1-把清理产品化常态化">1. 把“清理”产品化、常态化
&lt;/h3>&lt;p>别把技术债当独立项目，而是纳入日常节奏。&lt;/p>
&lt;p>一个简单且有效的做法：&lt;strong>给“清债”固定预算&lt;/strong>——例如每周一第一个小时，明确要关掉一项债务（更新依赖、重构脚本、补文档都算）。&lt;/p>
&lt;h3 id="2-构建自助化解决方案">2. 构建自助化解决方案
&lt;/h3>&lt;p>不要做每一次失败的“人工兜底”。**投入在“开发者自助”**更省总成本：&lt;/p>
&lt;ul>
&lt;li>更清晰的错误信息与行动建议&lt;/li>
&lt;li>成体系的文档与排障手册&lt;/li>
&lt;li>自动化诊断脚本与按钮式修复&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我做过一个简单的 Slack 机器人，用规则识别常见流水线故障并自动回复修复建议，让 DevOps 中断减少了近 &lt;strong>40%&lt;/strong>。&lt;/p>&lt;/blockquote>
&lt;h3 id="3-落地谁破坏谁修复">3. 落地“谁破坏，谁修复”
&lt;/h3>&lt;p>绕过流程或引入有风险变更的人，要负责后续修复与复盘。&lt;strong>把反馈闭环拉到本人&lt;/strong>，是最有效的流程教育。&lt;/p>
&lt;h3 id="4-画清边界与期望">4. 画清边界与期望
&lt;/h3>&lt;p>写下来、讲清楚：&lt;strong>团队的职责是什么，不是什么&lt;/strong>。不是拒绝协作，而是让协作可预期、可计划。&lt;/p>
&lt;h3 id="5-让价值可见化">5. 让价值“可见化”
&lt;/h3>&lt;p>在一切顺利时，也要持续对外沟通：&lt;/p>
&lt;ul>
&lt;li>部署频率（Deployment Frequency）&lt;/li>
&lt;li>平均恢复时间（MTTR）&lt;/li>
&lt;li>变更失败率（Change Failure Rate）&lt;/li>
&lt;/ul>
&lt;p>用趋势和对比讲故事，让大家&lt;strong>看见稳定背后的投入&lt;/strong>。&lt;/p>
&lt;h2 id="devops-的人文侧技术之外的关键">DevOps 的人文侧：技术之外的关键
&lt;/h2>&lt;p>最优秀的 DevOps，不只会写基础设施代码，更是&lt;strong>沟通者、导师与推动者&lt;/strong>。&lt;/p>
&lt;p>我早期犯过的错，是只盯着自动化与基础设施。很快我发现，&lt;strong>帮助团队理解“为什么”&lt;/strong>，往往比“怎么做”更有价值。
一位前辈对我说过一句一直受用的话：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>DevOps 的核心不是让机器协同，而是让人协同。&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h2 id="继续向前">继续向前
&lt;/h2>&lt;p>尽管有这些痛点，DevOps 社区在不断进化：工具更易用、实践更成熟，组织也在从“为了更快”转向“为了更稳、更可持续”的战略视角。&lt;/p>
&lt;p>如果你正在考虑进入这个领域，或正被这些挫折困扰——记住：&lt;strong>这些问题真实存在，但并非不可解&lt;/strong>。通过清晰沟通、稳健流程与重视协作，我们可以逐步化解它们。&lt;/p>
&lt;p>当某天感觉一切都不顺时，也请记住：你并不孤单。一个庞大的同行社区正面对同样问题、分享解法，并一起向更好的工程实践迈进。&lt;/p>
&lt;p>&lt;strong>你在 DevOps 之路上遇到过哪些“隐形痛点”？欢迎在评论区分享你的经历与招数。&lt;/strong>&lt;/p></description></item><item><title>2025 年别再使用 Jenkins！</title><link>https://martinliu.cn/blog/stop-using-jenkins-in-2025/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/stop-using-jenkins-in-2025/</guid><description>&lt;img src="https://martinliu.cn/blog/stop-using-jenkins-in-2025/1_9wQ57gpbdI9JwUHpJmtFdA.jpeg" alt="Featured image of post 2025 年别再使用 Jenkins！" />&lt;h2 id="阻碍你前进的遗留巨头">阻碍你前进的遗留巨头
&lt;/h2>&lt;p>认识一下 Janet。她是一家中型科技公司的 DevOps 工程师，工作了五年。每个周一早上，她都会像闹钟一样，为不可避免的事情做好准备：“Jenkins 服务器又宕机了。”或者“构建失败了，没人知道为什么。”又或者她最喜欢的那句，“我们需要更新所有的 Jenkins 插件，但我们担心一切都会崩溃。”&lt;/p>
&lt;p>听起来很熟悉？你并不孤单。&lt;/p>
&lt;p>Jenkins 在过去的 15 年里一直是首选的 CI/CD 工具。它就像那辆老旧的家庭汽车，虽然总是进修理店，但你仍然保留着，因为，嗯，你习惯了它。但正如你在 2025 年不会再使用翻盖手机一样，现在或许是时候重新审视你与 Jenkins 的关系了 😒。&lt;/p>
&lt;h2 id="为什么-jenkins-正在显露老态">为什么 Jenkins 正在显露老态
&lt;/h2>&lt;p>Jenkins 在 2005 年推出时是革命性的。但 iPod 也是。技术发展迅速，曾经的尖端产品很快就会过时。以下是 Jenkins 正在落后的原因：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>让安全团队彻夜难眠的安全漏洞: Jenkins 有着令人不安的安全问题历史。仅在 2021 年，Jenkins 安全团队就披露了 30 多个漏洞，并且新的漏洞还在不断出现。许多组织以提升的权限运行 Jenkins，这使得这些漏洞尤为危险。以 Acme Corp（化名）为例。他们的 Jenkins 实例通过 CVE-2023–27898 被攻破，这是一个在脚本安全插件 (Script Security Plugin) 中的关键漏洞。攻击者获得了他们生产凭证的访问权限，并在其基础设施中部署了加密货币挖矿程序 (crypto miners)。清理工作让他们花费了三天的工程时间，并损害了客户信任。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拖慢整个团队效率的性能问题: “我趁构建运行的时候去喝杯咖啡”这不仅仅是开发人员的玩笑，更是一个生产力问题。Jenkins 实例通常会随着时间的推移变得越来越慢，特别是当你添加更多作业和插件时。Michael，一个游戏初创公司的开发人员，描述了他的经历：“我们的 Jenkins 构建以前需要 10 分钟。在增加了两年功能和测试之后，它们需要 45 分钟。我们花在等待 Jenkins 上的时间比实际编码的时间还要多。”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>滋生“Jenkins 专家”的配置复杂性: Jenkins 的灵活性是有代价的：复杂性。组织往往最终只有一两个“Jenkins 大师”，他们是唯一了解一切如何运作的人。当他们去度假或离开公司时，恐慌就会随之而来。一位工程经理曾这样说：“我们有超过 200 个 Jenkins 流水线，每个的配置都略有不同。没人敢碰它们，因为我们担心它们会中断。这简直是最纯粹的技术债。”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消耗资源的维护开销: 自行托管的 Jenkins 需要持续维护。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>你需要：&lt;/p>
&lt;ul>
&lt;li>管理 Jenkins 服务器本身&lt;/li>
&lt;li>定期更新 Jenkins 核心&lt;/li>
&lt;li>更新几十甚至上百个插件&lt;/li>
&lt;li>处理备份和灾难恢复&lt;/li>
&lt;li>配置和维护构建代理 (build agents)&lt;/li>
&lt;/ul>
&lt;p>这些维护工作不会增加业务价值；它只是为了维持系统运行。&lt;/p>
&lt;h2 id="github-actions现代替代方案">GitHub Actions：现代替代方案
&lt;/h2>&lt;p>Janet 的故事有一个圆满的结局。她的团队从 Jenkins 迁移到了 GitHub Actions，周一早上的“救火”式应对也成为了历史。&lt;/p>
&lt;p>GitHub Actions 代表了一种截然不同的持续集成/持续部署 (CI/CD) 方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>内置安全性，无需维护服务器 : GitHub Actions 在 GitHub 的云中运行。你无需担心 Jenkins 服务器的安全或应用安全补丁。GitHub 的安全团队会为你处理这些。最好的安全服务器是你根本无需管理的服务器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动扩展的性能 ： 需要更多构建能力？GitHub Actions 会自动扩展以满足需求。你可以并行运行构建，而无需管理额外的构建代理。Janet 的团队在迁移到 GitHub Actions 后，构建时间缩短了 60%，仅仅是因为他们可以并行执行测试，而无需担心基础设施 (infrastructure) 限制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人人都能理解的代码化配置：GitHub Actions 使用直接存储在你的代码仓库 (repository) 中的 YAML 文件。这种方法有几个优点：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>配置与它所构建的代码共存&lt;/li>
&lt;li>变更通过常规代码审查 (code reviews) 进行追踪&lt;/li>
&lt;li>新团队成员可以快速理解设置&lt;/li>
&lt;li>无需专业知识&lt;/li>
&lt;/ul>
&lt;p>一位开发人员报告说：“GitHub Actions 的学习曲线比 Jenkins 平缓得多。我可以在一个下午，而不是几周内，理解我们整个 CI/CD 流水线。”&lt;/p>
&lt;ol start="4">
&lt;li>零维护开销 ：使用 GitHub Actions，你将拥有：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>无需维护服务器&lt;/li>
&lt;li>无需更新插件&lt;/li>
&lt;li>无需配置构建代理&lt;/li>
&lt;li>无需管理备份&lt;/li>
&lt;/ul>
&lt;p>这让工程师可以将时间投入到实际的产品开发中，而不是基础设施的维护。&lt;/p>
&lt;p>&lt;strong>实际影响&lt;/strong>&lt;/p>
&lt;p>让我告诉你 Realtime Analytics, Inc. 从 Jenkins 切换到 GitHub Actions 后发生了什么。&lt;/p>
&lt;p>在切换之前，他们有：&lt;/p>
&lt;ul>
&lt;li>两名全职工程师专门负责 Jenkins 维护&lt;/li>
&lt;li>每周发生的故障影响开发者生产力&lt;/li>
&lt;li>平均构建时间 35 分钟&lt;/li>
&lt;li>定期出现安全隐患，需要紧急修补&lt;/li>
&lt;/ul>
&lt;p>切换到 GitHub Actions 六个月后：&lt;/p>
&lt;ul>
&lt;li>两名工程师都被重新分配到产品开发工作&lt;/li>
&lt;li>零 CI/CD 故障&lt;/li>
&lt;li>构建时间缩短到 12 分钟&lt;/li>
&lt;li>安全问题由 GitHub 自动处理&lt;/li>
&lt;/ul>
&lt;p>他们的 CTO 估算，仅工程时间一项，这项改变每年就为他们节省了大约 30 万美元，这还不包括改善的开发者体验和更快的上市时间。&lt;/p>
&lt;h2 id="切换比你想象的更容易">切换：比你想象的更容易
&lt;/h2>&lt;p>从 Jenkins 迁移到 GitHub Actions 的想法可能看起来令人生畏，但实际上它比你想象的要简单直接得多。&lt;/p>
&lt;p>这里有一个简化的方法：&lt;/p>
&lt;ol>
&lt;li>从一个小型、非关键项目开始&lt;/li>
&lt;li>将其 Jenkins 流水线 (pipeline) 转换为 GitHub Actions 工作流 (workflow)&lt;/li>
&lt;li>并行运行这两个系统以建立信心&lt;/li>
&lt;li>随着团队适应，逐步迁移更多项目&lt;/li>
&lt;/ol>
&lt;p>GitHub 甚至专门为 Jenkins 用户提供了迁移指南和示例。&lt;/p>
&lt;h2 id="github-actions-完美吗不但它是一个重大改进">GitHub Actions 完美吗？不，但它是一个重大改进
&lt;/h2>&lt;p>公平地说，GitHub Actions 并非没有局限性：&lt;/p>
&lt;ul>
&lt;li>对于非常专业的构建要求，你可能需要定制解决方案&lt;/li>
&lt;li>如果你没有使用 GitHub 进行源代码管理 (source control)，集成就不会那么无缝&lt;/li>
&lt;li>一些复杂的 Jenkins 设置可能需要你重新思考方法&lt;/li>
&lt;/ul>
&lt;p>然而，对于绝大多数开发团队来说，GitHub Actions 几乎在所有方面都代表着对 Jenkins 的巨大改进。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>&lt;strong>Jenkins 多年来一直为我们服务得很好&lt;/strong>，但软件开发已经演进。现代的 CI/CD (持续集成/持续交付) 解决方案，例如 GitHub Actions，专为当今的开发实践而设计：云原生 (cloud-native)、注重安全，并优化了开发者生产力 (developer productivity)。&lt;/p>
&lt;p>正如 Janet 所发现的，最初的迁移努力会迅速带来回报。她的团队现在部署更频繁，问题更少，并且几乎不花时间维护他们的 CI/CD 基础设施。&lt;/p>
&lt;p>&lt;strong>问问自己：&lt;/strong> 上个月你的团队花了多少时间与 Jenkins 搏斗？如果把这些时间用于其他工作，你本可以构建出什么？&lt;/p>
&lt;p>CI/CD 的未来已经到来。&lt;strong>也许&lt;/strong>是时候让 Jenkins 成为过去式了。&lt;/p></description></item></channel></rss>