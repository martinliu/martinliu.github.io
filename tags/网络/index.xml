<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>网络 on Martin Liu's Blog</title><link>https://martinliu.cn/tags/%E7%BD%91%E7%BB%9C/</link><description>Recent content in 网络 on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 18 Sep 2025 17:26:30 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS VPC 和 IP Address 的秘密：2025 年DevOps工程师必知</title><link>https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/</guid><description>&lt;img src="https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/1_S9_CChjGu1uWc_wnNUGxzw.webp" alt="Featured image of post AWS VPC 和 IP Address 的秘密：2025 年DevOps工程师必知" />&lt;p>像专家一样学习 AWS VPC IP 地址分配。探索隐藏规则、专家技巧和 2025 年最佳实践，以设计安全、可扩展的 AWS 网络。DevOps 和云工程师的完美指南。&lt;/p>
&lt;p>当大多数工程师启动一个新的 &lt;strong>AWS 虚拟私有云 (Virtual Private Cloud - VPC)&lt;/strong> 时，他们会直接选择经典的 &lt;code>/16&lt;/code> CIDR 块。
为什么？因为它“感觉很安全”——&lt;strong>65,536 个 IP 地址&lt;/strong>都在一个整齐的范围内。
不缺地址，没有规划烦恼……至少看起来是这样。&lt;/p>
&lt;p>但现实是：在 AWS 网络中，&lt;strong>CIDR 块大小的选择并非一劳永逸&lt;/strong>。错误的决策可能导致 &lt;strong>IP 地址耗尽、集成失败、安全漏洞和痛苦的迁移&lt;/strong>。而且，AWS 仍然隐藏着&lt;strong>一个小的 IP 秘密&lt;/strong>，这个秘密总是让新工程师头疼。&lt;/p>
&lt;h3 id="2025-年-cidr-范围规划为何更加重要">2025 年 CIDR 范围规划为何更加重要
&lt;/h3>&lt;p>您的 VPC CIDR 范围定义了您&lt;strong>有多少私有 IP 地址&lt;/strong>——以及这些地址如何被使用、划分并与其他网络集成。&lt;/p>
&lt;p>太多工程师仍然选择 &lt;code>10.0.0.0/16&lt;/code>，然后就此作罢。问题出在哪里？&lt;/p>
&lt;ul>
&lt;li>与企业本地网络重叠&lt;/li>
&lt;li>在 VPC 对等连接 (VPC Peering) 或中转网关 (Transit Gateway) 期间与其他 AWS 账户发生冲突&lt;/li>
&lt;li>当您扩展到多个区域时限制了增长&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2025 年最佳实践：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>创造性地使用 &lt;strong>RFC 1918&lt;/strong> 范围 (&lt;code>172.16.0.0/12&lt;/code> 或 &lt;code>192.168.0.0/16&lt;/code>)&lt;/li>
&lt;li>不要将 RFC 6598 (100.64.0.0/10) 用于 AWS VPC 或企业私有工作负载，它已被 ISP 保留用于运营商级 NAT (Carrier-Grade NAT)（根据 RFC 6598）。请坚持使用 RFC 1918 范围进行 VPC 设计。&lt;/li>
&lt;li>在&lt;strong>组织层面&lt;/strong>而非每个团队层面记录和预留 CIDR 块&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CIDR 块&lt;/th>
&lt;th>总 IP 数&lt;/th>
&lt;th>可用 IP 数 (AWS 保留后)&lt;/th>
&lt;th>最适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>/16&lt;/code>&lt;/td>
&lt;td>65,536&lt;/td>
&lt;td>65,531&lt;/td>
&lt;td>大型多服务环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/24&lt;/code>&lt;/td>
&lt;td>256&lt;/td>
&lt;td>251&lt;/td>
&lt;td>小型生产工作负载&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/28&lt;/code>&lt;/td>
&lt;td>16&lt;/td>
&lt;td>11&lt;/td>
&lt;td>测试/沙箱环境&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>为什么这个选择在今天比以往任何时候都更重要：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>容器 (Containers) 和微服务 (Microservices)&lt;/strong>：在 EKS 和 ECS 中，&lt;strong>每个 Pod/任务 (pod/task) 都会获得自己的 IP&lt;/strong>（默认情况下），这使得小规模子网会 &lt;em>很快&lt;/em> 被占满。&lt;/li>
&lt;li>&lt;strong>AWS PrivateLink 和 VPC Lattice&lt;/strong>：每个终端节点或服务都会在您的子网中创建弹性网络接口 (Elastic Network Interface - ENI)——消耗额外的 IP 地址。&lt;/li>
&lt;li>&lt;strong>混合云 (Hybrid Cloud) 增长&lt;/strong>：多 VPC 和多账户网络意味着重叠的 CIDR 块会破坏对等连接和中转网关集成。&lt;/li>
&lt;li>&lt;strong>IPv4 稀缺性&lt;/strong>：您不能再将私有地址空间视为无限，尤其是在大型组织中。&lt;/li>
&lt;/ul>
&lt;h3 id="ipv4-耗尽与弹性-ip-经济学">IPv4 耗尽与弹性 IP 经济学
&lt;/h3>&lt;p>2024 年 2 月，AWS 提高了闲置弹性 IP (Elastic IP) 的收费。到 2025 年年中，&lt;strong>公共 IPv4 地址将成为稀缺资源&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>您现在应该怎么做：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>除非绝对必要，否则停止分配公有 IP 地址 (Public IP Address)&lt;/li>
&lt;li>使用 NAT 网关 (NAT Gateway)，但要平衡成本（或者在小型环境中使用 NAT 实例 (NAT Instance)）&lt;/li>
&lt;li>利用 AWS PrivateLink 和 VPC 终端节点 (VPC Endpoint) 完全避免公开暴露&lt;/li>
&lt;li>开始使用 AWS Network Firewall 和 Route 53 测试 IPv6 入站/出站流量&lt;/li>
&lt;/ul>
&lt;h3 id="aws-5-个-ip-地址规则鲜为人知的细节">AWS 5 个 IP 地址规则（鲜为人知的细节）
&lt;/h3>&lt;p>无论您选择何种 CIDR，您都&lt;strong>永远无法使用子网中的所有 IP 地址&lt;/strong>。
AWS &lt;strong>在每个子网中保留 5 个 IP 地址&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>保留的 IP 地址：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>第一个 IP&lt;/strong> → 网络 ID（定义子网）&lt;/li>
&lt;li>&lt;strong>第二个 IP&lt;/strong> → 默认 VPC 路由器（网关）&lt;/li>
&lt;li>&lt;strong>第三个 IP&lt;/strong> → 由 AWS 保留（内部用途）&lt;/li>
&lt;li>&lt;strong>最后一个 IP&lt;/strong> → 广播地址（RFC 标准，未使用但已保留）&lt;/li>
&lt;li>&lt;strong>额外一个&lt;/strong> → AWS 内部未来使用&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>计算示例：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>/24&lt;/code> = 总计 256 个 → 251 个可用&lt;/li>
&lt;li>&lt;code>/28&lt;/code> = 总计 16 个 → 11 个可用&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>在设计跨可用区 (Availability Zone - AZ) 的高可用性时，应平均划分 CIDR 范围，&lt;strong>并&lt;/strong>在估算容量之前减去 AWS 保留的地址。&lt;/em>&lt;/p>&lt;/blockquote>
&lt;h3 id="2025-年的实际陷阱">2025 年的实际陷阱
&lt;/h3>&lt;p>以下是我看到工程师（甚至经验丰富的工程师）仍然会犯错的地方：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>错误做法&lt;/th>
&lt;th>影响&lt;/th>
&lt;th>解决方案&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>为小型应用选择 &lt;code>/16&lt;/code>&lt;/td>
&lt;td>浪费 IP 空间，在对等连接中造成重叠&lt;/td>
&lt;td>使用 &lt;code>/24&lt;/code> 或 &lt;code>/23&lt;/code> 合理调整大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>忽略容器 IP 需求&lt;/td>
&lt;td>EKS 在部署中途耗尽 IP&lt;/td>
&lt;td>使用前缀委托或 CNI 自定义网络&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VPC 之间 CIDR 重叠&lt;/td>
&lt;td>对等连接/TGW 路由中断&lt;/td>
&lt;td>使用 AWS IPAM 进行组织级管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>在生产中使用过小的 &lt;code>/28&lt;/code>&lt;/td>
&lt;td>IP 耗尽导致扩展事件失败&lt;/td>
&lt;td>为增长预留 20-30% 缓冲&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>忘记 AWS 保留 IP&lt;/td>
&lt;td>服务启动意外失败&lt;/td>
&lt;td>在规划中始终减去 5-IP 规则&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="现代扩展注意事项">现代扩展注意事项
&lt;/h3>&lt;p>到 2025 年，占用 IP 地址的不再仅仅是 EC2。您的计划必须考虑：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Amazon EKS/ECS&lt;/strong> → 默认情况下，每个 pod/任务一个 IP 地址。&lt;/li>
&lt;li>&lt;strong>NAT 网关&lt;/strong> → 每个可用区预留多个 IP 地址用于扩展。&lt;/li>
&lt;li>&lt;strong>VPC 终端节点 (PrivateLink)&lt;/strong> → 创建弹性网络接口 (Elastic Network Interface - ENI)，占用每个可用区中的 IP 地址。&lt;/li>
&lt;li>&lt;strong>负载均衡器 (应用负载均衡器 ALB/网络负载均衡器 NLB)&lt;/strong> → 每个可用区的每个子网都需要 ENI。&lt;/li>
&lt;li>&lt;strong>AWS Lattice 服务&lt;/strong> → 为服务间网络分配 IP 地址。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>在 EKS 中，启用&lt;strong>前缀委托 (Prefix Delegation)&lt;/strong>，以便 pod 共享 /28 前缀而不是获取唯一的 IP 地址 — 从而减少消耗。&lt;/em>&lt;/p>&lt;/blockquote>
&lt;h3 id="安全与影响范围">安全与影响范围
&lt;/h3>&lt;p>CIDR 规划也是一种&lt;strong>安全控制措施&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>更小、特定用途的子网可以在遭受攻击时限制影响范围。&lt;/li>
&lt;li>通过 CIDR 而不仅仅是安全组 (Security Group) 来分段工作负载。&lt;/li>
&lt;li>示例：&lt;code>/28&lt;/code> 用于公有 ALB 层，&lt;code>/24&lt;/code> 用于私有应用服务器，&lt;code>/26&lt;/code> 用于数据库层。&lt;/li>
&lt;/ul>
&lt;h3 id="混合云与多账户网络">混合云与多账户网络
&lt;/h3>&lt;p>CIDR 重叠 = 无法在网络之间路由。&lt;/p>
&lt;p>通过以下方式避免这种情况：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;strong>AWS VPC IP 地址管理器 (IPAM)&lt;/strong> 集中分配 CIDR。&lt;/li>
&lt;li>为开发/生产/预发布 (dev/prod/staging) 遵循&lt;strong>保留范围策略&lt;/strong>。&lt;/li>
&lt;li>为所有 AWS 账户和本地网络保留一份记录完整的&lt;strong>IP 分配图&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="可观测性与故障排除">可观测性与故障排除
&lt;/h3>&lt;p>IP 相关问题可能导致静默故障。优秀的工程师会：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;strong>VPC 流日志 (VPC Flow Logs)&lt;/strong> (在子网或 ENI 级别)&lt;/li>
&lt;li>启用 &lt;strong>CloudWatch Logs Insights&lt;/strong> 查询以进行 IP 级别故障排除&lt;/li>
&lt;li>使用 &lt;strong>可达性分析器 (Reachability Analyzer)&lt;/strong> 在更改前模拟数据包流&lt;/li>
&lt;li>使用 &lt;strong>网络访问分析器 (Network Access Analyzer)&lt;/strong> 持续验证最小权限网络&lt;/li>
&lt;/ul>
&lt;h3 id="aws-vpc-和无人提及的-ip-地址秘密">AWS VPC 和无人提及的 IP 地址秘密
&lt;/h3>&lt;h3 id="图-1-aws-子网中的-5-ip-规则">图 1: AWS 子网中的 5-IP 规则
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/1_j-NeuXZTzPTiko4rkOvqOw.webp"
width="640"
height="960"
srcset="https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/1_j-NeuXZTzPTiko4rkOvqOw_hu_25076655c3d4d357.webp 480w, https://martinliu.cn/blog/aws-vpc-ip-address-secrets-what-every-engineer/1_j-NeuXZTzPTiko4rkOvqOw_hu_e077b24825e64715.webp 1024w"
loading="lazy"
alt="AWS子网IP保留规则示意图"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;p>&lt;em>相同的 5-IP 规则适用于&lt;strong>每个子网&lt;/strong>，无论大小如何。&lt;/em>&lt;/p>
&lt;h3 id="真实案例eks--privatelink-中的-ip-消耗">真实案例：EKS + PrivateLink 中的 IP 消耗
&lt;/h3>&lt;p>场景：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/23&lt;/code> 子网 (总共 512 个 IP，AWS 预留后可用 507 个)&lt;/li>
&lt;li>50 节点 &lt;strong>EKS&lt;/strong> 集群 (默认 CNI，每个节点 20 个 Pod)&lt;/li>
&lt;li>每个可用区 1 个 &lt;strong>NAT 网关 (NAT Gateway)&lt;/strong>&lt;/li>
&lt;li>5 个 &lt;strong>PrivateLink 端点 (PrivateLink endpoints)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IP 分配明细：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>EKS 节点：&lt;/strong> 50 个 IP (每个节点一个)&lt;/li>
&lt;li>&lt;strong>EKS Pod：&lt;/strong> 1,000 个 IP (每个节点 20 个，唯一的 ENI (Elastic Network Interface)) → &lt;em>已超出可用 IP 数量！&lt;/em>&lt;/li>
&lt;li>&lt;strong>NAT 网关：&lt;/strong> 1 个 IP&lt;/li>
&lt;li>&lt;strong>PrivateLink：&lt;/strong> 5 个 IP (每个端点 ENI 一个)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>结果：&lt;/strong>
即使使用 &lt;code>/23&lt;/code>，在集群完全调度之前，IP 就会耗尽。
➡ &lt;strong>解决方案：&lt;/strong> 为 EKS 使用&lt;strong>前缀委托 (prefix delegation)&lt;/strong> 或&lt;strong>自定义网络 (custom networking)&lt;/strong>，以大幅减少每个 Pod 的 IP 消耗。&lt;/p>
&lt;h3 id="适用于-aws-的-cidr-决策框架-2025">适用于 AWS 的 CIDR 决策框架 (2025)
&lt;/h3>&lt;h4 id="step-1--确定您的工作负载配置文件">Step 1 — 确定您的工作负载配置文件
&lt;/h4>&lt;ul>
&lt;li>以 EC2 为主：按实例数量加缓冲大小&lt;/li>
&lt;li>以容器为重：计算 Pod/任务数量 (EKS/ECS)&lt;/li>
&lt;li>以服务为重：计算 NAT、PrivateLink、Lattice 产生的 ENI 数量&lt;/li>
&lt;/ul>
&lt;h4 id="step-2--规划增长">Step 2 — 规划增长
&lt;/h4>&lt;ul>
&lt;li>为扩展事件增加 20–30% 的缓冲&lt;/li>
&lt;li>从一开始就考虑&lt;strong>双栈 (IPv4 + IPv6)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="step-3--避免重叠">Step 3 — 避免重叠
&lt;/h4>&lt;ul>
&lt;li>使用 &lt;strong>AWS IPAM (IP Address Manager)&lt;/strong> 进行组织范围的分配&lt;/li>
&lt;li>为多账户和混合设置记录所有 CIDR&lt;/li>
&lt;/ul>
&lt;h4 id="step-4--从设计上确保安全">Step 4 — 从设计上确保安全
&lt;/h4>&lt;ul>
&lt;li>对公共层使用小 CIDR，对私有层使用大 CIDR&lt;/li>
&lt;li>使用专用 CIDR 分段敏感工作负载&lt;/li>
&lt;/ul>
&lt;h4 id="step-5--考虑扩展性">Step 5 — 考虑扩展性
&lt;/h4>&lt;ul>
&lt;li>选择可以扩展的尺寸 (&lt;code>/24&lt;/code> → &lt;code>/23&lt;/code>)，如果需要&lt;/li>
&lt;li>请记住：您&lt;strong>无法缩小&lt;/strong>，只能增加&lt;/li>
&lt;/ul>
&lt;h3 id="2025-年主要启示">2025 年主要启示
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>5-IP 规则&lt;/strong>仍然适用并将永远适用。&lt;/li>
&lt;li>EKS、PrivateLink 和现代 AWS 服务消耗 IP 的速度远超 EC2 时代的架构。&lt;/li>
&lt;li>&lt;strong>IPAM&lt;/strong> 是您在多 VPC/多账户世界中最好的朋友。&lt;/li>
&lt;li>&lt;strong>IPv6&lt;/strong> 不是可选的 — 现在就开始双栈。&lt;/li>
&lt;li>CIDR 规划不仅关乎&lt;strong>容量&lt;/strong>，更关乎&lt;strong>安全性和可扩展性&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="2025-年不可忽视的趋势">2025 年不可忽视的趋势
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>IPv6 Everywhere&lt;/strong>：所有新的 VPC 都应采用双栈 (dual-stack) 模式，以便面向未来。&lt;/li>
&lt;li>&lt;strong>BYOIP (Bring Your Own IP)&lt;/strong>：许多企业正在将 IPv4 地址空间带入 AWS，以避免冲突。&lt;/li>
&lt;li>&lt;strong>Automated IP Allocation&lt;/strong>：IaC (基础设施即代码) 流水线现在集成了 IPAM (IP Address Management)，实现零人工 CIDR 分配。&lt;/li>
&lt;li>&lt;strong>Subnet CIDR Expansion&lt;/strong>：AWS 现在支持无中断地扩展子网 — 如果您提前规划，这将是救星。&lt;/li>
&lt;/ul>
&lt;h3 id="aws-ip-小知识却非常实用">AWS IP 小知识，却非常实用
&lt;/h3>&lt;ul>
&lt;li>您可以稍后向 VPC &lt;strong>添加&lt;/strong> CIDR 块，但&lt;strong>不能缩小&lt;/strong>它们。&lt;/li>
&lt;li>始终预留未来 &lt;strong>2-3 年的增长空间&lt;/strong>。&lt;/li>
&lt;li>某些 AWS 服务（例如 FSx、Directory Service）需要&lt;strong>最小子网大小&lt;/strong>。&lt;/li>
&lt;li>在生产子网容量中保留 20-30% 的余量。&lt;/li>
&lt;li>除了实例，NAT 网关 (NAT Gateway) 和负载均衡器 (Load Balancer) 还会额外占用 IP 地址。&lt;/li>
&lt;/ul>
&lt;h3 id="子网规划速查表">子网规划速查表
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>环境类型&lt;/th>
&lt;th>CIDR&lt;/th>
&lt;th>可用 IP 数&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>沙箱/测试&lt;/td>
&lt;td>&lt;code>/28&lt;/code>&lt;/td>
&lt;td>11&lt;/td>
&lt;td>微小型，短期使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>小型生产&lt;/td>
&lt;td>&lt;code>/24&lt;/code>&lt;/td>
&lt;td>251&lt;/td>
&lt;td>Web 应用，小型数据库&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>大型生产&lt;/td>
&lt;td>&lt;code>/23&lt;/code>&lt;/td>
&lt;td>507&lt;/td>
&lt;td>多层架构 + 扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>服务密集型环境&lt;/td>
&lt;td>&lt;code>/22&lt;/code>&lt;/td>
&lt;td>1019&lt;/td>
&lt;td>多服务，多可用区&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="来自实践的最终建议">来自实践的最终建议
&lt;/h3>&lt;p>下次创建 VPC 时：&lt;/p>
&lt;ol>
&lt;li>除非有实际需求，否则&lt;strong>不要默认使用&lt;/strong> &lt;code>/16&lt;/code>。&lt;/li>
&lt;li>在每个子网中&lt;strong>考虑 5 个 IP 地址规则&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>规划容器、端点和扩展&lt;/strong> — 不仅仅是 EC2。&lt;/li>
&lt;li>&lt;strong>使用 IPAM&lt;/strong> 避免重叠并自动化分配。&lt;/li>
&lt;li>&lt;strong>使用 CIDR 作为边界&lt;/strong>，为安全性进行分段。&lt;/li>
&lt;li>&lt;strong>现在就考虑 IPv6&lt;/strong>，不要等到以后。&lt;/li>
&lt;/ol>
&lt;p>今天几分钟的 IP 规划，可以为你节省未来&lt;strong>数周的昂贵迁移成本&lt;/strong>。&lt;/p>
&lt;h3 id="2025-年-aws-vpc-清单">2025 年 AWS VPC 清单
&lt;/h3>&lt;p>上线前，请验证：&lt;/p>
&lt;ul>
&lt;li>从第一天起就支持双栈 (IPv4 + IPv6)&lt;/li>
&lt;li>跨组织和混合网络无重叠的 CIDR&lt;/li>
&lt;li>私有连接 (VPC 端点 (VPC endpoint)、PrivateLink) 用于内部服务&lt;/li>
&lt;li>最小化公共 IPv4 暴露，并有充分理由&lt;/li>
&lt;li>子网大小与工作负载扩展对齐&lt;/li>
&lt;li>安全组 (Security Group) 和网络 ACL (NACL) 根据使用的 IP 范围进行调整&lt;/li>
&lt;li>已部署可观测性，用于数据包级别的故障排除&lt;/li>
&lt;/ul>
&lt;p>到了 2025 年，AWS VPC 设计不再仅仅是“选择一个 CIDR 并点击创建”那么简单。
它关乎&lt;strong>面向 IPv6 的未来规划，避免代价高昂的 IPv4 陷阱，实现私有优先的连接，以及从第一天起就设计混合/多云环境&lt;/strong>。&lt;/p>
&lt;p>掌握这些虽小但却至关重要细节的工程师——正确的 CIDR 选择、积极主动的 IPv6 设置、私有优先的理念——将是那些构建&lt;strong>弹性、安全且可扩展的云网络&lt;/strong>，并能够经受未来十年考验的人。&lt;/p></description></item><item><title>我为什么要从 Kubernetes Ingress 迁移到 Gateway API</title><link>https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/</guid><description>&lt;img src="https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/1_rhwXmfU4EZHiwcLjTUxOaQ.png" alt="Featured image of post 我为什么要从 Kubernetes Ingress 迁移到 Gateway API" />&lt;p>对于每一位踏入 Kubernetes 世界的 DevOps 工程师来说，Ingress 通常是他们遇到的第一个资源，甚至可能是他们的“初恋”。当需要简单的 HTTP(S) 路由时，Ingress 就会派上用场，为集群内部的服务打开了通往外部世界的大门。多年来，它一直运行良好。但技术世界永不停歇，需求不断演变，现有解决方案也开始触及其局限性。正是在这种背景下，Gateway API 进入了 Kubernetes 生态系统。&lt;/p>
&lt;p>那么，既然我们已经有了像 Ingress 这样成熟且广泛采用的解决方案，为什么还需要一个新的 API 呢？Gateway API 解决了哪些问题？它缓解了哪些痛点？在这篇博客文章中，我们将探讨我使用 Ingress 的经验、Gateway API 带来的创新，以及为什么这种转变是完全合理的。我们的目标是以技术性强但友好的语调来解释这些内容。&lt;/p>
&lt;h2 id="ingress-的局限性">Ingress 的局限性
&lt;/h2>&lt;p>&lt;strong>注解地狱 (Annotation Hell)：&lt;/strong> Ingress 最大的缺点之一是它对注解 (annotations) 的依赖，以实现高级功能。对于限流 (rate limiting)、URL 重写 (URL rewrites)、请求体大小限制 (body size limits)、CORS 设置 (CORS settings) 等类似功能，我们不得不使用每个 Ingress 控制器 (Ingress Controller) 特定的注解。这导致了不同 Ingress 控制器（Nginx、Traefik、HAProxy 等）之间的不一致性。您在使用 Nginx Ingress 时编写的注解，在切换到 Traefik 后可能会变得毫无意义。当然，如果您像我一样通常只使用 Nginx Ingress，这可能对您来说不是问题，但未来您可能需要替代方案。&lt;/p>
&lt;p>&lt;strong>缺乏高级流量管理：&lt;/strong> Ingress 自身不足以支持现代部署策略，例如金丝雀部署 (canary deployments) 和蓝绿部署 (blue/green deployments)。这些场景通常需要额外的工具，比如服务网格 (Service Mesh) 或复杂的注解组合。这增加了架构的复杂性和运维开销 (operational overhead)。&lt;/p>
&lt;p>&lt;strong>协议限制：&lt;/strong> Ingress 从根本上是为 HTTP 和 HTTPS 流量设计的。它没有内置支持其他协议，如 TCP 和 UDP。这使得在 Kubernetes 上运行使用不同协议的应用程序时，需要寻找替代解决方案。&lt;/p>
&lt;h2 id="为什么选择-gateway-apikubernetes-流量管理的新时代">为什么选择 Gateway API？Kubernetes 流量管理的新时代
&lt;/h2>&lt;p>考虑到 Ingress 的局限性，Kubernetes 社区认识到需要一种更全面、更灵活的流量管理解决方案。Gateway API 应运而生。Gateway API 不仅支持 HTTP(S) 流量，还支持 TCP 和 UDP 等其他协议。它提供了一个基于角色且可扩展的结构。让我们深入了解 Gateway API 的核心组件以及它解决的问题：&lt;/p>
&lt;p>Gateway API 围绕三个主要的自定义资源定义 (Custom Resource Definitions, CRDs) 构建：&lt;/p>
&lt;p>&lt;strong>GatewayClass：&lt;/strong> 该资源定义了网关 (Gateway) 的行为和功能。就像 Ingress Controllers 一样，不同的 Gateway Controllers (例如 NGINX Gateway) 提供自己的 GatewayClass。&lt;/p>
&lt;p>&lt;strong>Gateway：&lt;/strong> 该资源表示集群中的一个网络网关，通常是一个负载均衡器或代理。它定义了监听器 (listeners)，并指定哪些路由 (Route) 对象可以附加到这些监听器。例如，一个 Gateway 对象可能在 80 端口和 443 端口监听 HTTP 和 HTTPS 流量。&lt;/p>
&lt;p>&lt;strong>Route：&lt;/strong> Route 资源定义了到达 Gateway 的流量应如何路由。HTTPRoute 用于 HTTP/HTTPS 流量，而 TCPRoute 和 UDPRoute 等其他类型则用于不同的协议。路由根据主机 (host)、路径 (path)、请求头 (headers) 等匹配流量，并将其路由到后端服务 (backend services)。这是开发人员可以定义自己的路由规则的地方。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/1__1TVbXaobEeF2gWCENYxkw.png"
width="640"
height="560"
srcset="https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/1__1TVbXaobEeF2gWCENYxkw_hu_9a9ca8f5c7e8bae2.png 480w, https://martinliu.cn/blog/why-im-moving-from-kubernetes-ingress-to-gateway/1__1TVbXaobEeF2gWCENYxkw_hu_51ef272340507958.png 1024w"
loading="lazy"
alt="Gateway API 架构图"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="274px"
>&lt;/p>
&lt;p>这种三层结构完美地实现了 Gateway API 最重要的创新之一：关注点分离 (separation of concerns)。&lt;/p>
&lt;p>&lt;strong>基础设施提供商 (Infrastructure Providers)：&lt;/strong> 管理 GatewayClass 并决定可以使用哪些 Gateway Controllers。&lt;/p>
&lt;p>&lt;strong>集群操作员 (Cluster Operators)：&lt;/strong> 创建和管理 Gateway 对象。这包括面向公众的配置、监听器和基本的安全设置。&lt;/p>
&lt;p>&lt;strong>应用程序开发人员 (Application Developers)：&lt;/strong> 为其应用程序定义 Route 对象，例如 HTTPRoute。这些规则包括基于主机/路径/请求头的路由、流量拆分 (traffic splitting) 和重写 (rewrites)。&lt;/p>
&lt;h2 id="实践示例">实践示例
&lt;/h2>&lt;p>假设我们有以下 Ingress 资源，它通过 k8senol.com 根据路径将流量路由到两个服务（message-service 和 swap-service）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">oldfriend-ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx.ingress.kubernetes.io/rewrite-target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/message&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pathType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Prefix&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">message-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/swap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pathType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Prefix&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">swap-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，让我们使用 Gateway API 通过三个步骤（GatewayClass、Gateway 和 HTTPRoute）来实现相同的场景。&lt;/p>
&lt;p>&lt;strong>第一步：&lt;/strong> 定义 GatewayClass 首先，我们需要创建一个 GatewayClass 来指定将使用的 Gateway Controller。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GatewayClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol-gw-class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">controllerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol.com/gateway-controller&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 YAML 定义了一个由 k8senol.com/gateway-controller 控制器管理的网关类 (GatewayClass)。在实际应用中，这个值会是你所使用的网关控制器 (Gateway Controller) 的具体名称（例如，gateway.nginx.org/nginx-gateway-controller）。&lt;/p>
&lt;p>&lt;strong>第二步 Step 2: 创建网关 (Gateway)&lt;/strong>
接下来，我们将创建网关 (Gateway) 资源，它将集群暴露给外部流量，并定义要监听的端口和协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol-gw-class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*.k8senol.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">allowedRoutes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Same&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个网关 (Gateway) 对象使用 k8senol-gw-class 监听端口 80 上的 HTTP 流量。主机名 “*.k8senol.com” 允许该域下的所有子域名进行路由。allowedRoutes 部分限制路由 (Route) 附件只能在同一命名空间（默认）中。&lt;/p>
&lt;p>&lt;strong>第三步: 创建 HTTP 路由 (HTTPRoute)&lt;/strong>
最后，我们使用 HTTP 路由 (HTTPRoute) 对象来定义路由规则。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPRoute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol-routes&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parentRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8senol-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostnames&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;k8senol.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">matches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PathPrefix&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/message&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backendRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">message-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">matches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PathPrefix&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/swap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backendRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">swap-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 HTTP 路由 (HTTPRoute) 对象附加到 k8senol-gateway。hostnames 字段将这些规则应用于 k8senol.com。rules 部分复制了 Ingress (Ingress) 的路由逻辑：/message 路由到 message-service，/swap 路由到 swap-service。&lt;/p>
&lt;p>如你所见，单个 Ingress YAML 现在在 Gateway API 中被拆分为三个不同的资源。虽然这最初看起来更复杂，但每个资源都有明确的职责。从长远来看，这会带来更清晰、更易管理且更安全的流量管理架构。&lt;/p>
&lt;p>Kubernetes Ingress 毫无疑问是 Kubernetes 生态系统的基石，在将服务暴露给外部世界方面发挥了关键作用。凭借其简单易懂的结构，它在早期阶段为我们提供了良好的服务。但随着技术发展和需求变得日益复杂，对灵活强大解决方案的需求也随之增长。&lt;/p>
&lt;p>Gateway API 应运而生，以应对 Ingress (Ingress) 的局限性，并将 Kubernetes 流量管理提升到一个全新的水平。凭借角色分离、可扩展性、多协议支持和高级流量控制能力，它能更有效地满足现代云原生应用的需求。&lt;/p>
&lt;p>这不仅仅是技术上的变革。它也反映了我们对 Kubernetes 中网络认知的转变。从今天开始探索 Gateway API 是朝着构建更强大、更灵活、更易管理的基础设施迈出的有意义的一步。&lt;/p>
&lt;p>请记住，持续学习和适应是 DevOps (DevOps) 世界成功的关键。这次转型不仅会提升你的技术技能，还会提高你理解和管理复杂系统的能力。&lt;/p></description></item></channel></rss>