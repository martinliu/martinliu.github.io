<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on Martin Liu's Blog</title><link>https://martinliu.cn/tags/github/</link><description>Recent content in Github on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 25 Jun 2024 21:44:26 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>推荐尝试 Github 系列认证考试</title><link>https://martinliu.cn/blog/github-certifications-ga/</link><pubDate>Thu, 25 Jan 2024 09:38:21 +0800</pubDate><guid>https://martinliu.cn/blog/github-certifications-ga/</guid><description>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/Collaboration-DarkMode-2.webp" alt="Featured image of post 推荐尝试 Github 系列认证考试" />&lt;blockquote>
&lt;p>通过GitHub认证释放您的全部潜力！获得GitHub认证将让您在展示为GitHub专家方面具有竞争优势。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/Certifiedtocat_full__2_.svg"
loading="lazy"
alt="cert"
>&lt;/p>
&lt;p>认证是打开职业机会之门的黄金钥匙，可以为您的职业生涯提供强大动力，提升工作效率，增加薪资。对雇主而言，认证是增加生产力的秘密武器，它在招聘过程中为您的技能提供不可辩驳的证明，并在组织内激发创新。&lt;/p>
&lt;p>之前GitHub的认证计划，仅供员工和合作伙伴使用，现在已经向全球所有客户开放！现在每个人都可以访问注册站点，开始学习并准备考试。&lt;/p>
&lt;h2 id="4-门认证课程">4 门认证课程
&lt;/h2>&lt;p>获得GitHub认证将让您在展示为GitHub专家方面具有竞争优势。让我们来看看每个路径。&lt;/p>
&lt;h3 id="github基础认证">GitHub基础认证
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/foundations-river-image__1_.png"
width="616"
height="424"
srcset="https://martinliu.cn/blog/github-certifications-ga/foundations-river-image__1__hu_2d8d71a98704feab.png 480w, https://martinliu.cn/blog/github-certifications-ga/foundations-river-image__1__hu_bf4222962f0b0669.png 1024w"
loading="lazy"
alt="foundations"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>GitHub基础认证计划：旨在向初学者介绍GitHub平台的基本概念和产品。您将学习如何使用git，并探索GitHub的核心功能，如存储库管理、提交、分支、合并和项目管理。您还将了解如何为GitHub上的开源项目做贡献，并有效地使用markdown。您可以在此查看完整课程表（&lt;a class="link" href="https://learn.microsoft.com/en-us/collections/o1njfe825p602p" target="_blank" rel="noopener"
>https://learn.microsoft.com/en-us/collections/o1njfe825p602p&lt;/a>），以了解此路径中涵盖的更多主题。&lt;/p>
&lt;h3 id="github-actions认证">GitHub Actions认证
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/actions-river-image__1_.png"
width="616"
height="424"
srcset="https://martinliu.cn/blog/github-certifications-ga/actions-river-image__1__hu_a6194764b3d2b46.png 480w, https://martinliu.cn/blog/github-certifications-ga/actions-river-image__1__hu_8cf95db2f344148d.png 1024w"
loading="lazy"
alt="Actions"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>GitHub Actions证书:向您介绍GitHub Actions，以便您可以学会自动化软件开发工作流程。您将学习如何构建CI/CD管道，管理GitHub Actions，以及许多其他内容。到最后，您将准备好成为团队中处理所有与操作有关事务的人。在此查看完整课程表（&lt;a class="link" href="https://learn.microsoft.com/en-us/collections/n5p4a5z7keznp5" target="_blank" rel="noopener"
>https://learn.microsoft.com/en-us/collections/n5p4a5z7keznp5&lt;/a>）。&lt;/p>
&lt;h3 id="github高级安全认证">GitHub高级安全认证
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/ghas-river-image__1_.png"
width="616"
height="424"
srcset="https://martinliu.cn/blog/github-certifications-ga/ghas-river-image__1__hu_17ec739f15db771e.png 480w, https://martinliu.cn/blog/github-certifications-ga/ghas-river-image__1__hu_a800ab9e3162675a.png 1024w"
loading="lazy"
alt="security"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>GitHub高级安全（GHAS）证书：旨在教您如何在开发生命周期的每个阶段使用高级安全功能保护您的代码。GHAS专门针对GitHub企业版，因此该证书旨在供企业开发人员评估和配置私有存储库上的秘密扫描、使用CodeQL进行代码扫描、依赖关系管理等等。在此查看完整课程表（&lt;a class="link" href="https://learn.microsoft.com/en-us/collections/rqymc6yw8q5rey" target="_blank" rel="noopener"
>https://learn.microsoft.com/en-us/collections/rqymc6yw8q5rey&lt;/a>）。&lt;/p>
&lt;h3 id="github管理认证">GitHub管理认证
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/admin-river-image__1_.png"
width="616"
height="424"
srcset="https://martinliu.cn/blog/github-certifications-ga/admin-river-image__1__hu_a881318741ef0a46.png 480w, https://martinliu.cn/blog/github-certifications-ga/admin-river-image__1__hu_dd14ceb3b74a2667.png 1024w"
loading="lazy"
alt="admin"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="348px"
>&lt;/p>
&lt;p>GitHub管理认证:将教您如何维护一个健康、强大和安全的GitHub环境，以满足组织的需求。您可以在此查看完整课程表（&lt;a class="link" href="https://learn.microsoft.com/en-us/collections/mom7u1gzjdxw03" target="_blank" rel="noopener"
>https://learn.microsoft.com/en-us/collections/mom7u1gzjdxw03&lt;/a>）。&lt;/p>
&lt;h2 id="学习备考指南">学习备考指南
&lt;/h2>&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/image2.webp"
width="1999"
height="650"
srcset="https://martinliu.cn/blog/github-certifications-ga/image2_hu_fc9e1ee155ec528b.webp 480w, https://martinliu.cn/blog/github-certifications-ga/image2_hu_8688e8ec828626f9.webp 1024w"
loading="lazy"
alt="guide"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="738px"
>&lt;/p>
&lt;p>GitHub认证官网为每个认证计划创建了详细的学习指南。您可以从此存储库【&lt;a class="link" href="https://github.com/LadyKerr/github-certification-guide" target="_blank" rel="noopener"
>https://github.com/LadyKerr/github-certification-guide&lt;/a>】获取每个证书的学习指南，以及帮助您准备考试的资源。&lt;/p>
&lt;p>每一门课程的学习资料都可以在微软学习网站上免费访问并学习。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/2024-01-25_09-58-51.png"
width="1039"
height="1250"
srcset="https://martinliu.cn/blog/github-certifications-ga/2024-01-25_09-58-51_hu_b70f4e64439d49e3.png 480w, https://martinliu.cn/blog/github-certifications-ga/2024-01-25_09-58-51_hu_71ae70ff13ad6661.png 1024w"
loading="lazy"
alt="learn"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="199px"
>&lt;/p>
&lt;p>建议的学习路径是：&lt;/p>
&lt;ol>
&lt;li>GitHub Foundations ：【推荐】这虽然是一门基础的课程，但是可以说它为你提供了非常丰富的学习内容，包括：GitHub Copilot、Codespaces。还涵盖了项目管理、如何参与开源项目、安全防护代码仓库、处理 PR 等高级内容。即使不一定参加考试，也建议完成的学习一遍。适合人群：想更多了解 GitHub 的人群。&lt;/li>
&lt;li>GitHub Actions：【推荐】这门课程主要是讲解 GitHub Actions 的使用，包括：如何使用 GitHub Actions、如何创建流水线进行 CI、如何管理软件包、如何开发和发布 GitHub Actions 等。适合人群：长期在工作在 GitHub 项目上的人群，你想在项目上使用自动化的 DevOps 流水线和 CI、CD 实践。&lt;/li>
&lt;li>GitHub Advanced Security：【可选】这门课程主要是讲解 GitHub 的安全防护，在 GitHub 上如何做 DevSecOps，需要的产品功能是GitHub企业版的附加功能，如果你的公司没有购买 GitHub企业版，那么这门课程并不适合学习。&lt;/li>
&lt;li>GitHub Administration：【可选】这门课程主要是讲解：如果你是你们公司的一名 GitHub 管理员，你如何维护一个健康、强大、安全的 GitHub 环境，以满足组织的需求。如果你不是你们公司的 GitHub 管理员，或者没有这个想法，那么这门课程可以不用学习。&lt;/li>
&lt;/ol>
&lt;p>在学习完之后，如果你想报名考试，请访问：&lt;a class="link" href="https://examregistration.github.com/overview" target="_blank" rel="noopener"
>https://examregistration.github.com/overview&lt;/a>&lt;/p>
&lt;p>每一门认证考试的费用是 $99，；由于这个培训认证是刚刚 GA 不久，目前 “GitHub基础认证” 认证考试是打折促销，折后只需要
$49 。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/2024-01-25_10-56-28.png"
width="1414"
height="1047"
srcset="https://martinliu.cn/blog/github-certifications-ga/2024-01-25_10-56-28_hu_1f814bf84f1abeea.png 480w, https://martinliu.cn/blog/github-certifications-ga/2024-01-25_10-56-28_hu_79b8a134c63ba19b.png 1024w"
loading="lazy"
alt="exam"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>我目测了一下考试的范围和难度：感觉广度是一个挑战，毕竟不是每个人都会参与项目管理、协作、安全、开源/内源这些相关的工作内容。深度上应该不太难，毕竟假如你是天天在 GitHub 上工作的人，都会有一定最基础的经验。建议可以先学习了在说，毕竟学习的内容是免费的。如果想报名考试，报名和考试都是线上进行的，还是比较方便的，特别是 GAF 的折后价格还不错。&lt;/p>
&lt;p>在考试通过之后，就可以获取Credly验证的凭证：您将收到Credly徽章和证书，以验证您的资格。就像其他的电子徽章一样，你可以发朋友圈或者在 LinkedIn 上展示你的徽章。&lt;/p>
&lt;p>下面是四种GitHub认证考试的徽章：GitHub基础、GitHub Actions、GitHub高级安全和GitHub管理。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/github-certifications-ga/image1.webp"
width="1999"
height="501"
srcset="https://martinliu.cn/blog/github-certifications-ga/image1_hu_65bd3c947f322694.webp 480w, https://martinliu.cn/blog/github-certifications-ga/image1_hu_7f5d6ad3e12e38a3.webp 1024w"
loading="lazy"
alt="4 cert"
class="gallery-image"
data-flex-grow="399"
data-flex-basis="957px"
>&lt;/p>
&lt;p>GitHub 的官网和微软的学习网站所提供的学习资料和备考指南手册文档都是丰富且详尽的。如果您对认证计划有任何疑问，请务必查看官方的FAQ页面「&lt;a class="link" href="https://examregistration.github.com/faq" target="_blank" rel="noopener"
>https://examregistration.github.com/faq&lt;/a>」和备考人手册『&lt;a class="link" href="https://examregistration.github.com/handbook" target="_blank" rel="noopener"
>https://examregistration.github.com/handbook&lt;/a>』。&lt;/p></description></item><item><title>更新到 Jimmy Cai 的 Stack Hugo Theme</title><link>https://martinliu.cn/blog/change-to-jimmy-stack-theme/</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><guid>https://martinliu.cn/blog/change-to-jimmy-stack-theme/</guid><description>&lt;img src="https://martinliu.cn/blog/change-to-jimmy-stack-theme/2022-10-1-beijing-guomao.jpg" alt="Featured image of post 更新到 Jimmy Cai 的 Stack Hugo Theme" />&lt;p>趁着更新 Blog 皮肤的机会，也把我拖延很久的一些优化补一补。&lt;/p>
&lt;p>最新版本的 Hugo 可以使用 Hugo modules 功能加载一个新的 Theme，我是第一次通过这种方式添加新皮肤，犯了几个错误：&lt;/p>
&lt;ol>
&lt;li>首先不应该用 &lt;code>git clone theme-url theme/&lt;/code> 或者其他手工下载的方式了，应该使用文档中说的 &lt;code>hugo mod get -u github.com/CaiJimmy/hugo-theme-stack/v3&lt;/code> 方法。&lt;/li>
&lt;li>在本地测试的话，需要确保本地的 Hugo 安装的是 extended 的扩展版本，否则有些短代码用不了。用这条命令检查 &lt;code>hugo version&lt;/code> ，应该返回类似这样的信息：&lt;code>hugo v0.104.2+extended darwin/arm64 BuildDate=unknown&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>更新了 GitHub Action 的工作流，实现了如下的想法：&lt;/p>
&lt;ul>
&lt;li>deploy-2-page.yml : 在所有分支的 push 操作上触发构建动作，并且把更新的网站内容发布到 GitHub Pages 的部署分支中，用这个方式实现线上的网站内容预览；当新的分支在本地预览正常后，就可以 push 到远程了，push 之后就可以先在 martinliu.github.io 的域名下实现分支合并前的线上预览，如果线上预览正常的话，在进行合并分支 pr 的操作；如果线上预览有问题，则继续在本地更新，直到线上预览正常之后在合并。&lt;/li>
&lt;li>page-deploy.yml : 当 master 分支上收到 pr 时触发这个发布操作，我将 GitHub Pages 的免费空间当做了发布前的预览的空间；而网站的内容是通过 CloudFlare 的 Pages 功能 host 的。通过这种方式，将 GitHub 的所有功能和空间作为开发服务；而 CloudFlare 定位为 DNS 和静态内的生产环境。&lt;/li>
&lt;/ul>
&lt;p>目前我的 blog 的工作流程是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第一步：在本地创建新的分支，并 push 同步到远程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> git branch build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> git checkout build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">M themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Switched to branch &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> git push origin build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, reused &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Create a pull request &lt;span class="k">for&lt;/span> &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span> on GitHub by visiting:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: https://github.com/martinliu/martinliu.github.io/pull/new/build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * &lt;span class="o">[&lt;/span>new branch&lt;span class="o">]&lt;/span> build-your-best-rack -&amp;gt; build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第二步：用 hugo 命令创建新文章的文件，然后开始编写更新新文章&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> hugo new content/post/build-your-best-rack/index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content &lt;span class="s2">&amp;#34;/Users/martinliu/code/martinliu.github.io/content/post/build-your-best-rack/index.md&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第三步：本地预览正常后，push 到 GitHub Pages 空间在远程预览 https://martinliu.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> ✗ git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> ✗ git commit -m &lt;span class="s2">&amp;#34;review new post online&amp;#34;&lt;/span>&lt;span class="o">[&lt;/span>build-your-best-rack e21fffe8f&lt;span class="o">]&lt;/span> review new post online
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> file changed, &lt;span class="m">6&lt;/span> insertions&lt;span class="o">(&lt;/span>+&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create mode &lt;span class="m">100644&lt;/span> content/post/build-your-best-rack/index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> git push --set-upstream origin build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enumerating objects: 9, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Counting objects: 100% &lt;span class="o">(&lt;/span>9/9&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Delta compression using up to &lt;span class="m">10&lt;/span> threads
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Compressing objects: 100% &lt;span class="o">(&lt;/span>5/5&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Writing objects: 100% &lt;span class="o">(&lt;/span>6/6&lt;span class="o">)&lt;/span>, &lt;span class="m">540&lt;/span> bytes &lt;span class="p">|&lt;/span> 540.00 KiB/s, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total &lt;span class="m">6&lt;/span> &lt;span class="o">(&lt;/span>delta 3&lt;span class="o">)&lt;/span>, reused &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Resolving deltas: 100% &lt;span class="o">(&lt;/span>3/3&lt;span class="o">)&lt;/span>, completed with &lt;span class="m">3&lt;/span> &lt;span class="nb">local&lt;/span> objects.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 49d889b6e..e21fffe8f build-your-best-rack -&amp;gt; build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">branch &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span> &lt;span class="nb">set&lt;/span> up to track &lt;span class="s1">&amp;#39;origin/build-your-best-rack&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第四步：在 GitHub 上发起并合并 pr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第五步：删除本地特性分支，删除远程特性分支，更新本地 master 分支。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>change-to-new-theme&lt;span class="o">)&lt;/span> git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">warning: unable to rmdir &lt;span class="s1">&amp;#39;themes/hugo-theme-stack&amp;#39;&lt;/span>: Directory not empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Switched to branch &lt;span class="s1">&amp;#39;master&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your branch is behind &lt;span class="s1">&amp;#39;origin/master&amp;#39;&lt;/span> by &lt;span class="m">5&lt;/span> commits, and can be fast-forwarded.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>use &lt;span class="s2">&amp;#34;git pull&amp;#34;&lt;/span> to update your &lt;span class="nb">local&lt;/span> branch&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git push origin --delete origin/change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: unable to delete &lt;span class="s1">&amp;#39;origin/change-to-new-theme&amp;#39;&lt;/span>: remote ref does not exist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: failed to push some refs to &lt;span class="s1">&amp;#39;github.com:martinliu/martinliu.github.io.git&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git push origin --delete change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &lt;span class="o">[&lt;/span>deleted&lt;span class="o">]&lt;/span> change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据这款新皮肤的提示，我查看了最新的 Hugo 的文档，为了发挥这个皮肤的图像 resize 功能，并且遵从新的编写 post 的规范。以后的所有新文章的 md 文件和图片文件都需要放到一个独立的新目录中。&lt;/p>
&lt;p>新创建一篇 post 的时候使用这个命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">hugo new content/post/new-blog-test/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在站点的根目录下执行这条命令后，会帮你创建新的目录和 &lt;code>index.md&lt;/code> 文件；由于我的站点默认使用了中文语言，因此，如果我想写一篇英文的文章的话，我就需要将 md 文件的名字写成 &lt;code>index.en.md&lt;/code> ；这个皮肤支持双语的，如果这篇文章也有中英两个版本的话，md 文件就应该有两个：&lt;/p>
&lt;ul>
&lt;li>index.zh-cn.md&lt;/li>
&lt;li>index.en.md&lt;/li>
&lt;/ul>
&lt;p>这样就有了中英文的两个独立的页面，而且两种语言各自的页面上，都会有一个语言切换的按钮，所以这个皮肤对于双语，或者多语言写作的人来说，应该是非常顺手的一个选择。我将主导航的那些页面都做出了双语的版本。&lt;/p>
&lt;p>由于，我最后的所有静态文件和图片都发布到了 CloudFlare 的 Pages 服务里，而且它们还提供 CDN 服务，而这个功能在 GitHub Pages 空间中是不提供的。因此，以前我用 GitHub Pages host 这个 blog 的时候，每次编写和发布新文章的时候，还需要手工的将图片上传到其它第三方的图床空间中，然后在更新 md 文章中图片的网址，其实还是比较繁琐和麻烦的。&lt;/p>
&lt;p>这个国庆节期间，我基本上也完成了 home lab 的 Rack 搭建项目，初步效果如下：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack.png"
width="1500"
height="2000"
srcset="https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack_hu_9aa50c3be1172a6a.png 480w, https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack_hu_e9ee8736487eda9d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>以上这张图片放置在了和 md 文件相同的目录中，插入这张图片的代码就变得异常简单了 &lt;code>![](new-rack.png)&lt;/code> ；而且图片也被拉伸到了和文章页面宽度等宽，大小合适的情况下会充满页面宽度，而且能够自适应浏览器显示器的宽度。&lt;/p>
&lt;p>后续会出一些关于这个 home lab 的文章。&lt;/p>
&lt;p>关于这个皮肤的使用文档，请访问： &lt;a class="link" href="https://docs.stack.jimmycai.com/" target="_blank" rel="noopener"
>https://docs.stack.jimmycai.com/&lt;/a>&lt;/p>
&lt;p>如果你也喜欢这个风格的皮肤，请查看： &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>hugo-theme-stack-stater&lt;/a>&lt;/p>
&lt;p>遗留问题：&lt;/p>
&lt;ul>
&lt;li>左上角的头像图片无法正常显示&lt;/li>
&lt;li>添加一种免费好用的评论互动插件&lt;/li>
&lt;li>增加搜索功能&lt;/li>
&lt;/ul></description></item><item><title>在本地搭建容器化的 Drupal 开发环境</title><link>https://martinliu.cn/blog/setup-drupal-dev-env-macos/</link><pubDate>Sat, 05 Feb 2022 11:11:55 +0800</pubDate><guid>https://martinliu.cn/blog/setup-drupal-dev-env-macos/</guid><description>&lt;img src="https://martinliu.cn/img/989197bbd274de342caf84c3642d8c6bc7b980ea-1920x700.png" alt="Featured image of post 在本地搭建容器化的 Drupal 开发环境" />&lt;p>过年前给自己挖了一个 Drupal 的坑，经过一些时间的研究之后，感觉这个系统和 Remedy 非常神似。说到底它们其实都是表单系统。每个表单表达一种分类的信息而已。Drupal 注重的是表单上的信息点的记录、管理和展示，Remedy 注重的则是每种表单（工作类型）上“工单流程状态”字段变化的记录和管理。&lt;/p>
&lt;p>&lt;a class="link" href="https://DevOpsChina.org" target="_blank" rel="noopener"
>DevOps China&lt;/a> 网站的选型之旅，最初使用的是 hugo，但是由于内容更新人员们对 github 系统掌握程度参差不齐，导致对于参与者不友好的问题，这为所有社区内容创建的朋友们设置了一个不必要的门槛。最初设计的是：以官网的内容为最源头参考点，然后同步到其它平台，包括：微信和互动吧等社区对外到入口。最后，微信公众号后台文案编辑的易用性超越了 GitHub 上 Hugo 站点的更新。社区网站维护志愿者也很难投入足够的精力，手工的从微信上同步回社区官网。就这样社区官网的及时更新问题居然持续了两年。&lt;/p>
&lt;p>2022年是解决这个问题的时候了。在对 Drupal 经过一定的研究之后，希望这次选型的 Drupal 能不负众望，完美的实现这个艰巨的使命。&lt;a class="link" href="https://stackoverflow.blog/2020/06/23/is-it-time-to-give-drupal-another-look/" target="_blank" rel="noopener"
>【 why drupal ？ 参考文章】&lt;/a>&lt;/p>
&lt;h2 id="drupal-是个内容管理系统">Drupal 是个内容管理系统
&lt;/h2>&lt;p>在 macOS 上搭建 PHP + MySQL 的开发环境的工具有很多。我选择使用的是已经绝版的 Acquia Dev Desktop 2 ，它包括了：php 7.3.15 的 php 语言运行环境， MySQL 5.7.29 数据库， Apache/2.4.29 的网页运行服务器， phpMyAdmin 4.9.0.1 数据库管理工具。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2022-02-05-2022-02-05_11-08-30.png"
loading="lazy"
alt="Acquia Dev Desktop 2"
>&lt;/p>
&lt;p>这种集成的 PHP 运行/开发/管理环境，还有很多其它选择，这里不展开。我的目标是：保持最简化和易用，与其它社区伙伴的协作，紧跟 Drupal 版本发布和补丁更新，用容器化实现云上的按需扩展。&lt;/p>
&lt;p>首先，我使用 Acquia Dev Desktop 2 创建了一个本地的测试站点，用于学习 Drupal 的使用、定制和开发。它不仅是一个友好的 GUI 工具，其实还附带了 php 开发环境的命令行工具：composer 和 drush 。 使用这两个命令行工具可以完成 Drupal 系统的一键式搭建。在开发一个真实的内容管理系统网站以前，最基础的铺垫工作可能差不多了。&lt;/p>
&lt;h2 id="一键安装-drupal-系统">一键安装 Drupal 系统
&lt;/h2>&lt;p>首先，打开 Acquia Dev Desktop 2 ，在界面上点击进入命令行按钮（more -&amp;gt; Open Console）。macOS 系统默认的 termenal 就会被打开，它会在默认环境中增加如下环境变量参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Last login: Sat Feb &lt;span class="m">5&lt;/span> 10:25:58 on ttys005
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PHP_ID&lt;/span>&lt;span class="o">=&lt;/span>php7_3&lt;span class="p">;&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/Applications/DevDesktop/php7_3_x64/bin:/Applications/DevDesktop/mysql/bin:/Applications/DevDesktop/tools:&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;/Users/martin/learning-drupal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以在你的目标目录中，执行下面的一键安装脚本了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 下载Drupal特定版本的代码库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer create-project drupal/recommended-project:9.3.5 drupal-dev --no-interaction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> drupal-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置以下可以让我们静默安装 drush 的参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer config --no-plugins allow-plugins.composer/installers &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer config --no-plugins allow-plugins.drupal/core-composer-scaffold &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer config --no-plugins allow-plugins.drupal/core-project-message &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 Drupal 站点维护工具 drush&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer require drush/drush --no-interaction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s vendor/drush/drush/drush ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./drush version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">composer require drush/config-extra --no-interaction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建目标 MySQL 数据库和用户名/密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysqladmin -u root drop local_devopschina -f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql -u root -e &lt;span class="s1">&amp;#39;create database local_devopschina&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql -u root -e &lt;span class="s2">&amp;#34;grant all privileges on local_devopschina.* to ddoc@localhost identified by &amp;#39;ddoc123&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上面的一切都是为了这个命令可以静默安装，它替代了很多 php 开发的系统在网页上用安装程序进行的初始化工作，下面的数据库 root 密码为空&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./drush si standard --locale&lt;span class="o">=&lt;/span>zh-hans --db-url&lt;span class="o">=&lt;/span>mysql://ddoc:ddoc123@127.0.0.1:33067/local_devopschina --db-su&lt;span class="o">=&lt;/span>root --site-name&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DevOps China&amp;#34;&lt;/span> --account-name&lt;span class="o">=&lt;/span>admin --account-pass&lt;span class="o">=&lt;/span>admin -y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装和启用 Drupal 系统必要的模块和皮肤 【ToDo】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生产环境数据迁移，数据库备份的导入，相关文件下载 【ToDo】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动 Drupal 系统&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./drush runserver localhost:8090
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上是一个写死了的 shell 脚本，还可以对其中的关键参数进行变量替换，使之最终成为一个可以传入参数的可用脚本。&lt;/p>
&lt;h2 id="进入-drupal-开发流程">进入 Drupal 开发流程
&lt;/h2>&lt;p>下图展示了 Drupal 网站开发的工作流程。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2022-02-05-Drupal-Site-Building-Workflow.png"
loading="lazy"
alt="Drupal Site Building workflow"
>&lt;/p>
&lt;p>用下面的表格梳理一下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>序号&lt;/th>
&lt;th>工作内容&lt;/th>
&lt;th>概述&lt;/th>
&lt;th>所需要技能&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.0&lt;/td>
&lt;td>Content Type&lt;/td>
&lt;td>既是任何一条内容对象的完整定义，也是任何一个可管理实体。系统默认自带了‘文章’和‘基本页面’两个内容类型，隐含的具备了简单的 ‘用户’ 管理系统。在此基础上还需扩展出‘社区合作伙伴’、‘社区活动’等实地。&lt;/td>
&lt;td>数据库ER设计、数据结构&lt;/td>
&lt;td>并不需要在 MySQL 中建表，都是在 Drupal 界面完成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.0&lt;/td>
&lt;td>Fields&lt;/td>
&lt;td>是组成任何内容和实体数据结构的信息点，包含PHP编程语言的数据类型和Drupal 社区里的各种模块，例如‘电话号码’这样的数据结构的引用就是先启用对应的模块&lt;/td>
&lt;td>php开发&lt;/td>
&lt;td>Drupal 社区已有模块不满足才做开发&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.1&lt;/td>
&lt;td>Taxonomy&lt;/td>
&lt;td>就像是一个二位数组，在每一个分类里有一堆确切的词汇表。例如社区网站的文章、活动和论坛里的帖子都可以引用“话题”这样一个字段，用于单选或者多选，“话题”这个字段里包含了很多DevOps术语“ci”、“敏捷”、“SRE”等。&lt;/td>
&lt;td>领域知识、数据机构&lt;/td>
&lt;td>随着网站内容建设的过程而演进&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.2&lt;/td>
&lt;td>Media&lt;/td>
&lt;td>文档、音频、图片和视频的统一管理，这样方便任意媒体文件的使用；Drupal 9 自带的 Media Libary 模块能够满足需求&lt;/td>
&lt;td>数字媒体管理、CDN加速&lt;/td>
&lt;td>所有用户生成媒体都在这个范畴，会严重影响网站速度，依赖与网站 CDN 加速的实施&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.3&lt;/td>
&lt;td>Modules&lt;/td>
&lt;td>Drupal 模块非常丰富，从电话号码这样的数据结构，到文本地址到百度地图的转化，到整个知识库结构的定义；社区参与者积分和排名这样的功能将会使用自开发的模块实现&lt;/td>
&lt;td>php开发、数据库&lt;/td>
&lt;td>需要懂 php 开发语言，可独立开发&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.0&lt;/td>
&lt;td>Path&lt;/td>
&lt;td>每一个内容实体在 Drupal 中被称之为 node，它们都有默认的访问路径，例如：/node/12/；需要整体规划网站的访问路径，不但让网站变得更加有条理，而且还会提高人和搜索引擎的友好程度，Drupal 的相关模块可以实现&lt;/td>
&lt;td>内容系统梳理&lt;/td>
&lt;td>尽量保持简单、清晰和持久&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4.0&lt;/td>
&lt;td>Permessions&lt;/td>
&lt;td>用户权限需要提前设计，Drupal 除了具有内置的权限机制外，它对任何一个功能模块（内容分类）都可以实施给予角色的矩阵式权限设置，需要提前设计好用户角色类型，权限体系&lt;/td>
&lt;td>权限设计、信息安全&lt;/td>
&lt;td>这是实施文章内容上传、论坛和社区活动管理的基础。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4.1&lt;/td>
&lt;td>Workflows&lt;/td>
&lt;td>工作流是 Drupal 系统中默认的功能模块，经过定制以后可以实现社区贡献文章的审核功能。例如开放所有注册用户的投稿权限，投稿文章必须经过审核人员确认后才能发不出来。还可以用于知识库或者编辑的多重审核功能&lt;/td>
&lt;td>流程定制&lt;/td>
&lt;td>需要掌握 Drupal 相关模块的使用，确保流程简单易用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.0&lt;/td>
&lt;td>Layout&lt;/td>
&lt;td>网页布局结构设计，manage display of nodes 这是基础工作 -&amp;gt; blocks -&amp;gt; layout builder -&amp;gt; views -&amp;gt; image styles ，不同的 theme 自带一套 block 的布局&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.1&lt;/td>
&lt;td>Blocks&lt;/td>
&lt;td>实施页面中的每个模块，模块是一个实体可以容纳视频、文字、图片和其他更多，搜索栏，菜单等；他不是内容，是一个 placeholder&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.2&lt;/td>
&lt;td>Layout Builder&lt;/td>
&lt;td>一个核心模块，拖拽式可视化页面设计实施工具，可以为不同的内容类型、实体和其它创建定制的布局。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.3&lt;/td>
&lt;td>Views&lt;/td>
&lt;td>创建数据库查询，过滤和筛选内容，静态的操作或者根据上下文的 。Display【page、block】，format，lields,filter,sort,&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.0&lt;/td>
&lt;td>Add Content&lt;/td>
&lt;td>在以上工作基本完成之后，就可以进入网站内容的填充阶段&lt;/td>
&lt;td>SQL查询&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.1&lt;/td>
&lt;td>Menus&lt;/td>
&lt;td>菜单包括网站的主导航菜单，页脚导航和各个页面上可能使用到的分类选项&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.2&lt;/td>
&lt;td>Site Management&lt;/td>
&lt;td>开发、测试和生产环境之间的迁移和更新流程&lt;/td>
&lt;td>CI、CD、Cloud、DNS、CDN&lt;/td>
&lt;td>用 GitHub 、Docker 和 Azure 等技术实施必要的工作流程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7.0&lt;/td>
&lt;td>Theme&lt;/td>
&lt;td>网站展示风格的开发贯穿于以上所有工作内容的过程中。需要基于某种Drupal网站皮肤作为底板，开发自己的定制皮肤，在需要改进的时候随时调整和更新&lt;/td>
&lt;td>前端开发、CSS&lt;/td>
&lt;td>图片等美工设计需要交付给社区的设计同学&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>为了多人、开放式、实现社区网站开发和内容建设的工作，我们还需要一个项目管理工具。这里可以选用 GitHub ：&lt;a class="link" href="https://github.com/orgs/DevopsChina/projects/1/" target="_blank" rel="noopener"
>https://github.com/orgs/DevopsChina/projects/1/&lt;/a> 用它可以实现以下功能。&lt;/p>
&lt;ul>
&lt;li>任务记录、跟踪和分配&lt;/li>
&lt;li>统一管理多个代码仓库的任务&lt;/li>
&lt;li>任务可以和代码库工作相关，也可以无关&lt;/li>
&lt;li>通过内置的工作流，可以实现代码库 issue &amp;amp; pr 任务的自动关联，状态同步&lt;/li>
&lt;li>可以创建自定义字段的视图，用于不同目的的跟踪，支持任务清单，ToDoList 等视图。&lt;/li>
&lt;/ul>
&lt;p>下一步邀请社区网站工作组召开项目启动会。&lt;/p>
&lt;h2 id="版本化开发环境">版本化开发环境
&lt;/h2>&lt;p>初始化上面所创建的项目文件夹。将其推送到 &lt;a class="link" href="https://github.com/DevopsChina/drupal-dev.git" target="_blank" rel="noopener"
>https://github.com/DevopsChina/drupal-dev.git&lt;/a>&lt;/p>
&lt;p>先参考 Drupal 代码库 web 目录下的样例文件，在项目目录中创建 .gitignore 文件。应该在这两个文件中排出以下文件，处于演示目的，本项目并没有将其排除在外。&lt;/p>
&lt;ul>
&lt;li>.env&lt;/li>
&lt;li>sites/&lt;em>/settings&lt;/em>.php&lt;/li>
&lt;li>sites/&lt;em>/services&lt;/em>.yml&lt;/li>
&lt;/ul>
&lt;p>执行下面的代码推送动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -M main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin https://github.com/DevopsChina/drupal-dev.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在完成了代码库初始化工作后，会设置一下 main 主干保护策略。防止直接对 main 的变更。&lt;/p>
&lt;h2 id="容器化-drupal-系统">容器化 Drupal 系统
&lt;/h2>&lt;p>容器化当前的项目需要经过这些操作步骤：&lt;/p>
&lt;ol>
&lt;li>确认当前 Drupal 系统中的配置和内容，这个状态会打包到容器环境中。用 sqldump 导出数据库。&lt;/li>
&lt;li>参数化 &lt;code>web/sites/settings.php&lt;/code> 文件，将变量和密码变成参数。&lt;/li>
&lt;li>创建 Drupal 主应用镜像的 &lt;code>Dockerfile&lt;/code> 。&lt;/li>
&lt;li>创建包含数据库服务和开发工具服务的 &lt;code>docker-compose.yml&lt;/code> 服务定义文件。&lt;/li>
&lt;li>在本机测试和确认容器服务中 Drupal 网站的可用性和内容。&lt;/li>
&lt;/ol>
&lt;h3 id="1---确认当前系统状态">1 - 确认当前系统状态
&lt;/h3>&lt;p>在经过初始化的配置后，几乎所有系统级别配置信息都保存在了 MySQL 数据库中，用 sqldump 导出 MySQL 数据库，dump 文件会用于 MySQL 容器服务的初始化文件。字段定义、文章编辑、初始化内容的填充也会产生一些数据文件（图片、文件、视频、音频），这些文件就位于 &lt;code>web/sites/default/files/&lt;/code> 目录中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir sql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysqldump -u root local_devopschina &amp;gt; sql/dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在项目文件夹中，执行以上命令，就可以得到的到一个大约十几兆的 MySQL 数据库备份文件。&lt;/p>
&lt;h3 id="2---参数化-drupal-主配置文件">2 - 参数化 Drupal 主配置文件
&lt;/h3>&lt;p>Drupal 的数据库链接字符串和账号信息都位于 &lt;code>web/sites/settings.php&lt;/code> 文件中。为了确保 Drupal 镜像启动后可以链接到正确的 MySQL 数据库服务。需要改此文件。&lt;/p>
&lt;p>原始配置参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$databases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;database&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;local_devopschina&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;ddoc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;ddoc123&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;prefix&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;port&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;33067&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;namespace&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;Drupal\\Core\\Database\\Driver\\mysql&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;driver&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;mysql&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>备份原始配置文件。由于修改以后在本机用 drush 运行的本地测试 Drupal 应用就中断了。后续可以优化一下：保持原始配置文件不变，参数化一个配置文件的副本，在 Drupal 打包过程中加一个参数化配置文件的覆盖替换动作。&lt;/p>
&lt;p>修改为如下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$databases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;default&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">array&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;database&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$_ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;DBASE&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$_ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;USER&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$_ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;PASS&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;prefix&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$_ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;HOST&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;port&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$_ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;DPORT&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;namespace&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;Drupal\\Core\\Database\\Driver\\mysql&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;driver&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;mysql&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上参数化非必要的最佳操作，本文目标在与记录，后续会优化这个步骤。&lt;/p>
&lt;h3 id="3---创建-drupal-主应用镜像">3 - 创建 Drupal 主应用镜像
&lt;/h3>&lt;p>基于 Drupal 官方的镜像文件创建适合自己项目的 &lt;code>Dockerfile&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> drupal:9-php7.4-apache&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nb">set&lt;/span> -eux&lt;span class="p">;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> apt-get update&lt;span class="p">;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> apt-get install -y --no-install-recommends git&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后运行 docker build 命令，确认本地可以成功构建这个自定义镜像。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker build -t devopschina/drupal-dev .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker image
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本测试镜像创建成功后，没有镜像上传的动作，镜像上传到特定的镜像仓库后，就可以实现在云容器服务中的部署。这里省略此 push 步骤。&lt;/p>
&lt;h3 id="4---创建服务定义文件">4 - 创建服务定义文件
&lt;/h3>&lt;p>为了简化本地测试，这里使用 docker-compose 工具。创建包含数据库服务和开发工具服务的 &lt;code>docker-compose.yml&lt;/code> 服务定义文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.1&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 mysql 作为后端数据库&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql:5.7&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">devopschina_db&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 用本地当前路径 sql 目录中的 sql dump文件初始化 MySQL 数据库&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./sql:/docker-entrypoint-initdb.d/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 用这些环境变量初始化 mysql 数据库，创建目标数据库，创建用户和密码，为 root 用户初始化随机密码&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_DATABASE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DB}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBU}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBP}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_RANDOM_ROOT_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># PHPMyAdmin 数据库管理工具，只用于开发或者测试环境&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">phpmyadmin&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">phpmyadmin/phpmyadmin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">devopschina_myphpadmin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">PMA_HOST&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBH}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">PMA_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBU}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">PMA_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBP}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">PMA_ARBITRARY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">9999&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 drupal 官方镜像 v9 ，指定 php 版本为 7.4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">drupal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c">#image: drupal:9-php7.4-apache 这里以后需要优化为私有镜像名称，而不需要在服务启动的时候做任何构建&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">devopschina_drupal&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">9998&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">working_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/opt&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># 将当前项目目录加载到容器中，这里产生了一个和本机的依赖，后续优化：通过 Dockerfile 的复制当前开发目录中的成功到容器中&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># The &amp;#39;z&amp;#39; option tells Docker that the volume content will be shared between containers. Docker will label the content with a shared content label. Shared volumes labels allow all containers to read/write content. The &amp;#39;Z&amp;#39; option tells Docker to label the content with a private unshared label.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/opt:z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">HOST&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBH}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">DBASE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DB}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBU}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">PASS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;${DBP}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># composer update 操作确保容器中的 Drupal 服务运行与当前的最新状态，这个操作也应该后续移植到Dockerfile 文件中&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash -c &amp;#34;composer update &amp;amp;&amp;amp; rm /var/www/html &amp;amp;&amp;amp; ln -s /opt/web /var/www/html &amp;amp;&amp;amp; /usr/local/bin/apache2-foreground&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相关测试命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-compose config&lt;/code> 测试所有参数是否被完整且正确的填充，有错误的话，需要修改 .env 文件。&lt;/li>
&lt;li>&lt;code>docker-compose build&lt;/code> 构建必要的镜像。&lt;/li>
&lt;/ul>
&lt;h3 id="5---本地集成测试">5 - 本地集成测试
&lt;/h3>&lt;p>在本机测试和确认容器服务中 Drupal 网站的可用性和内容。&lt;/p>
&lt;p>在项目目录中，执行 &lt;code>docker-compose up&lt;/code> 命令观察整个启动过程，待启动停止后，在浏览器中访问：&lt;a class="link" href="http://localhost:9998" target="_blank" rel="noopener"
>http://localhost:9998&lt;/a> ，应该能够看到如下的网页。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2022-02-05-2022-02-05_23-04-12.png"
loading="lazy"
alt="Test Env home page"
>&lt;/p>
&lt;h2 id="在云平台部署社区官网">在云平台部署社区官网
&lt;/h2>&lt;p>下面是关于后续工作的一些规划：&lt;/p>
&lt;ul>
&lt;li>组件新的网站开发团队，召开项目启动会&lt;/li>
&lt;li>优化以上代码库&lt;/li>
&lt;li>用一台云主机搭建一个公共的测试环境&lt;/li>
&lt;li>确认和实施相关基础设施：镜像仓库、用于Drupal迁移的对象存储桶、优化容器化过程、启用一个用于开发评审的容器测试环境、确定生产环境的运行状态【LAMP单机 vs. 容器环境+其它云服务】&lt;/li>
&lt;/ul></description></item><item><title>10 分钟读懂 DevOps 工具链</title><link>https://martinliu.cn/blog/10-minute-read-to-understanding-devops-tools/</link><pubDate>Fri, 02 Apr 2021 22:34:09 +0800</pubDate><guid>https://martinliu.cn/blog/10-minute-read-to-understanding-devops-tools/</guid><description>&lt;img src="https://martinliu.cn/img/cos/2021-04-03-eggs-3216877_1920.jpeg" alt="Featured image of post 10 分钟读懂 DevOps 工具链" />&lt;p>【译文】上周，我和我的几位非常资深的同事都在评论说，有很多新的DevOps工具正在出现，而且每天都越来越难跟踪它们，以及它们在DevOps 领域的定位。我问了他们几个工具，Ansible、Terraform、Salt、Chef、Bamboo、CloudFormation这些工具的定位在哪里？我为什么要用这个而不是那个？它们甚至是同一种东西吗？我是不是漏掉了一个主要角色？我得到了什么，一些白眼和问题。所以，我想我会做一些研究，阅读，并试图让我们所有人理解它，以便我们可以将那些产品都分类到我们都熟悉的类别或用途。&lt;/p>
&lt;p>原文：&lt;a class="link" href="https://levelup.gitconnected.com/the-10-minute-read-to-understanding-devops-tools-bc4ac807a25d" target="_blank" rel="noopener"
>https://levelup.gitconnected.com/the-10-minute-read-to-understanding-devops-tools-bc4ac807a25d&lt;/a>&lt;/p>
&lt;p>在我们开始谈论DevOps工具和类别之前，让我们退一步讨论几个基本的（但往往是超载的）术语以及它们的含义。&lt;/p>
&lt;p>&lt;strong>计算机/服务器&lt;/strong> - &lt;strong>Computer/Server&lt;/strong>： 具有中央处理器（CPU）、内存（RAM）、本地存储（磁盘）并运行操作系统的物理设备。&lt;/p>
&lt;p>&lt;strong>虚拟机&lt;/strong> - &lt;strong>Virtual Machine&lt;/strong>：在主机上运行的计算机系统的模拟器（虚拟机管理程序）；vm 通常可以在CPU、内存和磁盘使用方面与其他操作系统隔离。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2021-04-02-0-cuHFPvnmr141Dfcc.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;strong>容器&lt;/strong>&amp;ndash;&lt;strong>Containers&lt;/strong>：打包一个软件及其所有依赖，使其能够在任何基础设施上统一、一致地运行。Docker容器是最流行的。它们允许你打包一堆东西（你的软件、配置和其他软件），以便于部署和传输。你可以把容器看作是虚拟化的下一代进化（继虚拟机之后）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2021-04-02-0-hWRNCynYRFw2KCxn.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;strong>网络设备&lt;/strong> - &lt;strong>Network Device&lt;/strong>：在设备之间路由网络流量的硬件。例如路由器、负载平衡器和防火墙。&lt;/p>
&lt;p>&lt;strong>软件&lt;/strong> - &lt;strong>Software&lt;/strong>：编码并在操作系统上运行的代码。&lt;/p>
&lt;p>&lt;strong>DevOps&lt;/strong> - 传统上有 &amp;ldquo;开发&amp;rdquo;（你来构建它），还有 &amp;ldquo;运维&amp;rdquo;（我们将运行它），他们两者之间的一切都受制于作坊式的工作方式。从2010年左右开始，到2018年左右DevOps 已经发展为几乎无处不在的现象，DevOps的理念是：&amp;ldquo;一套实践，目的是在保证高质量的前提下，缩短从提交系统变更到变更投入正常生产环境之间的时间&amp;rdquo;。&lt;/p>
&lt;p>当你在考虑构建和运行一个非同寻常的系统时，其实还有很多不得不做的事情。以下是需要考虑到的传统的事项清单。&lt;/p>
&lt;ol>
&lt;li>获取计算机/服务器硬件 （Obtaining the computer/server hardware）&lt;/li>
&lt;li>配置计算机/服务器硬件（操作系统、网络布线等）（Configuring the computer/server hardware (operating systems, network wiring, etc.)）&lt;/li>
&lt;li>监控计算机/服务器硬件（Monitoring the computer/server hardware）&lt;/li>
&lt;li>获取网络设备（负载均衡器、防火墙、路由器等）（Obtaining the network devices (load balancers, firewalls, routers, etc.)）&lt;/li>
&lt;li>配置网络设备（Configuring the network devices）&lt;/li>
&lt;li>监控网络设备（Monitoring the network devices）&lt;/li>
&lt;li>编写软件（Constructing the software）&lt;/li>
&lt;li>构建软件（Building the software）&lt;/li>
&lt;li>测试软件（Testing the software）&lt;/li>
&lt;li>软件打包（Packaging the software）&lt;/li>
&lt;li>部署/发布软件（Deploying/releasing the software）&lt;/li>
&lt;li>监测软件（Monitoring the software）&lt;/li>
&lt;/ol>
&lt;p>在DevOps之前，我们曾经有四个不同的团队在做这项工作。&lt;/p>
&lt;ul>
&lt;li>Developer 开发人员 — 他们会做 #7, #8 ，有时候包括 #10&lt;/li>
&lt;li>QA 测试人员— 他们会做 #9 ，有时候包括 #11&lt;/li>
&lt;li>System Administrator 系统管理员 — 他们会做 #1, #2, #3, #12&lt;/li>
&lt;li>Network Administrator 网络管理员 — 他们会做 #4, #5, #6&lt;/li>
&lt;/ul>
&lt;p>对于硬件、网络设备和软件的配置，每个团队很可能会使用自己的一套脚本和工具，而且在很多情况下，会通过手工操作来实现 &amp;ldquo;软件发布&amp;rdquo;。&lt;/p>
&lt;p>随着DevOps的出现，对我来说，关键的想法是打破这些部门墙，让每个人都成为 &amp;ldquo;一个 &amp;quot; 团队的一部分，为所有事物的配置、部署和管理方式带来一致性。&lt;/p>
&lt;p>&lt;strong>云&lt;/strong>&amp;ndash;&lt;strong>Cloud&lt;/strong>：定义信息技术史上最流行的名词是很难的，但我喜欢那件T恤，上面写着 &amp;ldquo;没有云，只是别人的电脑&amp;rdquo;。最初，当云服务开始的时候，它们真的只是别人的电脑（或者运行在电脑上的虚拟机），或者存储。随着时间的推移，它们已经演变成到了现在的状态，包含很多很多的增值服务。硬件大部分已经被抽象掉了，现在大多数云服务中，你不能购买它们的硬件设备，但你可以购买这些硬件设备所提供的各种云服务。&lt;/p>
&lt;p>&lt;strong>基础架构即代码&lt;/strong>(&lt;strong>IAC&lt;/strong>)&amp;ndash;：一种新的能力或概念，它允许我们通过定义或配置文件来完整的定义数据中心中所有项目的设置，包括虚拟机、容器和网络设备。这个概念是我可以创建一些配置和一些脚本，然后使用我们即将讨论的一个工具来运行它们，它们会自动为我们按需配制出数据中心的所有服务。CI/CD是IAC的前身，多年来我们一直致力于自动化我们的构建/测试/集成/部署周期，在我们的云基础设施上做这个工作是一个自然的延伸。这带来了成本的降低，更快的上市时间，以及更小的风险（人为错误）。&lt;/p>
&lt;p>随着IAC的出现，许多传统的开发工具现在可以用于管理基础设施。像软件仓库、构建工具、CI/CD、代码分析器和测试工具等类别的工具（如下所列），传统上是由软件开发人员使用的，现在可以被DevOps工程师用来构建和维护基础设施。&lt;/p>
&lt;blockquote>
&lt;p>AGAIN: &amp;ldquo;随着DevOps的出现，对我来说，关键的理念是&amp;hellip;&amp;hellip;让每个人都成为&amp;rsquo;一个&amp;rsquo;团队的一部分，为所有事物的配置、部署和管理方式带来一致性。&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>因此，现在我们已经定义了以上基础术语/概念，让我回到试图对DevOps工具进行分类的任务，以使我们更容易确定什么工具是用于什么目的的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>软件仓库&lt;/strong> &amp;ndash; 管理软件版本的工具&amp;ndash;目前使用最广泛的是Git。&lt;/li>
&lt;li>&lt;strong>构建工具&lt;/strong>&amp;ndash;有些软件在打包或使用前需要编译，传统的构建工具包括Make、Ant、Maven和MSBuild。&lt;/li>
&lt;li>&lt;strong>持续集成工具&lt;/strong>&amp;ndash;在配置好以后，每次将代码提交到存储库中时，它都会对软件进行构建、部署和测试。这通常可以提高软件质量和上市时间。这个市场上最流行的工具是 Jenkins、Travis、TeamCity和Bamboo。&lt;/li>
&lt;li>&lt;strong>代码分析/审查工具&lt;/strong>&amp;ndash;这些工具可以查找代码中的错误，检查代码格式和质量，以及测试覆盖率。这些工具因编程语言而异。SonarQube是这个领域的一个流行工具，还有其他各种 &amp;ldquo;轻量的 &amp;ldquo;工具。&lt;/li>
&lt;li>&lt;strong>配置管理&lt;/strong>&amp;ndash;配置管理工具和数据库通常存储所有关于你的硬件和软件项目的信息，以及提供一个脚本和/或模板系统，用于自动化常见任务。在这个领域似乎有很多玩家。传统的玩家是Chef、Puppet和Salt Stack。&lt;/li>
&lt;li>&lt;strong>部署工具&lt;/strong>&amp;ndash;这些工具有助于软件的部署。许多CI工具也是CD（持续部署）工具，它们协助软件的部署。传统上在Ruby语言中，Capistrano工具被广泛使用；在Java语言中，Maven被很多人使用。所有的编排工具也都支持某种形式的部署。&lt;/li>
&lt;li>&lt;strong>编排工具&lt;/strong>&amp;ndash;这些工具配置、调度和管理计算机系统和软件。它们通常将 &amp;ldquo;自动化 &amp;ldquo;和 &amp;ldquo;工作流 &amp;ldquo;作为其服务的一部分。Kubernetes是一个非常流行的编排工具，它专注于容器。Terraform是一个非常流行的编排工具，它的关注点更广，包括云编排。另外，每个云提供商都有自己的一套工具（CloudFormation、GCP Deployment Manager, 和ARM）。&lt;/li>
&lt;li>&lt;strong>监控工具&lt;/strong> - 这些工具允许监控硬件和软件。通常，它们包括监控代理程序，用于监视进程和日志文件，以确保系统的健康。Nagios是一种流行的监控工具。&lt;/li>
&lt;li>&lt;strong>测试工具&lt;/strong> - 测试工具用于管理测试，以及测试自动化，包括性能和负载测试等。&lt;/li>
&lt;/ul>
&lt;p>当然，和其他任何一套产品一样，类别也不一定完全清晰。许多工具都是跨类别的，并提供两个或多个类别的功能。下面是我试图展示大多数非常流行的工具，并可视化它们在这些类别中的位置。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/img/cos/2021-04-02-1-wTp-r9QJvF-DXGZDZUHmbA.jpeg"
loading="lazy"
>&lt;/p>
&lt;p>正如你所看到的，有几个玩家，如Ansible、Terraform和云工具(AWS、GCP和Azure)，正试图通过他们的产品覆盖部署、配置管理和编排类别。老牌工具集Puppet、Chef和Salt Stack专注于配置管理和自动化，但已经扩展到编排和部署的。还有像GitLab和Azure DevOps这样的工具，几乎试图跨越DevOps的所有类别。&lt;/p>
&lt;p>我希望这个概述能帮助你了解DevOps的基础知识，可用工具的类别，以及目前市场上的各种产品如何在这些类别中的一个或多个类别中提供帮助。在Solution Street，多年来我们已经使用了许多这样的工具，对我们来说，没有一个单一的 &amp;ldquo;一招鲜 &amp;ldquo;的工具能胜任所有情况下使用。使用什么是基于所使用的技术，在哪里托管（以及未来可能在哪里托管），以及团队的人才和构成。&lt;/p>
&lt;blockquote>
&lt;p>教练观点：敏捷教练不能回避DevOps 工具链的话题，中低层管理人员更应该在宏观上深刻理解 SLDC 所有环节的技术概要和工具需求，需要具备基础的概念知识，具备和工程师讨论所必备的语言。工程师们更要有工具链整体优化的意识，而不仅仅是精通某个环节，或局限在与自己的上下游工具上，工作在这个系统中的所有人需要有全局协作和优化的意识，优化价值流的流量、流速，关注价值的产生。警惕&amp;mdash;-整个工具链的自动化程度越高，不一定工作效率越高，加班越少，公司盈利越多。它们其实是相互作用的。&lt;/p>&lt;/blockquote></description></item><item><title>在 Github 上搭建基于 Hugo 的免费个人博客</title><link>https://martinliu.cn/blog/github-hugo-blog/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://martinliu.cn/blog/github-hugo-blog/</guid><description>&lt;img src="https://martinliu.cn/img/2019/03/pic03.jpg" alt="Featured image of post 在 Github 上搭建基于 Hugo 的免费个人博客" />&lt;p>最近更新了新的博客样式，再次搬迁回到了 GitHub 平台，并使用了 Github Action 的自动化 CI/CD 发布功能。这个是一个任何人都可以拥有的方案，现在用最简洁的语言分享给大家。&lt;/p>
&lt;p>选择将博客搭建在 Github 上的原因包括：&lt;/p>
&lt;ul>
&lt;li>Github Pages 是一个免费使用的功能，在不强求网站访问速度，考虑持久性的情况下，Github Pages 不失为一根优秀的羊毛。&lt;/li>
&lt;li>用 master 分支管理 hugo 站点的所有代码和文件（markdown、网站模板和图片），用 gh-pages 分支存放 Hugo 编译后的网站发布文件&lt;/li>
&lt;li>Github Actions 功能实现了自动化的编译和部署功能，使用它所提供的工作流将 master 分支中的更新编译后发布到 gh-pages 分支中&lt;/li>
&lt;/ul>
&lt;p>而 Hugo 是一款比较流行的静态网站管理软件，可以在各种操作系统轻松的安装本地的博客环境，在本地的操作系统上实现博客的预览和测试。Hugo 的社区提供了大量的免费网站模板，不同类型的模板可以满足各种网站需求。&lt;/p>
&lt;h2 id="选择-hugo-博客主题">选择 Hugo 博客主题
&lt;/h2>&lt;p>在 &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>https://themes.gohugo.io/&lt;/a> 可以搜索到大量的免费网站模板。我这次选择了名为 “HUGO FUTURE IMPERFECT SLIM” 的模板。&lt;/p>
&lt;p>这是一个功能非常丰富的模板：&lt;/p>
&lt;ul>
&lt;li>界面简洁，兼具丰富的格式，博客文章有头图&lt;/li>
&lt;li>带有侧栏&lt;/li>
&lt;li>带有 ‘about’ ‘categories’ ‘contact’ 等独立页面格式，无头图&lt;/li>
&lt;li>具有多语言支持和菜单选择&lt;/li>
&lt;li>带有搜索页面&lt;/li>
&lt;li>带有讨论功能&lt;/li>
&lt;/ul>
&lt;p>对我而言这些都是很快就都可以用到的功能。&lt;/p>
&lt;p>Hugo 博客本地安装和配置新手指南，参考这两篇文章。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/102131163" target="_blank" rel="noopener"
>零基础使用 Hugo 和 GitHub 搭建个人博客&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sb.sb/blog/migrate-to-hugo/" target="_blank" rel="noopener"
>使用 Hugo 生成静态博客教程&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="github-pages-新手指南">GitHub Pages 新手指南
&lt;/h2>&lt;p>在 &lt;a class="link" href="https://pages.github.com/" target="_blank" rel="noopener"
>https://pages.github.com/&lt;/a> 提供了视频和文字版本的新手指南教程。为了方便新手理解，下面就使用‘user or organization site’这个最常用的选项做简要说明：&lt;/p>
&lt;ol>
&lt;li>创建与自己的 &lt;strong>Github 用户/组织&lt;/strong> 同名前缀的公开代码仓库，例如：zhangsan/zhangsan.github.io&lt;/li>
&lt;li>选择在命令行里（前提是安装配置好了 Git，否则使用图形化界面 GitHub Desktop 工具）&lt;/li>
&lt;li>克隆第一步创建的那个代码库到本地电脑的目录中。&lt;/li>
&lt;li>创建只包含 ‘Hello World’ 为内容的主页测试文件。&lt;/li>
&lt;li>推送本地的更新到 Github 服务器端&lt;/li>
&lt;li>在本地的浏览器中查看测试网页 &lt;a class="link" href="http://zhagnsan.github.io/" target="_blank" rel="noopener"
>http://zhagnsan.github.io/&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>GitHub Pages 的新手指南已经包含在了上一节推荐的两篇文章中。&lt;/p>
&lt;h2 id="使用-github-actions-自动化发布博客更新">使用 Github Actions 自动化发布博客更新
&lt;/h2>&lt;p>本地的测试环境是非常重要的，可以帮我们快速的掌握 Hugo 的基本使用方式，测试和选择网站模板。在模板确定了以后，就进入了日常的内容更新过程中，平常内容更新的工作都是在 master 分支中进行。并不会在本地操作 gh-pages 分支，这个分支里只会存放的是 Hugo 编译之后结果内容，即 public 目录中的内容。&lt;/p>
&lt;p>你可以在代码库的 Actions 标签页面中，创建一个默认的演示工作流文件，在本地做一个测试更新，用 push 动作测试触发和执行它。从无到有的创建新工作流文件的过程在这里不讲解。&lt;/p>
&lt;p>在本使用 Github Actions 的功能的主要目的如下：&lt;/p>
&lt;ol>
&lt;li>通过 master 分支的 push 事件，触发自动化工作流，即 CI/CD 工作流，这里是持续部署的过程。&lt;/li>
&lt;li>将 master 分支的内容签出，使用新配置的 Hugo 软件构建全站的所有内容&lt;/li>
&lt;li>将构建后的结果发布更新到 gh-pages 分支中。&lt;/li>
&lt;/ol>
&lt;p>下面是我所使用的工作流代码和注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 将 Hubo 博客构建后部署到 Github Pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: Deploy github-pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 在 master 主干分支的任何 push 事件都会触发本 DevOps 工作流水线
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches: [ master ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 以下是本串行执行工作流的所有组成部分
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 这里只定义了一个名为 &amp;#34;deploy&amp;#34; 的多步骤作业
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build-deploy-hugo-blog:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 将后续的所有工作步骤都运行在最新版的 ubuntu 操作系统上
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 本构建和部署作业的所有步骤定义如下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 1 - Checks-out 你的代码库到 $GITHUB_WORKSPACE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout blog code repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2 # 这是 Github 官方提供的一个动作模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> submodules: true # 同步更新所使用的 Hugo 模板
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fetch-depth: 0 # 更新到该模板最新的版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 2 - 配置最新版本的 Hugo 环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup Hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-hugo@v2 # 这是 Github Actions 市场中的一个动作模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hugo-version: &amp;#39;latest&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 3 - 清理代码库中 public 目录中的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Clean public directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: rm -rf public # 彻底删除这个目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 4 - 用最新版本的 Hugo 构建个人博客站点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build blog site
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: hugo --minify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 5 - 创建用于私有域名所需要的 CNAME 文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Create CNAME file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: echo &amp;#39;martinliu.cn&amp;#39; &amp;gt; public/CNAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Step 6 - 将构建好的博客站点推送发布到 gh-pages 分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Deploy blog to Github-pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github_token: ${{ secrets.DEPLOY_KEY }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> publish_dir: ./public
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="后续事项">后续事项
&lt;/h2>&lt;ol>
&lt;li>解决旧文章头图空白的问题&lt;/li>
&lt;li>增加文章评论功能&lt;/li>
&lt;li>增加 CDN 功能&lt;/li>
&lt;/ol></description></item><item><title>用 Jekyll + Github 建立静态站点</title><link>https://martinliu.cn/2016/01/10/e794a8-jekyll-github-e5bbbae7ab8be99d99e68081e7ab99e782b9/</link><pubDate>Sun, 10 Jan 2016 01:01:25 +0000</pubDate><guid>https://martinliu.cn/2016/01/10/e794a8-jekyll-github-e5bbbae7ab8be99d99e68081e7ab99e782b9/</guid><description>&lt;img src="https://martinliu.cn/images/abstract-6.jpg" alt="Featured image of post 用 Jekyll + Github 建立静态站点" />&lt;h2 id="新建库">新建库
&lt;/h2>&lt;p>建立一个用户名开头的库，如我的 github 用户名是 martinliu， 新建的库的名字为 martinliu.github.io ; 这个库将是存放 web 页面的。包括该域名下的站点的所有相关页码代码文件和相关 css,图片等文件。&lt;/p>
&lt;h2 id="更新并上传新库">更新并上传新库
&lt;/h2>&lt;p>参考的命令如下：&lt;/p>
&lt;p>[bash]
git clone &lt;a class="link" href="https://github.com/martinliu/martinliu.github.io" target="_blank" rel="noopener"
>https://github.com/martinliu/martinliu.github.io&lt;/a>
cd martinliu.github.io
echo &amp;ldquo;Martin Liu&amp;rsquo;s Github Homepage&amp;rdquo; &amp;gt; index.html
git add &amp;ndash;all
git commit -m &amp;ldquo;Initial commit&amp;rdquo;
git push -u origin master
[/bash]&lt;/p>
&lt;p>打开浏览器测试你的网站，访问网址： &lt;a class="link" href="http://martinliu.github.io" target="_blank" rel="noopener"
>http://martinliu.github.io&lt;/a> ， 你已经可以看到你的初始化页码了。&lt;/p>
&lt;h2 id="jekyll-博客系统">Jekyll 博客系统
&lt;/h2>&lt;p>Github 网站上推荐使用 Jekyll 创建和管理这个博客系统。它是支持 Markdown 语法，不需要使用数据库，纯文本的静态网站和博客系统。使用它可以建立和管理一个风格美观，容易管理的网站，生成的网页可以上传到以上生成的网站库中。&lt;/p>
&lt;h2 id="安装-jekyll-系统">安装 Jekyll 系统
&lt;/h2>&lt;p>我的测试系统：Fedora 23。操作步骤如下。
安装依赖的包和 ruby 环境&lt;/p>
&lt;p>[bash]
dnf install ruby  ruby-devel gem gcc libffi redhat-rpm-config
[/bash]&lt;/p>
&lt;p>更用国内的 rubygem 源
[bash]
gem source -r &lt;a class="link" href="https://rubygems.org/" target="_blank" rel="noopener"
>https://rubygems.org/&lt;/a>
gem source -a &lt;a class="link" href="http://mirrors.aliyun.com/rubygems/" target="_blank" rel="noopener"
>http://mirrors.aliyun.com/rubygems/&lt;/a>
gem update &amp;ndash;system&lt;/p>
&lt;p>gem install jekyll
[/bash]&lt;/p>
&lt;p>##本地测试 jekyll 站点
进入克隆到本地的库，并创建 jekyll 站点。&lt;/p>
&lt;p>[bash]
cd martinliu.github.io
rm index.html&lt;/p>
&lt;p>jekyll new .
New jekyll site installed in /root/martinliu.github.io.
[root@demo-w540 martinliu.github.io]# ls
about.md     css       _includes   _layouts  _sass
_config.yml  feed.xml  index.html  _posts
[root@demo-w540 martinliu.github.io]# jekyll server
Configuration file: /root/martinliu.github.io/_config.yml
Source: /root/martinliu.github.io
Destination: /root/martinliu.github.io/_site
Incremental build: disabled. Enable with &amp;ndash;incremental
Generating&amp;hellip;
done in 0.205 seconds.
Auto-regeneration: enabled for &amp;lsquo;/root/martinliu.github.io&amp;rsquo;
Configuration file: /root/martinliu.github.io/_config.yml
Server address: http://127.0.0.1:4000/
Server running&amp;hellip; press ctrl-c to stop.
[/bash]&lt;/p>
&lt;p>编辑站点的相关文件，测试成功之后，在上传到 github 上，然可到 maritnliu.github.io 上检查和本地的显示效果是否相同。&lt;/p></description></item></channel></rss>