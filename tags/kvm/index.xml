<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KVM on Martin Liu's Blog</title><link>https://martinliu.cn/tags/kvm/</link><description>Recent content in KVM on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 20 May 2024 23:30:38 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/kvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Ovirt 服务器虚拟化测试</title><link>https://martinliu.cn/2015/07/12/ovirt-e69c8de58aa1e599a8e8999ae68b9fe58c96e6b58be8af95/</link><pubDate>Sun, 12 Jul 2015 11:16:44 +0000</pubDate><guid>https://martinliu.cn/2015/07/12/ovirt-e69c8de58aa1e599a8e8999ae68b9fe58c96e6b58be8af95/</guid><description>&lt;h1 id="ovirt-服务器虚拟化测试">Ovirt 服务器虚拟化测试
&lt;/h1>&lt;p>本文安装和测试的软件是 Ovirt+KVM 的服务器虚拟化，这两个项目是红帽 RHEVM+KVM 服务器虚拟化的上游社区产品。可以通过这个文档清晰的了解到红帽服务器虚拟化产品的大体功能，基本特点。本测试文档使用的是 Centos7+社区 yum 源；因此是最新的 ovirt 和 kvm 的功能。如果是正式的企业级需求测试，请使用光纤或者传统存储，从而达到和 vmware 等商业产品最好的类比测试。尽量避免使用嵌套 kvm 虚拟化的方式，除非您很熟悉 Linux，使用两个笔记本是最简单的测试环境。&lt;/p>
&lt;p>下图是 Ovirt 服务器的详细架构图。其中的 ovirt-engine 是本文安装和部署的部分，是用一个 centos7 的虚拟机安装的。Host1 也是用一个 centos7 的虚拟机安装的。半年之前我也配置过一次嵌套 kvm，根本是一头雾水，而且还没有成功，不过这次的配置过程却这么简单容易，就正常工作了。希望简单一点的人，可以把 Host1 用物理机来安装，也会节省很多时间。&lt;/p>
&lt;p>[caption id=&amp;ldquo;attachment_53901&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;512&amp;rdquo;]&lt;img src="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/07/ovirt-512px-Architecture.png"
loading="lazy"
alt="ovirt 架构图"
> ovirt 架构图[/caption]&lt;/p>
&lt;h2 id="kvm-嵌套虚拟化准备">KVM 嵌套虚拟化准备
&lt;/h2>&lt;p>在测试 KVM 服务器虚拟化的过程中，如果您能有独立的物理机跑 Hypervisor，那么您可以忽略本节。至今进入 ovirt 的安装。  下面的测试的物理机是 Lenovo T440s 笔记本，运行的 Fedora 22 操作系统，使用 KVM manager 做虚拟机的管理工具。本次测试用到两个虚拟机：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ovirt: 运行服务器虚拟化的管理机 ovirt，这个程序类似于 vmware 的 vcenter。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ovirt-host : 用来被 ovirt 管理的 hypervisor；使用 kvm 嵌套 kvm 的方式，来跑虚拟机。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>确认本机的服务器虚拟机 CPU Bios 配置正常。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>egrep -c &amp;lsquo;(vmx|svm)&amp;rsquo; /proc/cpuinfo&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>本机是 i5 的 CPU，双核开启超线程，显示为 4。还没有启用嵌套 KVM 的虚拟机，需要新建下面这个配置文件，操作系统不同，可能稍微不同，下面是以 Fedora 22 为例。&lt;/p>
&lt;p>vi /etc/modprobe.d/kvm-nested.conf
编辑以上文件，增加下面这行参数即可
options kvm_intel nested=1&lt;/p>
&lt;p>运行下面的命令，为操作系统内核加載此功能。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>modprobe -r kvm_intel # unload
modprobe kvm_intel # reload again&lt;/p>
&lt;p>cat /sys/module/kvm_intel/parameters/nested
Y&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>用上面最后的 cat 的命令确认嵌套功能启用正常，看到的是 Y 即可。&lt;/p>
&lt;p>查看本机虚拟化的 Cpu 相关参数。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>[root@martin-fedora vm]# virsh capabilities | egrep &amp;ldquo;/model|/vendor&amp;rdquo;
&lt;!-- raw HTML omitted -->Westmere&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->Intel&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->none&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->dac&lt;!-- raw HTML omitted -->
[root@martin-fedora vm]#&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>到此，物理机的相关准备工作完成。下面使用 Martin&amp;rsquo;s Perfect CentOS7 模板新建一个 2C/4Gd 的虚拟机 ovirt-host; 用这个虚拟机作为跑虚拟机的 hypervisor 把建立好的虚拟机先别开机，需要对它的配置做修改。编辑 ovirt-host 虚拟机的配置，给这个嵌套的 KVM hypervisor 增加和物理机相同的 cpu 属性。&lt;/p>
&lt;p>virsh edit ovirt-host&lt;/p>
&lt;p>本嵌套 kvm 的虚拟机 cpu 参数如下，如果测试的物理机使用非 i5 的 CPU， 实际的配置参数应该和下面不同。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>[/bash]&lt;/p>
&lt;p>保存配置，启动这个虚拟机，配置好主机名和网络 ip 地址。安装 ovirt yum 源。做 yum update 之后，reboot 待用。&lt;/p>
&lt;p>[bash]
yum -y update
yum install &lt;a class="link" href="http://plain.resources.ovirt.org/pub/yum-repo/ovirt-release35.rpm" target="_blank" rel="noopener"
>http://plain.resources.ovirt.org/pub/yum-repo/ovirt-release35.rpm&lt;/a>&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;h2 id="安装-ovirt-服务器虚拟化管理机">安装 ovirt 服务器虚拟化管理机
&lt;/h2>&lt;p>使用 Martin&amp;rsquo;s Perfect CentOS7 模板新建一个 1C/4G 的虚拟机 ovirt；这个虚拟机上还需要配置 NFS 服务器，用来做 跑虚拟机的共享存储和用于存储 iso 光盘的存储。&lt;/p>
&lt;p>安装和配置 NFS 的过程如下：&lt;/p>
&lt;h2 id="安装-nfs-服务相关的包">安装 nfs 服务相关的包
&lt;/h2>&lt;p>yum install -y nfs-utils&lt;/p>
&lt;h2 id="创建存储目录">创建存储目录
&lt;/h2>&lt;p>mkdir -p /srv/ovirt/{iso,export,sata}
chown -R vdsm:kvm /srv/ovirt/
chmod -R 770 /srv/ovirt/&lt;/p>
&lt;p>编辑 nfs 配置文件 /ect/exports ， 加入下面三行。&lt;/p>
&lt;p>/srv/ovirt/iso 192.168.10.0/24(rw,anonuid=36,anongid=36,all_squash)
/srv/ovirt/export 192.168.10.0/24(rw,anonuid=36,anongid=36,all_squash)
/srv/ovirt/sata 192.168.10.0/24(rw,anonuid=36,anongid=36,all_squash)&lt;/p>
&lt;p>由于 centos 7 的 nfs 默认是 v4，这和 ovirt 不兼容，需要修改配置文件改为 v3， 编辑 /etc/nfsmount.conf 加入下面两个参数。&lt;/p>
&lt;p>Defaultvers=3
Nfsvers=3&lt;/p>
&lt;h2 id="重启动-nfs-服务器-设置开机启动服务">重启动 nfs 服务器 ，设置开机启动服务
&lt;/h2>&lt;p>systemctl start rpcbind.service &amp;amp;&amp;amp; systemctl enable rpcbind.service
systemctl start nfs-server.service &amp;amp;&amp;amp; systemctl enable nfs-server.service&lt;/p>
&lt;p>下面开始安装 ovirt 服务器。&lt;/p>
&lt;p>yum -y update
yum install &lt;a class="link" href="http://plain.resources.ovirt.org/pub/yum-repo/ovirt-release35.rpm" target="_blank" rel="noopener"
>http://plain.resources.ovirt.org/pub/yum-repo/ovirt-release35.rpm&lt;/a>
yum -y install ovirt-engine&lt;/p>
&lt;p>安装完后，用 engine-setup 命令配置和部署 ovirt 服务器。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>[root@ovirt ~]# engine-setup
[ INFO ] Stage: Initializing
[ INFO ] Stage: Environment setup
Configuration files: [&amp;rsquo;/etc/ovirt-engine-setup.conf.d/10-packaging-jboss.conf&amp;rsquo;, &amp;lsquo;/etc/ovirt-engine-setup.conf.d/10-packaging.conf&amp;rsquo;]
Log file: /var/log/ovirt-engine/setup/ovirt-engine-setup-20150711225251-f9k7an.log
Version: otopi-1.3.2 (otopi-1.3.2-1.el7.centos)
[ INFO ] Stage: Environment packages setup
[ INFO ] Yum Downloading: ovirt-3.5-patternfly1-noarch-epel/x86_64 (0%)
[ INFO ] Stage: Programs detection
[ INFO ] Stage: Environment setup
[ INFO ] Stage: Environment customization&lt;/p>
&lt;p>&amp;ndash;== PRODUCT OPTIONS ==&amp;ndash;&lt;/p>
&lt;p>Configure Engine on this host (Yes, No) [Yes]: #回车，选择 Yes
Configure WebSocket Proxy on this host (Yes, No) [Yes]: #回车，选择 Yes&lt;/p>
&lt;p>&amp;ndash;== PACKAGES ==&amp;ndash;&lt;/p>
&lt;p>[ INFO ] Checking for product updates&amp;hellip;
[ INFO ] No product updates found&lt;/p>
&lt;p>&amp;ndash;== ALL IN ONE CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>&amp;ndash;== NETWORK CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Setup can automatically configure the firewall on this system.
Note: automatic configuration of the firewall may overwrite current settings.
Do you want Setup to configure the firewall? (Yes, No) [Yes]: No #选择 no，由于本机的服务没有安装防火墙
Host fully qualified DNS name of this server [unknown.prolexic.com]: ovirt.xenlab.com #回车继续&lt;/p>
&lt;p>&amp;ndash;== DATABASE CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Where is the Engine database located? (Local, Remote) [Local]: #回车，选择 Local 继续
Setup can configure the local postgresql server automatically for the engine to run. This may conflict with existing applications.
Would you like Setup to automatically configure postgresql and create Engine database, or prefer to perform that manually? (Automatic, Manual) [Automatic]: #回车，选择 继续&lt;/p>
&lt;p>&amp;ndash;== OVIRT ENGINE CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Engine admin password:
Confirm engine admin password:
[WARNING] Password is weak: it is based on a dictionary word
Use weak password? (Yes, No) [No]: yes
Application mode (Virt, Gluster, Both) [Both]: #回车，选择 Both 继续&lt;/p>
&lt;p>&amp;ndash;== PKI CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Organization name for certificate [xenlab.com]:&lt;/p>
&lt;p>&amp;ndash;== APACHE CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Setup can configure the default page of the web server to present the application home page. This may conflict with existing applications.
Do you wish to set the application as the default page of the web server? (Yes, No) [Yes]:
Setup can configure apache to use SSL using a certificate issued from the internal CA.
Do you wish Setup to configure that, or prefer to perform that manually? (Automatic, Manual) [Automatic]:&lt;/p>
&lt;p>&amp;ndash;== SYSTEM CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>Configure an NFS share on this server to be used as an ISO Domain? (Yes, No) [Yes]: no # 选择 no，本测试手工配置 NFS，不需要安装程序配置。 继续&lt;/p>
&lt;p>&amp;ndash;== MISC CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>&amp;ndash;== END OF CONFIGURATION ==&amp;ndash;&lt;/p>
&lt;p>[ INFO ] Stage: Setup validation
[WARNING] Cannot validate host name settings, reason: resolved host does not match any of the local addresses
[WARNING] Less than 16384MB of memory is available&lt;/p>
&lt;p>&amp;ndash;== CONFIGURATION PREVIEW ==&amp;ndash;&lt;/p>
&lt;p>Application mode : both
Update Firewall : False
Host FQDN : ovirt.xenlab.com
Engine database name : engine
Engine database secured connection : False
Engine database host : localhost
Engine database user name : engine
Engine database host name validation : False
Engine database port : 5432
Engine installation : True
PKI organization : xenlab.com
Configure local Engine database : True
Set application as default page : True
Configure Apache SSL : True
Configure WebSocket Proxy : True
Engine Host FQDN : ovirt.xenlab.com&lt;/p>
&lt;p>Please confirm installation settings (OK, Cancel) [OK]: #回车，选择 OK 继续
[ INFO ] Stage: Transaction setup
[ INFO ] Stopping engine service
[ INFO ] Stopping ovirt-fence-kdump-listener service
[ INFO ] Stopping websocket-proxy service
[ INFO ] Stage: Misc configuration
[ INFO ] Stage: Package installation
[ INFO ] Stage: Misc configuration
[ INFO ] Initializing PostgreSQL
[ INFO ] Creating PostgreSQL &amp;rsquo;engine&amp;rsquo; database
[ INFO ] Configuring PostgreSQL
[ INFO ] Creating/refreshing Engine database schema
[ INFO ] Creating CA
[ INFO ] Configuring WebSocket Proxy
[ INFO ] Generating post install configuration file &amp;lsquo;/etc/ovirt-engine-setup.conf.d/20-setup-ovirt-post.conf&amp;rsquo;
[ INFO ] Stage: Transaction commit
[ INFO ] Stage: Closing up&lt;/p>
&lt;p>&amp;ndash;== SUMMARY ==&amp;ndash;&lt;/p>
&lt;p>[WARNING] Less than 16384MB of memory is available
SSH fingerprint: DF:FF:42:14:80:35:E2:7D:68:3A:1F:83:65:6E:89:EA
Internal CA 99:17:7A:42:D0:9D:D7:33:DE:C3:3E:07:EE:15:5D:01:28:63:4A:BF
Web access is enabled at:
&lt;a class="link" href="http://ovirt.xenlab.com:80/ovirt-engine" target="_blank" rel="noopener"
>http://ovirt.xenlab.com:80/ovirt-engine&lt;/a>
&lt;a class="link" href="https://ovirt.xenlab.com:443/ovirt-engine" target="_blank" rel="noopener"
>https://ovirt.xenlab.com:443/ovirt-engine&lt;/a>
Please use the user &amp;ldquo;admin&amp;rdquo; and password specified in order to login
In order to configure firewalld, copy the files from
/etc/ovirt-engine/firewalld to /etc/firewalld/services
and execute the following commands:
firewall-cmd -service ovirt-postgres
firewall-cmd -service ovirt-https
firewall-cmd -service ovirt-fence-kdump-listener
firewall-cmd -service ovirt-websocket-proxy
firewall-cmd -service ovirt-http
The following network ports should be opened:
tcp:443
tcp:5432
tcp:6100
tcp:80
udp:7410
An example of the required configuration for iptables can be found at:
/etc/ovirt-engine/iptables.example&lt;/p>
&lt;p>&amp;ndash;== END OF SUMMARY ==&amp;ndash;&lt;/p>
&lt;p>[ INFO ] Starting engine service
[ INFO ] Restarting httpd
[ INFO ] Stage: Clean up
Log file is located at /var/log/ovirt-engine/setup/ovirt-engine-setup-20150711225251-f9k7an.log
[ INFO ] Generating answer file &amp;lsquo;/var/lib/ovirt-engine/setup/answers/20150711225734-setup.conf&amp;rsquo;
[ INFO ] Stage: Pre-termination
[ INFO ] Stage: Termination
[ INFO ] Execution of setup completed successfully&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>安装成功，用浏览器，访问 ovirt 服务器 IP 地址使用 admin / 密码 登陆管理员控制台，第一次比较慢，验证安装是否完全成功。&lt;/p>
&lt;p>使用命令确认 nfs
[root@ovirt ~]# showmount -e
Export list for ovirt.xenlab.com:
/srv/ovirt/sata 192.168.10.0/24
/srv/ovirt/export 192.168.10.0/24
/srv/ovirt/iso 192.168.10.0/24&lt;/p>
&lt;p>在 ovirt 服务器中添加这三个存储，然后在命令和中确认 iso 存储已经可用。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>[root@ovirt ~]# engine-iso-uploader list
Please provide the REST API password for the admin@internal oVirt Engine user (CTRL+D to abort):
ISO Storage Domain Name | Datacenter | ISO Domain Status
ovirt-iso | Default | active&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>把需要安装的光盘镜像文件，先复制到 ovirt 服务器上，然后传入 iso 存储。&lt;/p>
&lt;p>[bash]&lt;/p>
&lt;p>[martin@martin-fedora iso]$ scp CentOS-7-x86_64-Minimal-1503-01.iso &lt;a class="link" href="mailto:root@192.168.10.25" >root@192.168.10.25&lt;/a>:/root/
The authenticity of host &amp;lsquo;192.168.10.25 (192.168.10.25)&amp;rsquo; can&amp;rsquo;t be established.
ECDSA key fingerprint is SHA256:KMGYLWZu14ZKaUwizIORgQ598Bpc0PKzNWF0qop2VAQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &amp;lsquo;192.168.10.25&amp;rsquo; (ECDSA) to the list of known hosts.
&lt;a class="link" href="mailto:root@192.168.10.25" >root@192.168.10.25&lt;/a>&amp;rsquo;s password:
CentOS-7-x86_64-Minimal-1503-01.iso 100% 636MB 90.9MB/s 00:07
[martin@martin-fedora iso]$&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>用这个命令上传光盘。
engine-iso-uploader upload -i ovirt-iso /root/CentOS-7-x86_64-Minimal-1503-01.iso&lt;/p>
&lt;p>之后就可以在控制台中创建虚拟机了。在 Web 界面上安装虚拟机，是需要安装客户的程序的，在 Fedora 22 笔记本中安装它们。
yum install spice-xpi virt-viewer&lt;/p>
&lt;p>点击新创建的虚拟机，启动之后，选择控制台，打开后，开始系统安装。&lt;/p>
&lt;h2 id="参考文档">参考文档
&lt;/h2>&lt;p>本文没有做截图，是由于以下参考文档都有相关截图和步骤说明；因此，在使用本文档的过程中，一定要同时打开这几篇文档。&lt;/p>
&lt;p>&lt;a class="link" href="http://www.ovirt.org/Quick_Start_Guide#Install_oVirt_Engine_.28Fedora.29%60" target="_blank" rel="noopener"
>http://www.ovirt.org/Quick&lt;em>Start_Guide#Install_oVirt_Engine&lt;/em>.28Fedora.29%60&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://jensd.be/?p=550" target="_blank" rel="noopener"
>http://jensd.be/?p=550&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://xrsa.net/2015/02/04/installing-ovirt-3-5-on-centos-7-hosted-engine/" target="_blank" rel="noopener"
>https://xrsa.net/2015/02/04/installing-ovirt-3-5-on-centos-7-hosted-engine/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.server-world.info/en/note?os=Fedora_22&amp;amp;p=kvm&amp;amp;f=8" target="_blank" rel="noopener"
>http://www.server-world.info/en/note?os=Fedora_22&amp;amp;p=kvm&amp;amp;f=8&lt;/a>&lt;/p></description></item><item><title>Martin's lab 主服务器搭建</title><link>https://martinliu.cn/2015/03/08/e4b8bbe69c8de58aa1e599a8e690ade5bbba/</link><pubDate>Sun, 08 Mar 2015 15:42:01 +0000</pubDate><guid>https://martinliu.cn/2015/03/08/e4b8bbe69c8de58aa1e599a8e690ade5bbba/</guid><description>&lt;p>&lt;img src="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/05/Red-Hat-open-hybrid-cloud-1000x563_0.png"
loading="lazy"
alt="Red-Hat-open-hybrid-cloud-1000x563_0"
>&lt;/p>
&lt;p>上图是红帽产品和技术架构的全貌。来源是：&lt;a class="link" href="http://www.redhat.com/en/technologies/cloud-computing" target="_blank" rel="noopener"
>http://www.redhat.com/en/technologies/cloud-computing&lt;/a> 这张图我用在了我的首次给公司内部的全体销售培训上。由于我是 IT 管理背景的，因此我很习惯从云管理层往下看云引擎的各个层面。但是管理层产品，其实是后来整合纳入的。红帽起家的旗舰产品还是在底层的 RHEL。总之，我想在一个 Lab 里面实现以上所有的部分，所谓实现是让其每个部分都能在运行在假象的一个有意义的业务场景里。还好，红帽的产品全都是基于 x86 平台的，因此我用几个笔记本，再加上我家里的这台 HP MicroServer G8 服务器应该能够全部部署出来。&lt;/p>
&lt;p>做这样的一个 lab 还是要一定的规划和设计的，这些初步的规划和设计都在我的本子里手写的，就不在这里敲字了，随后我会抽空上几张图。&lt;/p>
&lt;h2 id="主服务器基本配置">主服务器基本配置
&lt;/h2>&lt;p>硬件：Lenovo W540 CPU Intel i7, RAM 32 GB, SSD 512GB, HD 1TB&lt;/p>
&lt;p>OS : RHEL 7.1&lt;/p>
&lt;p>订阅是红帽公司的业务模式，也是红帽认为最自豪的部分，红帽相信可以成为开源技术和用户之间的催化剂，它不断参与最优秀的开源技术创新，并为其用户提供最强有利的技术服务和支持。红帽技术员工可以申请一个红帽雇员订阅。我的订阅可以在网上查到如下图所示：&lt;/p>
&lt;p>&lt;a class="link" href="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/03/employee-sub.png" target="_blank" rel="noopener"
>&lt;img src="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/03/employee-sub-520x295.png"
loading="lazy"
alt="employee-sub"
>&lt;/a>&lt;/p>
&lt;p>红帽的服务必须是基于订阅的每一个节点（物理、虚拟）都需要有有效的订阅，否则红帽的支持服务不能生效。对于一个已经成功注册到红帽官网，并且状态正常的服务器，应该显示如下的注册状态：&lt;/p>
&lt;p>[bash]
[root@w540 ~]# subscription-manager list&lt;/p>
&lt;p>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
安装的产品状态
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
产品名称： Red Hat Enterprise Linux Server
产品 ID： 69
版本： 7.0
构架： x86_64
状态： 已订阅
状态详情：
开始： 2014 年 09 月 09 日
结束： 2015 年 12 月 08 日
[/bash]&lt;/p>
&lt;p>红帽员工订阅意味着所有红帽产品。&lt;/p>
&lt;h2 id="基本服务配置">基本服务配置
&lt;/h2>&lt;h3 id="kvm">KVM
&lt;/h3>&lt;p>KVM 的上手还真比我想象的速度要慢一些，起码比我用 XenServer 的经历更加纠结一些。总之现在可以彻底的忘记其它任何的选项，KVM 可以满足我的所有需求了。由于主服务器有 512SSD + 32GB RAM + 8 vCPU，所以我打算把产品里的所有管理控制节点 VM 都部署在这个机器上。预计有 10 个左右的虚拟机。
安装配置方面这里就不赘述了。只把困扰我许久的几个网络配置贴出来，供参考。&lt;/p>
&lt;p>网桥 0 的功能是为所有虚拟机提供外网链接，使他们和主机一样直通主机所物理链接的局域网。
[bash]
[root@w540 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0
DEVICE=br0
ONBOOT=yes
TYPE=Bridge
BOOTPROTO=none
STP=on
DELAY=0
DNS1=192.168.0.1
DEFROUTE=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
DNS2=4.4.4.4
IPADDR=192.168.0.5
PREFIX=24
GATEWAY=192.168.0.1
NM_CONTROLLED=no
[/bash]&lt;/p>
&lt;p>主机原本的一块物理网卡的配置，由于增加了这个网桥，需求更新如下：
[bash]
[root@w540 ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s25
DEVICE=enp0s25
ONBOOT=yes
BRIDGE=br0
NM_CONTROLLED=no
BOOTPROTO=none
[/bash]&lt;/p>
&lt;p>kvm 这块处理这个折腾我很久的 br0 之外，其它的功能看起来还不错，运行在 SSD 上的虚拟机也启动和运行速度飞快。&lt;/p>
&lt;h3 id="repo-服务器">Repo 服务器
&lt;/h3>&lt;p>Repos 是红帽软件仓库的简称。它具体指每个订阅内所有软件频道里面下载出来的软件包目录。下载到的某个软件包频道的 repos 目录中是一堆的 rpm 包文件，这样的目录可以制作成本地 Repos 服务器，能够提供给所有 LAN 里 RHEL OS 用来做软件的安装和升级用。
用主服务器上 1TB 的慢速普通盘来保存这些下载的 repos，安装 http 服务器，把它共享给本 lab 的 lan 中。具体的几个参考脚本如下。&lt;/p>
&lt;p>在把本服务器注册到红帽网站之后，他会默认 attach 一堆可能不需要的 repos，因此我的做法是先关闭掉所有的默认开启，然后再开启我所需要并且关注的东西。
[bash]
[root@w540 repos]# subscription-manager repos &amp;ndash;disable=&amp;quot;*&amp;quot;
[/bash]
以上命令的结果会反问，所有的被关闭的 repos。下面许开启我当前需求的 repos。
[bash]
[root@w540 repos]# cat rhel7-enable.sh
subscription-manager repos &amp;ndash;enable=rhel-7-server-extras-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-capsule-optional-6.0-rpms
subscription-manager repos &amp;ndash;enable=rhel-ha-for-rhel-7-server-rpms
subscription-manager repos &amp;ndash;enable=jb-eap-6-for-rhel-7-server-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-capsule-6.1-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rt-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-openstack-6.0-rpms
subscription-manager repos &amp;ndash;enable=rhel-server-rhscl-7-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rhn-tools-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-capsule-6.0-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-openstack-5.0-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rhevh-rpms
subscription-manager repos &amp;ndash;enable=rhel-atomic-host-rpms
subscription-manager repos &amp;ndash;enable=rhel-rs-for-rhel-7-server-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-capsule-optional-6.1-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rhev-mgmt-agent-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-openstack-6.0-installer-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rh-common-rpms
subscription-manager repos &amp;ndash;enable=jb-eap-6.3-for-rhel-7-server-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-optional-6.0-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-6.1-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-supplementary-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-optional-6.1-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-optional-rpms
subscription-manager repos &amp;ndash;enable=rhel-7-server-satellite-6.0-rpms
subscription-manager repos &amp;ndash;enable=jb-ews-2-for-rhel-7-server-rpms
[/bash]&lt;/p>
&lt;p>接下来可以用命令来从红帽 CDN 同步下载每个 Repos 里面的软件包。
[bash]
[root@w540 rhel70]# cat sync.sh
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-satellite-6.0-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-extras-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-rhevh-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-satellite-capsule-6.0-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-openstack-5.0-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-rhev-mgmt-agent-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-atomic-host-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-optional-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-rs-for-rhel-7-server-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-rh-common-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-server-rhscl-7-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-openstack-6.0-installer-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-openstack-6.0-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=jb-eap-6.3-for-rhel-7-server-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-ha-for-rhel-7-server-rpms &amp;ndash;download_path=/data/Repos/rhel70/
reposync &amp;ndash;gpgcheck &amp;ndash;newest-only &amp;ndash;plugins &amp;ndash;downloadcomps &amp;ndash;repoid=rhel-7-server-supplementary-rpms &amp;ndash;download_path=/data/Repos/rhel70/
[/bash]&lt;/p>
&lt;p>安装 httpd 的过程就不叙述了，下面就贴一个本机的配置文件。
[bash]
Alias /repos &amp;ldquo;/data/repos&amp;rdquo;
&amp;lt;Directory &amp;ldquo;/data/repos&amp;rdquo;&amp;gt;
Options None
AllowOverride None
Order allow,deny
Allow from all
Require all granted&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>最后，在任何需要的机器上本地 repos 源的配置文件可以类似如下：
[bash]
[root@sat6-leb yum.repos.d]# ls
rhel70.repo
[root@sat6-leb yum.repos.d]# cat rhel70.repo
[rhel-7-server-rpms]
name=rhel-7-server-rpms
baseurl=http://192.168.0.5/repos/rhel70/rhel-7-server-rpms/
gpgcheck=0
enable=1&lt;/p>
&lt;p>[/bash]&lt;/p>
&lt;p>当然，我的目标是以后这个 lab 网内所有的机器都需要受到 satellite 6 服务器的管理和控制，并不需要在每个服务器上手动的去安装和管理 repos 内容和订阅。下面分阶段安装各种控制器节点的时候，在详细说明如何使用 satellite 6 做种子服务器生出所有的其他节点。这里的 repo 服务器还是作为最初的种子服务器，它使安装 satellite 6 服务器的源。也是作为 lab 中对于 satellite6 的一个备份选项。&lt;/p>
&lt;h3 id="nfs-服务器">NFS 服务器
&lt;/h3>&lt;p>本机的存储空间比较大，可以作为慢速 NFS 共享存储和 ISO 镜像文件服务器使用，因此，安装 nfs 服务器之后，就可以把本地的满速普通硬盘使用 nfs 的方式共享到 lab 内网了。配置文件参考如下：
[bash]
[root@w540 ~]# cat /etc/exports
/data/nfs 192.168.0.&lt;em>(rw,async)
/data/iso 192.168.0.&lt;/em>(rw,async)
/home/test 192.168.0.&lt;em>(rw,async)
[root@w540 ~]# showmount -e localhost
Export list for localhost:
/home/test 192.168.0.&lt;/em>
/data/iso 192.168.0._
/data/nfs 192.168.0._
[root@w540 ~]#
[/bash]&lt;/p>
&lt;h3 id="ntp-服务器">NTP 服务器
&lt;/h3>&lt;p>根据红帽知识库文档，选择本机这个物理服务器作为 lab 内网的时钟服务器，所有的虚拟机和其他物理机都和他同步时钟。最终的配置还没有确定。随后更新靠谱的可以供参考的配置&lt;/p></description></item><item><title>KVM Virt-Manager 实用参考手册</title><link>https://martinliu.cn/2015/01/06/kvm-virt-manager-e5ae9ee794a8e58f82e88083e6898be5868c/</link><pubDate>Tue, 06 Jan 2015 15:55:02 +0000</pubDate><guid>https://martinliu.cn/2015/01/06/kvm-virt-manager-e5ae9ee794a8e58f82e88083e6898be5868c/</guid><description>&lt;h1 id="关于-virt-manager">关于 virt manager
&lt;/h1>&lt;p>Virt Manager 是一个不错的 kvm 虚拟机管理工具，能够方便地管理虚拟机。我的测试机目前已经完全转向 RHEL7 上跑 KVM 虚拟机，通过 virt-manager 去管理的方案。&lt;/p>
&lt;p>&lt;a class="link" href="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/01/topbar_logo.png" target="_blank" rel="noopener"
>&lt;img src="http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/01/topbar_logo.png"
loading="lazy"
alt="topbar_logo"
>&lt;/a>&lt;/p>
&lt;p>安装 virt-manager：yum install -y virt-* ； 装完之后重新启动机器即可使用。&lt;/p>
&lt;h1 id="建议初始配置">建议初始配置
&lt;/h1>&lt;p>安装完后有几个环境的配置推荐可以做一下。&lt;/p>
&lt;p>&lt;img src="http://martinliu.cn/wp-content/gallery/virt-manager-kvm-1/Screenshot-from-2015-01-06-193413.png"
loading="lazy"
alt="点击New Volume"
>&lt;/p>
&lt;p>Storage Pool ： 一个默认的 + 两个自建的&lt;/p>
&lt;ul>
&lt;li>Default ：这是 virt-manager 安装时默认创建的，它和操作系统在同一个卷上，我的测试机使用 SSD 卷，因此我所有虚拟机都会使用这个卷，这样速度比较快&lt;/li>
&lt;li>hd ：这是测试机上普通磁盘的一个目录，目的是把那些不需要快速 IO 的虚拟机跑着这里，节省 SSD 的磁盘空间&lt;/li>
&lt;li>iso ：这是普通磁盘上的 iso 文件目录，单独挂在这是为了，使用方便&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://martinliu.cn/wp-content/gallery/virt-manager-kvm-1/Screenshot-from-2015-01-06-210927.png"
loading="lazy"
alt="自建的内外1"
>&lt;/p>
&lt;p>虚拟网络 （一个默认+两个新建）&lt;/p>
&lt;ul>
&lt;li>default ： 这个是安装了 virt-manager + kvm 之后就有的，是用 NAT 的方式，带 dhcp，默认虚拟机可以连接物理机所在的外围&lt;/li>
&lt;li>virbr1/virbr2 ：是我根据自己的需要建立的，只能和 host 物理机通讯，无 dhcp&lt;/li>
&lt;/ul>
&lt;p>我最近做 OpenStack 的实践，OpenStack 需要最好隔离的几个网络跑不同的数据，因此 virbr1/2 正好符合 OpenStack 的测试需求。另外我在物理机的操作系统上搭建了 yum 源服务器，因此任何一个虚拟机都可以通过 http 访问我放在物理机上的 repo 目录，我只需要更新这些 repos 目录里面的 rpm 包的内容，我的 lab 环境中的所有虚拟机（不管是在何网络）都可以使用到最新的系统更新包和软件包了。这样大大提高了虚拟机里面软件测试的效率，所有虚拟机像是在本地安装 rpm 软件包一样，再也不需要联网下载，我只需要每周去公司联网同步一下这些目录即可。&lt;/p>
&lt;p>有了以上配置之后，就可以高效工作了，效率感觉比 vmware workstation 要高，速度快稳定。下面是虚拟机创建的流程，里面有些我的推荐做法。&lt;/p>
&lt;p>&lt;img src="http://martinliu.cn/nextgen-attach_to_post/preview/id--53382"
loading="lazy"
>&lt;/p>
&lt;p>本想看下，virt-install 的使用方式，感觉那个参数太多，容易敲错，还是界面比较容易上手，而且出错的机会不高。&lt;/p>
&lt;h1 id="命令行常用操作指南持续更新中">命令行常用操作指南（持续更新中）
&lt;/h1>&lt;p>virt-manager 主要操作还是在命令行比较高效，特别是下面的这些操作，在使用过程中，比较多用，用的多了感觉比 GUI 操作方式效率高多了。&lt;/p>
&lt;p>virt-manager 的命令行功能调用有两种方式：&lt;/p>
&lt;ul>
&lt;li>直接 virsh 回车 ，之后就进入了 virsh # 的一个专门的 shell，help 就能看的里面支持的所有命令&lt;/li>
&lt;li>在普通 shell 下 直接 virsh &amp;lt;操作命令&amp;gt; &amp;lt;参数&amp;gt;，&lt;/li>
&lt;/ul>
&lt;p>这两个方式的调用没有差异，感觉全凭个人的操作习惯。&lt;/p>
&lt;p>下面是一些常用的虚拟机管理功能命令参数和实例。&lt;/p>
&lt;p>开启一个虚拟机&lt;/p>
&lt;p>virsh # start server8-a&lt;/p>
&lt;p>查看所有虚拟机(on and off)&lt;/p>
&lt;p>virsh list &amp;ndash;all&lt;/p>
&lt;p>关闭一个虚拟机&lt;/p>
&lt;p>virsh # shutdown server8-a&lt;/p>
&lt;p>对一个虚拟机作一个快照&lt;/p>
&lt;p>snapshot-create-as server8-a flat-os &amp;ldquo;before customization&amp;rdquo;&lt;/p>
&lt;p>查看虚拟的所有快照&lt;/p>
&lt;p>snapshot-list server8-a&lt;/p>
&lt;p>返回到之前的一个 snapshot&lt;/p>
&lt;p>virsh # snapshot-revert  &amp;ndash;domain server8-a flat-os&lt;/p>
&lt;p>克隆一个虚拟机到新文件（用于模板的复制创建新 vm，或者 vm 的备份）&lt;br>
[root@w540 Desktop]# virt-clone -o rhel70-tmp -n rhel70-tmp-clone -f /data/vm/cloned-new-vm.img&lt;br>
Cloning rhel7-tmp.img                                                                             | 195 GB  00:00:03     &lt;br>
Clone &amp;lsquo;rhel70-tmp-clone&amp;rsquo; created successfully.&lt;/p></description></item></channel></rss>