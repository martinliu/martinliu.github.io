<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps实践指南 on Martin Liu's Blog</title><link>https://martinliu.cn/tags/devops%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</link><description>Recent content in DevOps实践指南 on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 25 Jun 2024 21:44:26 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/devops%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Devops Handbook《DevOps实践指南》简介</title><link>https://martinliu.cn/blog/devops-handbook/</link><pubDate>Sun, 25 Feb 2018 22:27:16 +0800</pubDate><guid>https://martinliu.cn/blog/devops-handbook/</guid><description>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/IT_Revolution_press.png" alt="Featured image of post Devops Handbook《DevOps实践指南》简介" />&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/TMNS-book-review-DevOps-1.png"
loading="lazy"
alt="本文内容主要来源"
>&lt;/p>
&lt;p>企业如何通过DevOps实践提高盈利能力，改善工作文化，实现卓越的生产力目标。如今这些高绩效管理技术比以往的任何时候都要更加重要，由于这对于企业的商业竞争力而言是至关重的，数十年以来，技术组织的领导者们始终在努力地维持这IT系统的敏捷性、可靠性和安全性。然后惨痛的案例依然比比皆是&amp;ndash;不论是healthcare.gov的崩溃，持卡人数据的泄露；还是在云计算环境中大数据的丢失。&lt;/p>
&lt;p>然而，那些运用DevOps原则的高绩效企业（例如Google，Amazon，Facebook，Etsy和Netflix）则每天都可以在生产环境中成百上千次频繁地部署代码。那么DevOps理论、原则和实践到底是何等的殊胜呢？相信所有人在看了本书之后一定会得到答案。&lt;/p>
&lt;h2 id="通过数字看这本书">通过数字看这本书
&lt;/h2>&lt;h3 id="基础数据">基础数据
&lt;/h3>&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/devops-handbook-by-number.png"
loading="lazy"
alt="本文内容主要来源"
>&lt;/p>
&lt;h3 id="原作者4人">原作者4人
&lt;/h3>&lt;p>Jene Kim是这本书的主要作者，他在出版了《凤凰项目》之后，开始与其他三位作者编写本书的。Jez Humble是《持续交付》的作者，是持续交付实践和概念的重要发起人。Patrick Debios是DevOpsDays大会的发起人，是他最早在Twiter是用 #DevOps 这个短标签的，是DevOps运动和社区的重要人物。John Willis是DevOps社区早期的推动者之一，曾任Docker公司生态系统发展总监。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/handbook-AUTHORS.png"
loading="lazy"
alt="authors"
>&lt;/p>
&lt;h3 id="译者4人">译者4人
&lt;/h3>&lt;p>在我和人民邮电出版社联系并进行试译之后，组织了翻译小组。王磊和马博文是我这几年结识的DevOps圈内的技术大拿；曾朝京是IT管理领域的资深专家，是我的前同事。王磊的著作有&lt;a class="link" href="https://www.amazon.cn/dp/B018SRCFI6/" target="_blank" rel="noopener"
>《微服务架构与实践》&lt;/a>；马博文翻译的书籍有&lt;a class="link" href="https://www.amazon.cn/dp/B01LWLRQF3/" target="_blank" rel="noopener"
>《DevOps 实践》&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/devops-handbook-translator.png"
loading="lazy"
alt="translator"
>&lt;/p>
&lt;blockquote>
&lt;p>刘征，Nutanix路坦力资深架构师。Exin首批国内DevOps Master和DevOps Professional认证讲师。持有红帽RHCA认证和AWS高级架构师认证。谙熟企业数据中心的IT服务管理。目前致力于推广DevOps相关的理念和实践，在DevOps社区中积极地参与培训和研讨会等活动，DevOpsDays大会活动在中国的核心组织者。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>王磊，前ThoughtWorks首席咨询师，EXIN首批国内DevOps Master认证教练。较早倡导和实践微服务的先行者，著有国内首本微服务架构相关书籍《微服务架构与实践》一书。超过10年以上的软件行业经验，对服务化架构、持续交付以及DevOps转型等有丰富的实践经验，同时他也是西安DevOpsMeetup联合发起人，西安GDCR组织者，并译有《Ruby Gems开发实战》一书。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>马博文, 前ThoughtWorks 高级咨询师，AWS助理架构师。曾从事多年web开发和DevOps，熟悉持续交付，微服务。参与翻译《Scala编程实战》、《DevOps实践》等书，是西安DevOps Meetup活动的发起人。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>曾朝京，Micro Focus资深解决方案顾问，参加Exin首批国内Devops Master讲师认证培训。长期从事IT运维管理领域咨询工作，曾为能源、金融、航空运输、政府行业中的多个大型企业提供 IT 运维管理规划。目前致力于探索Devops理念在企业IT部门的实践。&lt;/p>&lt;/blockquote>
&lt;p>翻译小组完成翻译，并提交给出版社的日期是2017年12月8日。&lt;/p>
&lt;h2 id="目录提前曝光">目录提前曝光
&lt;/h2>&lt;p>本书目前（本文的发布日期）正处于出版社编辑阶段。预计在五月份左右正式出版。下面是本书的目录。&lt;/p>
&lt;ul>
&lt;li>序言&lt;/li>
&lt;li>前言&lt;/li>
&lt;li>导言：展望DevOps新世界&lt;/li>
&lt;li>第一部分 三步工作法
&lt;ul>
&lt;li>第1章 敏捷、持续交付和三步法&lt;/li>
&lt;li>第2章 第一步，流动原则&lt;/li>
&lt;li>第3章 第二步，反馈原则&lt;/li>
&lt;li>第4章 第三步，持续学习与实验原则&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第二部分 从何处开始
&lt;ul>
&lt;li>第5章 选择合适的价值流作为切入点&lt;/li>
&lt;li>第6章 理解、可视化和运用价值流&lt;/li>
&lt;li>第7章 参考康威定律设计组织结构&lt;/li>
&lt;li>第8章 将运维融入日常开发工作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第三部分 第一步：流的技术实践
&lt;ul>
&lt;li>第9章 为部署流水线奠定基础&lt;/li>
&lt;li>第10章 实现快速可靠的自动化测试&lt;/li>
&lt;li>第11章 应用和实践持续集成&lt;/li>
&lt;li>第12章 自动化和低风险发布&lt;/li>
&lt;li>第13章 降低发布风险的架构&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第四部分 第二步：反馈的技术实践
&lt;ul>
&lt;li>第14章 建立能发现并解决问题的遥测系统&lt;/li>
&lt;li>第15章 分析遥测数据以更好地预测故障和实现目标&lt;/li>
&lt;li>第16章 应用反馈实现安全部署&lt;/li>
&lt;li>第17章 将假设驱动的开发和A/B测试融入日常工作&lt;/li>
&lt;li>第18章 建立评审和协作流程以提升当前工作的质量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第五部分 第三步：持续学习与实验的技术实践
&lt;ul>
&lt;li>第19章 将学习融入每天的工作中&lt;/li>
&lt;li>第20章 将局部经验转化为全局改进&lt;/li>
&lt;li>第21章 预留组织学习和改进的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第六部分 集成信息安全、变更管理和合规性的技术实践
&lt;ul>
&lt;li>第22章 将信息安全融入每个人的日常工作&lt;/li>
&lt;li>第23章 保护部署流水线&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>行动起来 - DevOps手册总结&lt;/li>
&lt;li>附录&lt;/li>
&lt;li>附加资源&lt;/li>
&lt;/ul>
&lt;p>以上目录标题有可能在出版社的编辑过程中会有所调整。不过已经可以看出其主要内容。&lt;/p>
&lt;h2 id="来自出版社-it-revolution-press-october-6-2016">来自出版社-IT Revolution Press (October 6, 2016)
&lt;/h2>&lt;p>&lt;img src="http://res.cloudinary.com/martinliu/image/upload/q_auto:eco/handbook-1.jpg"
loading="lazy"
alt="DevOps Handbook"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://itrevolution.com/book/the-devops-handbook/" target="_blank" rel="noopener"
>IT Revolution Press&lt;/a>是 &lt;em>DevOps Handbook&lt;/em> 一书的的出版社，位于美国的波特兰市。这本书的简体中文版的书名是《DevOps实践指南》，它是作者继《凤凰项目》之后的一个重大作品，它向你展示了如何将产品经理、开发、质量保证、IT运维和信息安全集成在一起，从而帮助你提升企业的竞争力并赢得市场；如何复制前人那些惊人的DevOps经验成果。&lt;/p>
&lt;p>那么《DevOps实践指南》是否适合你？本书的作者Gene Kim、Jez Humble、Patrick Debois和John Willis为那些希望对IT组织进行转型的人共同编写了此书；特别是为那些想通过DevOps实际进行重大的变革，从而提高生产力、盈利能力并赢得市场的人。这本书涉及DevOps转型的很多方面，是一本从规划到实操的全方位指南，同时它还介绍了DevOps的历史背景，支撑DevOps的各种原则，以及数十个DevOps案例研究。它还提供了各种最佳实践，能有助于组织团结团队一心，使他们实现共同目标，同时获得高层领导支持。&lt;/p>
&lt;p>《DevOps实践指南》深入地研究了DevOps的三个基本原则，现在我们称其为“DevOps工作三步法”，它们是流动、反馈、持续学习与实验”。 《DevOps实践指南》是Gene Kim继《凤凰项目》一书之后编写的，在那本书里也对“三步法”作了概括的描述，后来发展成为本书第一部分的重要内容。&lt;/p>
&lt;p>随着本书循序渐进地揭示DevOps工作三步法，读者将能够清晰的了解到，那些高绩效公司是如何利用这些原则取得成功的。希望任何大型组织也能够复制这些高绩效企业所使用过的成功经验，从而指导他们自己也进行一场成功的DevOps转型。本书用六个部分描述了详实的内容，其中包括：&lt;/p>
&lt;ul>
&lt;li>在五年时间里，4位合著者为本书投入了2000多小时的工作时间&lt;/li>
&lt;li>40多个DevOps案例研究，包括亚马逊，Etsy，Capital One，Google，Facebook，Intuit，Nationwide保险等等&lt;/li>
&lt;li>编写了长达400多页的DevOps实践指南、经验总结和工作指导。&lt;/li>
&lt;li>参考和使用来来自25,000多个数据收集点的DevOps相关数据。&lt;/li>
&lt;/ul>
&lt;p>《Phoenix项目》（英文版）已经售出35万本，2018年2月进行了第五次印刷。《DevOps实践指南》从DevOps的历史开始讲起，解释了它是怎样从数十年的相关联的知识体系中发展出来的，以及由此应运而生的相关技术、架构和文化实践。在为读者奠定了这些历史基础后，读者就能够深入了解三步工作法的原则了。读者将逐步对当今的DevOps相关理论和原则有更深入的理解。在本书的相关章节里介绍了各种具体原则和模式，以及如何将它们应用在实际的技术价值流中。&lt;/p>
&lt;p>我们很自豪的宣布 DevOps Handbook - 《DevOps实践指南》获得了2016年，年度DevOps最佳图书奖，详见：&lt;a class="link" href="https://devops.com/the-2016-devops-dozen-winners-announced/" target="_blank" rel="noopener"
>https://devops.com/the-2016-devops-dozen-winners-announced/&lt;/a>&lt;/p>
&lt;h2 id="在亚马逊书网上书店">在亚马逊书网上书店
&lt;/h2>&lt;p>本书的英文版本在亚马逊有三种格式：Kindle、纸质印刷版和有声书版本。这本书的排名和评价如下，下图的抓取时间是：2018-2-25。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/handbook-rank.png"
loading="lazy"
alt="排名"
>&lt;/p>
&lt;ul>
&lt;li>在信息管理分类里排名：7&lt;/li>
&lt;li>在流程和基础架构里排名：107&lt;/li>
&lt;li>在管理书籍里排名：111&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/handbook-reviews.png"
loading="lazy"
alt="书评"
>&lt;/p>
&lt;p>有85%的读者给本书了5星的评价。关于这本书在亚马逊的最新状态，&lt;a class="link" href="https://www.amazon.com/DevOps-Handbook-World-Class-Reliability-Organizations/dp/1942788002/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr=" target="_blank" rel="noopener"
>请点这里。&lt;/a>&lt;/p>
&lt;p>本书的日文版是在2017年6月在日本发布的，&lt;a class="link" href="http://amzn.asia/2Yqn47O" target="_blank" rel="noopener"
>详情见日本亚马逊网站&lt;/a>。&lt;/p>
&lt;h2 id="本书的使用方式">本书的使用方式
&lt;/h2>&lt;p>在上一篇文章《DevOps登山指南》里我分析和介绍了美国金融行业Nationwide保险公司的DevOps案例，&lt;a class="link" href="https://martinliu.cn/posts/devops-climbing-guide/" target="_blank" rel="noopener"
>原文点这里&lt;/a>。这家公司在实施DevOps的过程中将本书做为参考指南，所有DevOps团队通过每周一次的读书会的方式，持续地对照和改进自己的DevOps实践状态。他们总结出来的DevOps项目实施指南如下图所示：&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/devops-climbing-guide.jpg"
loading="lazy"
alt="DevOps登山指南手册"
>&lt;/p>
&lt;p>本图在Nationwide公司内部的使用场景如下：&lt;/p>
&lt;ol>
&lt;li>本图将DevOps实施核心团对指导产品开发团队（也可以说是业务团队、服务团队、这样的团队他们有200多个）取得的经验总结在一张纸上，供其它有实施DevOps想法的团队参考。&lt;/li>
&lt;li>该登山指南简化了对其它非DevOps团队的教育和指引。&lt;/li>
&lt;li>他们将DevOps的实施分成三个阶段，分别用大本营、北坡营地和顶峰作比喻。&lt;/li>
&lt;li>这三个阶段里的技术实践都来自于DevOps Handbook，通过他们的筛选和整理，并根据自己的经验做了分阶段的规划。&lt;/li>
&lt;/ol></description></item><item><title>DevOps工作三步法：第一步流动原则</title><link>https://martinliu.cn/blog/devops-first-way-flow/</link><pubDate>Wed, 21 Feb 2018 23:10:01 +0800</pubDate><guid>https://martinliu.cn/blog/devops-first-way-flow/</guid><description>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/IT_Revolution_press.png" alt="Featured image of post DevOps工作三步法：第一步流动原则" />&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/TMNS-book-review-DevOps-1.png"
loading="lazy"
alt="本文内容主要来源"
>&lt;/p>
&lt;p>本文内容主要来源于《DevOps Handbook》-DevOps实践指南，本文概述的原则是DevOps工作三步法的第一步，它的目标是先建立最底层的基础，即：DevOps技术实践和合理的应用架构；只有这样才能使工作快速而稳定地从开发端流动到运维端；与此同时还能保证不会给生产环境带来混乱，不会中断客户的服务。这就意味着需要降低在生产环境中部署和发布变更的风险。可以通过 &lt;em>持续交付&lt;/em> 的技术实践来实现这个目标。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/first_way.png"
loading="lazy"
alt="The first way flow"
>&lt;/p>
&lt;p>持续交付基于稳定的自动化部署流水线，团队能够使用自动化测试持续验证代码，确保代码始终处于可部署的状态，开发人员要保证每天都向主干提交代码，以及设计和实现有利于实施低发布风险的环境和软件架构。&lt;/p>
&lt;p>在流动原则的指导下，需要开展的重要的工作内容如下：&lt;/p>
&lt;ul>
&lt;li>奠定部署流水线的基础&lt;/li>
&lt;li>实现快速、可靠的自动化测试&lt;/li>
&lt;li>实现并实践持续集成和持续测试&lt;/li>
&lt;li>通过自动化、架构解耦等方式实现低风险发布&lt;/li>
&lt;/ul>
&lt;p>以上技术实践能够有效地缩短创建类生产环境的前置时间。同时，持续测试可以为所有团队成员提供快速的反馈，使小型团队能够安全、独立地开发、测试和向生产环境部署代码，从而将生产环境的部署和发布作为日常工作的一部分。&lt;/p>
&lt;p>此外，通过将QA人员和运维人员的任务集成到DevOps实施团队的日常工作中，能够减少救火、困境以及繁琐的重复劳动的发生，使团队成员的工作高效且充满乐趣。这不仅能提升团队的工作质量，还能提高组织的竞争力。&lt;/p>
&lt;p>流动原则相关的详细技术实践请参考请《DevOps实践指南》一书的第三部分，这部分包含第10章到第13章，一共描述了5个技术实践。&lt;/p>
&lt;p>在流动原则里我们强调的而是全局的目标而不是局部的目标，局部目标的例子如下所示：&lt;/p>
&lt;ul>
&lt;li>特性开发完成率&lt;/li>
&lt;li>测试发现/修复缺陷的比例&lt;/li>
&lt;li>运维的可用性指标&lt;/li>
&lt;/ul>
&lt;p>我们需要减少价值流中的工作交接的次数，由于当交接次数多到一定程度时，所有人就会彻底的迷失，无法回答工作的上下文联系是什么？也不清楚我们要解决的是什么问题？或者组织的全局目标是什么？&lt;/p>
&lt;h2 id="价值流的应用实例">价值流的应用实例
&lt;/h2>&lt;p>如果我们选择做DevOps转型的项目是棕地项目，我们就需要对当前的工作，进行细致的值流研讨和分析；需要画出当前的状态。如下图的示例所示（注：这是一个示例，你的棕地项目分析完之后并非如此）。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/VSM-As-Is.jpg"
loading="lazy"
alt="VSM as is"
>&lt;/p>
&lt;p>为了在实施DevOps的过程中持续的度量和改进，我们需要分析出当前价值流的核心定量指标：&lt;/p>
&lt;ol>
&lt;li>总计前置时间 = 求和价值流中每个工作步骤里的LT 【这个指标是DevOps项目的北极星】&lt;/li>
&lt;li>总计增值时间 = 求和值流中每个工作步骤里的VA&lt;/li>
&lt;li>完成且精确百分比 = 连乘值流中每个工作步骤的%C/A&lt;/li>
&lt;/ol>
&lt;p>如果是绿地项目，我们在第一个工作周里，价值流图是没有这些数值的。我们需要每天都在CI/CD流水线工具中采集相关数据，在每个人的日常工作中关注和记录相关数据，在第二周和后续的每一周里度量和分析以上指标，最好用仪表板展示工具，将这些数据实时地显示在所有项目组成员都可以轻松看到的位置。&lt;/p>
&lt;p>对这个价值流进行持续的优化，使它更高效的工作，并不断的进化和改进。如果是棕地项目，那么在分析完以上的机制流之后，可以定制新的进化版的价值流图，并按照新版本的价值流图重新开始项目的执行。如下图的示例所示（注：这是一个示例，你的棕地项目改进优化完之后并非如此）。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/VSM-To-Be.jpg"
loading="lazy"
alt="VSM as is"
>&lt;/p>
&lt;h2 id="优化和改进日常工作">优化和改进日常工作
&lt;/h2>&lt;h3 id="goldratt博士的约束理论toc">Goldratt博士的约束理论(TOC)
&lt;/h3>&lt;p>在实践运用流动原则的技术实践时，可以使用Goldratt博士给出的方法，随时识别并解决价值流中的约束点，这个五步法如下：&lt;/p>
&lt;ul>
&lt;li>识别系统的约束点。&lt;/li>
&lt;li>决定如何利用这个系统约束点。&lt;/li>
&lt;li>基于上述决定，考虑全局工作。&lt;/li>
&lt;li>改善系统的约束点。&lt;/li>
&lt;li>如果约束点已经突破了，请回到第一步，但要杜绝惯性导致的系统约束。&lt;/li>
&lt;/ul>
&lt;p>以上五步法是DevOps实施项目组日常工作的必备流程优化工具。&lt;/p>
&lt;h3 id="常见的4个约束点">常见的4个约束点
&lt;/h3>&lt;p>传统企业或者团队里最容易发生的约束点有一定的共性，一般可能会按照以下顺序逐个攻克和优化：&lt;/p>
&lt;ol>
&lt;li>环境搭建&lt;/li>
&lt;li>代码部署&lt;/li>
&lt;li>测试的准备和执行&lt;/li>
&lt;li>紧密耦合的架构&lt;/li>
&lt;/ol>
&lt;p>可以清楚的看到大多数约束点比较偏Ops这一侧，而攻克所有这些约束点需要Dev和Ops一起协作完成。&lt;/p>
&lt;h3 id="常见的9中浪费">常见的9中浪费
&lt;/h3>&lt;p>在DevOps工作团队里需要尽快能地避免以下浪费现象的发生：&lt;/p>
&lt;ul>
&lt;li>半成品&lt;/li>
&lt;li>额外/多余工序&lt;/li>
&lt;li>额外/多余功能&lt;/li>
&lt;li>任务切换&lt;/li>
&lt;li>等待&lt;/li>
&lt;li>移动&lt;/li>
&lt;li>缺陷&lt;/li>
&lt;li>非标准或手工操作&lt;/li>
&lt;li>填坑侠&lt;/li>
&lt;/ul>
&lt;p>以上浪费现象最早是从制造行业的精益管理中总结出来的，这些也是完全可以应用到技术价值流中，IT相关的工作能对每一条有很多痛点清晰的解读，你可以尝试在自己的工作环境中寻找以上所有浪费现象。&lt;/p>
&lt;h2 id="devops工作三步工作法-in凤凰项目">DevOps工作三步工作法 in《凤凰项目》
&lt;/h2>&lt;p>在本书中，我们阐述了这一基础原理，即所有开发运维模式都来自“三步工作法”，它旨在阐明指导开发运维的流程与实践的价值观与理念。&lt;/p>
&lt;p>&lt;strong>第一工作法&lt;/strong>是关于从开发到IT运维再到客户的整个自左向右的工作流。为了使流量最大化，我们需要小的批量规模和工作间隔，绝不让缺陷流向下游工作中心，并且不断为了整体目标（相对于开发功能完成率、测试发现/修复比率或运维有效性指标等局部目标）进行优化。&lt;/p>
&lt;p>必要的做法包括持续构建、集成以及部署，按需创建环境，严控半成品，以及构建起能够顺利变更的安全系统和组织。&lt;/p>
&lt;p>&lt;strong>第二工作法&lt;/strong>是关于价值流各阶段自右向左的快速持续反馈流，放大其效益以确保防止问题再次发生，或者更快地发现和修复问题。这样，我们就能在所需之处获取或嵌入知识，从源头上保证质量。&lt;/p>
&lt;p>“必要的做法包括：在部署管道中的构建和测试失败时“停止生产线”；日复一日地持续改进日常工作；创建快速的自动化测试套装软件，以确保代码总是处于可部署的状态；在开发和IT运维之间建立共同的目标和共同解决问题的机制；建立普遍的产品遥测技术，让每个人都能知道，代码和环境是否在按照设定的运行，以及是否达到了客户的目标。&lt;/p>
&lt;p>&lt;strong>第三工作法&lt;/strong> 是关于创造公司文化，该文化可带动两种风气的形成：不断尝试，这需要承担风险并从成功和失败中吸取经验教训；理解重复和练习是熟练掌握的前提。”&lt;/p>
&lt;p>“尝试和承担风险让我们能够不懈地改进工作系统，这经常要求我们去做一些与几十年来的做法大不相同的事。一旦出了问题，不断重复的日常操练赋予我们的技能和经验，令我们可以撤回至安全区域并恢复正常运作。&lt;/p>
&lt;p>必要的做法包括营造一种勇于创新、敢于冒险（相对于畏惧或盲目服从命令）以及高信任度（相对于低信任度和命令控制）的文化，把至少20%的开发和IT运维周期划拨给非功能性需求，并且不断鼓励进行改进。”&lt;/p>
&lt;p>From: [美] 金（Gene Kim ），[美] 贝尔（Kevin Behr），[美] 斯帕福德（George Spafford）. “凤凰项目一个IT运维的传奇故事.”。&lt;/p></description></item></channel></rss>