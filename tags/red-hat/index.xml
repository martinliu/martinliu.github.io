<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Red Hat on Martin Liu's Blog</title><link>https://martinliu.cn/tags/red-hat/</link><description>Recent content in Red Hat on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Aug 2025 16:07:06 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/red-hat/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在 Azure 中使用 Red Hat 的开发者订阅</title><link>https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/</link><pubDate>Sun, 21 May 2023 10:21:15 +0800</pubDate><guid>https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/</guid><description>&lt;img src="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/virtual-machine.webp" alt="Featured image of post 如何在 Azure 中使用 Red Hat 的开发者订阅" />&lt;p>如果你是红帽开源软件的个人开发者（用户），你可以通过“红帽开发者计划”实现访问、下载和使用红帽全系列产品的福利。&lt;/p>
&lt;p>红帽开发者会员的好处是可以免费获得广泛的资料库，包括：&lt;/p>
&lt;ul>
&lt;li>所有红帽软件 （含所有产品及时的更新）&lt;/li>
&lt;li>开发者资源 (technical articles, e-books, cheat sheets, and more)&lt;/li>
&lt;li>Interactive tutorials on the latest technology and Red Hat products&lt;/li>
&lt;li>Free in-person and virtual events with Developer experts&lt;/li>
&lt;li>Free Developer Sandbox to build your apps&lt;/li>
&lt;/ul>
&lt;p>会员资格包括访问：&lt;/p>
&lt;ul>
&lt;li>Red Hat 所有和刹那品，包括 Red Hat Enterprise Linux, OpenShift 和 Ansible 等等&lt;/li>
&lt;li>Red Hat Customer Portal 客户门户的访问权限&lt;/li>
&lt;/ul>
&lt;p>重要资源：&lt;/p>
&lt;ul>
&lt;li>开发者计划介绍：&lt;a class="link" href="https://developers.redhat.com/about" target="_blank" rel="noopener"
>https://developers.redhat.com/about&lt;/a>&lt;/li>
&lt;li>无费用的 Red Hat Enterprise Linux 个人开发者订阅的常见问题：&lt;a class="link" href="https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux#" target="_blank" rel="noopener"
>https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux#&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="red-hat-提供开发者订阅">Red Hat 提供开发者订阅
&lt;/h2>&lt;ul>
&lt;li>Red Hat Enterprise Linux 个人开发者订阅的数量为16个RHEL操作系统实例。&lt;/li>
&lt;li>需要在使用开发者订阅的操作系统上联网激活订阅&lt;/li>
&lt;li>激活的账号和密码与开发者门户的账号相同。&lt;/li>
&lt;li>在 Red Hat 客户门户网站上，你可以管理和续订开发者订阅。&lt;/li>
&lt;/ul>
&lt;p>下图是在客户门户网站上查看当前订阅使用状况的界面。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub.webp"
width="1133"
height="829"
srcset="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub_hu_fa687480d607bb6f.webp 480w, https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub_hu_f87d79721316f63f.webp 1024w"
loading="lazy"
alt=" Red Hat 客户门户网站"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/p>
&lt;p>如果你所使用的公有云里有Red Hat官方支持的 RHEL 镜像，你可以将你的开发者订阅使用在公有云的虚拟机上。在Cloud Access这个页面上，可以看到我将微软的Azure账户和红帽开发者订阅做了关联。&lt;/p>
&lt;p>这样就可以实现：有限数量的 Azure 虚拟机可以运行最新版的 RHEL 操作系统，这些操作系统的 License 计费到了 Red Hat 开发者订阅上；而开发者订阅又是有限免费的，因此实现了这些虚拟机的免费使用 RHEL 订阅。由于我在 Azure 中的长运行虚拟机并不多，因此这些虚拟机目前都是使用的 Red Hat Enterprise Linux。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub-cloud-access.webp"
width="1123"
height="847"
srcset="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub-cloud-access_hu_23d447a9020136b5.webp 480w, https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/red-hat-dev-sub-cloud-access_hu_d46ebd7a1ff95545.webp 1024w"
loading="lazy"
alt="Red Hat 客户门户中的 Cloud Access 管理"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;h2 id="azure-支持-ahb-的混合权益">Azure 支持 AHB 的混合权益
&lt;/h2>&lt;p>参考这篇 Azure 的官方文档&lt;a class="link" href="https://learn.microsoft.com/zh-cn/azure/virtual-machines/linux/azure-hybrid-benefit-linux?tabs=rhelpayg%2Crhelbyos%2CrhelEnablebyos%2Crhelcompliance" target="_blank" rel="noopener"
>《Red Hat Enterprise Linux (RHEL) 和 SUSE Linux Enterprise Server (SLES) 虚拟机的Azure 混合权益》&lt;/a>&lt;/p>
&lt;p>Azure 提供的 AHB（Azure Hybrid Benefit）使用中携带你自己的订阅到公有云里使用的方式。如下图所示。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-hybrid-benefit-compare.webp"
width="1228"
height="761"
srcset="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-hybrid-benefit-compare_hu_ae8ab6ac6fb2f050.webp 480w, https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-hybrid-benefit-compare_hu_b683e1f926558d7.webp 1024w"
loading="lazy"
alt="即用即付”(PAYG) 和“自带订阅”(BYOS)"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>右侧的这个框的说明了 Azure 虚拟机的成本结构。除了计算资源这部分需要计费意外。如果你在 Azure 中开启了 RHEL 虚拟机实例，默认情况下 RHEL 的许可证费用是有 Azure 代收的，Azure 的账单里包含了这部分。&lt;/p>
&lt;p>对于我在 Azrue 中的长运行虚拟机来说，经过我的配置之后，Azure 的账号和 RedHat 开发者订阅关联在了一起。所以这些 RHEL 虚拟机实例上的 RHEL 许可证费用就是在 RedHat 客户门户账号（来自于红帽开发者计划福利）中计费，最多支持 16 个虚拟机的免费使用。&lt;/p>
&lt;h2 id="如何在-azure-中配置个人公司的-rhel-订阅">如何在 Azure 中配置个人（公司）的 RHEL 订阅
&lt;/h2>&lt;p>如下图所示，在创建 Azure 的虚拟机的时候，选择 Red Hat Enterprise Linux 模板。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-rhel-sub.webp"
width="926"
height="1326"
srcset="https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-rhel-sub_hu_729a1f8e12cd90ce.webp 480w, https://martinliu.cn/blog/use-rhel-dev-sub-in-azure/azure-rhel-sub_hu_a95d806538142f98.webp 1024w"
loading="lazy"
alt="配置 RHEL 订阅授权"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="167px"
>&lt;/p>
&lt;p>在授权这个部分，点击第二个“了解更多信息”链接。这时候，浏览器会跳转到红帽客户门户中，在输入了用户名和密码登录了以后，你就完成了红帽开发者订阅和当前 Azure 账户的关联。&lt;/p>
&lt;p>在虚拟机创建完成以后，你可以用 RHEL 的订阅管理命令将当前的 RHEL Linux 操作系统注册到红帽客户门户的订阅上。参考命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">subscription-manager register --org=1234567 --activationkey=DevOps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&amp;mdash;org ：是你在红帽门户中的组织 ID。&lt;/li>
&lt;li>&amp;ndash;activationkey ： 是自己定义的激活秘钥；一个组织可以定义多个激活秘钥，用户部门和用途的区分。&lt;/li>
&lt;/ul>
&lt;p>这条命令中虽然 ID 是不适合明文暴露的；但是，这样避免了将红帽客户门户账户的用户名和密码都以明文的形式写入配置文件，或者在命令中出现：&lt;code>subscription-manager register --username &amp;lt;username&amp;gt; --password &amp;lt;password&amp;gt; --auto-attach&lt;/code>&lt;/p>
&lt;p>在当前操作系统注册成功以后，你可以在&lt;code>/etc/yum.repos.d&lt;/code>下能找到一个&lt;code>redhat.repo&lt;/code>文件。这个文件里包含了当前操作系统所有能使用的红帽产品的订阅。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[root@mysql yum.repos.d]# dnf repolist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating Subscription Management repositories.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">repo id repo name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">packages-microsoft-com-prod packages-microsoft-com-prod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rhel-8-for-x86_64-appstream-rpms Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rhel-8-for-x86_64-baseos-rpms Red Hat Enterprise Linux 8 for x86_64 - BaseOS (RPMs)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考这篇文章《&lt;a class="link" href="https://access.redhat.com/solutions/253273%e3%80%8b" target="_blank" rel="noopener"
>https://access.redhat.com/solutions/253273》&lt;/a>》；就可以启用或者禁用所需要的产品。&lt;/p>
&lt;h2 id="在其他环境中的使用">在其他环境中的使用
&lt;/h2>&lt;p>红帽开发者订阅可以让你在客户门户中下载 RHEL 安装 DVD。可以用 DVD 在私有云或者个人电脑（Home Lab）中安装 RHEL 操作系统。&lt;/p>
&lt;p>使用上面相同的方法，既可以实现 RHEL Linux 操作系统的注册，然后完全合理合法的使用全套红帽产品线。&lt;/p>
&lt;p>红帽开发者订阅的有效期是一年；在到期之后，在还需要在客户门户中免费续签。如果当前的开发者订阅过期了，所有 RHEL 操作系统实例就都不能正常更新和安装新的软件包了。在网站上完成了开发者订阅的免费续签之后，所有系统就可以恢复正常使用，无需做其他任何操作。&lt;/p>
&lt;p>开发者订阅的数量是 16 个，更具我最近一年的使用体验看来，这个数量是足够用的。假如你的虚拟机模板激活了订阅，根据这个虚拟机克隆出来的虚拟机是不需要使用注册命令就可以正常更新和安装软件包的。如果订阅数量真的被用完了，可以暂时从红帽客户门户中暂时删除几个不常用的系统，这样就释放出来几个可用的 RHEL 订阅。&lt;/p>
&lt;h2 id="排错">排错
&lt;/h2>&lt;p>新创建的 RHEL 8 的虚拟机，在激活红帽 RHEL 订阅之后，在更新系统软件安装包的时候，报 SSL 证书过期错误，可以参考下面的命令进行解决。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yum --disablerepo=&amp;#39;*&amp;#39; remove &amp;#39;rhui-azure-rhel8&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://rhelimage.blob.core.windows.net/repositories/rhui-microsoft-azure-rhel8.config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum --config=rhui-microsoft-azure-rhel8.config install rhui-azure-rhel8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum update ca-certificates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum clean all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>容器化应用的设计原则</title><link>https://martinliu.cn/blog/cloud-native-container-design/</link><pubDate>Sat, 24 Mar 2018 20:51:01 +0800</pubDate><guid>https://martinliu.cn/blog/cloud-native-container-design/</guid><description>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/BingWallpaper-2018-03-20.jpg" alt="Featured image of post 容器化应用的设计原则" />&lt;p>本文来自于Red Hat咨询顾问Bilgin Ibryam所编写的一篇白皮书，名为《PRINCIPLES OF CONTAINER-BASED APPLICATION DESIGN》。这篇文章在作者的Blog上发表后，作者的twitter被Kubernetes官方twitter转发。白皮书在Red Hat官网的下载地址：&lt;a class="link" href="https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper" target="_blank" rel="noopener"
>https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper&lt;/a> 文本是对这篇文章的学习和整理。&lt;/p>
&lt;p>先回顾经典的软件设计原则：&lt;/p>
&lt;ul>
&lt;li>保持简单，愚蠢（KISS）&lt;/li>
&lt;li>不要重复自己（DRY）&lt;/li>
&lt;li>你不会需要它 （YAGNI）&lt;/li>
&lt;li>关注点分离（SoC）&lt;/li>
&lt;li>Single responsibility, Open/closed, Liskov substitution, Interface segregation, Dependency inversion （SOLID）&lt;/li>
&lt;/ul>
&lt;p>然后是Red Hat的云原生容器设计原则：&lt;/p>
&lt;ul>
&lt;li>唯一关注性原则（SCP）&lt;/li>
&lt;li>高度可观测性原则（HOP）&lt;/li>
&lt;li>生命周期一致性原则（LCP）&lt;/li>
&lt;li>镜像不可变性原则（IIP）&lt;/li>
&lt;li>进程可处置性原则（PDP）&lt;/li>
&lt;li>自包含性原则（S-CP）&lt;/li>
&lt;li>运行时约束性原则（RCP）&lt;/li>
&lt;/ul>
&lt;p>很多组织都理解云原生的重要性和必要性，但是并不知道从哪里开始。那么请确保：云原生平台和容器化应用能无缝的运行在一起，并且具备抵御故障的能力，甚至在底层的基础架构出现宕机的时候，也能通过过弹性扩展的方式表现出可靠性。本文描述了容器化应用时需要遵循的基本准则，实施这些原则有助于使之与云原生平台Kubernetes更加适配。&lt;/p>
&lt;h2 id="唯一关注性原则-single-concern-principlescp">唯一关注性原则 SINGLE CONCERN PRINCIPLE（SCP）
&lt;/h2>&lt;p>在许多方面，唯一关注性原则与来自SOLID的SRP是类似的，它建议一个类应该只有一个责任。SRP背后的动机是每个责任是变更的一个轴心，一个类应该有，且也只有一个需要改变的理由。SCP原则中的“关注”一词强调关注是一种更高层次的抽象的责任，而且它更好地将范围描述为一个容器而不是一个类。虽然SRP的主要动机是变化原因的唯一性，而SCP的主要动机是容器镜像重用和可替换性。如果你创建一个解决单个问题的容器，并且以功能完整的方式来实现，不同应用程序中的容器镜像重用的可能性就会更高。&lt;/p>
&lt;p>因此，SCP原则规定每个集容器都应该解决一个问题，并做得很好。 实现这一点，通常比在面向对象的世界中实现SRP更容易，容器通常管理的一个单一的进程，大多数情况下一个进程解决一个问题。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/scp.png"
loading="lazy"
alt="scp 容器化应用的设计原则"
>&lt;/p>
&lt;p>如果你的容器化微服务需要解决多个问题，它可以使用这样的模式，将多个容器用sidecar和init-containers的模式合并成一个部署单元（pod），这样每个容器仍然是处理单个问题。同样，您可以替换处理同样问题的容器。 例如，将Web服务器容器或队列实现容器，更新为更具可扩展性的容器。&lt;/p>
&lt;h2 id="高度可观测性原则-high-observability-principlehop">高度可观测性原则 HIGH OBSERVABILITY PRINCIPLE（HOP）
&lt;/h2>&lt;p>容器提供了一种统一的方式来打包和运行应用程序，将它们视为一个黑盒子对象。 但任何旨在成为云原生公民的容器都必须提供API支持，要为运行时环境编写接口（API），以观察容器的健康状况和行为。 这是自动化容器更新和生命周期回收的基本先决条件和统一的方式，从而提高系统的弹性和用户体验。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/hop.png"
loading="lazy"
alt="hop 容器化应用的设计原则"
>&lt;/p>
&lt;p>实际上，您的容器化应用程序必须至少为其提供不同类型的健康检查的API&amp;ndash;活动和就绪等状态。更好的应用程序的行为则必须提供其他手段来观察容器化应用程序的状态。应用程序应该将重要事件记录到标准错误（STDERR）和标准输出（STDOUT）中，从而通过统一的日志聚合工具（诸如Fluentd和Logstash之类的工具）进行分析，并与跟踪和指标收集库相结合，例如OpenTracing，Prometheus等。&lt;/p>
&lt;p>将您的应用程序视为黑盒子，但实施所有必要的API以帮助平台对其进行观测，并以最佳方式管理您的应用程序。&lt;/p>
&lt;h2 id="生命周期一致性原则-life-cycle-conformance-principlelcp">生命周期一致性原则 LIFE-CYCLE CONFORMANCE PRINCIPLE（LCP）
&lt;/h2>&lt;p>HOP规定了你的容器提供供平台观测的API。 LCP则规定：您的应用程序有办法读取来自平台的事件。 此外，除了获得事件以外，容器还应该对这些事件相应地作出反应。这就是此原则名字由来。这几乎就像在应用程序通过一个“写入API”与平台进行交互。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/lcp.png"
loading="lazy"
alt="lcp 容器化应用的设计原则"
>&lt;/p>
&lt;p>来自管理平台的各种事件都是为了帮助您管理您的容器的生命周期的。决定处理哪些事件取决于您的应用程序 以及是否对这些事件做出反应。&lt;/p>
&lt;p>但有些事件比其他事件更重要。例如，任何需要一个干净的关闭进程，这就需要捕获信号：终止（SIGTERM）消息，并尽可能迅速关闭。 这是为了避免通过强制关闭信号：kill（SIGKILL），之后跟随一个SIGTERM。&lt;/p>
&lt;p>还有其他事件，例如PostStart和PreStop，可能对您的应用程序生命周期管理也非常重要。 例如，某些应用程序需要在服务之前进行预热请求和一些需要在关闭干净之前释放资源。&lt;/p>
&lt;h2 id="镜像不可变性原则-image-immutability-principleiip">镜像不可变性原则 IMAGE IMMUTABILITY PRINCIPLE（IIP）
&lt;/h2>&lt;p>IMAGE IMMUTABILITY PRINCIPLE（IIP）容器化的应用程序是不可变更的，镜像一旦完成了构建，预计在不同的环境中运行都不会改变。这意味着在因外部环境的不同，在需要的时候需要使用外部手法处理所依赖的外部配置数据，而不是每个环境修改或者构建不同的容器。而容器应用程序中的任何变更，都应该因此触发构建新的容器映像，并在所有环境中重用它。相同于这个原理的，不可变服务器和不可变基础架构的概念也很受欢迎，并且对于服务器/主机管理也是如此。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/iip.png"
loading="lazy"
alt="iip 容器化应用的设计原则"
>&lt;/p>
&lt;p>在遵循IIP原则的情况下，应该防止为不同的环境创建相似的容器镜像，要始终坚持为所有环境只配置一个容器映像。 这个原则允许在应用程序更新期间，采用自动回滚和前滚等做法，这是云原生自动化的重要方面。&lt;/p>
&lt;h2 id="进程可处置性原则-process-disposability-principlepdp">进程可处置性原则 PROCESS DISPOSABILITY PRINCIPLE（PDP）
&lt;/h2>&lt;p>迁移到容器应用程序的主要动机之一是：容器需要尽可能做到临时性，并做好在任何时候被另一个容器实例替换的准备。需要更换容器的原因有很多，比如：健康检查失败、缩容、应用程序将容器迁移到不同的主机，平台资源匮乏或其它的问题。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/pdp.png"
loading="lazy"
alt="pdp 容器化应用的设计原则"
>&lt;/p>
&lt;p>这意味着容器化的应用程序必须保持其状态为向外扩展的或分布式和冗余的。这也意味着应用程序应该快速启动和关闭，甚至为彻底的硬件故障做好准备。 实施这一原则的另一个有用的做法是创建小容器。 容器在云原生环境可以自动调度并在不同的主机上启动。较小的容器可以实现更快启动时间，因为在重新启动之前容器镜像需要被物理地复制到主机系统。&lt;/p>
&lt;h2 id="自包含性原则-self-containment-principles-cp">自包含性原则 SELF-CONTAINMENT PRINCIPLE（S-CP）
&lt;/h2>&lt;p>这个原则规定一个容器应该在构建时包含所有需要的东西。容器的存在应该仅仅依赖于Linux®内核，在并添加相关额外的库，在容器构建时加入它们。除了库之外，它还应该包含语言运行时，应用程序平台（如果需要），以及运行所需的其他依赖关系，等运行容器化应用所需要的诸如此类的东西。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/s-cp.png"
loading="lazy"
alt="s-cp 容器化应用的设计原则"
>&lt;/p>
&lt;p>唯一的例外是：由于不同环境之间差异，并且只能在运行时提供的配置; 例如，通过Kubernetes提供的ConfigMap。&lt;/p>
&lt;p>某些应用程序由多个容器组件组成。 例如，容器化的Web应用程序也可能需要数据库容器。 根据这个原则，并不建议合并两个容器。相反，它建议的是数据库容器只包含运行数据库所需的所有内容，Web应用程序容器只包含运行Web应用程序所需的所有内容，如Web服务器。 在运行时，Web应用程序容器将根据需要依赖于并访问数据库容器。&lt;/p>
&lt;h2 id="运行时约束性原则-runtime-confinement-principlercp">运行时约束性原则 RUNTIME CONFINEMENT PRINCIPLE（RCP）
&lt;/h2>&lt;p>S-CP从构建时的角度查看容器，并关注于生成的二进制文件及其内容。但是容器不仅仅是磁盘上一个只有尺寸大小的单一维度的黑盒子。 容器运行时有多个维度，例如内存使用维度，CPU使用维度等资源消耗维度。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/rcp.png"
loading="lazy"
alt="rcp 容器化应用的设计原则"
>&lt;/p>
&lt;p>这个RCP原则建议每个容器申报资源需求，并发送信息到平台。它应该分享容器的资源配置文件，从CPU，内存，网络，磁盘的角度声明。这影响到平台如何执行调度，自动扩展，容量 管理以及容器常规的服务级别协议（SLA）等。&lt;/p>
&lt;p>除了向平台声明容器的资源需求之外，还有一点也很重要， 应用被约束在使用所声明的资源需求内。如果应用程序对资源的使用保持在约束的范围内，则当资源匮乏发生时，平台不太可能将其终止和迁移。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>云原生不仅仅是一种最终状态 - 它也是一种工作方式。 本份白皮书描述了一系列容器应用的基本原则，必须遵守才能成为优秀的云原生公民。&lt;/p>
&lt;p>除了这些原则之外，创建良好的容器应用程序还需要熟悉其他容器相关的最佳实践和技术。 尽管上述原则非常根本，适用于大多数用例，下面列出的最佳实践在应用和不应用的时候，则需要判断力。以下是一些与容器相关的更常见的最佳实践：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>镜像要尽可能的小&lt;/strong>。 通过清理临时文件，并避免安装不必要的软件包来构建小尺寸镜像。 这减少了容器的尺寸，构建时间和复制容器镜像的网络传输时间。&lt;/li>
&lt;li>&lt;strong>支持任意用户ID&lt;/strong>。 避免使用sudo命令或要求特定用户名运行你的容器。&lt;/li>
&lt;li>&lt;strong>标记重要的端口&lt;/strong>。 虽然可以在运行时指定端口号，然而使用EXPOSE命令在运行的时候指定，则可以让镜像的使用者更轻松。&lt;/li>
&lt;li>&lt;strong>为持久数据使用卷&lt;/strong>。 在容器摧毁之后还需要保存的容器数据的，必须将数据写入一个数据卷。&lt;/li>
&lt;li>&lt;strong>设置镜像元数据&lt;/strong>。 以标签和注释形式存在的镜像元数据可以使您的容器镜像更加实用，从而为使用您的容器的开发人员提供了更好的体验。&lt;/li>
&lt;li>&lt;strong>使主机和镜像同步&lt;/strong>。 一些容器应用需要容器在某些属性（如时间和机器ID）上与主机同步。&lt;/li>
&lt;/ul>
&lt;p>这里是指向各种模式和最佳实践的资源的链接，以帮助您能有效地实现上述目标：&lt;/p>
&lt;ul>
&lt;li>• &lt;a class="link" href="https://www.slideshare.net/luebken/container-patterns" target="_blank" rel="noopener"
>https://www.slideshare.net/luebken/container-patterns&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices" target="_blank" rel="noopener"
>https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="http://docs.projectatomic.io/container-best-practices" target="_blank" rel="noopener"
>http://docs.projectatomic.io/container-best-practices&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://docs.openshift.com/enterprise/3.0/creating_images/guidelines.html" target="_blank" rel="noopener"
>https://docs.openshift.com/enterprise/3.0/creating_images/guidelines.html&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf" target="_blank" rel="noopener"
>https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://leanpub.com/k8spatterns/" target="_blank" rel="noopener"
>https://leanpub.com/k8spatterns/&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://12factor.net" target="_blank" rel="noopener"
>https://12factor.net&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>