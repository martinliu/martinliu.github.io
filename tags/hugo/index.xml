<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on Martin Liu's Blog</title><link>https://martinliu.cn/tags/hugo/</link><description>Recent content in Hugo on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 25 Jun 2024 21:44:26 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>为 Hugo 网站添加 Elastic RUM 用户体验监控</title><link>https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/</link><pubDate>Fri, 08 Dec 2023 09:44:13 +0800</pubDate><guid>https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/</guid><description>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/pexels-amina-filkins-5424636.jpg" alt="Featured image of post 为 Hugo 网站添加 Elastic RUM 用户体验监控" />&lt;p>&amp;ldquo;Elastic RUM&amp;rdquo; 是指 Elastic Observability 中的实时用户体验监控（Real User Monitoring，RUM）功能，是 Elastic Stack 中的一部分。Elastic Stack 是一个开源的数据存储和分析平台，包括 Elasticsearch、Logstash、Kibana 和 Beats 等组件，用于处理和分析各种类型的数据。&lt;/p>
&lt;p>Real User Monitoring（RUM）是一种用于监控网站或应用程序性能的技术。它通过追踪和分析实际用户与网站或应用程序交互的数据，从而提供有关用户体验的实时信息。RUM 的关键目标是了解用户在访问网站时经历的性能和交互情况，以便开发人员和运维团队可以识别并解决潜在的性能问题，从而提高用户满意度。&lt;/p>
&lt;p>Elastic RUM 的优势包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>实时性能监控：&lt;/strong> Elastic RUM 提供实时性能监控，使你能够迅速发现并解决用户可能遇到的性能问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>端到端可观测性：&lt;/strong> 与 Elastic Stack 的其他组件集成，Elastic RUM 可以与日志、指标和其他数据源一起使用，为你提供端到端的可观测性，帮助你全面了解应用程序的运行状况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户行为分析：&lt;/strong> Elastic RUM 能够捕获用户与应用程序的交互信息，使你能够分析用户行为、浏览模式和访问路径，从而优化用户体验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可定制性：&lt;/strong> 你可以根据特定的需求和业务场景定制 Elastic RUM 的配置，以满足不同应用程序和网站的监控需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成弹性搜索：&lt;/strong> Elastic RUM 与 Elasticsearch 弹性搜索紧密集成，允许你使用 Elasticsearch 强大的搜索和分析功能来查询和可视化实时用户体验数据。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Elastic RUM 通过提供实时性能监控和与 Elastic Stack 的集成，帮助开发人员和运维团队更好地理解和优化用户体验，提高应用程序的性能和可用性。&lt;/p>
&lt;h2 id="elastic-rum-概述">Elastic RUM 概述
&lt;/h2>&lt;p>Elastic APM实时用户体验监控（RUM）JavaScript代理提供了对你的Web应用程序的详细性能指标和错误跟踪。它内置了对流行平台和框架的支持，并提供了用于自定义仪表化的API。&lt;/p>
&lt;p>该代理还支持所有出站请求的分布式跟踪。这使你能够分析整个微服务架构的性能——一切尽在一个视图中。&lt;/p>
&lt;p>特性：&lt;/p>
&lt;ul>
&lt;li>代理使用浏览器定时API（如导航定时、资源定时、绘制定时、用户定时等），并捕获以下信息：&lt;/li>
&lt;li>页面加载指标&lt;/li>
&lt;li>静态资产的加载时间（JS、CSS、图像、字体等）&lt;/li>
&lt;li>API请求（XMLHttpRequest和Fetch）&lt;/li>
&lt;li>单页面应用程序导航&lt;/li>
&lt;li>用户交互（触发网络活动的点击事件）&lt;/li>
&lt;li>用户中心指标（长任务、FCP、LCP、FID等）&lt;/li>
&lt;li>页面信息（访问的URL和引荐者）&lt;/li>
&lt;li>网络连接信息&lt;/li>
&lt;li>JavaScript错误&lt;/li>
&lt;li>分布式跟踪&lt;/li>
&lt;li>拆分指标&lt;/li>
&lt;/ul>
&lt;h2 id="准备-js-agent-代码">准备 JS Agent 代码
&lt;/h2>&lt;p>本文以 Hugo 网站为例，介绍如何为 Hugo 网站添加 Elastic RUM 监控。我使用 Elastic Cloud 的 SaaS 服务作为数据存储和分析平台，你也可以使用自己搭建的 Elastic Stack 集群。&lt;/p>
&lt;p>本博客所使用的主题是 &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener"
>hugo-theme-stack 由 Jimmy 设计&lt;/a>。为其他主题添加 Elastic RUM 的过程类似，只是配置文件的位置和内容可能有所不同。&lt;/p>
&lt;p>根据 Elastic Cloud 的页面上的配置向导，我们可以找到 Elastic RUM 的 JavaScript 代码，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://your-cdn-host.com/path/to/elastic-apm-rum.umd.min.js&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elasticApm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;my-service-name&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://d4c649267e404779a895b41199d5db98.apm.ap-east-1.aws.elastic-cloud.com:443&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上代码片段，你需要根据你的前端部署的实际情况，进行调整后，才能正常工作。&lt;/p>
&lt;p>如下图所示：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum.png"
width="1038"
height="1304"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum_hu_83854c93783ae49e.png 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum_hu_25df643506007609.png 1024w"
loading="lazy"
alt="Elastic APM RUM"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="191px"
>&lt;/p>
&lt;p>在 APM 的配置向导里，我们先点击 RUM（JS）这个标签，然后页面中会出现为前端项目添加 Elastic RUM 的 JavaScript 代码的两种方式。&lt;/p>
&lt;ol>
&lt;li>可以使用 &lt;code>npm install @elastic/apm-rum --save&lt;/code> 将代理作为依赖项安装到您的应用程序。然后可以在您的应用程序中初始化和配置代理。适用于与大多数的前端项目。而 Hugo 是一个静态网站生成器，不需要使用 npm 安装 Elastic RUM。&lt;/li>
&lt;li>本文直接使用的是选项二。将 Elastic RUM 的 JavaScript 代码复制到 Hugo 网站的 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中。&lt;/li>
&lt;/ol>
&lt;p>下面是我在 Hugo 网站的 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中添加的 Elastic RUM 的 JavaScript 代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/js/elastic-apm-rum.umd.min-5.15.0.js&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elasticApm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;martin-blog&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">environment&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;production&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;1.5.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://d4c649267e404779a895b41199d5db98.apm.ap-east-1.aws.elastic-cloud.com:443&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相关参数的说明如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>serviceName&lt;/code>：服务名称，这里我使用的是 Hugo 网站的名称。&lt;/li>
&lt;li>&lt;code>environment&lt;/code>：环境名称，这里我使用的是 &lt;code>production&lt;/code>。&lt;/li>
&lt;li>&lt;code>serviceVersion&lt;/code>：服务版本，这里我使用的是 Hugo 网站的版本号。&lt;/li>
&lt;li>&lt;code>serverUrl&lt;/code>：Elastic Cloud 的 APM 服务地址。&lt;/li>
&lt;li>&lt;code>src=&amp;quot;/js/elastic-apm-rum.umd.min-5.15.0.js&amp;quot;&lt;/code> 这里我将 Elastic RUM 的 JavaScript 代码下载到了 Hugo 网站的 &lt;code>static/js&lt;/code> 目录下，然后在 &lt;code>layouts/partials/footer/custom.html&lt;/code> 文件中引用。你也可以将其放在一个可用于你的多个网站共享参考的 CDN 上，然后使用 CDN 的地址。&lt;/li>
&lt;/ul>
&lt;p>对 Elastic RUM JS Agent 的其他详细参数的使用参考文档见：&lt;a class="link" href="https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html" target="_blank" rel="noopener"
>https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html&lt;/a>&lt;/p>
&lt;h2 id="hugo-站点的改造">Hugo 站点的改造
&lt;/h2>&lt;p>根据你所使用的 theme 的不同，你需要找到在 &lt;code>footer&lt;/code> 中添加 Elastic RUM 的 JavaScript 代码的位置。根据我的Hugo主题用户文档的介绍：&lt;a class="link" href="https://stack.jimmycai.com/config/header-footer" target="_blank" rel="noopener"
>https://stack.jimmycai.com/config/header-footer&lt;/a>。&lt;/p>
&lt;p>我在 Hugo 网站的根目录下创建了目录：&lt;code>layouts/partials/footer&lt;/code>，然后创建了文件：&lt;code>custom.html&lt;/code>，并将 Elastic RUM 的 JavaScript 代码添加到了这个文件中。&lt;/p>
&lt;p>我的具体实现结果，可以参考我的网站的代码：&lt;a class="link" href="https://github.com/martinliu/martinliu.github.io.git" target="_blank" rel="noopener"
>https://github.com/martinliu/martinliu.github.io.git&lt;/a>&lt;/p>
&lt;h2 id="elastic-rum-的效果">Elastic RUM 的效果
&lt;/h2>&lt;p>在完成了以上的步骤后，我们可以在 Elastic Cloud 的 RUM 和 APM 页面上看到 Hugo 网站的用户体验监控数据了。&lt;/p>
&lt;p>点击Kibana界面左侧导航栏里的 &lt;code>User Experience 仪表板&lt;/code> 就可以看到下图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2.png"
width="3982"
height="3736"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2_hu_2498debf707d6ba0.png 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-2_hu_c327181e0a29c92.png 1024w"
loading="lazy"
alt="Elastic APM RUM 用户体验分析"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;h3 id="页面加载持续时间">页面加载持续时间
&lt;/h3>&lt;p>这个高层次的概述是你分析的起点，回答了诸如：“我的服务器响应请求需要多长时间？”、“解析和绘制内容花费了多少时间？”、“我的网站接收了多少页面浏览？”等问题。&lt;/p>
&lt;p>仅从这些指标中观察，你可能无法解决任何问题，但当你深入挖掘数据时，你将对整体情况有所了解。&lt;/p>
&lt;h3 id="用户体验指标">用户体验指标
&lt;/h3>&lt;p>用户体验指标帮助你了解你的网站的感知性能。例如，首次内容绘制是浏览器开始呈现内容的时间戳。换句话说，用户在这个时候首次得到页面正在加载的反馈。&lt;/p>
&lt;p>指标参考如下：&lt;/p>
&lt;ul>
&lt;li>首次内容绘制：侧重于初始呈现，测量从页面开始加载到页面的任何部分显示在屏幕上的时间。代理使用浏览器中可用的Paint定时API来捕获时间信息。&lt;/li>
&lt;li>总阻塞时间：在首次内容绘制和事务完成之间发生的每个长任务的阻塞时间之和（持续时间超过50毫秒）。总阻塞时间是时间到交互（TTI）的极好伴侣，后者是实验室指标，不能通过浏览器API在领域中获取。代理根据页面加载生命周期中发生的长任务数量捕获TBT。&lt;/li>
&lt;li>长任务：长任务是任何占用UI线程较长时间（大于50毫秒）并阻止执行其他关键任务（帧速率或输入延迟）的用户活动或浏览器任务。&lt;/li>
&lt;li>长任务数量：长任务的数量。&lt;/li>
&lt;li>最长长任务持续时间：页面上最长长任务的持续时间。&lt;/li>
&lt;li>所有长任务的总持续时间：所有长任务的总持续时间&lt;/li>
&lt;/ul>
&lt;p>这些指标讲述了关于用户如何体验你的网站的重要故事。但开发人员不应该成为解释和采取这些信号的专家；他们应该花时间对这些指标提供的机会做出反应。因此（以及许多其他原因），Elastic已经采纳了Google核心Web Vitals。&lt;/p>
&lt;p>核心Web Vitals是Google最近推出的一项倡议，旨在引入一组新的度量标准，通过量化真实用户体验更好地分类良好和糟糕的网站。这是通过查看三个关键指标来实现的：加载性能、视觉稳定性和互动性：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals.png"
width="1920"
height="570"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals_hu_40764d0b95d66272.png 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/web-dev-vitals_hu_76aa94b8dde20464.png 1024w"
loading="lazy"
alt="Web要点"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>
（图片来源：&lt;a class="link" href="https://web.dev/vitals%ef%bc%89" target="_blank" rel="noopener"
>https://web.dev/vitals）&lt;/a>&lt;/p>
&lt;ul>
&lt;li>最大内容绘制（LCP）: 加载性能。LCP是页面的主要内容可能已加载的时间戳。对于用户来说，这是您网站的感知加载速度。为了提供良好的用户体验，Google建议将LCP控制在2.5秒以下。&lt;/li>
&lt;li>首次输入延迟（FID）: 加载响应性。FID测量用户首次与页面互动（如点击）之间的时间，以及页面能够响应这些互动的时间。为了提供良好的用户体验，Google建议将FID控制在100毫秒以下。&lt;/li>
&lt;li>累积布局偏移（CLS）: 视觉稳定性。由于异步资源加载或动态内容添加而导致内容移动了吗？CLS测量这些令人沮丧的意外布局变化。为了提供良好的用户体验，Google建议将CLS得分控制在0.1以下。&lt;/li>
&lt;/ul>
&lt;h3 id="加载查看分布">加载/查看分布
&lt;/h3>&lt;p>操作系统、浏览器家族和地理位置都可能对访问者体验你的网站产生巨大影响。这些数据可以帮助你了解用户何时、从哪里访问你的网站，并帮助你优化的优先级——例如，为访问你的站点最多的浏览器优先进行改进。&lt;/p>
&lt;p>不要忘记，这些数据还会影响搜索引擎页面排名和内容站点在热门故事中的位置——而无需使用AMP。&lt;/p>
&lt;h3 id="错误细分">错误细分
&lt;/h3>&lt;p>JavaScript错误可能对用户在你的网站上的体验产生负面影响。但是，用户软件和硬件的差异使得几乎不可能测试每种组合。而且，随着JavaScript变得越来越复杂，对用户体验监控和错误报告的需求也在不断增加。错误监控通过在生产环境中显示发生在你的网站上的JavaScript错误，使这些错误可见。&lt;/p>
&lt;p>点击Kibana界面左侧导航栏里的 &lt;code>APM 服务&lt;/code> ，选择我的 blog 的服务名称，就可以看到下图。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3.png"
width="1775"
height="1206"
srcset="https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3_hu_392dd6749e20389.png 480w, https://martinliu.cn/blog/add-elastic-rum-to-hugo-site/elastic-cloud-apm-rum-3_hu_dd1ccf8f1403724b.png 1024w"
loading="lazy"
alt="Elastic APM"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>由于 Elastic RUM 和 Elastic APM 实现的是全链路的追踪，如果我的 Blog 会访问到其他后台服务，而且那些后台服务也接入了 APM 监控，那么在 APM 的界面里，就可以看到端到端的追踪监控视图。&lt;/p>
&lt;p>虽然，我的这个 Blog 网站是一个无后台的静态网站，但是在 APM 中也能看到很多数据分析，包括：&lt;/p>
&lt;ul>
&lt;li>延迟&lt;/li>
&lt;li>吞吐量&lt;/li>
&lt;li>事务&lt;/li>
&lt;li>错误&lt;/li>
&lt;/ul>
&lt;p>当然，我们还可以根据这些数据，使用 Elastic 的机器学习进行异常检查分析，从而并不需要为任何一个指标的数值做阀值告警管理；当然如果某个指标恰好是我们所需要的 SLI，那么我们可以在 SLO 管理功能中，其设置 SLO 的数值，并增加告警策略。&lt;/p>
&lt;p>在完成了以上配置之后，Elastic RUM 帮助我发现了一个问题：Blog 网站的部分图片使用了腾讯云的对象存储，我的腾讯云账户由于欠费，对象存储服务应该是已经停止服务一段时间了，因此部分图片已经无法正常加载，影响到很多篇文章上图片的正常显示。我会根据 Elastic RUM 的错误告警，尽快将那些无法加载图片的文章页面进行修复。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>本文介绍了如何为 Hugo 网站添加 Elastic RUM 监控。Elastic RUM 是 Elastic Observability 中的实时用户体验监控（Real User Monitoring，RUM）功能，是 Elastic Stack 中的一部分。&lt;/p>
&lt;p>如果读者也运行着 Hugo 的网站，可以参考本文，完成 Elastic RUM 的接入。当然其他的静态网站生成器构建的网站也可以参考这个过程，只是具体的实现方式可能有所不同。这里所介绍的知识和配置方式，也同样适用于你正在工作的前端项目。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.elastic.co/guide/en/observability/current/user-experience.html" target="_blank" rel="noopener"
>Elastic RUM 产品文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html" target="_blank" rel="noopener"
>Real User Monitoring JavaScript Agent 配置参考&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/what-is/real-user-monitoring" target="_blank" rel="noopener"
>Elastic RUM 概述&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/cloud/" target="_blank" rel="noopener"
>Elastic Cloud&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/apm" target="_blank" rel="noopener"
>Elastic Cloud APM 解决方案&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.elastic.co/cn/apm/real-user-monitoring" target="_blank" rel="noopener"
>Elastic Cloud APM RUM 概述&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Feature picture ❤️ Amina Filkins: &lt;a class="link" href="https://www.pexels.com/photo/crop-man-with-documents-and-laptop-at-table-5424636/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/crop-man-with-documents-and-laptop-at-table-5424636/&lt;/a>&lt;/p></description></item><item><title>更新到 Jimmy Cai 的 Stack Hugo Theme</title><link>https://martinliu.cn/blog/change-to-jimmy-stack-theme/</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><guid>https://martinliu.cn/blog/change-to-jimmy-stack-theme/</guid><description>&lt;img src="https://martinliu.cn/blog/change-to-jimmy-stack-theme/2022-10-1-beijing-guomao.jpg" alt="Featured image of post 更新到 Jimmy Cai 的 Stack Hugo Theme" />&lt;p>趁着更新 Blog 皮肤的机会，也把我拖延很久的一些优化补一补。&lt;/p>
&lt;p>最新版本的 Hugo 可以使用 Hugo modules 功能加载一个新的 Theme，我是第一次通过这种方式添加新皮肤，犯了几个错误：&lt;/p>
&lt;ol>
&lt;li>首先不应该用 &lt;code>git clone theme-url theme/&lt;/code> 或者其他手工下载的方式了，应该使用文档中说的 &lt;code>hugo mod get -u github.com/CaiJimmy/hugo-theme-stack/v3&lt;/code> 方法。&lt;/li>
&lt;li>在本地测试的话，需要确保本地的 Hugo 安装的是 extended 的扩展版本，否则有些短代码用不了。用这条命令检查 &lt;code>hugo version&lt;/code> ，应该返回类似这样的信息：&lt;code>hugo v0.104.2+extended darwin/arm64 BuildDate=unknown&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>更新了 GitHub Action 的工作流，实现了如下的想法：&lt;/p>
&lt;ul>
&lt;li>deploy-2-page.yml : 在所有分支的 push 操作上触发构建动作，并且把更新的网站内容发布到 GitHub Pages 的部署分支中，用这个方式实现线上的网站内容预览；当新的分支在本地预览正常后，就可以 push 到远程了，push 之后就可以先在 martinliu.github.io 的域名下实现分支合并前的线上预览，如果线上预览正常的话，在进行合并分支 pr 的操作；如果线上预览有问题，则继续在本地更新，直到线上预览正常之后在合并。&lt;/li>
&lt;li>page-deploy.yml : 当 master 分支上收到 pr 时触发这个发布操作，我将 GitHub Pages 的免费空间当做了发布前的预览的空间；而网站的内容是通过 CloudFlare 的 Pages 功能 host 的。通过这种方式，将 GitHub 的所有功能和空间作为开发服务；而 CloudFlare 定位为 DNS 和静态内的生产环境。&lt;/li>
&lt;/ul>
&lt;p>目前我的 blog 的工作流程是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第一步：在本地创建新的分支，并 push 同步到远程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> git branch build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> git checkout build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">M themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Switched to branch &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> git push origin build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, reused &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Create a pull request &lt;span class="k">for&lt;/span> &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span> on GitHub by visiting:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: https://github.com/martinliu/martinliu.github.io/pull/new/build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * &lt;span class="o">[&lt;/span>new branch&lt;span class="o">]&lt;/span> build-your-best-rack -&amp;gt; build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第二步：用 hugo 命令创建新文章的文件，然后开始编写更新新文章&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> hugo new content/post/build-your-best-rack/index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content &lt;span class="s2">&amp;#34;/Users/martinliu/code/martinliu.github.io/content/post/build-your-best-rack/index.md&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第三步：本地预览正常后，push 到 GitHub Pages 空间在远程预览 https://martinliu.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> ✗ git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> ✗ git commit -m &lt;span class="s2">&amp;#34;review new post online&amp;#34;&lt;/span>&lt;span class="o">[&lt;/span>build-your-best-rack e21fffe8f&lt;span class="o">]&lt;/span> review new post online
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> file changed, &lt;span class="m">6&lt;/span> insertions&lt;span class="o">(&lt;/span>+&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create mode &lt;span class="m">100644&lt;/span> content/post/build-your-best-rack/index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>build-your-best-rack&lt;span class="o">)&lt;/span> git push --set-upstream origin build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enumerating objects: 9, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Counting objects: 100% &lt;span class="o">(&lt;/span>9/9&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Delta compression using up to &lt;span class="m">10&lt;/span> threads
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Compressing objects: 100% &lt;span class="o">(&lt;/span>5/5&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Writing objects: 100% &lt;span class="o">(&lt;/span>6/6&lt;span class="o">)&lt;/span>, &lt;span class="m">540&lt;/span> bytes &lt;span class="p">|&lt;/span> 540.00 KiB/s, &lt;span class="k">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total &lt;span class="m">6&lt;/span> &lt;span class="o">(&lt;/span>delta 3&lt;span class="o">)&lt;/span>, reused &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">remote: Resolving deltas: 100% &lt;span class="o">(&lt;/span>3/3&lt;span class="o">)&lt;/span>, completed with &lt;span class="m">3&lt;/span> &lt;span class="nb">local&lt;/span> objects.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 49d889b6e..e21fffe8f build-your-best-rack -&amp;gt; build-your-best-rack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">branch &lt;span class="s1">&amp;#39;build-your-best-rack&amp;#39;&lt;/span> &lt;span class="nb">set&lt;/span> up to track &lt;span class="s1">&amp;#39;origin/build-your-best-rack&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第四步：在 GitHub 上发起并合并 pr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 第五步：删除本地特性分支，删除远程特性分支，更新本地 master 分支。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>change-to-new-theme&lt;span class="o">)&lt;/span> git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">warning: unable to rmdir &lt;span class="s1">&amp;#39;themes/hugo-theme-stack&amp;#39;&lt;/span>: Directory not empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Switched to branch &lt;span class="s1">&amp;#39;master&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your branch is behind &lt;span class="s1">&amp;#39;origin/master&amp;#39;&lt;/span> by &lt;span class="m">5&lt;/span> commits, and can be fast-forwarded.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>use &lt;span class="s2">&amp;#34;git pull&amp;#34;&lt;/span> to update your &lt;span class="nb">local&lt;/span> branch&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git push origin --delete origin/change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: unable to delete &lt;span class="s1">&amp;#39;origin/change-to-new-theme&amp;#39;&lt;/span>: remote ref does not exist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: failed to push some refs to &lt;span class="s1">&amp;#39;github.com:martinliu/martinliu.github.io.git&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git push origin --delete change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To github.com:martinliu/martinliu.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &lt;span class="o">[&lt;/span>deleted&lt;span class="o">]&lt;/span> change-to-new-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➜ martinliu.github.io git:&lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span> ✗ git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据这款新皮肤的提示，我查看了最新的 Hugo 的文档，为了发挥这个皮肤的图像 resize 功能，并且遵从新的编写 post 的规范。以后的所有新文章的 md 文件和图片文件都需要放到一个独立的新目录中。&lt;/p>
&lt;p>新创建一篇 post 的时候使用这个命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">hugo new content/post/new-blog-test/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在站点的根目录下执行这条命令后，会帮你创建新的目录和 &lt;code>index.md&lt;/code> 文件；由于我的站点默认使用了中文语言，因此，如果我想写一篇英文的文章的话，我就需要将 md 文件的名字写成 &lt;code>index.en.md&lt;/code> ；这个皮肤支持双语的，如果这篇文章也有中英两个版本的话，md 文件就应该有两个：&lt;/p>
&lt;ul>
&lt;li>index.zh-cn.md&lt;/li>
&lt;li>index.en.md&lt;/li>
&lt;/ul>
&lt;p>这样就有了中英文的两个独立的页面，而且两种语言各自的页面上，都会有一个语言切换的按钮，所以这个皮肤对于双语，或者多语言写作的人来说，应该是非常顺手的一个选择。我将主导航的那些页面都做出了双语的版本。&lt;/p>
&lt;p>由于，我最后的所有静态文件和图片都发布到了 CloudFlare 的 Pages 服务里，而且它们还提供 CDN 服务，而这个功能在 GitHub Pages 空间中是不提供的。因此，以前我用 GitHub Pages host 这个 blog 的时候，每次编写和发布新文章的时候，还需要手工的将图片上传到其它第三方的图床空间中，然后在更新 md 文章中图片的网址，其实还是比较繁琐和麻烦的。&lt;/p>
&lt;p>这个国庆节期间，我基本上也完成了 home lab 的 Rack 搭建项目，初步效果如下：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack.png"
width="1500"
height="2000"
srcset="https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack_hu_7b943cdfe1b07774.png 480w, https://martinliu.cn/blog/change-to-jimmy-stack-theme/new-rack_hu_7f5b3da66f1748dd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>以上这张图片放置在了和 md 文件相同的目录中，插入这张图片的代码就变得异常简单了 &lt;code>![](new-rack.png)&lt;/code> ；而且图片也被拉伸到了和文章页面宽度等宽，大小合适的情况下会充满页面宽度，而且能够自适应浏览器显示器的宽度。&lt;/p>
&lt;p>后续会出一些关于这个 home lab 的文章。&lt;/p>
&lt;p>关于这个皮肤的使用文档，请访问： &lt;a class="link" href="https://docs.stack.jimmycai.com/" target="_blank" rel="noopener"
>https://docs.stack.jimmycai.com/&lt;/a>&lt;/p>
&lt;p>如果你也喜欢这个风格的皮肤，请查看： &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>hugo-theme-stack-stater&lt;/a>&lt;/p>
&lt;p>遗留问题：&lt;/p>
&lt;ul>
&lt;li>左上角的头像图片无法正常显示&lt;/li>
&lt;li>添加一种免费好用的评论互动插件&lt;/li>
&lt;li>增加搜索功能&lt;/li>
&lt;/ul></description></item><item><title>将笔记本上的Hugo站点分享给局域网里的其他人</title><link>https://martinliu.cn/blog/share-hugo-site-to-lan/</link><pubDate>Thu, 04 Jan 2018 07:33:32 +0800</pubDate><guid>https://martinliu.cn/blog/share-hugo-site-to-lan/</guid><description>&lt;img src="https://martinliu.cn/images/abstract-12.jpg" alt="Featured image of post 将笔记本上的Hugo站点分享给局域网里的其他人" />&lt;p>我的笔记本上有好几个 Hugo 做的静态的站点，有自己的个人 Blog，有公司产品的培训文档；其中的有些站点内容，有可能是不方便发布到 Internet 上，有可能是你的观众并没有条件访问 Internet，但是使大家同在一个局域网里是一个很现实很方便的做法。那么怎样以最小的代价实现这个需求呢？&lt;/p>
&lt;h2 id="选择-hugo-服务器启动参数">选择 Hugo 服务器启动参数
&lt;/h2>&lt;p>为了满足以上需求，在启动 Hugo 服务器的时候需要增加两个参数，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">martin@bogon:source/martinliu-hugo ‹master*›$ hugo server --bind 192.168.1.107 --baseURL http://192.168.1.107/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Started building sites ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Built site for language en:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0 draft content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0 future content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0 expired content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">387 regular pages created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1100 other pages created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0 non-page files copied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">668 paginator pages created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">509 tags created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">37 categories created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total in 922 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Watching for changes in /Users/martin/source/martinliu-hugo/{content,static,themes}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Serving pages from memory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Web Server is available at http://192.168.1.107:1313/ (bind address 192.168.1.107)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对以上参数的解释：&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;bind 192.168.1.107 ：这个 192 的 IP 地址是笔记本目前局域网（Wifi）的地址，其他人需要和你同在这个局域网里，或者能够访问到这个网段的地址&lt;/li>
&lt;li>&amp;ndash;baseURL &lt;a class="link" href="http://192.168.1.107/" target="_blank" rel="noopener"
>http://192.168.1.107/&lt;/a> ： 这会覆盖 Hugo 站点里根目录下配置文件里的 baseURL 参数，有可能配置文件中这个参数是类似于 &lt;a class="link" href="http://martinliu.cn/" target="_blank" rel="noopener"
>http://martinliu.cn/&lt;/a> ，如果不加这个参数的话网站上的相关图片会显示不出来。&lt;/li>
&lt;/ul>
&lt;h2 id="配置笔记本电脑的防火墙">配置笔记本电脑的防火墙
&lt;/h2>&lt;p>以 macOS 为例，当你启动了这个 Hugo 服务器的时候，你访问 Security &amp;amp; Privacy 配置的时候，选择 Firewall 标签的时候，会自动弹出一个对话框，询问是否允许 incoming 的网络连接到 hugo 的应用服务。点击允许即可，这样防火墙配置里就多了一条配置，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/hugo-firewall-rule.jpeg"
loading="lazy"
alt="firewall"
>&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>Hugo 可以很方便的将本地站点分享给局域网里的其它人，只需要在启动的时候加上适当的参数，配置好本机的防火墙策略即可。&lt;/p></description></item></channel></rss>