<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>学习路线图 on Martin Liu's Blog</title><link>https://martinliu.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link><description>Recent content in 学习路线图 on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 18 Sep 2025 17:26:30 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>90% 的人 DevOps 转型失败：一份真正奏效的路线图</title><link>https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0800</pubDate><guid>https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/</guid><description>&lt;img src="https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/image_0_94126cb8.png" alt="Featured image of post 90% 的人 DevOps 转型失败：一份真正奏效的路线图" />&lt;p>几年前，我困在了一个没有前途的 Linux 技术支持岗位上，上夜班，看不到任何成长。尽管有9年经验，我的薪水却微薄，健康状况每况愈下，也没有社交生活。我眼看着大学同学在事业上平步青云，而我却仍旧陷在自己的舒适区里。&lt;/p>
&lt;p>但当我决定转型到 DevOps 时，一切都改变了。经过4-5个月的集中学习，我找到了一份薪水翻了3倍的工作。这种转变不仅仅是职业上的，更是个人生活上的。我找回了生活，重拾了自信，最终找到了既有挑战又令我兴奋的工作。&lt;/p>
&lt;p>今天，我想分享正是这个路线图，让我的转型成为可能。这不仅仅是另一篇泛泛的“学习这些工具”的文章——这是一条真实、经过实践检验的路径，它帮助我在没有任何该领域经验的情况下，成功进入了 DevOps (开发运维) 领域。&lt;/p>
&lt;h2 id="什么是-devops">什么是 DevOps？
&lt;/h2>&lt;p>简单来说，DevOps 是一种组织遵循的方法论 (methodology)，旨在将开发团队 (development team) 和运维团队 (operations team) 合并成一个统一的团队。通过这种方式，两个团队共同协作，高效地开发和部署应用程序。&lt;/p>
&lt;p>DevOps 是一个广义术语 (umbrella term)，它涵盖了各种用于自动化应用程序开发和部署过程的工具。DevOps 的主要好处之一是，通过自动化这些过程，与手动方法相比，它更省时，也更不容易出错。这种自动化缩短了产品上市时间 (Time to Market, TTM)，使其成为快速发展公司的理想选择。&lt;/p>
&lt;h2 id="你将面临哪些困难以及如何克服它们">你将面临哪些困难（以及如何克服它们）？
&lt;/h2>&lt;p>让我坦诚地谈谈你将遇到的挑战：&lt;/p>
&lt;p>&lt;strong>资源过多&lt;/strong> 最大的问题不是找不到教程，而是不知道该选择哪个！有成千上万的课程、博客和视频。你可能会浪费几周时间只为了决定学什么，结果反而更困惑，而不是取得进展。&lt;/p>
&lt;p>&lt;strong>到处都是糟糕的路线图&lt;/strong> 大多数在线学习路径要么过于简单（“只需学习 Docker！”），要么过于复杂（列出50多种工具）。你需要一个切合你初学者水平和繁忙日程的现实路线图。&lt;/p>
&lt;p>&lt;strong>试图一次性学完所有东西&lt;/strong> 你会想同时学习 Docker、Kubernetes、AWS 和 Terraform。这种跳跃式的学习会导致知识掌握不深，并带来倦怠。&lt;strong>一次只专注于一件事。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>工具过载和社媒喧嚣&lt;/strong>
你会看到人们每周都在社媒上谈论“最新最棒”的工具。不要落入这个陷阱。专注于核心基础知识，并首先掌握必要的工具。忽略这些喧嚣，保持简单——你不需要 20 种工具才能成功。&lt;/p>
&lt;p>&lt;strong>感到力不从心&lt;/strong>
DevOps 拥有大量的工具和令人困惑的术语。你有时会感到迷茫。别担心——即使是经验丰富的工程师也会有这种感觉。这是正常的，随着时间推移会好转。&lt;/p>
&lt;h2 id="完整的-6-个月-devops-路线图">完整的 6 个月 DevOps 路线图
&lt;/h2>&lt;p>本路线图旨在让你从完全的初学者成长为能够胜任工作的 DevOps 工程师。每个月的内容都在前一个月的基础上进行，在增加复杂性之前打下坚实的基础。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/image_1_2eeeb884.png"
width="640"
height="427"
srcset="https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/image_1_2eeeb884_hu_998e192d4afb0653.png 480w, https://martinliu.cn/blog/90-of-people-fail-at-devops-heres-the-roadmap-that/image_1_2eeeb884_hu_fd4c3f5b3227c065.png 1024w"
loading="lazy"
alt="DevOps 6个月学习路线图"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;h2 id="第一月基础技能--linux网络shell-脚本和-git">第一月：基础技能 — Linux、网络、Shell 脚本和 Git
&lt;/h2>&lt;p>&lt;strong>第 1-2 周：Linux 基础知识&lt;/strong> Linux 构成了大多数 DevOps 基础设施 (infrastructure) 的支柱。首先学习你作为 DevOps 工程师每天都会用到的基本命令行技能。&lt;/p>
&lt;p>需要掌握的关键技能：&lt;/p>
&lt;ul>
&lt;li>文件和目录管理 (ls, cd, mkdir, rm, cp, mv)&lt;/li>
&lt;li>文件权限和所有权 (chmod, chown, umask)&lt;/li>
&lt;li>进程管理 (ps, top, htop, kill, jobs)&lt;/li>
&lt;li>系统监控 (df, du, free, uptime, iostat)&lt;/li>
&lt;li>文本处理工具 (grep, awk, sed, cut, sort, uniq)&lt;/li>
&lt;li>包管理 (apt, yum, rpm)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 3 周：网络基础知识&lt;/strong> 理解网络对于故障排除和设计可扩展系统至关重要。&lt;/p>
&lt;p>基本网络概念：&lt;/p>
&lt;ul>
&lt;li>IP 地址和子网划分 (IPv4, IPv6)&lt;/li>
&lt;li>OSI 模型 (OSI model) 和 TCP/IP 协议栈 (TCP/IP stack)&lt;/li>
&lt;li>DNS 解析 (DNS resolution) 和配置&lt;/li>
&lt;li>网络诊断工具 (ping, traceroute, netstat, ss)&lt;/li>
&lt;li>防火墙 (Firewall) 和安全组 (Security Group)&lt;/li>
&lt;li>负载均衡 (Load Balancing) 概念&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 4 周：Shell 脚本和 Git&lt;/strong> 通过脚本实现自动化和版本控制是基本的 DevOps 技能。&lt;/p>
&lt;p>Shell 脚本技能：&lt;/p>
&lt;ul>
&lt;li>变量 (Variable) 和环境变量 (Environment Variable)&lt;/li>
&lt;li>控制结构 (if/else, 循环, case 语句)&lt;/li>
&lt;li>函数 (Function) 和脚本组织&lt;/li>
&lt;li>错误处理和退出码 (Exit Code)&lt;/li>
&lt;li>Cron 任务 (Cron Job) 和任务调度&lt;/li>
&lt;/ul>
&lt;p>Git 版本控制：&lt;/p>
&lt;ul>
&lt;li>仓库初始化和克隆&lt;/li>
&lt;li>基本命令 (add, commit, push, pull, status)&lt;/li>
&lt;li>分支策略和合并&lt;/li>
&lt;li>冲突解决&lt;/li>
&lt;li>GitHub 工作流 (workflow) 和协作&lt;/li>
&lt;/ul>
&lt;h2 id="第二月云平台和容器化">第二月：云平台和容器化
&lt;/h2>&lt;p>&lt;strong>第 1-2 周：AWS 云基础知识&lt;/strong> 专注于一个主要的云平台来建立深厚的专业知识。AWS 在市场中处于领先地位，使其成为初学者的最佳选择。&lt;/p>
&lt;p>核心 AWS 服务：&lt;/p>
&lt;ul>
&lt;li>EC2 (弹性计算云) 用于虚拟服务器&lt;/li>
&lt;li>VPC (虚拟私有云) 用于网络&lt;/li>
&lt;li>S3 (简单存储服务) 用于对象存储&lt;/li>
&lt;li>IAM (身份和访问管理) 用于安全&lt;/li>
&lt;li>RDS (关系型数据库服务) 用于托管数据库&lt;/li>
&lt;li>负载均衡器 (ALB, NLB) 用于流量分发&lt;/li>
&lt;li>自动扩缩组 (Auto Scaling Groups) 用于弹性&lt;/li>
&lt;li>CloudWatch 用于监控和日志记录&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 3-4 周：Docker 容器化&lt;/strong> 容器化通过在不同阶段提供一致的环境，彻底改变了应用程序部署方式。&lt;/p>
&lt;p>Docker 基础：&lt;/p>
&lt;ul>
&lt;li>容器与虚拟机概念&lt;/li>
&lt;li>Docker 架构和组件&lt;/li>
&lt;li>镜像创建与管理&lt;/li>
&lt;li>Dockerfile 最佳实践和优化&lt;/li>
&lt;li>容器网络和卷&lt;/li>
&lt;li>注册表管理 (Docker Hub, ECR)&lt;/li>
&lt;/ul>
&lt;p>Docker Compose：&lt;/p>
&lt;ul>
&lt;li>多容器应用编排&lt;/li>
&lt;li>服务定义和网络&lt;/li>
&lt;li>环境变量和 Secrets 管理&lt;/li>
&lt;li>卷挂载和数据持久化&lt;/li>
&lt;/ul>
&lt;h2 id="第三个月基础设施即代码和-cicd-自动化">第三个月：基础设施即代码和 CI/CD 自动化
&lt;/h2>&lt;p>&lt;strong>第 1-2 周：使用 Terraform 实现基础设施即代码&lt;/strong>&lt;/p>
&lt;p>基础设施即代码 (IaC) 是区分初级 DevOps 工程师和高级专业人士的关键。&lt;/p>
&lt;p>Terraform 要点：&lt;/p>
&lt;ul>
&lt;li>Terraform (HCL) 语法&lt;/li>
&lt;li>Provider 和资源管理&lt;/li>
&lt;li>状态管理和远程后端&lt;/li>
&lt;li>变量、输出和数据源&lt;/li>
&lt;li>模块化可重用基础设施&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 3 周：使用 GitHub Actions 实现 CI/CD&lt;/strong>&lt;/p>
&lt;p>持续集成 (Continuous Integration) 和持续部署 (Continuous Deployment) 自动化了软件交付管道。&lt;/p>
&lt;p>CI/CD 管道组件：&lt;/p>
&lt;ul>
&lt;li>工作流触发器和事件&lt;/li>
&lt;li>作业 (Jobs)、步骤 (Steps) 和操作 (Actions)&lt;/li>
&lt;li>针对多环境的矩阵构建 (Matrix Builds)&lt;/li>
&lt;li>Secrets 和环境变量管理&lt;/li>
&lt;li>部署策略 (滚动部署、蓝绿部署、金丝雀部署)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 4 周：AWS ECS 容器编排&lt;/strong>&lt;/p>
&lt;p>在初期阶段，学习容器编排可以避开 Kubernetes 的复杂性。&lt;/p>
&lt;p>ECS 基础：&lt;/p>
&lt;ul>
&lt;li>集群管理和容量提供程序 (Capacity Providers)&lt;/li>
&lt;li>任务定义和服务配置&lt;/li>
&lt;li>服务发现和负载均衡&lt;/li>
&lt;li>自动扩缩策略和方案&lt;/li>
&lt;/ul>
&lt;h2 id="第四个月kubernetes-生态系统和高级编排">第四个月：Kubernetes 生态系统和高级编排
&lt;/h2>&lt;p>&lt;strong>第 1 周：Kubernetes 基础&lt;/strong>&lt;/p>
&lt;p>Kubernetes 是大规模容器编排的行业标准。&lt;/p>
&lt;p>Kubernetes 核心概念：&lt;/p>
&lt;ul>
&lt;li>集群架构 (主节点、工作节点、etcd)&lt;/li>
&lt;li>Pods、Deployments 和 ReplicaSets&lt;/li>
&lt;li>Services 和 Ingress 控制器&lt;/li>
&lt;li>用于配置的 ConfigMaps 和 Secrets&lt;/li>
&lt;li>持久卷 (Persistent Volumes) 和存储类 (Storage Classes)&lt;/li>
&lt;li>用于资源隔离的命名空间 (Namespaces)&lt;/li>
&lt;li>RBAC (基于角色的访问控制)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 2 周：Kubernetes 高级特性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于有状态应用的 StatefulSets&lt;/li>
&lt;li>用于节点级服务的 DaemonSets&lt;/li>
&lt;li>用于批处理的 Jobs 和 CronJobs&lt;/li>
&lt;li>水平 Pod 自动扩缩 (Horizontal Pod Autoscaling, HPA)&lt;/li>
&lt;li>用于流量控制的网络策略 (Network Policies)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 3 周：使用 Prometheus 和 Grafana 进行监控&lt;/strong>&lt;/p>
&lt;p>可观测性 (Observability) 对于维护大规模可靠系统至关重要。&lt;/p>
&lt;p>Prometheus 监控：&lt;/p>
&lt;ul>
&lt;li>指标收集和存储&lt;/li>
&lt;li>服务发现配置&lt;/li>
&lt;li>告警规则和通知路由&lt;/li>
&lt;/ul>
&lt;p>Grafana 可视化：&lt;/p>
&lt;ul>
&lt;li>仪表盘创建和模板化&lt;/li>
&lt;li>面板类型和可视化选项&lt;/li>
&lt;li>告警管理和通知渠道&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 4 周：使用 ArgoCD 和 Helm 进行 GitOps&lt;/strong>&lt;/p>
&lt;p>GitOps 代表了部署自动化的未来。&lt;/p>
&lt;p>ArgoCD 实现：&lt;/p>
&lt;ul>
&lt;li>GitOps 原则和工作流&lt;/li>
&lt;li>应用定义和同步策略&lt;/li>
&lt;li>多集群管理&lt;/li>
&lt;li>渐进式交付策略&lt;/li>
&lt;/ul>
&lt;p>Helm 包管理：&lt;/p>
&lt;ul>
&lt;li>Chart 结构和模板化&lt;/li>
&lt;li>Values 文件和环境定制&lt;/li>
&lt;li>Chart 仓库和分发&lt;/li>
&lt;/ul>
&lt;h2 id="第五个月python-自动化和事件驱动架构">第五个月：Python 自动化和事件驱动架构
&lt;/h2>&lt;p>&lt;strong>第 1-2 周：用于 DevOps 自动化的 Python&lt;/strong>&lt;/p>
&lt;p>Python 因其简洁性和丰富的库生态系统而成为 DevOps 自动化的首选语言。&lt;/p>
&lt;p>Python DevOps 要点：&lt;/p>
&lt;ul>
&lt;li>自动化所需的 Python 基础知识&lt;/li>
&lt;li>使用 API 和 JSON 数据&lt;/li>
&lt;li>错误处理和日志记录最佳实践&lt;/li>
&lt;li>用于云自动化的 AWS SDK (boto3)&lt;/li>
&lt;li>基础设施自动化脚本&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 2 周：AWS Lambda 和无服务器架构&lt;/strong>&lt;/p>
&lt;p>无服务器计算 (Serverless Computing) 消除了基础设施管理开销。&lt;/p>
&lt;p>Lambda 基础：&lt;/p>
&lt;ul>
&lt;li>函数创建和部署&lt;/li>
&lt;li>事件源和触发器&lt;/li>
&lt;li>环境变量和配置&lt;/li>
&lt;li>性能优化和冷启动&lt;/li>
&lt;/ul>
&lt;p>事件驱动架构：&lt;/p>
&lt;ul>
&lt;li>用于消息队列的 Amazon SQS&lt;/li>
&lt;li>用于发布/订阅消息的 Amazon SNS&lt;/li>
&lt;li>用于事件路由的 Amazon EventBridge&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第 3-4 周：高级无服务器模式&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于工作流编排的 Step Functions&lt;/li>
&lt;li>API Gateway 集成&lt;/li>
&lt;li>成本优化策略&lt;/li>
&lt;/ul>
&lt;h2 id="第六个月真实项目和求职准备">第六个月：真实项目和求职准备
&lt;/h2>&lt;p>最后一个月将专注于构建一个项目作品集，以展示你解决实际业务问题的能力。&lt;/p>
&lt;p>&lt;strong>能让你获得工作的 5 个项目作品集：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>自动化基础设施监控与告警系统&lt;/strong>&lt;/li>
&lt;li>&lt;strong>基于 GitOps 自动化（GitOps Automation）的多环境基础设施&lt;/strong>&lt;/li>
&lt;li>&lt;strong>容器化微服务平台（Containerized Microservices Platform）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>事件驱动的无服务器（Serverless）数据处理管线&lt;/strong>&lt;/li>
&lt;li>&lt;strong>带合规自动化（Compliance Automation）的 DevSecOps（开发安全运维一体化）管线&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>求职准备策略：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>简历优化，突出量化成就&lt;/li>
&lt;li>GitHub 作品集开发，包含清晰且文档完善的代码仓库&lt;/li>
&lt;li>面试准备，重点关注场景题&lt;/li>
&lt;li>拓展人脉和参与社区活动&lt;/li>
&lt;/ul>
&lt;h2 id="成功的心智框架">成功的心智框架
&lt;/h2>&lt;p>&lt;strong>第 1–3 个月：一次精通一个工具&lt;/strong> 不要试图同时学习多个工具。你的大脑需要时间为每个新概念建立神经通路（neural pathways）。全身心投入一个工具，直到你觉得运用自如，然后再转向下一个。&lt;/p>
&lt;p>&lt;strong>第 4–5 个月：开始在项目中混合使用工具&lt;/strong> 既然你已经打下了坚实的基础，就可以开始组合使用工具了。构建使用 Docker + AWS，或者 Terraform + Kubernetes 的项目。奇迹将在此发生——你将理解工具是如何协同工作的。&lt;/p>
&lt;p>&lt;strong>第 6 个月：复杂项目与面试准备&lt;/strong> 构建能够解决实际业务问题的出色项目。练习向他人解释你的工作。通过理解不仅是工具的使用方法，更是你选择这些工具的原因，来准备技术面试。&lt;/p>
&lt;h2 id="如何欺骗你的大脑在学习中不感到不知所措">如何欺骗你的大脑，在学习中不感到不知所措
&lt;/h2>&lt;ul>
&lt;li>有些日子你觉得自己是天才，有些日子你觉得自己一无所知。这两种感觉都很正常，也是学习过程的一部分。关键在于持之以恒，即使在动力不足时也要坚持下去。&lt;/li>
&lt;li>不要被庞大的工具和技术生态系统所压倒。相反，一次只关注一件事，持续构建，并相信这个过程。&lt;/li>
&lt;li>当学习感觉不可能，你的大脑快要爆炸时，请休息一下。看看 Netflix，散散步，睡一觉。第二天或几天后再回来，突然间那个“不可能”的概念就会豁然开朗。&lt;/li>
&lt;/ul>
&lt;p>请记住，在前 3 个月，抵制过度思考或在工具之间跳跃的冲动。掌握基础知识。在第 4-5 个月，开始在实际项目中混合使用工具。第 6 个月是关于构建令人印象深刻的项目作品集并为面试做准备。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>你的现状，无论是死胡同般的工作、低薪，还是缺乏职业成长，除非你采取行动，否则一切都不会改变。我分享的这条路并不容易，但它已被证明是有效的。我曾走过这条路，数百人也同样如此。&lt;/p>
&lt;p>&lt;strong>如果你不做出改变，一切都不会改变。&lt;/strong>&lt;/p></description></item></channel></rss>