<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>白皮书 on Martin Liu's Blog</title><link>https://martinliu.cn/tags/%E7%99%BD%E7%9A%AE%E4%B9%A6/</link><description>Recent content in 白皮书 on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Aug 2025 16:07:06 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/%E7%99%BD%E7%9A%AE%E4%B9%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>Google SRE 白皮书：《SRE 视角的事故管理指标》</title><link>https://martinliu.cn/blog/incident-metrics-in-sre/</link><pubDate>Fri, 12 Jul 2024 17:03:39 +0800</pubDate><guid>https://martinliu.cn/blog/incident-metrics-in-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/pexels-kevinbidwell-3013676.webp" alt="Featured image of post Google SRE 白皮书：《SRE 视角的事故管理指标》" />&lt;h2 id="前言">前言
&lt;/h2>&lt;h3 id="摘要">摘要
&lt;/h3>&lt;p>评估由于&lt;strong>流程变化、产品采购或技术变革&lt;/strong>所产生的提升改进是一种常见的工作。在可靠性工程中，通常会测量平均恢复时间（MTTR）或平均缓解时间（MTTM）等指标。这些指标有时用于评估上述变化所带来的改进效果或跟踪其发展趋势。&lt;/p>
&lt;p>在本报告中，我通过一个简单的蒙特卡洛模拟过程（可应用于许多其他情况）和统计分析，展示了这些指标在生产事故管理的背景下，并不适用于决策或趋势分析的方面。为此，我提出了一些：在特定情况下会更有效的替代方法。&lt;/p>
&lt;h3 id="介绍">介绍
&lt;/h3>&lt;p>站点可靠性工程师（SRE）的主要职责之一是管理其负责的生产系统所发生的事故。在事故发生时，SRE 负责调试系统，选择合适且即时的缓解措施，并在需要时组织更大范围的事故响应。&lt;/p>
&lt;p>然而，SRE 的职责不仅限于事故管理，还包括预防工作，例如：制定在生产环境中执行变更的稳健策略，或自动响应问题，并将系统恢复到已知的安全正常运行状态。这些工作还包括改进沟通流程、提升监控能力，或开发有助于事故调试的工具。实际上，有一些产品都是专门用于改进事故响应流程。&lt;/p>
&lt;p>希望事故（如果必须发生的话）对业务的影响尽可能小。这通常意味着事故的持续时间要短，这是我将在这里重点讨论的内容。了解流程变化或产品采购会怎样缩短事故持续时间是重要的，尤其当事故涉及实际成本时。然而，我们不能仅凭一次事故就得出结论，需要对多个事故进行综合分析。&lt;/p>
&lt;p>用搜索引擎搜索一下，你可能会发现：许多文章声称的 MTTx 指标（包括平均恢复时间和平均缓解时间）应被视为服务可靠性的关键性能指标。这些文章有时由：拥有良好服务口碑或提供可靠性相关工具的知名公司撰写的。但这些指标真的是良好的可靠性管理指标吗？实际上，它们能否作为有效的指标来使用？该如何判断？&lt;/p>
&lt;p>应用 MTTx 指标的目的是了解系统可靠性的演变。但实际情况是，应用这些指标比看起来要复杂得多，而且在大多数情况下，这些流行指标往往具有误导性。&lt;/p>
&lt;p>本报告将展示 MTTx 在大多数典型 SRE 环境中无效的原因，这些原因适用于许多总结性统计数据，与公司规模或生产实践的严格程度无关。不论选择何种指标，重要的是测试它在不同的事件持续时间分布下是否能够提供可靠的见解。尽管可能没有一种通用的“银弹”指标能替代 MTTx，但通过根据具体问题定制指标，您可能会在度量方面取得更好的效果。在本报告的最后，我将探讨一些替代方法来实现这些测量。&lt;/p>
&lt;h2 id="事故生命周期和时间节点">事故生命周期和时间节点
&lt;/h2>&lt;p>在分析事故的总体情况前，我想先介绍一些相关术语。这些术语可能因公司而异，但基本原则是一致的。&lt;/p>
&lt;p>图 1 展示了一个简单的事故时间线模型，我将在后续内容中使用这个模型。在这个模型中，事故经历以下关键阶段：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>首次产品影响&lt;/strong>：对产品产生严重影响的第一个时刻。&lt;/li>
&lt;li>&lt;strong>检测&lt;/strong>：系统操作员意识到正在发生的问题。&lt;/li>
&lt;li>&lt;strong>缓解&lt;/strong>：产品不再受到严重影响，但系统可能仍存在着部分的功能退化。&lt;/li>
&lt;li>&lt;strong>恢复&lt;/strong>：系统完全恢复正常运行；有时缓解和恢复是同一时间点，但有时恢复时间之后，具体会有所不同。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32.webp"
width="1295"
height="551"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32_hu_dad72c63fe54cd42.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-32_hu_b40f84e2cc87da9f.webp 1024w"
loading="lazy"
alt="图 1. 事故的简化时间线，突出显示了关键节点"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;p>我将分析事故的持续时间周期，并探讨应用统计数据的有效性。有几个公开的资源库汇集了事故复盘回顾，展示了时间线和关键事件&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。在这次分析中，我特别关注事故对用户影响的时间窗口。&lt;/p>
&lt;p>图 1 的事故时间线模型简化了现实，就像所有模型一样。“浅层事故数据”存在一些问题。例如，在这次分析中，一个问题是：“如果你已经消除了 90% 用户的影响，但还有 10% 仍然受影响，你会认为事故已经缓解了吗？” 如果还有 5% 或 20% 呢？使用这个模型，你需要做出一个二元决策。这种分类方式常常因为主观性和不一致的原则而受到批评。&lt;/p>
&lt;p>你可能不会太在意事故数据中&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>的这些不准确之处。对于许多实际应用——包括我将重点关注的总体分析——更高的精确度并不是必须的，而实现这种精确度的成本可能超过提高数据质量的潜在好处。著名统计学家 George Box 说过：“所有模型都是错的，但有些是有用的”，我认为这个模型可以用来理解 MTTR 和类似指标的可行性。&lt;/p>
&lt;h3 id="mttr-和-mttm-指标探讨与应用">MTTR 和 MTTM 指标，探讨与应用
&lt;/h3>&lt;p>一次事故可能会提供其相关数据，但你需要分析整体情况&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。平均恢复时间 (MTTR) 是行业中常用的术语。类似于平均故障间隔时间 (MTBF) 的术语也很常见，特别是在分析硬件组件的可靠性时。&lt;/p>
&lt;p>在这里，MTTR 被定义为所有适合分析的事故中，从首次产品影响到恢复的平均时间。同样，平均缓解时间 (MTTM) 被定义为从首次产品影响到缓解的平均时间。&lt;/p>
&lt;h3 id="事故持续时间的分布">事故持续时间的分布
&lt;/h3>&lt;p>要分析事故持续时间的统计数据，需要多样化的数据来源，以避免仅依据一个公司或产品得出结论。我收集了三家知名互联网公司的公共事故状态仪表板数据（员工数量在一千到两千之间）。图 2 展示了事故持续时间的分布。&lt;/p>
&lt;p>我没有区分事故类型：如果公司认为事故值得向用户公布，我就将其纳入分析。这些事故的持续时间代表了从首次影响到最后影响的用户沟通时间。我简化称之为恢复时间，虽然这种叫法并不完全精确。因为恢复时间和缓解时间通常相同，我发现它们遵循类似的分布，这种不精确性不会影响分析结果。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56.webp"
width="1297"
height="760"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56_hu_9f98f048bb74c04e.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-43-56_hu_902821161e64fb99.webp 1024w"
loading="lazy"
alt="图 2. 事故持续时间的分布及事故次数"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>行的顺序依次为公司 A (N = 798；2019 年 173 起)，公司 B (N = 350；2019 年 103 起)，和公司 C (N = 2,186；2019 年 609 起)。列显示了每家公司在短期和长期内分布的尾部。&lt;/p>
&lt;p>我还收集了 Google 的事故数据（见图 3），在我的分析中，Google 的数据集代表了一家专注于互联网服务的巨型公司。这个数据集是在一年的时间内收集的，时间比图 2 中的任何数据集都短，但它还包括内部事故（例如，仅影响开发人员生产力的事故）。虽然我不能分享具体的数字，但可以预见，Google 的事故数据集比三个公共数据集中任何一个都大好几倍。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14.webp"
width="1295"
height="275"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14_hu_55dfc94dc890ea18.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-14_hu_42dea5cf7b565362.webp 1024w"
loading="lazy"
alt="图 3. 2019 年 Google 的事故持续时间分布，数据经过模糊处理"
class="gallery-image"
data-flex-grow="470"
data-flex-basis="1130px"
>&lt;/p>
&lt;p>得出的关键观察是：在每种情况下，事故都呈现出正偏分布，大多数事故能迅速解决。图 4 显示，这些分布大致接近对数正态（或伽玛）分布，但我没有对经验数据进行概率分布拟合。所有数据集都显示了事故持续时间的巨大差异。这与我的经验相符：大多数事故能相对较快解决，但一些更复杂且持续时间较长，还会有少数灾难性的“黑天鹅事件”发生。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30.webp"
width="1295"
height="389"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30_hu_dac35a265e7d8fd4.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-12_18-44-30_hu_b01ad922ad3736e4.webp 1024w"
loading="lazy"
alt="图 4. 事故持续时间的对数正态 Q-Q 图"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>&lt;/p>
&lt;p>显示它们如何接近对数正态分布&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>。请注意，这不能用来得出对数正态分布是最佳拟合的结论，仅供参考。&lt;/p>
&lt;p>我排除了公共数据集中持续时间少于三分钟和超过三天的事故，这些事故占每个数据集的约 1-2%。对数据集中随机选择的事故进行手动检查，确认这些异常值是有效的，并且我也知道，从事故回顾中可以得知确实存在影响重大的多天事故，甚至更长时间的事故&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。但是，我认为包括这些异常长的事故，即使它们在实际中发生，可能会对分析带来不必要的质疑。&lt;/p>
&lt;p>从这些经验数据中，可以看到事故持续时间的分布，但仅根据事故数量或持续时间来判断公司的可靠性实践是错误的。这些数据集来自不同业务模式、可靠性需求和事故沟通方式各有差异的公司。&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="分析改进">分析改进
&lt;/h2>&lt;p>现在你已经清楚了解了事故持续时间的情况，是时候缩短事故时间了！&lt;/p>
&lt;p>假设你获得了一款可以提高可靠性的产品，能够将事故的缓解和解决时间缩短 10%。例如，一个持续一天的事故可以缩短到约 21.5 小时。你有机会进行试用来评估该产品的效果。如何确认产品能兑现其承诺呢？这份报告将探讨使用 MTTR 和类似指标，因此我们将使用这个指标。&lt;/p>
&lt;p>我故意选择了这个模拟场景，因为它适用于许多现实中的情况。无论是更改策略、开发软件，还是引入新的事故管理流程，目标往往是缩短事故时间，并评估这些改变所带来的效果。&lt;/p>
&lt;h3 id="判定-mttr-的改进">判定 MTTR 的改进
&lt;/h3>&lt;p>那么，你如何测试该产品是否真正兑现了承诺呢？一个简单直观的测试方法是：“如果每次事故的持续时间，都能按产品所述的减少了，我们就能看到 MTTR 指标的改进。”&lt;/p>
&lt;p>然而，这仍然相当不精确。“我们能够看出改进”具体意味着什么？最终，你需要做出一个明确的判定。在这种情况下，你需要判断产品是否取得了成功，并选择是否购买。&lt;/p>
&lt;p>为了评估产品是否实现了缩短事故持续时间 10% 的承诺，你可以设置一个阈值，即 MTTR 与使用产品前相比减少 10%。一个更宽松的标准是：只要有任何改进就算成功。如果你看到任何事故时间的缩短，无论幅度大小，你就会认为产品成功了。&lt;/p>
&lt;p>你需要明确了解你期望指标的表现，并确信所选指标（如 MTTR）能够准确衡量你想要的内容。如果依赖于一个不佳的指标，可能会带来实际且严重的风险和成本。这些风险可能是直接的，例如因为错误的原因购买产品，但也可能非常微妙。例如，员工意识到：他们的事故管理工作是通过未经验证，或有问题的指标进行评估时，士气可能会受挫。&lt;/p>
&lt;h3 id="在平行宇宙中模拟-mttr">在平行宇宙中模拟 MTTR
&lt;/h3>&lt;p>你只能在一个宇宙中生活，因此在这个场景中你只有一次机会评估产品。但直觉告诉你，事故是多变的，你希望确保能看到改进，且不是随机巧合。&lt;/p>
&lt;p>为了更确定这一点，你可以进行蒙特卡洛模拟&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。假设事故遵循获得的数据集的经验分布，并评估在一定数量的事故后你会看到哪些改进及其置信水平。&lt;/p>
&lt;p>模拟过程如下：&lt;/p>
&lt;ol>
&lt;li>从事故持续时间的经验分布中随机抽取两个样本，样本量为 N1 和 N2（N1 = N2 以实现完美的 50/50 分割）。&lt;/li>
&lt;li>修改其中一个样本的事故持续时间，缩短 10%。&lt;/li>
&lt;li>计算每组的 MTTR，即 MTTR&lt;!-- raw HTML omitted -->modified&lt;!-- raw HTML omitted --> 和 MTTR&lt;!-- raw HTML omitted -->unmodified&lt;!-- raw HTML omitted -->。&lt;/li>
&lt;li>计算差值，观察到的改进 = MTTR&lt;!-- raw HTML omitted -->unmodified&lt;!-- raw HTML omitted --> − MTTR&lt;!-- raw HTML omitted -->modified&lt;!-- raw HTML omitted -->（负差异意味着 MTTR 恶化）。&lt;/li>
&lt;li>重复这个过程 100,000 次。&lt;/li>
&lt;/ol>
&lt;p>你正在进行两个样本的实验，样本大小为 N1 和 N2，其中 N1 = N2。50/50 的分割能提供最强的分析；在第 18 页的“分析方法”中，我将简要讨论原因。&lt;/p>
&lt;p>简单来说，你访问成千上万个平行宇宙，模拟产品兑现其承诺，并将结果的 MTTR 与未处理的事故进行比较。从操作上讲，这可以使用 Python 脚本和包含数据的 CSV 文件或足够强大的 SQL 引擎来完成，不需要任何专业工具或额外知识。&lt;/p>
&lt;p>现在你在操作概率，所以需要为测试添加一个条件：对随机巧合的某种容忍度。假设你容忍最多 10% 的平行宇宙误导你。更正式地说，这意味着你需要统计显著性 α = 0.10。这个值可以说是比较宽松的。&lt;/p>
&lt;p>&lt;strong>场景模拟与评估&lt;/strong>&lt;/p>
&lt;p>在这个场景中，我选择了两个等量的事故样本（N1 和 N2，其中 N1 = N2）。我选择的 N1 + N2 等于 2019 年的事故数量（见表 1）&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>。具体来说，公司 A、B 和 C 的事故数量分别为 173、103 和 609 起。&lt;/p>
&lt;p>表 1. 三个数据集的事故数量、均值和方差。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>公司A&lt;/th>
&lt;th>公司B&lt;/th>
&lt;th>公司C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>事故(所有)&lt;/td>
&lt;td>779&lt;/td>
&lt;td>348&lt;/td>
&lt;td>2157&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>事故（2019）&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>均值&lt;/td>
&lt;td>2h26m&lt;/td>
&lt;td>2h31m&lt;/td>
&lt;td>4h31m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>方差&lt;/td>
&lt;td>5h16m&lt;/td>
&lt;td>5h1m&lt;/td>
&lt;td>6h53m&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>进行模拟后，我绘制了图表来观察结果（见图 5）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23.webp"
width="1301"
height="521"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23_hu_abcc56caee33a9b1.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-23_hu_5c3c5e474ff3988d.webp 1024w"
loading="lazy"
alt="图 5."
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>如果改进实际发生，模拟的 MTTR 变化分布，作为相对改进。&lt;/p>
&lt;p>即使在模拟中改进总是有效，38% 的模拟中公司 A 的 MTTR 差异低于零，40% 的公司 B 和 20% 的公司 C 也是如此。观察 MTTR 的绝对变化，看到至少 15 分钟改进的概率分别只有 49%、50% 和 64%。即使场景中的产品有效并缩短了事故，检测到任何改进的几率也远超出 10% 随机误差的容忍度。&lt;/p>
&lt;p>&lt;strong>不改变事故情况下统计数据的变化&lt;/strong>&lt;/p>
&lt;p>更糟糕的是，你可能会看到 MTTR 的显著减少，甚至超过产品的承诺。这可以通过运行与之前相同的模拟更清楚地证明，但在这种情况下，产品对事故没有任何影响。将步骤 2 替换为 new_duration = old_duration。&lt;/p>
&lt;p>果然，图 6 显示公司 A 有 19% 的几率 MTTR 改进半小时（或更好），公司 B 有 23%，公司 C 有 10%……即使在这个模拟中，你没有对事故做任何改变&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>。换句话说，即使假设的产品对你没有任何作用，你也会认为它有效并决定购买产品。&lt;/p>
&lt;blockquote>
&lt;p>注意：对此发现，一个愤世嫉俗的回应是开始销售虚假的缩短事故时间的产品。这种商业行为会设定价格，使得部分客户仅凭运气看到宣传的改进并购买产品，从而盈利。我绝不支持这种商业计划。然而，这确实突出了使用低质量指标可能带来的问题。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46.webp"
width="1302"
height="515"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46_hu_2c8258ff479ec53f.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-33-46_hu_291b90547a286515.webp 1024w"
loading="lazy"
alt="图 6."
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;/p>
&lt;p>在事故没有变化的情况下，模拟的 MTTR 变化分布。&lt;/p>
&lt;p>我们了解到，即使没有对事故持续时间进行任何有意的改变，许多模拟的场景仍然会让你认为 MTTR 大大缩短或延长，而实际上没有任何结构性的变化。如果你无法辨别出事故没有变化的情况，那么当它们真的发生变化时，你也会难以判断。&lt;/p>
&lt;h3 id="改变思维实验">改变思维实验
&lt;/h3>&lt;p>之前的场景假设有一个产品可以缩短事故持续时间，你想了解这种变化如何反映在 MTTR 中。但实际上，预测和建模潜在的改进非常困难。&lt;/p>
&lt;p>可以通过换个角度来解决这个问题。与其寻找特定的改进，不如观察在事故没有结构性变化的情况下 MTTR（或其他统计数据）的变化。换句话说，你的事故持续时间依旧来自相同的分布（未受任何事故处理改进的影响），你评估的是统计数据的典型变化。&lt;/p>
&lt;p>接下来，我将简化讨论，只关注在事故没有变化的情况下 MTTR 变化的场景，不再分析改进。因此，最有趣的是结果分布的形状：简单来说，我们想知道它有多平坦。&lt;/p>
&lt;h3 id="通过更多事故进行更好的分析">通过更多事故进行更好的分析
&lt;/h3>&lt;p>你可能会直觉上理解为什么观察到的 MTTR 会有如此广泛的变化：事故的方差太大。这种直觉有统计学依据。&lt;/p>
&lt;p>中心极限定理告诉我们，随着样本数量的增加，样本和的分布趋向于正态分布&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>。你可以在之前的分析中看到一些证据（例如图 6），这些分布看起来有些正态。虽然不能自动假设结果分布总是正态的（稍后会详细说明），但这也意味着在极限情况下方差会趋于收敛。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41.webp"
width="1268"
height="237"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_a5a6cccefc465323.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_ea5d5c33d3a759a0.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="535"
data-flex-basis="1284px"
>&lt;/p>
&lt;p>这与直觉一致，表明随着样本大小（即事故数量）的增加，观察到的 MTTR 值的方差会减少。这很容易证明。表 2 显示了多个事故数量下 MTTR 的 90% 置信区间。&lt;/p>
&lt;p>回想一下，你是从事故持续时间分布中抽取两个样本。因此，如果你想知道用 N 个事故总数进行分析的效果，你需要抽取两个样本，样本大小为 N1 和 N2，其中 N1 = N2。&lt;/p>
&lt;p>表 2. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个 MTTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>原始数据TTR的均值&lt;/td>
&lt;td>2h 26m&lt;/td>
&lt;td>2h 31m&lt;/td>
&lt;td>4h 31m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2019的事故数据&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 10&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h41m; +5h42m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h25m; +5h18m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7h4m; +7h15m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h44m; +1h44m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h39m; +1h39m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−2h16m; +2h16m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−33m; +33m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−31m; +31m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−43m; +43m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>随着样本数量的增加，标准差会下降，从而提高检测较小显著变化的能力。在原始场景中，你评估的产品承诺将事故持续时间减少 10%；即使有一千起事故，这仍然会落入 90% 置信区间。即便有一年的数据，你也无法得到一个有信心的结论。&lt;/p>
&lt;p>公司 A 和公司 B 的相似结果是巧合。这两家公司提供的服务非常不同，但它们的平均事故持续时间和标准差却相似。如果只考虑一年的事故数据，差异会很大：公司 A 的平均事故持续时间是 4 小时 35 分钟，而公司 B 是 2 小时 38 分钟。它们的其他统计数据，如中位数，也比平均值差异更大。&lt;/p>
&lt;p>即使事故数量很多（超过每年的总数），方差仍然太高。图 7 显示，即使 MTTR 观察到的变化很大，仍然在 90% 置信区间内。虽然增加事故数量有助于获得更好的信号，但这与可靠性工程的整体目标相违背。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27.webp"
width="1302"
height="504"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27_hu_f0e32665300e814.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-34-27_hu_271ba2cab099598.webp 1024w"
loading="lazy"
alt="图 7."
class="gallery-image"
data-flex-grow="258"
data-flex-basis="620px"
>&lt;/p>
&lt;p>随着样本数量增加，90% 置信区间的宽度减少。&lt;/p>
&lt;h3 id="超越平均值">超越平均值
&lt;/h3>&lt;p>对算术平均值的一个常见且合理的批评是它对异常值过于敏感。尽管已经排除了最严重的异常值事故（如少于三分钟或超过三天的事故），这一点依然成立。我们可能需要考虑其他统计方法，让我们来探讨一下。&lt;/p>
&lt;p>&lt;strong>中位数和百分位数&lt;/strong>&lt;/p>
&lt;p>中位数常用于避免少数极端异常值过度影响结果，这里也可以使用——大多数事故不会持续几天。&lt;/p>
&lt;p>需要注意的是，如果要分析中位数，你也需要调整你的分析方式。如果你在寻找任何类型的相对差异，它应该是相对于中位数的。例如，用 MTTR 的一部分进行测试可能会非常误导。&lt;/p>
&lt;p>如表 3 所示，即使在 N = 1,000 起事故的情况下，90% 置信区间相对于中位数统计数据仍然很大，并且涵盖了讨论中的 10% 中位数 TTR 目标。问题不仅限于 MTTR 的“平均值”；中位数 TTR 也无法解决。&lt;/p>
&lt;p>表 3. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个中位数 TTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Median TTR of original data&lt;/td>
&lt;td>42m&lt;/td>
&lt;td>1h 7m&lt;/td>
&lt;td>2h 50m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Incidents in 2019&lt;/td>
&lt;td>173&lt;/td>
&lt;td>103&lt;/td>
&lt;td>609&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 10&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h46m; +1h46m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−2h13m; +2h12m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−4h8m; +4h7m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−1h20m; +1h19m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−11m; +11m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−9m; +9m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−29m; +29m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>较高的百分位数，如第 95 百分位，表现更差。直观上，这是合理的。较高百分位数的事故持续时间会受到最严重事故的影响，而这些事故又非常罕见。因此，它们的方差非常高。表 4 列出了一些具体数值。&lt;/p>
&lt;p>表 4. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的第 95 百分位 TTR 差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>95th percentile TTR of original data&lt;/td>
&lt;td>10h 45m&lt;/td>
&lt;td>8h 48m&lt;/td>
&lt;td>12h 59m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−12h19m; +12h22m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−8h34m; +8h36m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−12h29m; +12h30m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5h23m; +5h25m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−3h18m; +3h17m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−3h33m; +3h32m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>虽然公司 A 和公司 B 的 MTTR 在这些百分位数测量中的结果相似，但你可以看到事故持续时间差异的影响。&lt;/p>
&lt;p>几何平均数&lt;/p>
&lt;p>你可能感兴趣的另一个汇总统计量是几何平均数，其计算公式为。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25.webp"
width="1542"
height="156"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25_hu_17dee94625cb1683.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_17-23-25_hu_14830f261cfcaeb1.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="988"
data-flex-basis="2372px"
>&lt;/p>
&lt;p>鉴于事故持续时间分布与对数正态分布相差不远，几何平均数在这里特别有吸引力。几何平均数对于对数正态分布而言，就像算术平均数对于正态分布一样。同样，这可以快速模拟（见表 5）。&lt;/p>
&lt;p>表 5. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个几何平均数差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Geometric mean TTR of original data&lt;/td>
&lt;td>54m&lt;/td>
&lt;td>1h 9m&lt;/td>
&lt;td>2h 24m&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−24m; +25m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−27m; +27m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−56m; +56m]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7.2m; +7.2m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−8.5m; +8.7m]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−18m; +17m]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到目前为止，我们在实际数量的事故中还没有得到足够好的结果。在有一千起事故的情况下，90% 置信区间仅刚好超过指标变化的 10%。&lt;/p>
&lt;p>&lt;strong>事故持续时间总和&lt;/strong>&lt;/p>
&lt;p>你可能更感兴趣的是减少事故持续时间总和，而不是单个事故的持续时间。这是直观的：你想提供可靠的服务，但服务的可靠性更多取决于总的不可用时间，而不是平均事故持续时间。&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们已经进行过这样的分析！算术平均数是事故持续时间总和除以事故数量，因此你可以简单地将 MTTR 模拟结果乘以 N/2（即两个样本中任意一个的元素数量），就能得到总和的模拟结果。为了确认这一点，我生成了一些总和模拟，显示置信区间等于 MTTR 置信区间乘以相应的 N（见表 6）。&lt;/p>
&lt;p>表 6. 基于 100,000 次模拟，从两个随机抽样的事故集合（N1 = N2）中计算出的两个事故持续时间总和差异的 90% 置信区间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Company A&lt;/th>
&lt;th>Company B&lt;/th>
&lt;th>Company C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>N1 + N2 = 100&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−87h; +87h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−82h; +82h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−113h; +113h]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>N1 + N2 = 1,000&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−275h; +274h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−260h; +259h]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−359h; +357h]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>事故数量对总和的观察值有很大影响。让我们简要看一下事故数量。&lt;/p>
&lt;p>&lt;strong>统计事故&lt;/strong>&lt;/p>
&lt;p>本报告讨论了你是否能够检测到事故处理的改进，重点分析事故的解决过程。从发生事故到完全没有事故超出了本文的讨论范围。&lt;/p>
&lt;p>然而，既然我已经收集了所有这些数据，至少可以简要查看这些数据集，以了解事故数量随时间的变化。我不会在这里进行更深入的分析。&lt;/p>
&lt;p>事故数量和事故持续时间一样不稳定。即使按全年汇总，如图 8 所示，数值也会大幅波动。在月度或季度的分辨率下，这种波动更为严重。最多可以从这个图表中看到一些明显的趋势：公司 C 的事故数量在 2019 年急剧增加（这一趋势在 2020 年继续，但图中未显示），与之前的年份相比。这一趋势只有在多年时间尺度上才明显，尤其是与公司 A 和公司 B 的不稳定趋势相比时更为明显。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06.webp"
width="1302"
height="452"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06_hu_dacf15e1e337a123.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-06_hu_397e6e70f7ad5504.webp 1024w"
loading="lazy"
alt="图 8."
class="gallery-image"
data-flex-grow="288"
data-flex-basis="691px"
>&lt;/p>
&lt;p>每年每个公司的事故数量，占总事故数量的比例。排除了数据不完整的年份（2020 年和每个数据集的第一年）。&lt;/p>
&lt;p>但这种趋势可能根本无法反映系统可靠性。可能是由于外部世界事件导致的使用模式变化？还是产品组合的变化？或者是相同生产事件的事故报告方式变化，例如法规要求的变化？我只能猜测，但这些通常无法避免的因素可能会影响甚至使你自己公司的分析无效。&lt;/p>
&lt;p>过去也提出了其他反对统计事故数量的观点&lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>。我不会再花时间进一步分析这些数据，但我期待未来更多关于这一主题的研究。现在我们快速浏览了事故数量，让我们利用这些知识回到分析事故缩短的主题。&lt;/p>
&lt;h2 id="分析方法">分析方法
&lt;/h2>&lt;p>到目前为止，我一直在使用蒙特卡洛模拟。然而，你也可以采取分析方法。能否依靠中心极限定理来计算置信区间，而不是通过模拟来实现呢？答案是，有时候可以。&lt;/p>
&lt;p>中心极限定理指出，样本均值的分布在极限情况下会趋向于正态分布。然而，由于事故发生频率低，数量可能不足以使中心极限定理适用。&lt;/p>
&lt;p>你的团队或公司可能没有足够的事故数量来使样本均值的分布趋向于正态分布。&lt;/p>
&lt;p>一种测试方法是运行模拟以生成样本均值分布的正态概率图（Q-Q 图）。&lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>
在图 9 中，我对公司 A 的数据进行了这样的模拟。随着样本量的增加（例如一年的事故数量），图表趋向于正态分布。但对于仅三个月的事故数量，图表明显偏离正态分布。
假设持续时间是正态分布的可能会误导并影响后续的计算。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23.webp"
width="1301"
height="568"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23_hu_466193f6881b4b0.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-23_hu_75ae8f60626b5bbb.webp 1024w"
loading="lazy"
alt="图 9."
class="gallery-image"
data-flex-grow="229"
data-flex-basis="549px"
>&lt;/p>
&lt;p>公司 A 样本均值事故持续时间的正态概率图，由 1,000 次模拟生成，模拟事故数量为 2019 年的全年事故数和大约一个季度的事故数。&lt;/p>
&lt;p>一旦确定样本均值分布是正态的，你可以使用标准工具，例如 z 检验或 t 检验来建立置信区间&lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>。我们特别关注的是两个分布之间的差异。既然它们来自同一总体，均值差异（以及样本总体差异的正态分布的众数）将趋于零，正如我们在模拟中所见。更有趣的是标准差，它决定了置信区间。&lt;/p>
&lt;p>样本均值的方差收敛到：&lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41.webp"
width="1268"
height="237"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_a5a6cccefc465323.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-41_hu_ea5d5c33d3a759a0.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="535"
data-flex-basis="1284px"
>&lt;/p>
&lt;p>两个正态分布差异的方差是：&lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54.webp"
width="1273"
height="197"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54_hu_ced7d37eb2bf7268.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-35-54_hu_73e1e971fb0a200b.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="646"
data-flex-basis="1550px"
>&lt;/p>
&lt;p>在这种情况下，两个样本均值正态分布的方差和样本量相同，结果是：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09.webp"
width="1309"
height="190"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09_hu_e7f893574343e0b5.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-09_hu_c86ee0d26d89ebf5.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="688"
data-flex-basis="1653px"
>&lt;/p>
&lt;p>这也解释了为什么 50/50 分割是最佳选择，因为不同的样本比例会导致更大的方差，从而得到更差的结果。&lt;/p>
&lt;p>然后你可以应用双尾 z 检验。你可以扩展 z 检验公式；知道分布均值是 0，你可以寻找 MTTR 的特定变化，同时扩展方差计算：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22.webp"
width="1298"
height="248"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22_hu_be7c8028e90fd522.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-22_hu_3d0b6695435a2bf6.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="523"
data-flex-basis="1256px"
>&lt;/p>
&lt;p>你也可以反过来：查找相应的 z 分数（双尾检验在 α = 0.10 时的 z 分数约为 1.644），找到 MTTR 变化的置信区间：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46.webp"
width="1302"
height="205"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46_hu_4ffaee6923c3d9cb.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-36-46_hu_16d2dcec15c6bd10.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="635"
data-flex-basis="1524px"
>&lt;/p>
&lt;p>对于公司 A，事故持续时间的标准差为 5 小时 16 分钟，使用 N1 = N2 = 100/2 = 50 的样本来计算 90% 置信区间：&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05.webp"
width="1303"
height="209"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05_hu_eff4a51b9eb8b32e.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-05_hu_3691742a0cf7b7b5.webp 1024w"
loading="lazy"
alt="公式"
class="gallery-image"
data-flex-grow="623"
data-flex-basis="1496px"
>&lt;/p>
&lt;p>这个结果与模拟结果中看到的 90% 置信区间相对应。&lt;/p>
&lt;p>虽然有时你可以使用公式来进行事故统计分析，但我更喜欢模拟方法。我发现用模拟来讨论这个话题比用公式更容易理解。它还提供了更多的灵活性，可以进行建模和分析。计算 95 百分位恢复时间的解析解决方案可能非常具有挑战性，但在模拟中，这只需要一行代码的改变。&lt;/p>
&lt;p>你可能也对模拟不同的变化和情况感兴趣。如果提议的事故缩短比简单的 10% 减少更复杂怎么办？也许你期望根据事故类别有不同的减少？如果 SRE 团队由狼人组成，他们只在满月后开始处理事故怎么办？你的场景可能没有那么奇幻，但模拟可以让它们更容易实现。&lt;/p>
&lt;h2 id="大型公司事故数据集">大型公司事故数据集
&lt;/h2>&lt;p>之前的分析显示，随着样本数量的增加，方差会下降。Google 拥有的员工数量约是三家匿名公司总和的一百倍，事故数量也显著多于这些公司。这是否有助于获得更可靠的事故指标？&lt;/p>
&lt;p>我们将以相同的方法分析 Google 的事故数据，并利用更丰富的数据集（包括内部元数据）进一步细分数据。&lt;/p>
&lt;p>图 10 显示了所有重大事故和最严重事故的持续时间分布。这两个数据集中还包括内部事故，例如仅影响 Google 员工及其生产力的事故，甚至是对任何用户（内部或外部）完全不可见的事件。最严重事故的数据集中包含了更高比例的面向用户的事故（例如，会在服务状态仪表板上列出）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31.webp"
width="1302"
height="472"
srcset="https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31_hu_e058cd3e34b82458.webp 480w, https://martinliu.cn/blog/incident-metrics-in-sre/2024-07-13_11-37-31_hu_ffa78f3547b58659.webp 1024w"
loading="lazy"
alt="图 10."
class="gallery-image"
data-flex-grow="275"
data-flex-basis="662px"
>&lt;/p>
&lt;p>2019 年 Google 所有事故的持续时间分布。&lt;/p>
&lt;p>除了更广泛的事故集中有更多非常短的事故外，图表显示这两个分布大致相似。所有 Google 事故的数据集大约是所选的面向用户的 Google 服务事故数据集的 15 倍，这也是公司范围内的分布图显得更平滑的原因。&lt;/p>
&lt;p>在三个公共数据集中，排除超过三天的事故去除了约 1% 的事故，但两个 Google 数据集中都有相当多的事故持续时间超过三天。与之前的公共数据集一样，由于事故跟踪方式不同，得出关于可靠性的结论是不正确的。我尝试了两种方法：在三天处截断和排除长度排名前 5% 的事故。结果显示，相对 MTTR 的置信区间仅有略微差异，结论相同。表 7 显示了以三天为截断点的模拟数据，与其他模拟一致。&lt;/p>
&lt;p>表 7. 基于 100,000 次模拟，从 Google 事故数据集中两个随机抽样的事故集合（N1 = N2）中计算出的两个平均 TTR 和中位数 TTR 差异的 90% 置信区间。事故数量对应每个数据集中一年中的一部分。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>2019 年 Google 最严重的事故（通常但不总是面向用户）&lt;/th>
&lt;th>所有重大事故（通常不面向用户）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Incidents in 2019 (approximate relative size)&lt;/td>
&lt;td>1 * X&lt;/td>
&lt;td>15 * X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = ¼ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−35%; +35% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−11%; +11% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = ½ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−25%; +25% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−7.6%; +7.6% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mean TTR N1 + N2 = 1 year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−18%; +18% of MTTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−5.3%; +5.4% of MTTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = ¼ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−53%; +52% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−20%; +20% of median TTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = ½ year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−35%; +35% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−14%; +14% of median TTR]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Median TTR N1 + N2 = 1 year&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−25%; +25% of median TTR]&lt;/td>
&lt;td>mean difference ≅ 0 &lt;!-- raw HTML omitted --> 90% CI [−10%; +10% of median TTR]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从数学上讲，在所有重大事故的一年数据中事故数量（虽然具体数字无法分享，但比我们之前测试的 1,000 起更多）有助于获得更可信的结果，这与之前的发现一致。然而，你需要注意你所看的数据和所应用的测试。事实证明，虽然在数学上成立，但这一发现实际上并没有特别实用。&lt;/p>
&lt;p>所有事故的数据集包含各种类型的事故，从面向用户的服务系统故障到长期存在的处理管道问题、网络配置和公司设备软件安装——这些通常对终端用户是不可见的。对于一些事故，解决时间也可能相当长（例如，事故本身就很长或可以等到周末之后），这会推高 MTTR 值。&lt;/p>
&lt;p>在如此广泛的事故中，我没有任何实际的开发工作可以保证实现这种程度的事故持续时间减少。在一年事故数据中，能够自信地检测到 5.3% 的均值变化，并没有使 MTTR 成为一个实际有用的事故统计数据。&lt;/p>
&lt;h2 id="这与数据质量有关吗">这与数据质量有关吗？
&lt;/h2>&lt;p>汇总事故分析的挑战似乎并不在于事故元数据的质量。提高元数据收集准确性的努力不太可能引起显著变化。在检查 Google 内部事故元数据时，我发现那些有更严格事故报告要求的团队（例如，直接由 SRE 支持或运行高可用性、对收入至关重要服务的团队），在事故持续时间分析上并没有显著改进。所有三个公共事故数据集也显示出类似的行为。&lt;/p>
&lt;p>你也可以通过生成完全合成的事故分布来验证这个问题。如果假设事故遵循某种分布（例如伽马分布或对数正态分布），你可以选择参数，使其在主观判断中“看起来正确”，然后进行评估。&lt;/p>
&lt;p>这种方法可以应用于任何分布，但需要谨慎。假设事故持续时间呈正态分布或均匀分布可能并不现实。从这种分布的分析中得出的结论可能会产生误导。&lt;/p>
&lt;h2 id="这就是为什么-mttx-可能会误导你">这就是为什么 MTTx 可能会误导你
&lt;/h2>&lt;p>像收集到的事故数据（也可能包括你公司的事故数据）这样的分布具有非常高的方差，以至于均值、中位数或总和都无法很好地汇总统计来理解事故趋势。事故问题领域固有的高方差和小样本量使得进行稳健的事故持续时间分析变得不可取，如在三个示例数据集中所示。这里的分析是在理想条件下进行的，现实中的表现可能更差。&lt;/p>
&lt;p>从可靠性角度来看，缓解和恢复之间确实存在差异，但在本分析范围内，这并不重要&lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>。我称之为“MTTx”，因为只要实际测量遵循类似的分布属性和样本量（即事故数量），它对分析没有影响。许多其他事故指标，例如检测时间，也存在同样的问题。&lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup>&lt;/p>
&lt;p>这意味着 MTTx 不适合用于评估典型变更对 TTx 的影响：&lt;/p>
&lt;ul>
&lt;li>它不能很好地衡量系统的整体可靠性。仅仅得出这一结论不需要这种分析，我可以总结《实施服务质量目标》中的一个论点：如果事故数量翻倍，而事故分布大致相同，系统的可靠性显然变差了，但你的指标却没有发生太大变化。&lt;/li>
&lt;li>它无法提供任何关于事故响应实践趋势的有用见解。模拟显示，即使事故性质没有变化，你也能看到大量变化。&lt;/li>
&lt;li>无法通过 MTTx 评估事故管理过程或工具变更的成功或失败。方差使得难以区分任何改进，并且即使承诺的改进实现了，该指标也可能会恶化。&lt;/li>
&lt;/ul>
&lt;p>这些结果适用于典型的可靠性工程情况，例如网络服务上的事故。默认情况下，应拒绝将 MTTx 指标用于上述目的。然而，也有例外情况。例如，如果你有大量数据可以进行汇总 MTTx 分析。一个实际例子是大规模硬盘驱动器采购，如 Backblaze 公司定期发布的每个型号的硬盘驱动器可靠性统计数据，覆盖了数万个设备&lt;sup id="fnref:20">&lt;a href="#fn:20" class="footnote-ref" role="doc-noteref">20&lt;/a>&lt;/sup>。此外，同一型号硬盘之间的相似性比事故之间更大。同样，数量和较低的方差是你能够自信地看到典型服务系统平均延迟变化的原因。&lt;sup id="fnref:21">&lt;a href="#fn:21" class="footnote-ref" role="doc-noteref">21&lt;/a>&lt;/sup>&lt;/p>
&lt;p>另一个例外情况是剧变，例如将事故持续时间缩短到原来的 20%。如前所示，你很可能能够自信地在数据中检测到它。然而，你也可能通过其他方式检测到它，因此不需要使用仍存在问题的 MTTx 指标。&lt;/p>
&lt;h2 id="更好的分析选项">更好的分析选项
&lt;/h2>&lt;p>MTTx 的挑战在于它是一个错误的观察指标。这个指标的行为特性使得分析变得困难。&lt;/p>
&lt;p>另一个挑战在于，这个指标可能根本没有测量到你真正关心的内容。当我们谈论 MTTR 改进时，通常是在问：“我们的可靠性提高了吗？”或者，“我们在应对事故方面变得更好了？”选择一个更准确地代表决策目标的指标是其他文献中也讨论的重要话题。&lt;sup id="fnref:22">&lt;a href="#fn:22" class="footnote-ref" role="doc-noteref">22&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我没有找到任何可以像 MTTx 那样被普遍应用的“银弹”指标。然而，我们可以探讨在特定背景下选择更好指标的一些方法。&lt;/p>
&lt;h3 id="根据问题定制指标">根据问题定制指标
&lt;/h3>&lt;p>我用模拟测试产品是否影响 MTTx。然而，现实中的产品或流程变更并不是这样运作的。相反，它们改善了事故的某些方面，可能是事故沟通过程，或是自动事故分析工具提出的假设。&lt;sup id="fnref:23">&lt;a href="#fn:23" class="footnote-ref" role="doc-noteref">23&lt;/a>&lt;/sup>&lt;/p>
&lt;p>如前所述，事故是由不同持续时间的步骤组成的。&lt;sup id="fnref:24">&lt;a href="#fn:24" class="footnote-ref" role="doc-noteref">24&lt;/a>&lt;/sup>这些步骤在各种出版物中都有研究。如果你在改进事故过程中的某一步，将所有其他步骤包括在内会使你更难理解变更的影响。&lt;/p>
&lt;p>尝试分析每个事故的具体行为可能并不实际。你无法依赖人类输入元数据，也难以紧密观察每个事故。相反，实际的解决方案可以是对选定的事故样本进行用户研究。这些研究可以专注于你感兴趣的事故方面，并提供比汇总统计数据更丰富的理解。正确构建这些研究并不总是容易的，如果可能，建议寻求专家意见。考虑到这一点，有些文献在建立低成本用户测试方面提供了帮助，我已经成功地将这些经验应用于构建实际系统。&lt;sup id="fnref:25">&lt;a href="#fn:25" class="footnote-ref" role="doc-noteref">25&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="考虑直接的可靠性指标">考虑直接的可靠性指标
&lt;/h3>&lt;p>也许你在问：“作为公司，我们的可靠性在变好还是变坏？” 这时可用性的概念就显得尤为重要。在 SRE 实践中，服务质量指标（SLIs）和服务质量目标（SLOs）是常用的术语。理想情况下，这些指标应该反映用户感知的产品可靠性，而 SLOs 则应该设定为符合业务权衡的目标。通常，这两者并不完全准确，有时甚至与理想情况相去甚远。&lt;/p>
&lt;p>即使你的 SLIs 和 SLOs 尽可能真实地反映业务目标，这仍不意味着它们可以用汇总统计数据来分析，例如每年消耗的错误预算总和。由于 SLI（即使是接近理想属性的 SLI）可以通过多种方式实现，这里给出的答案可能不具有普遍适用性。我在这方面没有进行过分析，但这是一个有趣的未来研究方向。你可能可以在公司内部使用前面讨论过的工具轻松完成这项工作。&lt;/p>
&lt;p>根据你的业务，另一个衡量标准可能是已打开的支持案例总数，或因服务不可靠而导致的客户电话，或其他更高级的综合指标。&lt;/p>
&lt;h3 id="测试你的选择指标">测试你的选择指标
&lt;/h3>&lt;p>可能有比这里建议的更好的方法，我期待该领域未来的工作。关键在于，分析应关注你真正关心的问题；明智地选择你的指标。
可靠性事故是多种多样的，需要回答的关于可靠性度量的问题也同样多样。关键是以批判的眼光看待你的指标。它们是否真的在测量你想要测量的内容？它们在面对随机性时是否稳健？你是否有证据支持你的答案？
我用来研究 MTTx 的工具同样可以用于其他你正在考虑的指标。过程大致相同：确定对你有意义的变化水平（这取决于指标，也取决于你的业务），然后分析你是否可以在数据中自信地看到它。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>我已经证明，即使在有利的分析设置中，MTTx 也不能用于许多被宣传为有用的实际用途，例如评估可靠性趋势、评估政策或产品的结果，或了解整体系统可靠性。系统运营者、DevOps 或 SRE 应该不再默认 MTTx 是有用的。除非在特定情况下已证明其适用性，否则应对其应用持怀疑态度。&lt;/p>
&lt;p>问题并不仅限于使用算术平均数作为指标；我已经证明，中位数和其他指标也存在同样的问题。这是由于事故数量通常较少且持续时间方差较大的结果。在三家匿名公司的实际数据集中以及 Google 的混淆数据集中都观察到了这种分布。&lt;/p>
&lt;p>与其使用 MTTx 分析整体事故统计数据，你可以专注于事故生命周期中的更具体问题，更贴近你想要评估的内容。这可能会导致选择不同的指标或完全不同的测量过程。选择更好的指标应当带来更好和更稳健的决策过程。例如，可以专门测量和研究检测时间，或在一些常见事故响应活动上花费的时间。&lt;/p>
&lt;p>也许还有其他统计数据可以提供更多的价值。事故持续时间的方差本身可能也是有用的，因为它可以证明响应能力的一致性。无论情况如何，有一点是肯定的：你应该批判性地思考你的指标并对其进行测试（或许可以使用本报告中提到的一些工具）。超越依赖假设、直觉或行业趋势，寻找证据证明你选择的指标可以指示你希望它们指示的内容。&lt;/p>
&lt;h2 id="致谢">致谢
&lt;/h2>&lt;p>作者感谢 Kathy Meier-Hellstern 的审阅、建议和意见；感谢 Ben Appleton 审阅此作品以及一些初步工作的贡献，这些工作促成了本文的完成；感谢 Michael Brundage 进一步审阅并激发了额外的分析；感谢 Scott Williams 的进一步审阅；感谢 Cassie Kozyrkov 为使统计思维成为一个越来越易于理解的主题所做的努力。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;p>Štěpán Davidovič 是 Google 的一名站点稳定性工程师，目前致力于内部自动监控基础设施的开发。在之前的 Google SRE 职位中，他开发了金丝雀分析服务，并参与了许多共享基础设施项目和 AdSense 可靠性工作。他于 2010 年毕业于布拉格捷克技术大学，获得学士学位。&lt;/p>
&lt;p>❤️ Photo by Kevin Bidwell: &lt;a class="link" href="https://www.pexels.com/photo/firefighter-holding-hose-with-water-flowing-3013676/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/firefighter-holding-hose-with-water-flowing-3013676/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>请参阅，例如，《A List of Post-mortems!》&lt;a class="link" href="https://github.com/danluu/post-mortems" target="_blank" rel="noopener"
>https://github.com/danluu/post-mortems&lt;/a> 和《Postmortem Index》&lt;a class="link" href="https://postmortems.app/" target="_blank" rel="noopener"
>https://postmortems.app/&lt;/a>。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>John Allspaw，《Moving Past Shallow Incident Data》，Adaptive Capacity Labs，2018 年 3 月 23 日。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>《Mean time to recovery》，Wikipedia。&lt;a class="link" href="https://en.wikipedia.org/wiki/Mean_time_to_recovery" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Mean_time_to_recovery&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Laura Nolan，《What Breaks Our Systems: A Taxonomy of Black Swans》（视频），SREcon19 Americas，2019 年 3 月 25 日。&lt;a class="link" href="https://www.usenix.org/conference/srecon19americas/presentation/nolan-taxonomy" target="_blank" rel="noopener"
>https://www.usenix.org/conference/srecon19americas/presentation/nolan-taxonomy&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>《Normal probability plot》，Wikipedia。&lt;a class="link" href="https://en.wikipedia.org/wiki/Normal_probability_plot" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Normal_probability_plot&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>请参阅，例如，《A List of Post-mortems!》&lt;a class="link" href="https://github.com/danluu/post-mortems" target="_blank" rel="noopener"
>https://github.com/danluu/post-mortems&lt;/a> 和《Postmortem Index》&lt;a class="link" href="https://postmortems.app/%e3%80%82" target="_blank" rel="noopener"
>https://postmortems.app/。&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>请注意，例如，公司 C 的事故持续时间通常对齐到整小时，这在图表上表现为一些峰值。&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>通过重复抽样来模拟行为的过程——在这种情况下，是模拟事故解决时间的行为。&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>截至 2020 年夏末，我认为仅使用过去 12 个月的数据可能会受到世界事件的影响，从而导致数据集不寻常。&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>针对这种特定情况，事故被缩短了 10%。&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>参见《在线统计教育》中的“均值的抽样分布”，“均值差异的抽样分布”，“均值的检验”等章节，项目负责人 David M. Lane，莱斯大学。&lt;a class="link" href="https://onlinestatbook.com/" target="_blank" rel="noopener"
>https://onlinestatbook.com/&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>根据你的业务，这种推理可能存在缺陷。考虑到每月一次一小时的事故对用户和业务的影响，与 60 次一分钟的事故非常不同。这同样适用于常用的服务质量目标（SLO）语言。&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13">
&lt;p>Rick Branson, &amp;ldquo;Stop Counting Production Incidents&amp;rdquo;, Medium, 2020 年 1 月 31 日。&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14">
&lt;p>“Normal probability plot”，Wikipedia。&lt;a class="link" href="https://rbranson.medium.com/why-you-shouldnt-count-production-incidents-38616d8e6329" target="_blank" rel="noopener"
>https://rbranson.medium.com/why-you-shouldnt-count-production-incidents-38616d8e6329&lt;/a>&amp;#160;&lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15">
&lt;p>参见《在线统计教育：多媒体学习课程》中的“均值的抽样分布”，“均值差异的抽样分布”，“均值检验”等章节，项目负责人 David M. Lane，莱斯大学。&amp;#160;&lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16">
&lt;p>参见《在线统计教育》中的相关章节，以及 Wikipedia 上的“样本均值分布”。&lt;a class="link" href="https://en.wikipedia.org/wiki/Mean#Distribution_of_the_sample_mean" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Mean#Distribution_of_the_sample_mean&lt;/a>&amp;#160;&lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17">
&lt;p>Eric W. Weisstein，《正态差异分布》，来源于 MathWorld—A Wolfram Web Resource，更新于 2021 年 3 月 5 日。&lt;a class="link" href="https://mathworld.wolfram.com/NormalDifferenceDistribution.html" target="_blank" rel="noopener"
>https://mathworld.wolfram.com/NormalDifferenceDistribution.html&lt;/a>&amp;#160;&lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18">
&lt;p>Jennifer Mace, &amp;ldquo;Generic Mitigations: A Philosophy of Duct-Tape Outage Resolutions&amp;rdquo;, O&amp;rsquo;Reilly, 2020 年 12 月 15 日。&lt;a class="link" href="https://www.oreilly.com/content/generic-mitigations/" target="_blank" rel="noopener"
>https://www.oreilly.com/content/generic-mitigations/&lt;/a>&amp;#160;&lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19">
&lt;p>Alex Hidalgo, Implementing Service Level Objectives, O&amp;rsquo;Reilly, 2020。&lt;a class="link" href="https://www.oreilly.com/library/view/implementing-service-level/9781492076803/" target="_blank" rel="noopener"
>https://www.oreilly.com/library/view/implementing-service-level/9781492076803/&lt;/a>&amp;#160;&lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:20">
&lt;p>“Hard Drive Data and Stats”，Backblaze。 &lt;a class="link" href="https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data" target="_blank" rel="noopener"
>https://www.backblaze.com/cloud-storage/resources/hard-drive-test-data&lt;/a>&amp;#160;&lt;a href="#fnref:20" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:21">
&lt;p>尽管其他统计数据（例如更高的百分位数）通常是衡量服务系统延迟的更好指标。&amp;#160;&lt;a href="#fnref:21" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:22">
&lt;p>Douglas W. Hubbard，《How to Measure Anything》第三版（新泽西州霍博肯：John Wiley &amp;amp; Sons，2014 年）。&amp;#160;&lt;a href="#fnref:22" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:23">
&lt;p>Andrew Stribblehill，“Managing Incidents”，载于 《SRE Google 运维解密》（O&amp;rsquo;Reilly，2016）。&amp;#160;&lt;a href="#fnref:23" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:24">
&lt;p>John Allspaw，“Moving Past Shallow Incident Data”；Charisma Chan 和 Beth Cooper，“Debugging Incidents in Google’s Distributed Systems: How Experts Debug Production Issues in Complex Distributed Systems”，Queue 第 18 卷第 2 期（2020 年 3 月-4 月）。&lt;a class="link" href="https://queue.acm.org/detail.cfm?id=3404974" target="_blank" rel="noopener"
>https://queue.acm.org/detail.cfm?id=3404974&lt;/a>&amp;#160;&lt;a href="#fnref:24" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:25">
&lt;p>Steve Krug，《Rocket Surgery Made Easy》（加利福尼亚州伯克利：New Riders，2010）。&amp;#160;&lt;a href="#fnref:25" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书：Cloud CRE 生产成熟度评估</title><link>https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/</link><pubDate>Sun, 07 Jul 2024 21:12:04 +0800</pubDate><guid>https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/</guid><description>&lt;img src="https://martinliu.cn/blog/cloud-cre-production-maturity-assessment/pexels-loan-patru-1487385115-27000643.webp" alt="Featured image of post Google SRE 白皮书：Cloud CRE 生产成熟度评估" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/cloud-cre-production-maturity-assessment-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>【译者注】Google Cloud 的客户可靠性工程团队（Cloud CRE）是一支专业团队，致力于帮助客户提高其 Google Cloud 平台上的可靠性。Cloud CRE 团队的使命是帮助客户建立可靠的服务，以便他们可以专注于创新。为了实现这一目标，Cloud CRE 团队开发了一种生产成熟度评估方法，以帮助客户评估其生产环境的成熟度，并提供指导，以帮助他们提高其生产环境的可靠性。&lt;/p>
&lt;blockquote>
&lt;p>谷歌 Cloud CRE 生产成熟度评估 (Cloud CRE Production Maturity Assessment)&lt;/p>&lt;/blockquote>
&lt;h2 id="监控和指标">监控和指标
&lt;/h2>&lt;p>【Monitoring &amp;amp; Metrics】确定期望的服务行为，度量服务的实际表现，并纠正差异。示例指标包括响应延迟、错误率或未答复查询率、资源的峰值利用率。&lt;/p>
&lt;h3 id="slo-定义和度量">SLO 定义和度量
&lt;/h3>&lt;p>【SLO Definition and Measurement】拥有一个代表用户需求的，已发布的服务水平目标 (SLO)，并根据这些已发布的 SLO 进行评估、报表和总结。&lt;/p>
&lt;ul>
&lt;li>您的服务/应用程序是否有明确定义的 SLO？
SLO 是对服务行为的度量目标，例如 95% 的查询请求延迟低于 500 毫秒。&lt;/li>
&lt;li>SLO 是否反映了客户的体验？
即，满足 SLO 是否意味着客户体验是可以接受的？反之，未能满足 SLO 是否意味着客户体验是不可接受的？&lt;/li>
&lt;li>SLO 是否发布给用户？
这并不常见，但有时如果您的服务有一个主要的大客户，您可能会发布您的 SLO，以便他们可以根据您的服务性能进行计划。&lt;/li>
&lt;li>您是否有对 SLO 进行良好定义的度量？
&lt;ul>
&lt;li>度量过程是否有文档记录？&lt;/li>
&lt;li>度量过程是否自动化？
即，您是否能自动获得 SLO 的报告或图表，还是必须手动运行命令或填写电子表格，以查看您对 SLO 的满足情况？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否有修订/优化 SLO 的流程？
例如，如果您一直未能满足 SLO，但用户似乎没有投诉，您如何决定是否修订 SLO 目标水平？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>服务没有 SLO 或 SLO 不代表用户需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>服务有定义的 SLO，但 SLO 的度量是临时的或没有文档记录。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>服务有定义的 SLO，并且度量过程有文档记录且有明确的负责人。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>SLO 发布给用户，并且 SLO 自动度量，代表用户需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>与用户一起对 SLO 进行持续评估和改进。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="仪表板与可视化">仪表板与可视化
&lt;/h3>&lt;p>【Dashboards &amp;amp; Visualization】用清晰的数据展示来支持服务的管理、决策和行动事项调整。&lt;/p>
&lt;ul>
&lt;li>您是否采集相关服务的数据？
&lt;ul>
&lt;li>您使用了哪些采集方法？
&lt;ul>
&lt;li>日志处理&lt;/li>
&lt;li>白盒监控：检查内部系统状态&lt;/li>
&lt;li>黑盒监控：模拟实际用户请求的人工流量事务/拨测&lt;/li>
&lt;li>从客户端设备采集指标&lt;/li>
&lt;li>其他： 您能简要描述您的采集方法吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>是否为自动化采集？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您管理的服务是否都有仪表板？
仪表板通常是一个显示图表或其他关键监控信息的网页，使您可以一目了然地看到服务的性能状态。&lt;/li>
&lt;li>仪表板是否包含关键服务指标？
例如：QPS，延迟，容量，错误预算消耗情况&lt;/li>
&lt;li>仪表板是否包含关键业务指标？
例如：访问量，用户，浏览量，共享次数&lt;/li>
&lt;li>仪表板是否可集中式的分享给相关业务部门使用？&lt;/li>
&lt;li>仪表板在应用程序/服务/团队之间是否以统一的 UI / UX 共享？&lt;/li>
&lt;li>企业是否有用于临时数据探索的工具？
例如：钻取仪表板，Splunk / BigQuery，数据仓库，以满足定制化分析需求。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有仪表板。数据采集是临时的、不一致的，没有文档记录。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>可能有关键指标的仪表板，但仅以静态形式存在（不可定制）。仪表板没有集中管理，用途没有标准化，所有权不明确。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>仪表板存在并支持常见的技术用例，所有权明确。支持临时查询的工具存在，但使用起来有些复杂（需要培训或长时间的试验才能得到结果）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>仪表板支持技术和业务用例。临时数据探索工具是可定制的，支持常见用例，无需培训（例如，按照手册文档操作）或通过直观的界面使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>仪表板在各业务单元之间标准化。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="用户关注">用户关注
&lt;/h3>&lt;p>采集准确反映用户体验的数据，并使用这些数据来维护服务质量。区分人工流量指标和关键用户旅程的度量；例如，如果服务器的“正常运行”，但用户仍然无法使用产品，则该指标无法提供用户体验的认知。&lt;/p>
&lt;ul>
&lt;li>服务是否采集任何未从服务器导出的数据？
通常是探针或关键用户旅程探测脚本。&lt;/li>
&lt;li>探针覆盖是否涵盖复杂的用户旅程？
例如，对于电商业务：主页 =&amp;gt; 搜索产品 =&amp;gt; 产品列表页 =&amp;gt; 产品详情页 =&amp;gt; “加入购物车” =&amp;gt; 结账&lt;/li>
&lt;li>是否为特定的用户旅程/流程提供 SLO？&lt;/li>
&lt;li>是否有针对用户旅程度量性能回归的既定响应流程？
例如，每当用户完成帐户创建流程的监控度量时间超过 5 分钟时，既定响应是：先暂停功能发布工作，并优先进行次问题的补救工作。
&lt;ul>
&lt;li>如有，响应是什么？
&lt;ul>
&lt;li>回滚发布&lt;/li>
&lt;li>触发告警&lt;/li>
&lt;li>开发临时修复&lt;/li>
&lt;li>其他
您能简要描述您的响应方法吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>是否评估用户旅程 SLO 的状态以推动服务改进？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有采集用户体验数据，或仅有服务器端指标数据（如服务响应延迟）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>存在探针来测试特定用户端点（如站点主页、登录），但缺少对复杂用户旅程/流程的探测覆盖。探针通常是单步的，而非多步旅程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>复杂用户旅程得到度量（通过复杂探测或客户端实时流量报告）。服务改进是被动的，而非主动的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>SLO 明确涵盖特定的用户旅程。不只是“服务器是否正常运行”，而是产品是否正常工作，能够让用户执行特定的产品功能。用户旅程的 SLO 违反会导致发布回滚。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>持续评估服务延迟和可用性，并用于推动服务改进。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="容量规划">容量规划
&lt;/h2>&lt;p>【Capacity Planning】预测未来需求，并确保服务在适当资源水位工作，并有足够的容量来满足这些需求。&lt;/p>
&lt;h3 id="业务指标预测">业务指标预测
&lt;/h3>&lt;p>【Business Metric Forecasting】预测服务关键业务指标的增长。业务指标的示例包括用户数量、销售数据、产品采用率等。预测需要准确且长期，以便有意义地指导容量规划。&lt;/p>
&lt;ul>
&lt;li>您的应用程序是否有关键业务指标？
例如，用户数量、图片数量、交易数量等。&lt;/li>
&lt;li>您是否有关键业务指标的历史趋势数据？
&lt;ul>
&lt;li>保留时间是多少个月？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否预测关键业务指标的未来增长？
&lt;ul>
&lt;li>您预测的未来时间范围是多少个月？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否通过将预测与度量期间的实际值进行比较分析，来衡量预测准确性？
&lt;ul>
&lt;li>6 个月预测的数字与观测值的误差百分比是多少？（0-100+）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的预测是否考虑了可能导致业务指标快速变化的发布或其他非有机事件？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有定义容量单位，或定义了单位但没有历史趋势数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>定义了业务单位，有单位的历史趋势数据，但预测能力有限。预测要么不准确，要么是短期的（&amp;lt;=1 个季度）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>有可靠的历史趋势数据，有 4-6 个季度的预测。有一个复杂的预测模型。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>已衡量过去预测的准确性。使用 6-8 个季度的预测。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>定义并度量且准确的预测，知道如何准确预测并不断提高准确性记录；实际需求的准确性在 6 个月预测内误差在 5% 以内。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="供给指标建模">供给指标建模
&lt;/h3>&lt;p>【Supply Metric Modeling】通过经验转换模型计算一组业务指标的容量需求。一个基本的示例模型：服务 1000 名用户需要 1 台虚拟机。预测显示用户每季度增长 10%，因此虚拟机也必须每季度增长 10%。&lt;/p>
&lt;ul>
&lt;li>您是否有一个将业务指标转换为逻辑容量指标（虚拟机、pods、分片等）的模型？
一个简单的模型示例可能是：“每 1000 名新用户我们需要增加一个 VM-large-1。”
&lt;ul>
&lt;li>该模型是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否验证容量模型的各个方面？
对于上述示例模型：我们如何知道 1000 名用户放在一台 VM-large-1 上是合适的？我们有压力测试吗？
&lt;ul>
&lt;li>验证是否是自动化的？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>该模型是否考虑了资源规格或成本的变化？
例如，不同地点的 CPU 成本效率或可用虚拟机规格的差异。&lt;/li>
&lt;li>实际需求的持续度量是否反馈到容量模型的修订中？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有将业务指标转化为逻辑供给的模型。服务是资源过度配置的（购买并希望使用模型），没有花费大量时间进行容量规划。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>使用简化的经验规则/指导方案，例如每 1000 用户/虚拟机。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>有压力测试，知道可能的扩容时间点。例如，压力测试的数据表明，1200 名用户确实适合在一个虚拟机上。使用经过验证的经验法则。模型验证可能是临时的（未自动化）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>有一个记录在案的服务模型，并定期验证（例如，通过了在发布验证期间的压力测试）。模型简单，维度上存在差距（例如，涵盖 CPU，但不包括带宽）。模型没有考虑不同地点的资源成本/规格差异，例如 CPU 类型、资源成本、虚拟机规格等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>有一个定义良好的模型，将需求单位转化为供给单位组合，并使用实时系统的反馈。制定了改进关键维度的计划。理解并在模型中考虑CPU平台/区域/网络之间的差异。如果存在非线性，则理解非线性。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容量获取">容量获取
&lt;/h3>&lt;p>【Acquiring Capacity】为服务配置额外资源：知道何时何地需要什么资源，了解必须满足的约束条件，并有满足这些需求的流程。&lt;/p>
&lt;ul>
&lt;li>团队每月在资源管理上花费多少总时间？&lt;/li>
&lt;li>获取更多资源的流程是否有明确定义？
&lt;ul>
&lt;li>流程是否有文档记录？&lt;/li>
&lt;li>流程是否自动化？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>资源请求的发起是否由预测程序自动生成？&lt;/li>
&lt;li>您是否知道哪些约束条件决定了服务的位置？
例如，您的服务器是否必须位于特定的云区域（az）或地区（region）？如果是，为什么？您的服务、处理流程和数据存储是否必须共址或在同一区域（az）或地区（region），为什么？您是否有数据区域化要求？
&lt;ul>
&lt;li>这些约束条件是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否监控对这些服务约束的遵守情况？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>资源是手动且临时部署的。系统组件之间的关系没有文档记录。不确定部署的资源是否足够。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>存在服务约束的经验法则（例如数据库和 Web 服务器需靠近），但这些约束没有被度量（未验证）。有定义的资源获取流程，但流程是手动的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>获取资源的过程大部分是自动化的，但何时获取资源仍是手动过程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>系统约束被建模，但缺乏评估。随着时间推移，服务变动可能导致模型中的约束与现实脱节。何时获取资源由预测驱动。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>模型不断评估和维护，即使在服务变动的情况下也是如此。获取容量的位置由模型驱动，获取容量的时间由预测驱动。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容量利用率">容量利用率
&lt;/h3>&lt;p>【Capacity Utilization】监控服务资源的使用情况，理解容量和利用率之间紧密而复杂的关系，设定有意义的利用率目标，并实现这些目标。&lt;/p>
&lt;ul>
&lt;li>您是否为服务定义了任何利用率指标？
例如，现在有多少总资源在使用？&lt;/li>
&lt;li>您是否持续度量利用率？&lt;/li>
&lt;li>您是否有公认的利用率目标？
即，您是否有特定的利用率指标阈值，这些阈值被记录，并认可为所需的最低值，未达到该目标会触发响应处理流程？&lt;/li>
&lt;li>利用率目标是否在驱动服务改进？&lt;/li>
&lt;li>您是否定期审查利用率目标，及服务对该目标的符合情况？
例如，每季度审查一次。&lt;/li>
&lt;li>您是否了解服务的资源瓶颈是什么？
对于上面的示例（每台虚拟机 1000 用户）：如果我们将 1200 用户放在一台虚拟机上，哪个资源会首先耗尽？（CPU、RAM、线程、磁盘等）
&lt;ul>
&lt;li>您能简要描述一下吗？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您是否测试新版本的利用率回归情况？&lt;/li>
&lt;li>显著的利用率回归是否会阻止发布？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>没有定义系统利用率指标。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>定义了利用率指标和目标，但度量是临时的（非持续）。每季度/每年进行。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>持续度量利用率，并定期审查（每月/每季度）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>利用率是发布健康状况的指标（利用率显著回归的新版本会被阻止发布）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>持续评估利用率指标，并用于推动服务改进（例如，保持服务成本的可持续性）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="变更管理">变更管理
&lt;/h2>&lt;p>【Change Management】在保持所需服务行为的同时更改服务行为。示例：金丝雀发布、1% 实验、滚动升级、快速失败回滚、季度错误预算。&lt;/p>
&lt;h3 id="发布过程">发布过程
&lt;/h3>&lt;p>标志、数据和二进制程序文件的变更流程。&lt;/p>
&lt;p>&lt;strong>术语澄清&lt;/strong>
不同上下文中的发布术语可能有所不同，因此在本次评估中我们将使用以下定义。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>服务版本：一组代码、二进制文件和/或配置，封装一个定义明确的服务状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>候选版本：一个用于部署到生产环境的新服务版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布：准备和部署一个新的发布候选版本到生产环境。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>候选版本准备：创建一个可行的候选发布版本。这包括编译和所有测试、分级或在与生产环境接触之前必须进行的其他验证活动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署：转换到新服务版本的过程。例如，将二进制文件推送到其生产位置，并重新启动相关进程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增量部署：以一系列连续逻辑划分的方式结构化地部署到多个生产位置。例如，一次部署到多个不同站点中的一个站点，或者在总共 1000 台虚拟机的环境中，每次在其中的 100 台虚拟机子集进行部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>金丝雀发布：战略性地部署到生产环境的有限子集，以测试版本的可行性，必须满足明确的健康检查才能继续更广泛的部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否有定期的发布节奏？
即，您是否有固定频率执行发布流程？&lt;/p>
&lt;ul>
&lt;li>以下哪项最接近您的发布节奏？
&lt;ul>
&lt;li>构建成功即发布（Push-on-green）&lt;/li>
&lt;li>每日&lt;/li>
&lt;li>每周&lt;/li>
&lt;li>每两周&lt;/li>
&lt;li>每月&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一次典型发布需要多少工程师工时（小时）？
从发布候版本选准备到部署完监控配置结束，总共需要多少人力时间？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布的成功率是多少？
成功的发布通常是指达到完全部署，且不需要回滚或产品补丁的发布。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布成功率是否满足您的业务需求？
例如，发布是否足够可靠，不会阻碍开发进度，或削弱对功能交付的信心？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否有回滚部署的流程？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是不是进行的增量部署？
例如，将新版本先暴露给 1% 的用户访问，然后 10%，然后 50%&amp;hellip;（参见上面的定义。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对版本发布结果，您是否有明确的失败条件检查？
例如，由人类或机器人评估的指标，以查看发布结果是否存在问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否使用金丝雀发布（或一系列金丝雀发布）来验证每次部署？
即，少量真实请求被发送到新版部署，以查看其是否能正确处理，然后再接收所有请求。（参见上面的定义。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布过程的所有部分是否都是自动化的？&lt;/p>
&lt;ul>
&lt;li>哪些部分？
&lt;ul>
&lt;li>发布候选版本准备&lt;/li>
&lt;li>部署&lt;/li>
&lt;li>失败检测&lt;/li>
&lt;li>部署回滚&lt;/li>
&lt;li>金丝雀发布&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>发布过程的所有部分是否都有文档记录？
即，如果您让一个新团队成员执行发布，他们是否能找到，并遵循该过程的说明文档？&lt;/p>
&lt;ul>
&lt;li>哪些部分？
&lt;ul>
&lt;li>发布候选版本准备&lt;/li>
&lt;li>部署&lt;/li>
&lt;li>失败检测&lt;/li>
&lt;li>部署回滚&lt;/li>
&lt;li>金丝雀发布&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>发布没有固定的节奏。发布过程是手动且无文档记录的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>发布过程有文档记录。尝试定期发布。有应对不良发布的流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>拥有自动化的持续集成/持续交付 (CI/CD) 流水线。发布是可预测的，成功率满足业务需求。发布过程设计允许在预先与业务约定的参数范围内，尽量降低对客户的不良影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>完全自动化的发布过程，包括自动化测试、金丝雀发布过程和自动回滚。发布满足业务需求。展示出可在不显著消耗错误预算的情况下，进行回滚的能力。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>标准的质量保证（Q/A）和金丝雀发布过程。发布快速、可预测，且需要最少的人工监督。过程完全按标准操作落地，并可发布完成。自动化的发布验证和测试，全面的与监控集成。健全的回滚和异常处理程序。发布和发布频率符合业务需求。发布过程符合产品需求。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="设计与发布">设计与发布
&lt;/h3>&lt;p>【Design &amp;amp; Launch】通过早期参与、设计审查、引入最佳实践等方式，设计一个成功的服务。&lt;/p>
&lt;ul>
&lt;li>团队是否有重大代码变更的评审流程？
例如，设计评审或发布评审。
&lt;ul>
&lt;li>评审是否自助进行？&lt;/li>
&lt;li>评审是否有特定的批准人？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>团队是否有执行重大变更的最佳实践？
例如，如果您知道您正在发布一个新功能，会添加一个新组件，是否有关于如何以标准方式配置、监控、部署和操作该组件的协议？
&lt;ul>
&lt;li>这些实践是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最佳实践是否是通过代码和/或自动化方式强制执行的？&lt;/li>
&lt;li>是否可以因未遵循最佳实践而拦截发布？&lt;/li>
&lt;li>团队是否有高风险发布的强制性流程？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>团队没有新代码或新服务的设计或评审流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>团队有一个轻量级的引入新组件或服务的评审流程。团队有一套最佳实践，但它们是临时的且记录不完整。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>团队有高风险发布的强制性流程。该流程涉及应用发布的记录最佳实践，可能包括设计/发布审查。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>大多数发布的评审是自助进行的（例如，通过简短的调查，可以触发对边缘情况的审查）。最佳实践通过共享代码模块和调优自动化来应用。团队有记录的重大服务变更流程，这些设计有指定的评审者/批准人。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>最佳实践通过自动化强制执行。允许通过特例申请，来请求忽略最佳实践。包含1-4中的所有内容。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="变更流程自动化">变更流程自动化
&lt;/h3>&lt;p>【Change Process Automation】自动化了与服务运维相关的手动工作。&lt;/p>
&lt;ul>
&lt;li>您是否有变更流程自动化？
即，当需要执行生产操作（如重启一组作业或变更一组虚拟机的配置）时，是否有脚本或其他工具或服务来帮助更安全和轻松地进行变更？&lt;/li>
&lt;li>您的自动化是否使用了“基础设施即代码 (Infrastructure as code)”？
与命令执行（命令式）自动化流程相对的。&lt;/li>
&lt;li>您的自动化是否支持“差异”（diffing）或“干运行 (dry-run)”功能，以便操作员可以看到操作的效果？&lt;/li>
&lt;li>您的自动化是否幂等？&lt;/li>
&lt;li>您的自动化是否具有弹性？
即，很少因服务、政策或基础设施变化而中断。&lt;/li>
&lt;li>您的常规流程是否有文档记录？
例如，如果让新团队成员升级所有虚拟机上的 Linux 版本，他们是否能找到并遵循操作说明？&lt;/li>
&lt;li>您的常规任务中有多少百分比是自动化的？&lt;/li>
&lt;li>您是否有启动或关闭服务的流程？例如，在新的 GCP 区域部署。
&lt;ul>
&lt;li>该流程是否有文档记录？&lt;/li>
&lt;li>该流程是否自动化？&lt;/li>
&lt;li>需要多少工程师工时（小时）？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>团队花费大量时间在操作上，或有一个“运维团队”花费大量时间在操作上。任务记录不足（例如，流程仅特定个人知道，但没有文档记录）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>手动任务有文档记录。高负担任务部分为自动化，并且了解操作时间的花费。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>许多高负担任务已自动化。团队在操作上花费的时间不到一半。自动化不灵活，易受政策或基础设施变化的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>所有高负担任务均已自动化。团队在操作工作上花费的时间少于 20%。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>所有可自动化的任务均已自动化，团队专注于更高层次的自动化和可扩展性。现有自动化可以快速适应服务或政策变化。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="紧急响应">紧急响应
&lt;/h2>&lt;p>【Emergency Response】注意并有效响应服务故障以保持服务符合SLO。示例：值班轮换、主要/次要/升级、操作手册、不幸之轮、告警审查。&lt;/p>
&lt;h3 id="组织值班轮换">组织值班轮换
&lt;/h3>&lt;p>&lt;strong>响应告警&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>您是否有应对重大事件的事件管理协议（流程）？
例如，指定事件经理、启动跨公司通信/沟通、定义其他管理危机的角色。&lt;/li>
&lt;li>您的服务是否有特定情况的操作手册？
操作手册是描述如何响应特定类型故障的文档，例如将服务从一个区域切换到另一个区域。
&lt;ul>
&lt;li>大多数操作手册条目是否提供明确且有效的响应操作？
即，能够减轻问题并帮助诊断或解决原因的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的服务是否有例行遵循的升级流程？
即，如果无法解决问题，是否有流程可以找到并联系能够解决问题的人？
&lt;ul>
&lt;li>升级流程是否有文档记录？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一线响应者能否在不求助的情况下解决90%的事件？
例如，事件在不升级到主题专家或同事的情况下解决？&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>值班轮换结构&lt;/strong>&lt;/p>
&lt;p>【Oncall Rotation Structure】关于值班责任的程序和期望，明确识别受过训练的工程师团队，能够可持续地快速响应事件以维护服务的SLO。&lt;/p>
&lt;ul>
&lt;li>您的服务是否有值班/通知触达的轮换？&lt;/li>
&lt;li>您的值班轮换是否有文档记录的响应时间？
响应时间是“到键盘时间”而不是“解决时间”。
&lt;ul>
&lt;li>响应时间是多少分钟？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的值班团队成员是否在轮班时进行交接？&lt;/li>
&lt;li>您的团队是否有将新响应者加入值班轮换的流程？
例如，培训过程、指导、跟班主要响应者。
&lt;ul>
&lt;li>培训材料是否有文档记录？&lt;/li>
&lt;li>您的团队是否有“值班配对”计划，即由有经验的响应者与新响应者配对进行在岗培训？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的团队是否进行“厄运之轮”或其他值班培训演习？
厄运之轮：生产灾难角色扮演，用于培训和审查及维护文档。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - 未管理&lt;/td>
&lt;td>临时支持：尽力而为，仅限白天，无实际轮换，手动告警，无定义的升级流程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - 已管理&lt;/td>
&lt;td>有文档记录的轮换和响应时间。告警自动化并与监控集成。培训是临时的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - 已定义&lt;/td>
&lt;td>存在培训流程制度（幸运之轮、值班跟班在岗培训等）。轮换人员充足，但有些告警需要升级到高级团队成员才能解决。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - 已度量&lt;/td>
&lt;td>度量事件的平均修复时间 (MTTR) 和平均检测时间 (MTTD)。轮班之间有交接。大多数事件需要最小的升级（可以由值班人员单独处理）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - 持续改进&lt;/td>
&lt;td>每周回顾审查事件并改进策略、交接、班次间的沟通，大多数问题无需升级即可解决，回顾审查轮换的价值和规模，评估范围。建立了事件响应协议。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="告警分析">告警分析
&lt;/h3>&lt;p>【Alert Analysis】回顾审查实际接收到的告警，覆盖现有系统，管理告警的实践和流程，可操作告警的数量，按原因、位置和条件对事件进行分类的能力。&lt;/p>
&lt;ul>
&lt;li>您的告警是否基于监控数据自动化？&lt;/li>
&lt;li>您的团队收到的告警量是否一致？
如果答案为“是”表示大多数值班轮班的告警数量相当。&lt;/li>
&lt;li>您的团队是否有维持告警增长低于线性增长的流程？
即，随着服务数量的增长，是否采取措施来防止告警量成比例的增加？&lt;/li>
&lt;li>您的团队是否有自动化的告警抑制规则或依赖关系，以减少告警数量？
例如，当负载均衡服务器被排空时，该服务器的告警会自动被抑制；或者，细粒度的告警（如特定延迟阈值）可能依赖于粗粒度的“无法访问”告警的静音状态。&lt;/li>
&lt;li>您的团队是否经常忽略或手动抑制任何告警，因为它们噪音大、垃圾多、假告警或不可/无需操作？
例如，是否有某个告警每几天都会触发一次，但通常无需采取任何行动就关闭了？短期内有垃圾告警是可以的，只要在持续修复它们。&lt;/li>
&lt;li>您的团队是否在值班轮班之外花费大量时间处理轮班期间发生的事件？&lt;/li>
&lt;li>您的团队是否有定义的超负荷处理流程，以应对告警触发率达到不可持续水平的时期？&lt;/li>
&lt;li>您的服务是否经历过未被告警初期检测到的重大故障？
即，没有触发任何告警的故障，或只有在通过其他来源发现事件后才触发的告警。&lt;/li>
&lt;li>您的团队是否收集告警统计数据（原因、采取的行动、告警解决方案）以推动改进？&lt;/li>
&lt;li>您是否有定期审查评估会议，审查评估告警或事件以进行模式匹配、发生率、操作手册改进等？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Unmanaged&lt;/td>
&lt;td>Pager 过载，告警被忽略，告警长时间静音，无操作手册，告警量增加或不可预测，事件发生时无告警（手动检测事件）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Managed&lt;/td>
&lt;td>事件率不可持续（值班成员报告过劳）。虚假告警被静音。有操作手册，但指导操作较少。许多告警是“信息性”的，无明确操作。告警量不可预测。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Defined&lt;/td>
&lt;td>大多数告警有明确人类操作的操作手册。告警量在轮班/周之间无显著变化。告警量在可持续水平（由值班团队测量），有处理告警量过载的流程（如开发人员停止开发并致力于可靠性）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Measured&lt;/td>
&lt;td>大多数告警有有用的操作手册条目。几乎所有告警都需深思熟虑的人工反应。定期分析并处理告警主要原因。积极使用告警抑制以消除重复告警和已提醒其他团队的告警。维持服务增长下的低于线性增长的告警量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Continuous Improvement&lt;/td>
&lt;td>识别告警模式，定期审查故障率，修剪告警，审查基本服务故障模式，所有告警需深思熟虑的人工干预，告警操作手册提供适当的调试入口。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="事后复盘分析">事后复盘分析
&lt;/h3>&lt;p>【Postmortems】撰写事后复盘分析的制度，格式和行动项目，以及后续行动的期望。通过根本原因分析和发现结果推动服务可靠性改进的实践。&lt;/p>
&lt;ul>
&lt;li>您的团队是否有事后复盘分析流程？
事后复盘分析也称为事件回顾、回顾。&lt;/li>
&lt;li>事后复盘分析流程是否仅针对大型/重大事件？&lt;/li>
&lt;li>您的事后复盘分析流程是否会为团队生成行动项目？
&lt;ul>
&lt;li>您的团队是否有优先处理并完成事后复盘分析行动项目的流程？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大多数事件是否进行了彻底的根本原因分析，并有明确的结果？&lt;/li>
&lt;li>您的服务是否有优先修复或减轻已识别根本原因的流程？&lt;/li>
&lt;li>以下哪些是您的事后复盘分析流程的一部分？
&lt;ul>
&lt;li>检测时间
从事件发生到检测到的时间。&lt;/li>
&lt;li>修复时间
从事件发生到解决的时间。&lt;/li>
&lt;li>以上均无&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的公司是否有在组织/团队之间共享事后复盘分析的流程？&lt;/li>
&lt;li>您的公司是否收集事后复盘分析元数据（如根本原因分类，MTTR，MTTD）？
MTTD：平均检测时间。事件从发生到检测的平均时间。
MTTR：平均修复时间。事件从发生到解决的平均时间。
&lt;ul>
&lt;li>您的公司是否有使用这些数据识别问题区域的流程？
例如，是否对数据进行分类和/或汇总以识别故障模式或高风险服务方面，以指导风险缓解投资？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>您的团队或公司是否有事后复盘分析流程的所有权或审核周期？
即，是否有人标准化格式并定期评估其有效性和价值？&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>成熟度等级描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1 - Unmanaged&lt;/td>
&lt;td>无跟进或系统错误识别，无根本原因分析，事件得到控制但未分析，同类事件不断发生，未识别长期趋势。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 - Managed&lt;/td>
&lt;td>有定义的事后复盘分析流程和行动项目，但行动项目跟进差（仅处理 P0 项目）。根本原因分析（RCA）不足（“为什么”问得不够多）。由于行动项目跟进不力或 RCA 不充分，类似事件重现。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 - Defined&lt;/td>
&lt;td>事后复盘分析流程应用于所有重大事件（包含行动项目）。优先处理 P0 级别的行动项目。RCA 广泛且正确归因于大多数事件的根本原因。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 - Measured&lt;/td>
&lt;td>事后复盘分析附有注释元数据以促进分析。事后复盘分析结果在受影响团队之间广泛分享，从错误中学习。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 - Continuous Improvement&lt;/td>
&lt;td>所有行动项目及时完成，由相关团队和其他团队审查以便学习，识别问题区域，有流程确保行动项目完成，标准化格式，审查事后复盘分析流程以评估其价值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>❤️ Photo by PNW Production: &lt;a class="link" href="https://www.pexels.com/photo/a-black-calculator-near-a-ruler-8250929/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/a-black-calculator-near-a-ruler-8250929/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第七章 总结与展望</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch7/</link><pubDate>Sat, 06 Jul 2024 12:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch7/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch7/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第七章 总结与展望" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们探讨了事故的基础知识，并详细了解了事故管理生命周期的三个阶段：准备、响应和恢复。这涵盖了很多内容，但你现在可能会想，“接下来该怎么做？”&lt;/p>
&lt;p>首先，要学会在适当的时候使用事故管理。事故响应需要大量人力资源。通常需要一个或多个人参与其中，从最初的告警，到问题解决的整个过程中。事故响应的目的是在问题发生时实施缓解措施，以争取时间来做出优先级决策。这意味着常规的产品修复可能会被推迟，长期计划和改进可能不会被优先考虑。事故响应可能导致服务质量目标 (SLO) 被违反或客户承诺无法履行，并且参与事故响应的员工都会感受到较大压力。&lt;/p>
&lt;p>有研究表明，现实世界中的第一事故响应者更容易出现倦怠和疲劳；同样的趋势也适用于处理非现实事故的人——即那些工作与生活不平衡、活动极端或可能缺乏控制的员工。这些因素在技术事故管理工作中很常见，意味着员工可能会感受到倦怠的影响和职业后果。这里的风险包括，最好的情况下是工作表现不佳，最坏的情况下是员工流失。由于这种倦怠产生的相关风险，公司必须尽量做好事故管理，并尽可能减少事故管理的频率。&lt;/p>
&lt;p>你的下一个行动是将&lt;strong>事故管理&lt;/strong>视为一项关键运维学科，并努力在这方面取得出色的表现。那么，什么是“擅长”事故管理呢？这意味着你的团队（而不仅仅是个别人员）需要积极改进这一循环的所有部分。虽然这听起来不像是：有几个超级英雄消防员冲了进来，他们拯救世界的场景那么戏剧化，但英雄主义心态是有害的。缓慢而仔细地改进事故准备，开发响应事故的工具、技术和通信渠道，并优先考虑可持续和可扩展的工程工作，才是强大事故管理实践的核心。&lt;/p>
&lt;p>通过将所有内容视为一个连续且相互关联的循环，每个人都变得重要，并且可以避免将责任归咎于任何一个人或系统组件。无责文化的实践营造了一个心理安全的工作环境，让员工能够在其中蓬勃发展，并创造出色的产品。这些方法帮助谷歌度过了最近全球历史上的巨大不确定时期，也可以帮助提高贵公司的韧性。&lt;/p>
&lt;p>总体而言，不要将事故管理应用于每一个潜在问题或类型问题。谨慎而合理地使用事故管理，以避免让团队成员感到倦怠。当你完成事故管理时，停止管理事故，开始进行解决长期问题或风险所需的工程工作。识别并使用其他可能有用的工具。&lt;/p>
&lt;h2 id="进一步阅读">进一步阅读
&lt;/h2>&lt;ul>
&lt;li>来自《Google SRE 工作手册》的监控 &lt;a class="link" href="https://sre.google/workbook/monitoring/" target="_blank" rel="noopener"
>https://sre.google/workbook/monitoring/&lt;/a>&lt;/li>
&lt;li>来自《Google SRE 工作手册》的事故响应 &lt;a class="link" href="https://sre.google/workbook/incident-response/" target="_blank" rel="noopener"
>https://sre.google/workbook/incident-response/&lt;/a>&lt;/li>
&lt;li>来自《Google SRE 工作手册》的事后分析文化：从失败中学习 &lt;a class="link" href="https://sre.google/workbook/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/workbook/postmortem-culture/&lt;/a>&lt;/li>
&lt;li>事后分析行动项目：计划工作并执行计划 &lt;a class="link" href="https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/" target="_blank" rel="noopener"
>https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/&lt;/a>&lt;/li>
&lt;li>使用 SRE 原则减少生产事故影响——CRE 实战经验 &lt;a class="link" href="https://cloud.google.com/blog/products/devops-sre/shrinking-the-impact-of-production-incidents-using-sre-principles-cre-life-lessons" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/devops-sre/shrinking-the-impact-of-production-incidents-using-sre-principles-cre-life-lessons&lt;/a>&lt;/li>
&lt;li>缩短生产事故缓解时间——CRE 实战经验 &lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考书目">参考书目
&lt;/h2>&lt;ul>
&lt;li>“Google Data Center FAQ”。《Data Center Knowledge》，2017 年 3 月 19 日。&lt;a class="link" href="https://www.datacenterknowledge.com/hyperscalers/google-data-center-faq" target="_blank" rel="noopener"
>https://www.datacenterknowledge.com/hyperscalers/google-data-center-faq&lt;/a>&lt;/li>
&lt;li>Aleksandra. “63 Fascinating Google Search Statistics”。《SEOtribunal》，2018 年 9 月 26 日。&lt;a class="link" href="https://seotribunal.com/blog/google-stats-and-facts/" target="_blank" rel="noopener"
>https://seotribunal.com/blog/google-stats-and-facts/&lt;/a>&lt;/li>
&lt;li>“Incident Command System Resources”。美国联邦紧急事务管理局，美国国土安全部，2018 年 6 月 26 日。&lt;/li>
&lt;li>Beyer, Betsy, Chris Jones, Niall Richard Murphy 和 Jennifer Petoff 编辑。 《Site Reliability Engineering: How Google Runs Production Systems》。O’Reilly Media，2016 年。&lt;/li>
&lt;li>“Data Access and Restrictions”。《Google Workspace Security Whitepaper》，2021 年 10 月。 &lt;a class="link" href="https://workspace.google.com/learn-more/security/security-whitepaper/page-7.html" target="_blank" rel="noopener"
>https://workspace.google.com/learn-more/security/security-whitepaper/page-7.html&lt;/a>&lt;/li>
&lt;li>Treynor Sloss, Benjamin. “An Update on Sunday’s Service Disruption”。《Inside Google Cloud (博客)》，Google Cloud，2019 年 6 月 3 日。 &lt;a class="link" href="https://cloud.google.com/blog/topics/inside-google-cloud/an-update-on-sundays-service-disruption" target="_blank" rel="noopener"
>https://cloud.google.com/blog/topics/inside-google-cloud/an-update-on-sundays-service-disruption&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="致谢">致谢
&lt;/h2>&lt;p>作者感谢 Jennifer Mace, Hazael Sanchez, Alexander Perry, Cindy Quach 和 Myk Taylor 对本报告的贡献。&lt;/p>
&lt;h2 id="作者简介">作者简介
&lt;/h2>&lt;p>&lt;strong>Ayelet Sachto&lt;/strong> 是 GKE SRE 的站点可靠性工程师，曾在 Google UK 担任战略云工程师，并领导 EMEA 地区的 PSO-SRE 项目。在她 17 年的职业生涯中，她开发和设计了大规模应用程序和数据流，同时实施了 DevOps 和 SRE 方法。她是众多技术文章、演讲和培训的作者，包括 O’Reilly 课程 “SRE Fundamentals in 3 Weeks”，并在数十个会议上发言和领导了数百个工作坊。Ayelet 还是技术社区的积极成员和导师。在空闲时间，她喜欢创造各种东西，无论是厨房中的一道菜、一段代码，还是有影响力的内容。&lt;/p>
&lt;p>&lt;strong>Adrienne Walcer&lt;/strong> 是谷歌 SRE 的技术项目经理，专注于提高弹性，减少大规模事故对谷歌服务、基础设施和运营的影响。Adrienne 曾为谷歌的 O’Reilly 出版物 《A Practical Guide to Cloud Migration》作出贡献，并在最后一次 USENIX LISA 会议 (LISA21) 上就规模化事故管理发表演讲。在加入谷歌之前，Adrienne 曾在 IBM Watson Health (前身为 Explorys Inc.) 担任数据科学家，并在 Strong Memorial Hospital 和 Cleveland Clinic 从事生物统计工作。她拥有乔治华盛顿大学的系统工程硕士学位和罗切斯特大学的学士学位。在空闲时间，Adrienne 喜欢玩龙与地下城游戏，并在 Second Harvest 食品银行做志愿者。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第六章 真实事故案例：玛雅末日事件</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch6/</link><pubDate>Fri, 05 Jul 2024 12:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch6/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch6/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第六章 真实事故案例：玛雅末日事件" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>为了看到前文所讨论的一些原则在实践中的应用，我们将深入探讨一个谷歌重大宕机事故的现实例子。我们将回顾事件的经过，了解规模化组织结构的运作方式，并展示如何解决这个问题以及我们从中学习到的经验。&lt;/p>
&lt;p>对于谷歌来说，玛雅末日并不是2012年的新纪元现象。相反，玛雅末日发生在2019年6月2日，与一个名为Maya的网络自动化工具有关。Maya负责标记管理和网络流量调度，一个微小的代码改动导致了实体类型持续被错误标记。&lt;/p>
&lt;p>大约在中午，我们正在进行计划中的维护，确定了一系列将在多个服务器上运行的操作和配置变更（包括在Maya上）。当这个错误标记与我们的作业调度逻辑冲突时，我们“发现”了一种新的故障模式，与流量调度相关的作业被大规模取消调度。出入这些区域的网络流量试图将重新调度的任务塞入剩余的网络容量中，其中流量调度功能仍然有效，但最终未能成功。网络变得拥挤，我们的系统正确地对流量过载进行了分级，并自动排空了较大、对延迟不敏感的流量，以保留较小、对延迟敏感的流量。&lt;/p>
&lt;p>流量拥塞开始了。结果，我们的监控系统启动了事故管理流程的第一步：告警。当组件响应者从监控系统收到告警时，这反映了其负责的系统中发生的变化。我们的监控系统注意到错误率阈值被突破了，并向负责该网络组件的值守人员发送了自动通知，值守人员开始评估情况。&lt;/p>
&lt;p>与此同时，受影响区域的网络容量减少导致溢出，这种网络拥塞引发了我们网络和计算基础设施中的级联故障。总体来说，我们的网络优先考虑用户流量高于内部流量，包括员工的流量。这实际上是合理的，因为我们宁愿从无法解决问题的99.9%的员工那里重新分配容量，并尽最大努力为我们的用户服务。参与事故响应的0.1%的员工通常知道如何继续处理并绕过这个限制。但是，这次级联故障的一个影响是我们的内部工具出现了重大中断，扰乱导致了大量告警的发送，导致大量人收到了呼叫短信。当每个值守人员都切换到事故响应模式时，他们注意到了：由于网络问题导致的服务不可用。网络组件值守人员迅速确定了网络拥塞的原因，但同样的网络拥塞导致服务降级，也减缓了他们恢复正确配置的能力。&lt;/p>
&lt;p>每个人都想尽最大努力支持他们的用户，并了解服务恢复的预期轨迹，因此原本负责网络组件的值守人员团队突然新加入了很多同事。&lt;/p>
&lt;p>我们在谷歌将组件分为三类：&lt;/p>
&lt;ul>
&lt;li>基础设施组件，如网络管道或存储服务。&lt;/li>
&lt;li>产品服务组件，如 YouTube 流媒体或 Google 搜索的前端。&lt;/li>
&lt;li>内部服务组件，如监控、零信任远程访问、Maya 和算力管理。这些内部服务组件都在经历困难。&lt;/li>
&lt;/ul>
&lt;p>由于网络具有广泛的依赖性，所以在网络组件值守人员解决完问题之前，其他人都无法继续工作。其他值守人员开始提供帮助，并询问他们的服务何时能开始恢复。很多不同响应者预期的并行性，并没有加速问题的解决。根本原因和次生效应开始变得模糊不清；一个团队的原因是另一个团队的结果，每个人都在尝试贡献他们的知识。虽然每个人都是其系统栈的专家，但大多数人都没有对整体系统全面的大局观，不知道哪些工具路径变得不可用。&lt;/p>
&lt;p>为什么？未触及拥堵网络的路径是正常的。如果路径在那时看起来像外部用户，则拥堵网络的路径也是正常的，因为我们优先考虑了它们。因此，我们向外部用户提供的服务是可用的——例如视频通话或编辑文档。然而，如果路径是内部服务，如作业控制或 Maya 配置，它就被降级并卡住了。&lt;/p>
&lt;p>我们都在观看此次火山爆发，然而，在 20 分钟后，我们得出了问题的结论 “可能与熔岩有关。”&lt;/p>
&lt;p>宕机一小时后，一位组件响应者注意到，影响我们基础设施的系统级问题过于普遍，围绕事故的协调沟通变得混乱不堪。此时，已有超过40位队友加入了事故响应通信频道，试图提供帮助。监控数据显示出：当前事故影响了半个地球。Google Cloud、Gmail、Google Calendar、Google Play等服务都受到了影响——导致企业都无法运作，大量员工无法高效工作，人们无法相互沟通。一些员工试图使用那些不依赖受损网络的零星服务，而另外的人们都已经放弃了。&lt;/p>
&lt;p>近40人卷入了本次事故，网络英雄并没有足够的时间和精力，用来制定和协调实施适当的缓解措施，向所有利益相关者广泛沟通，并管理各方期望。因此，他们进行了升级。我们的网络组件值守人员向技术事故响应团队（Tech IRT）发出了求助请求；他们的请求触达到了许多处于合适工作时段时区里的Tech IRT成员，能够处理事故的成员表示了他们的可用性。由于事故影响如此广泛，许多人已经参与了事故。一些Tech IRT响应者没有担任事故指挥官的角色，因为他们是处理网络问题的团队成员或经理，可以帮助解决主要根本原因，所以他们选择了协助操作的工作。&lt;/p>
&lt;p>接受事故指挥官角色的 Tech IRT 的成员，以前没有处理过受故障影响的网络组件，但他们能够评估系统状态和响应人员的情况。利用他们的训练有素，这位指挥官运用一种机制访问到了生产系统，该机制立即将他们的行动标识为“事故响应”，并绕过了“内部流量降级”的标志。一旦内部流量得到了一些空间，他们就指挥网络值守人员开始介入并解决问题。&lt;/p>
&lt;p>在此过程中，他们迅速对正在进行的沟通，以及所有试图“提供帮忙”的人进行了组织和结构化。一旦这种混乱的工程能量被组织起来之后，每个人都开始一起取得到了进展。他们能够更清楚地跟踪不同系统的当前状态，并看到缓解措施的实施速度。随着这些繁琐的管理工作不再让网络组件响应者们不堪重负，他们和他们的团队有了实施适当缓解计划的空间，包括丢弃大量负载，为健康重启和一些紧急强行配置变更腾出系统空间。&lt;/p>
&lt;p>一旦开始步入了缓解事故的路径，Tech IRT 成员就专注于将事故推向结束。他们设定了一些退出标准，以便我们可以关闭事故，确保其他系统在任何需要执行的恢复操作中得到支持，然后确保被卷入的响应团队都能够顺利交接并离场。&lt;/p>
&lt;p>事故结束后，服务都恢复正常，我们进行了深入的事后分析复盘，以分析事故，并理解根本原因的细微之处，以及这些故障模式所揭示的新兴属性。自那以后，参与的网络团队已经开展了一些非常酷的工作计划，重新构建了 Maya，来防止这种故障模式，以及类似的，但以前未考虑到的故障模式，预防它们再次困扰我们的系统。&lt;/p>
&lt;p>最后，我们用内部的个人档案徽章、荣誉性的表情包和奖金等方式奖励了相关参与的人员。对大多数人来说，这次非常严重的事故，是他们职业生涯中最艰苦的一天。也为每个参与事后分析复盘的人提供一些小奖励，是他们帮助我们从中得到学习，让我们持续的增长韧性。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书 《事故管理剖析》第五章 事后复盘分析及其应用</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch5/</link><pubDate>Sun, 30 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch5/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/pexels-pixabay-69934.webp" alt="Featured image of post Google 白皮书 《事故管理剖析》第五章 事后复盘分析及其应用" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在前一章中，我们介绍了几种减小客户影响的方法，包括技术和人员方面，因为两者都会影响检测时间、缓解/恢复时间和故障间隔时间。在本节中，我们将讨论事故结束后的工作：撰写事后复盘分析，并将其作为强大的工具来分析问题并从错误中学习。&lt;/p>
&lt;p>在事故结束后，应该确保集中精力在如何减少未来的事故上？为了解决这个问题，我们建议采用数据驱动的方法（图 5-1）。这些数据可以来自风险分析过程，或者是我们之前提到的度量数据。依靠从事后复盘分析中收集的数据，以及对之前影响客户的事故的学习非常重要。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40.webp"
width="1245"
height="612"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40_hu_7136f05f85dc06fa.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-06-40_hu_38e33d0a6a8d384d.webp 1024w"
loading="lazy"
alt="图 5-1. 你应集中精力的地方"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>一旦你积累了足够多的事后复盘分析，就可以识别出模式。让事后复盘分析成为你的指南非常重要；在失败分析上的投资可以引导你走向成功。为此，我们建议创建一个共享库，并在内部团队中广泛分享事后复盘分析。&lt;/p>
&lt;h2 id="心理安全">心理安全
&lt;/h2>&lt;p>在谈论事后复盘分析时，不可避免地要讨论心理安全(Psychological Safety)。因此，在深入探讨撰写事后复盘分析的细节之前，我们先来谈谈事故管理文化中固有的心理安全，并讨论早期升级的价值。&lt;/p>
&lt;p>如果客户受到影响，应该尽快解决问题。如果组织内的人们不觉得升级或扩大事故规模是安全的，那么问题就难以解决。如果公司环境阻止人们质疑，或因升级事故而受到惩罚，响应者可能会犹豫是否质疑。如果是这样，事故只会在改善之前变得更糟。&lt;/p>
&lt;p>失败是正常的，需要接受这一点。这就是为什么实施 SRE 原则需要支持性和赋权文化的原因。关键在于理解，在不断通过新功能和系统改进服务的过程中，事故和中断是不可避免的。因此，如果不从事故中学习，就错失了改进的机会。正如合气道创始人植芝盛平所说：“失败是成功之钥，每一个错误都教会我们一些东西。”&lt;/p>
&lt;p>将运维问题视为软件工程问题，当事情出错时（而且确实会出错），要寻找的是系统中导致问题的缺陷。你要改进系统，以帮助避免人为错误。&lt;/p>
&lt;blockquote>
&lt;p>人类永远不是事故的原因，而是“允许”事故发生的系统和流程。&lt;/p>&lt;/blockquote>
&lt;p>如果发生了中断，那是系统的错误，而不是人类的错误，因为人为错误是不可避免的。目标不是消除人为错误。【译者注：带有缺陷的系统导致了人为错误，或者人类遭遇到了事故；这里我们要把人的原因摘除的干干净净，这一点需要依靠大家构建心理安全的企业团队文化。】&lt;/p>
&lt;h3 id="实施事故管理实践时的心理安全">实施事故管理实践时的心理安全
&lt;/h3>&lt;p>实施事故管理实践是一项组织变革，需要一些文化前提条件才能让团队从错误中创新和学习。拥有心理安全和无责流程是至关重要的。(Psychological Safety When Implementing Incident Management Practices)&lt;/p>
&lt;blockquote>
&lt;p>心理安全是一种信念，即谁不会因为提出想法、问题、质疑、担忧，或遭遇到了错误而受到惩罚或羞辱。
——艾米·埃德蒙森，哈佛商学院诺华教授，领导力与管理学博士&lt;/p>&lt;/blockquote>
&lt;p>心理安全促进了绩效导向型组织的一些主要特征，特别是将失败视为学习机会和接受新想法。例如，Westrum 的组织文化模型预测了基于心理安全的软件交付绩效：生机型组织比其他两种类型更有可能成为顶级绩效者。&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>具有较高心理安全的团队更能利用成员多样化的想法，销售目标超额完成17%（相比之下，不安全的团队错失目标19%），并且被高管评为有效的概率是其两倍。&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="处理事故时的心理安全">处理事故时的心理安全
&lt;/h3>&lt;p>在风险管理中，每个人都知道自己可以表达意见和识别问题，而不会受到惩罚或嘲笑，这是至关重要的。当发生事故时，必须报告并宣告为事故【译者注：声明发生了事故，开始进入事故应急管理流程】。在事故期间，可能需要分享以前事故的信息，如果这样做可以揭示过去的错误（这与无责原则有关）。你还可能需要将事故移交给下一位值班工程师，并提出改进内部流程、工具和功能的建议。&lt;/p>
&lt;p>没有心理安全和无责原则，人们会避免提出可能揭示事故根本原因的正确问题。因此，团队无法学习或创新，因为他们忙于管理形象，并且害怕承担个人后果。&lt;/p>
&lt;p>为了在团队中培养心理安全和无责原则，关注学习机会：将每次事故视为学习机会，鼓励多样化的观点，邀请每个人（尤其是那些发表不同意的人）表达意见和想法。作为领导者，你还应该承认自己的不足【译者注：没有人是全知全能和权威的，大家都要从发问，和假设开始分析故障】，通过提问来展示好奇心。&lt;/p>
&lt;p>&lt;strong>不归咎于个人&lt;/strong>&lt;/p>
&lt;p>无责原则和心理安全是相辅相成的，一个可能自然导致另一个。假设发生了一次中断。如果经理问的第一个问题是“是谁造成的？”，这会造成一种互相指责的文化，使团队害怕冒险，从而阻碍创新和改进。相反，你应该提倡无责原则：&lt;/p>
&lt;blockquote>
&lt;p>无责原则是将责任从个人转移到系统和流程上。&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;p>指责文化会妨碍人们迅速解决事故和从错误中学习的能力，因为他们可能会隐藏信息，避免因害怕受罚而宣告事故。而无责文化允许你专注于改进。你要假设个人是出于善意行事，并根据现有的最佳信息做出决策。调查误导性信息的来源对组织比归咎于人更有益。因此，支持团队的设计和维护决策，鼓励创新和学习，当事情出错时，关注系统和流程，而不是个人。&lt;/p>
&lt;p>&lt;strong>从错误中学习&lt;/strong>&lt;/p>
&lt;p>错误是宝贵的学习和改进机会，但前提是正确识别错误的程序性和系统性原因。例如，在谷歌，Ben Treynor Sloss 发送季度工程报告《谷歌的成与败》，以培养一种能够从错误中学习的赋权文化。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="促进心理安全环境的其他提示">促进心理安全环境的其他提示
&lt;/h3>&lt;p>事故响应者需要一定的信心才能有效应对事故。尽管他们可能处于压力大的情况下，但在处理事故时，响应者必须感到心理安全。&lt;/p>
&lt;p>这种心理安全涉及多个层面：&lt;/p>
&lt;p>&lt;strong>来自队友&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>响应者不应该担心他们的行为会被同伴评判，尤其是在犯错误时。&lt;/li>
&lt;li>说“我需要帮助”应该得到奖励，而不是质疑或责备。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自合作团队&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>有些团队可能会觉得 X 团队的成员有居高临下的坏名声，因此不愿与他们交流。更糟糕的是，有些团队接受这种文化，或者利用它来避免与其他团队互动。&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>这种态度不应被容忍——它会增加紧张情绪，并延缓事故响应。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自管理层 (From management)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>经理负责团队的心理安全。在事故期间，经理通常不做技术工作，而是专注于确保团队的福祉——观察压力和倦怠的迹象，也许在团队处理事故时订购披萨。有时经理可能只是简单地对事故响应者说，“休息五分钟，清理一下头脑。”&lt;/li>
&lt;li>经理也可以在获取组织其他部分的额外帮助方面发挥重要作用。&lt;/li>
&lt;li>经理为团队提供与组织其他部分之间的缓冲，并在发生冲突时介入解决。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>来自组织 (From the organization)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>心理安全只有在组织文化中得到认可时才能蓬勃发展。应该有一种无责文化，重点是修复导致事故的流程。&lt;/li>
&lt;li>业界有诸如“三振出局”政策，这种政策要求对涉及三次影响生产的错误的个人进行解雇或严厉的训诫。虽然这种政策旨在鼓励响应者在事故期间格外小心，但它往往导致响应质量降低（“我不想成为那个做出错误决定的人”）、推卸责任（“我们没有弄坏它，是另一个团队弄坏的”）或隐藏有价值的信息（“不要透露我们已经知道这个问题的事实”）。&lt;/li>
&lt;li>如果领导者希望他们的团队——以及整个组织——蓬勃发展，他们必须培养一种尊重、信任和协作的文化。这必须从组织的高层开始。&lt;/li>
&lt;/ul>
&lt;p>如前所述，心理安全环境的一个明显好处是缩短了升级时间。如果一个组织接受协作文化，事故响应者更有可能寻求额外的帮助，无论是来自自己的团队还是公司中的其他团队。&lt;/p>
&lt;p>在审查事故时，一个反复出现的主题总是“如果我们早些升级，就可以节省 $XXX 的收入损失”，即使是在拥有健康、心理安全环境的团队/组织中。对于事故响应者来说，请求帮助很难，因为这可能被视为软弱或准备不足的表现。我们被训练去隐藏不安全感（即使是感知到的不安全感），并且通常被教导要成为英雄，全力以赴为团队贡献。这些行为在事故响应中实际上是负担，一个不堪重负或疲惫的响应者更容易犯错。因此，升级应该是廉价且快速的，不应有任何附加条件。始终假设最好的意图。如果事实证明升级是不必要的，找出为什么会发生升级，可能是因为文档不完整或缺失，并修复有缺陷的流程。&lt;/p>
&lt;p>事故响应者应该高度警惕尝试独自完成所有工作的倾向，而是应该尽早且频繁地升级。在谷歌的一个事故响应团队中，有一句格言：“我们告诉其他团队，我们不介意被频繁呼叫，但我们仍然没有被足够频繁地呼叫。”&lt;/p>
&lt;h2 id="撰写事后复盘分析">撰写事后复盘分析
&lt;/h2>&lt;p>现在我们已经深入讨论了心理安全，让我们转向撰写事后复盘分析。当事情出错时，这是你从中学习并改进未来的机会。虽然“糟糕的工程师”可能会想“希望没人看到”，但优秀的工程师会注意到问题并想“太好了！告诉大家！”这就是撰写事后复盘分析的意义所在。&lt;/p>
&lt;p>撰写事后复盘分析是一种系统分析形式：它是深入研究导致事故的故障，并识别改进工程和工程流程的过程。撰写事后复盘分析不仅仅是一种额外的实践，而是一种在服务中实践系统工程的核心方式，以推动改进。&lt;/p>
&lt;p>在撰写事后复盘分析时，创建一个无责文化和假设事故会发生的流程是很重要的。如前所述，防止失败很重要，但要意识到日常失败是不可避免的，特别是在大规模系统中。事故为你和你的团队提供了共同学习的机会。事后复盘分析是你们集体从错误中学习的系统解决方案，并帮助分享这些知识，以及从他人的错误中学习——例如，通过阅读他人的事后复盘分析。&lt;/p>
&lt;p>事后复盘分析提供了一种正式的从事故中学习的过程，以及一种防止和减少事故、其影响和复杂性的机制。例如，你可能会学到避免使用补丁作为永久解决方案。事后复盘分析突出趋势并优先考虑你的努力。它们应该是无责的——这可以防止关于问题、谁做了什么以及谁可能有错的侧面讨论。事后复盘分析不是为了归咎于谁，而是专注于从事故中学到了什么以及未来的改进。&lt;/p>
&lt;p>每个事后复盘分析都应该包括一些信息。例如，好的事后复盘分析包括明确的行动项（AI action item），以及这些行动项的负责人和截止日期。记住，这不是为了归咎，而是为了增加责任感，消除模糊性，并确保行动得到跟进。此外，重要的是要有一个清晰的时间线，包括中断开始时间、问题检测时间、升级时间（如果适用）、缓解时间（如果适用）、影响和中断结束时间。如果发生了升级，说明为什么以及如何发生的。为了避免混淆，澄清事故和中断的术语，以及事故开始和事故检测的术语。我们建议在事故发生期间保持一个“实时文档”，作为调试和缓解的工作记录，稍后可以用于事后复盘分析。该文档有助于正确记录时间线，并确保不会遗漏重要的行动项。&lt;/p>
&lt;p>在事后复盘分析中避免责备性语言，并实践心理安全。以身作则，问很多问题，但绝不要寻求归咎于谁。这是关于理解事件的现实、采取的行动以及未来如何防止重发。&lt;/p>
&lt;p>谷歌的最佳实践是将事后复盘分析分享给可能受益于所传授教训的最大范围受众。透明的分享使他人能够找到事后复盘分析并从中学习。&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们发现，建立一种无责的事后复盘分析文化会带来更可靠的系统，并且对于创建和维护一个成功的 SRE 组织至关重要。&lt;/p>
&lt;h3 id="用于组织改进的系统分析">用于组织改进的系统分析
&lt;/h3>&lt;p>我们已经讨论了无责的事后复盘分析，并提到事后复盘分析是一种系统分析形式。然而，你是否真正深入了解你的系统，充分理解发生了什么以及为什么？事件应该被分析以得出结论，而不仅仅是叙述。事故之后或在事后复盘分析中，分析的深度在于是否对事件和系统各方面进行了深入分析，以揭示和解释结论。这很重要，因为它增加了团队在事故之后解决正确问题的概率。&lt;/p>
&lt;p>在撰写事后复盘分析时，你应该力求对系统有最完整和准确的了解，以确保所做的修复是正确的。在图 5-2 中，标有“你认为的问题是什么”的圆圈反映了你在事故期间对系统的理解——这是你能控制的部分。标有“实际问题是什么”的圆圈反映了事故期间系统的实际状态。在复杂技术生态系统中，理解所有细微差别是极其困难的（实际上，我们曾有一位高级工程师花了整整一个月时间来理解一个20分钟的事故！）。然而，事故之后的分析越深入，圆圈的重叠部分越大，你越接近理解根本问题（图 5-3）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31.webp"
width="1247"
height="699"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31_hu_99afd28ae6a68146.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-31_hu_58be278e8802a5a8.webp 1024w"
loading="lazy"
alt="图 5-2. Venn 图显示理解与事实之间的差距"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45.webp"
width="1245"
height="873"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45_hu_193515d14bc5f402.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-07-45_hu_d420c66178ff35cc.webp 1024w"
loading="lazy"
alt="图 5-3. Venn 图显示系统分析的好处"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>即使事故已经缓解，系统再次稳定，理解真正的问题仍然重要。这涉及可操作性——即你在事故之后有能力修复或更改的内容。事故后的系统增量改进有助于随着时间的推移建立恢复力。这是第三个重要的圆圈，代表你可以控制并可以实施修复的系统中的事物（图 5-4）。这个圆圈无法移动，因为总有一些你无法控制的事情会影响系统的健康（例如天气、地球的大小、光速）。&lt;/p>
&lt;p>在中心的那个小交集（在集合理论中表示为 1 ∩ 2 ∩ 3）是你团队在事故之后可以做的最好的工作。“你认为的问题是什么”和“你能修复什么”的重叠部分 [(1 ∩ 3) – 2] 是危险的：这些是你认为在长期内会有帮助但实际上不会解决真正问题的解决方案。你可能正在解决与主要问题相关的某些事物，或者你可能正在处理另一个隐藏问题的表现症状。假设你已经解决了一个实际上没有解决的问题是一个危险的境地——因为缺乏对这一风险的认识，这种情况变得更加严重。如果特定事故再次发生，你将面临客户信任的降低和本可以更有效利用的时间的浪费。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15.webp"
width="1245"
height="1184"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15_hu_faae8c44895b2d0b.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-15_hu_9c775b9366ea7237.webp 1024w"
loading="lazy"
alt="图 5-4. Venn 图显示工程工作与系统分析的相互作用"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>通过更深入的系统分析，中心的那个小片段（1 ∩ 2 ∩ 3）在两个不动的圆圈中被最大化（图 5-5）。换句话说，你正在最大化你优先考虑的修复措施的有效性。如果你想确保你正在针对正确的问题，移动圆圈是值得的。关键是要在系统分析上投入足够多的时间，以便你和你的团队能够以高概率选择最适合的工程项目来提高系统的恢复力。但要注意收益递减——例如，花一个月时间调查每一次中断并不是明智的资源使用。在以下部分中，我们提出了一些关键点，可能有助于思考如何移动圆圈。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35.webp"
width="1244"
height="1183"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35_hu_107cc438fefb89d6.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch5/2024-07-01_21-08-35_hu_510ebc5b952091fd.webp 1024w"
loading="lazy"
alt="图 5-5. Venn 图突出工程工作与系统分析之间的相互作用"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h3 id="根本原因与触发因素">根本原因与触发因素
&lt;/h3>&lt;p>让我们从两个关键术语开始：根本原因和触发因素。&lt;/p>
&lt;p>&lt;strong>根本原因 (Root cause)&lt;/strong>&lt;/p>
&lt;p>系统中的潜在危险，或者系统为什么变得脆弱。危险可能在系统中存在无限期——系统环境需要某种变化，才能将这种危险转化为中断。明确一点：在复杂系统中，事故很少只有一个根本原因。熟练的从业者认为，事故的根本原因是相互作用的一系列因果因素，导致危险状态。&lt;/p>
&lt;p>&lt;strong>触发因素 (Trigger)&lt;/strong>&lt;/p>
&lt;p>使根本原因转变为事故的情况。这是相关但独立的概念！为了防止中断再次发生，有时重要的是解决根本原因。有时更合理的做法是围绕这些触发因素建立预防措施。&lt;/p>
&lt;p>根本原因和触发因素共同作用造成了事故。当然，这是一种简化的说法。借用医学术语，根本原因与触发条件相互作用，产生了结果情景（即事故）。在复杂系统中，根本原因和触发因素与事故类型之间并不存在一一对应的关系，复杂性使得各种结果都有可能发生。让我们来看一些例子：&lt;/p>
&lt;p>房屋火灾&lt;/p>
&lt;ul>
&lt;li>根本原因：煤气泄漏&lt;/li>
&lt;li>触发因素：靠近漏气炉子的电插头产生火花，引燃了泄漏的煤气并引发了房屋火灾&lt;/li>
&lt;li>事故：房屋火灾（但这个根本原因可能导致其他事故）&lt;/li>
&lt;/ul>
&lt;p>蚂蚁入侵&lt;/p>
&lt;ul>
&lt;li>根本原因：温暖的季节适合虫子和害虫在自然环境中繁衍生息&lt;/li>
&lt;li>触发因素：随意吃东西，留下大量的碎屑&lt;/li>
&lt;li>事故：蚂蚁入侵&lt;/li>
&lt;/ul>
&lt;p>内存不足 (OOM)&lt;/p>
&lt;ul>
&lt;li>根本原因：配置文件更改引入了内存泄漏&lt;/li>
&lt;li>触发因素：出人意料的大量请求&lt;/li>
&lt;li>事故：OOM&lt;/li>
&lt;/ul>
&lt;p>在第三个 (OOM) 场景中，根本原因可能在触发条件存在之前的几年就已经存在了——这是技术债务最终比预期更昂贵的一种方式。而这个根本原因甚至可能不是一个错误，它可以是对系统行为的任何约束。约束本身并不是危险的，直到系统面临某种环境条件，将其转变为危险。需要澄清的是，触发因素可能不是二元的。触发条件可能存在于动态范围内，只有当系统的环境条件和根本原因相互作用时才会成为事故。这两者可以看作是创建事故生命周期的关键组成部分。&lt;/p>
&lt;p>事后复盘分析中的根本原因部分应详细说明事故的根本原因和触发因素。为了防止中断再次发生，有时重要的是解决根本原因，有时更合理的是围绕触发因素建立预防措施。&lt;/p>
&lt;p>然而，仅仅将根本原因和触发因素分开讨论并不会提高团队事后复盘分析的质量。所有部分都有适当的内容是最低要求，但事后复盘分析还应包括深入的分析，便于团队外的工程师理解，并且是可操作的。这是一个经常出现的问题吗？是否记录了缓解步骤，或者需要查找错误？事后复盘分析是否适当地解释或量化了系统的正常运行情况，以显示故障的对比和影响？如果你说产品 89% 的用户受到了影响，这具体意味着什么？&lt;/p>
&lt;h3 id="孤立的系统与整体堆栈">孤立的系统与整体堆栈
&lt;/h3>&lt;p>事故影响的系统不太可能在真空中存在（除非你来自 Hoover、Dyson 或 Roomba）。不幸的是，一个常见的反模式是将系统分析的范围限制在看似损坏的部分，而不考虑系统上下文（系统功能相关的环境部分）。以下是一些可以扩展系统分析深度的思考点：&lt;/p>
&lt;ul>
&lt;li>（如果适用）这个事故是作为单一事件进行审查，还是讨论了相关的/关联的/子事件？&lt;/li>
&lt;li>你或任何主要的内部客户是否发现了以前未知的依赖关系？&lt;/li>
&lt;li>端到端通信的效果如何？&lt;/li>
&lt;/ul>
&lt;p>虽然事故可能只发生在整体堆栈的一个子部分，但这并不意味着你的事故是孤立发生的。查看事故是否以及如何影响整体堆栈和公司的成员，可以揭示系统故障的见解。这可能包括你的事故是否引发了其他事故或级联故障，或者你的公司在事故期间是否能够有效沟通。&lt;/p>
&lt;h3 id="时间点与发展轨迹">时间点与发展轨迹
&lt;/h3>&lt;p>在研究中，元分析技术是将多个研究汇总成更大的整体结论。如果你将每个事后复盘分析视为一个展示系统在某个时间点状态的研究，那么将这些分析综合起来可以帮助识别新兴的模式和见解。我们建议利用每个事后复盘分析作为检查系统随时间变化的机会。考虑以下几点：&lt;/p>
&lt;ul>
&lt;li>这个事故是否从系统的长期轨迹进行审查？&lt;/li>
&lt;li>是否存在相同类型的故障重复出现？&lt;/li>
&lt;li>是否存在任何长期的强化或平衡循环？&lt;/li>
&lt;/ul>
&lt;p>整体系统思维的一部分是考虑系统随时间的变化。一般来说，避免同样的事故发生两次是件好事。&lt;/p>
&lt;p>我们已经探讨了系统分析在组织改进中的应用及其对你和你的团队的好处。现在让我们来看一个实际的例子。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>参见《DevOps 文化：Westrum 组织文化》。&lt;a class="link" href="https://cloud.google.com/architecture/devops?hl=zh-cn" target="_blank" rel="noopener"
>https://cloud.google.com/architecture/devops?hl=zh-cn&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>谷歌的 Project Aristotle 项目。&lt;a class="link" href="https://rework.withgoogle.com/" target="_blank" rel="noopener"
>https://rework.withgoogle.com/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>参见 Coursera 的“Developing a Google SRE Culture”课程。 &lt;a class="link" href="https://www.coursera.org/learn/developing-a-google-sre-culture" target="_blank" rel="noopener"
>https://www.coursera.org/learn/developing-a-google-sre-culture&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>要了解更多关于从错误中学习的信息，请参见《Site Reliability Engineering》第 15 章，“Postmortem Culture: Learning from Failure”。&lt;a class="link" href="https://sre.google/sre-book/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/sre-book/postmortem-culture/&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>同上，参见《Site Reliability Engineering》第 15 章，“Postmortem Culture: Learning from Failure”。&lt;a class="link" href="https://sre.google/sre-book/postmortem-culture/" target="_blank" rel="noopener"
>https://sre.google/sre-book/postmortem-culture/&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>欲了解更多信息，请参见《Site Reliability Engineering》附录 D，“Example Postmortem” &lt;a class="link" href="https://sre.google/sre-book/example-postmortem/%ef%bc%8c%e4%bb%a5%e5%8f%8a%e5%85%b3%e4%ba%8e" target="_blank" rel="noopener"
>https://sre.google/sre-book/example-postmortem/，以及关于&lt;/a> Google Compute Engine 事故的公开通信。&lt;a class="link" href="https://status.cloud.google.com/incident/compute/16007" target="_blank" rel="noopener"
>https://status.cloud.google.com/incident/compute/16007&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第四章 缓解和恢复</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch4/</link><pubDate>Fri, 28 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch4/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第四章 缓解和恢复" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们已经讨论了如何扩展事故管理，使用组件响应者和 SoS 系统级响应者来帮助公司扩展时管理事故。我们还介绍了成功的事故响应组织的特征，并讨论了管理风险和防止值守人员倦怠。现在，我们来谈谈事故发生后的恢复工作。我们将从紧急缓解措施开始。&lt;/p>
&lt;h2 id="紧急缓解措施">紧急缓解措施
&lt;/h2>&lt;p>之前我们提到在服务事故期间“止血”。恢复工作中包括必要的紧急缓解措施(Urgent Mitigations)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，以避免影响或防止影响加剧。现在我们来谈谈这意味着什么，以及如何在紧急情况下，更容易的实施缓解措施。&lt;/p>
&lt;p>假设你的服务遇到了一个严重的问题。中断已经开始，并已经被检测到了，用户正在受到着影响，而你负责解决这个问题。你的首要任务应该是：立即停止或减轻对用户的影响，而不是立即找出问题的原因。想象一下，你在家里，屋顶开始漏水。你首先会放一个桶在漏水处，以防止进一步受到水的损害，然后再去拿出需要的工具，去修补屋顶（稍后我们会发现，如果屋顶问题是根本原因，雨水就是触发因素）。桶的作用是减小影响，直到修复好屋顶。为了在服务中断期间减轻对用户影响，你需要准备好一些应急措施。我们称这些应急措施为&lt;strong>通用缓解措施&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>通用缓解措施&lt;/strong>是指在你找出具体问题之前，可以采取的减小各种中断影响的行动。&lt;/p>
&lt;p>适用于你服务的缓解措施可能会有所不同，取决于用户受影响的方式。基本的措施包括：回滚代码、重新分配流量，以及增加服务器容量。这些临时措施旨在：为你和你的服务争取更多时间，以便找到彻底解决问题的方法。换句话说，它们修复的是中断的症状，而不是根本原因。你不需要等到完全的理解了中断的原因，就可以使用通用缓解措施。&lt;/p>
&lt;p>考虑进行研究并投资开发一些快速“一键修复”（即比喻中的桶）。记住，尽管桶是一个简单的工具，但它仍然可能被误用。因此，为了正确使用通用缓解措施，重要的是要在定期的恢复力测试中进行演练。&lt;/p>
&lt;h2 id="减小事故的影响">减小事故的影响
&lt;/h2>&lt;p>除了用于应对紧急情况或事故的通用缓解措施外，还需要考虑从长远角度减小事故的影响 (Reducing the Impact of Incidents)。&lt;strong>事故&lt;/strong>是一个内部术语。实际上，客户并不真正关心事故或事故的数量，他们关心的是可靠性。为了满足用户的期望，并实现用户所需的可靠性水平，需要设计和运行可靠的系统。&lt;/p>
&lt;p>想要实现这一点，需要在事故管理生命周期的每个阶段中协调的行动：准备、响应和恢复。考虑在事故发生前、发生期间，和发生后可以做些什么，从而改进系统。&lt;/p>
&lt;p>虽然很难直接衡量客户信任，但可以使用一些代理指标来评估提供可靠客户体验的效果。我们称客户体验的度量为服务质量指标 (SLI)。SLI 告诉你在任何时刻服务的表现如何，是否达到预期。&lt;/p>
&lt;p>在这个范围内，客户可以是终端用户、人类或系统（如 API），或另一个内部服务。内部服务类似于为其他内部服务提供核心功能，而这些服务最终面向终端用户。你需要确保关键依赖项的可靠性（即硬性依赖或不可缓解的依赖——如果它失败，你也会失败）。这意味着如果面向客户的服务依赖于内部服务，这些服务需要提供更高水平的可靠性。&lt;/p>
&lt;p>SLI 的可靠性目标称为服务质量目标 (SLO)。SLO 将目标汇总到一段时间内：它表示在某个管理时间窗口中，这是你要去实现的目标，体现了你的管理水平如何（通常以百分比衡量）。&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>可能大多数人都熟悉服务质量协议 (SLA)。SLA 定义了你向客户承诺的服务内容；即如果未能达到目标，你愿意采取的措施（如退款）。为了实现这一点，需要使 SLO（你的目标）设定的比 SLA 要更严格一些。&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;p>我们用来检查和衡量用户满意度的工具称为&lt;strong>用户旅程&lt;/strong>。用户旅程是以文本形式编写的陈述，用来描述用户的视角。用户旅程探讨了：用户如何与服务互动的过程，以实现自己想要的目标。那些最重要的用户旅程被称为&lt;strong>关键用户旅程&lt;/strong> (CUJ)。&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>一旦定义了对你和用户或客户重要的目标，就可以开始考虑：当未能达到这些目标的时候，都会发生什么。&lt;/p>
&lt;h3 id="计算事故的影响">计算事故的影响
&lt;/h3>&lt;p>事故会影响可靠性目标，影响的大小：取决于故障的数量、持续时间、影响范围和规模。因此，想要减小事故的影响，首先需要了解可以采取哪些措施。让我们先看看应该如何量化和衡量事故的影响。&lt;/p>
&lt;p>图 4-1 显示了衡量影响的方法：计算不可靠的时间，包括检测到问题的时间和修复（缓解）问题的时间，然后将其乘以事故的次数，即事故的频率。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16.webp"
width="1352"
height="612"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16_hu_94a2e56a65e2b74c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-16_hu_4fa35daaa2c9b6df.webp 1024w"
loading="lazy"
alt="图 4-1. 中断生命周期"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="530px"
>&lt;/p>
&lt;p>关键指标是检测时间、修复时间和故障间隔时间：&lt;/p>
&lt;ul>
&lt;li>检测时间（TTD）是从中断发生到某个人被通知或告警的时间。&lt;/li>
&lt;li>修复时间（TTR）是从某人被告警到问题缓解的时间。关键是缓解！这指的是响应者采取措施减轻客户影响的时间，例如通过将流量转移到其他区域。&lt;/li>
&lt;li>故障间隔时间（TBF）是从一次事故开始到，同类型事故下一开始的时间。&lt;/li>
&lt;/ul>
&lt;p>想要减小事故的影响，并使系统恢复到已知正常的状态，需要技术和“人”的因素的结合，例如：流程和支持。在谷歌，我们发现一旦涉及人为干预，中断至少会持续 20 到 30 分钟。通常，自动化和自愈系统是很好的策略，因为它们会有助于缩短检测时间和修复时间。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34.webp"
width="1346"
height="303"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34_hu_ac3aa611503e249c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-34_hu_bbbff38263f49cf7.webp 1024w"
loading="lazy"
alt="不可用性公式"
class="gallery-image"
data-flex-grow="444"
data-flex-basis="1066px"
>&lt;/p>
&lt;p>需要注意的是，使用的方法也很重要。简单地降低告警阈值可能导致误报和噪音，过度依赖自动化快速修复可能减少修复时间，但会忽略根本问题。在下一节中，我们将分享几种策略，这些策略可以更有效地减少检测时间、修复时间和事故频率。&lt;/p>
&lt;h3 id="缩短检测时间">缩短检测时间
&lt;/h3>&lt;p>减小事故影响的一种方法是缩短检测事故的时间(Reducing the Time to Detect)（图 4-2）。在起草 SLO（可靠性目标）时，需要我们进行前置的风险分析，并确定出那些优先的待办事项，识别可能阻止实现 SLO 的因素，这也有助于缩短检测到事故的时间。此外，你可以采取以下措施来最小化检测时间：&lt;/p>
&lt;ul>
&lt;li>将 SLI（客户满意度指标）尽可能与用户的期望对齐【译者注：考虑用户体验的好坏，以及关键用户旅程的可用性】，这些用户可以是实际用户或其他服务。将告警与 SLO（你的目标）对齐，并定期回顾评审，确保它们仍然能代表用户的满意度。&lt;/li>
&lt;li>使用最新的信号数据。选择最佳的数据获取方式：流、日志或批处理。在这方面，在&lt;strong>告警速度&lt;/strong>与&lt;strong>噪音数&lt;/strong>之间找到合适的平衡度也很重要【译者注：SLI 告警的灵敏度高情况下，考虑到所选择 SLI 信号数据源的质量，如果假性告警越少，则噪音数量越低。】。噪音告警是 Ops 团队（无论是传统的 DevOps 团队还是 SREs）最常见的一个抱怨。&lt;/li>
&lt;li>使用有效的告警以避免告警疲劳。在需要立即采取行动时使用呼叫【译者注：短信、电话外呼等任何快速触达的通知方式】。只有正确的响应者——特定团队和所有者——才应该收到告警。另一个常见的投诉是收到不可操作的告警【译者注：与事故无关的人员也经常会在半夜被值守的人喊醒，冤】。&lt;/li>
&lt;/ul>
&lt;p>随之而来的问题是：“如果只对需要立即采取行动的事情进行呼叫，那其余的问题如何处理？”一个解决方案是：为不同情况使用不同的工具和平台。可能“正确的平台”是，一个工单系统或仪表板，或者仅需要根据该指标，用拉取的处理模式，进行相应的故障排除和调试。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52.webp"
width="1352"
height="617"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52_hu_f6762d29e67b647d.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-36-52_hu_86c40635f309fdc8.webp 1024w"
loading="lazy"
alt="图 4-2. 中断生命周期：检测时间"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="525px"
>&lt;/p>
&lt;h3 id="缩短修复时间">缩短修复时间
&lt;/h3>&lt;p>我们已经讨论了：用缩短检测时间作为减小事故影响的一种方法。另一种方法是：缩短修复时间(Reducing the Time to Repair)（图 4-3）。缩短修复时间主要涉及“人”的方面。使用事故管理协议和组织事故管理响应可以减少事故管理的模糊性，缩短对用户影响的时间。除此之外，你还需要培训响应者，制定明确的程序和手册，并降低值守的压力。让我们详细探讨这些策略。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12.webp"
width="1354"
height="619"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12_hu_956602e2a02617d5.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-12_hu_fc7b0a17defb50a7.webp 1024w"
loading="lazy"
alt="图 4-3. 中断生命周期：修复时间"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>&lt;/p>
&lt;p>&lt;strong>培训响应者&lt;/strong>&lt;/p>
&lt;p>未准备好的值守人员会导致更长的修复时间。考虑对值守人员进行灾难恢复测试培训，或者进行我们之前提到的“厄运之轮”演习。另一种方法是通过导师指导进行值守准备。让值守人员成对工作（“配对值守 pair on call”），或者让新人在他们的轮班期间与有经验的值守人员一起工作（“跟班 shadowing”），有助于增强新队员的信心。记住，值守可能是有压力的。制定明确的事故管理流程可以减少这种压力，因为它消除了任何模糊性，并明确了所需的行动。&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>建立有组织的事故响应程序&lt;/strong>&lt;/p>
&lt;p>事故管理中存在一些常见问题。例如，缺乏责任感、沟通不畅、缺乏层次结构和自由发挥/英雄主义，可能导致更长的解决时间，也会增加值守人员和响应者的额外压力，并最终影响到客户。为了解决这个问题，我们建议通过建立一个层次结构明确的结构、任务和沟通渠道来组织响应。这有助于保持清晰的指挥链，并指定明确的角色。&lt;/p>
&lt;p>在谷歌，我们使用 IMAG（谷歌事故管理），这是一个基于消防员和医护人员使用的事故指挥系统（ICS）的灵活框架。IMAG 教你如何通过建立层次结构明确的结构、任务和沟通渠道来组织紧急响应。它建立了一种标准、一致的方式来处理紧急情况和组织有效的响应。&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33.webp"
width="1351"
height="629"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33_hu_54e371ecc590d62b.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-37-33_hu_80dd4f5b22623faf.webp 1024w"
loading="lazy"
alt="图 4-4. 一个 ICS 层次结构示例"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="515px"
>&lt;/p>
&lt;p>IMAG 协议为解决事故的人提供了一个框架，使紧急响应团队能够自我组织和高效工作，通过确保响应者和相关利益相关者之间的沟通，控制事故响应，并帮助协调响应工作。它规定事故指挥官（IC）负责协调响应并分配职责，而其他人向 IC 报告。每个人都有一个具体的、明确的角色——例如，操作负责人负责解决问题，沟通负责人负责处理沟通。&lt;/p>
&lt;p>通过使用这样的协议，你可以减少模糊性，明确团队合作，并减少修复时间。&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>建立明确的值守政策和流程&lt;/strong>&lt;/p>
&lt;p>我们建议记录你的事故响应和值守政策，以及在中断期间和之后的应急响应流程。这包括明确的升级路径和责任分配，以减少处理中断时的模糊性和压力。&lt;/p>
&lt;p>&lt;strong>编写有用的运行手册/操作手册&lt;/strong>&lt;/p>
&lt;p>文档很重要，它将工作经验转化为所有队员都能访问的知识，无论工作年限。通过优先记录和安排时间编写文档，并创建记录程序的操作手册和政策，队员们可以更容易识别事故的表现形式——这是一项宝贵的优势。操作手册一开始不必完备；从简单的开始，提供一个明确的起点，然后逐步改进。一个好的经验法则是谷歌的“看到问题，立即解决 see it fix it”的方法，并让新队员在入职时就来更新这些操作手册。&lt;/p>
&lt;p>将编写操作手册作为事后复盘分析的重要行动项目之一，并将其视为个人对团队的积极贡献，这通常需要领导的优先支持和资源分配。&lt;/p>
&lt;p>&lt;strong>减轻响应者的疲劳&lt;/strong>&lt;/p>
&lt;p>如第二章所述，响应者疲劳的心理成本是有据可查的。如果响应者疲惫，他们的解决问题能力会受到影响。确保班次平衡，如果不平衡，使用数据来找出原因，并减少琐事。&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>投资于数据收集和可观测性&lt;/strong>&lt;/p>
&lt;p>做出基于数据的决策很重要，缺乏监控或可观测性是一种反模式。如果你无法看清路况，你就不知道前进方向。因此，鼓励组织内的度量文化，收集贴近客户体验的指标，并衡量你在目标和错误预算消耗率方面的表现，以便及时反应和调整优先级。还要衡量团队的琐事工作量，并定期审查你的 SLI 和 SLO。&lt;/p>
&lt;p>尽可能收集高质量的数据，特别是更贴近客户体验的数据；这有助于排除故障和调试问题。收集应用程序和业务指标，以便拥有关注客户体验和关键用户旅程的仪表板和可视化。这意味着为特定受众和目标设计的仪表板。管理者对 SLO 的视角，将与用于在排查事故和故障过程中使用的仪表板非常不同。&lt;/p>
&lt;p>如你所见，有许多方法可以缩短修复时间，并最大限度地减小事故的影响。现在让我们看看延长故障间隔时间来减少事故影响的另一种方法。&lt;/p>
&lt;h3 id="延长故障间隔时间">延长故障间隔时间
&lt;/h3>&lt;p>为了延长故障间隔时间并减少故障次数，可以重构架构，并解决在风险分析和流程改进中识别出的故障点（图 4-5）。此外，还有一些措施可以帮助延长 TBF（故障间隔时间）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00.webp"
width="1353"
height="618"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00_hu_d18fa2ec6b63396c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch4/2024-06-30_10-38-00_hu_66cada0333efdbe3.webp 1024w"
loading="lazy"
alt="图 4-5. 中断生命周期：故障间隔时间"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/p>
&lt;p>&lt;strong>避免反模式&lt;/strong>&lt;/p>
&lt;p>我们在本报告中提到了几种反模式，包括缺乏可观测性，缺乏正反馈回路，这会导致系统发生过载，并引发级联问题，如崩溃。这些反模式需要避免。&lt;/p>
&lt;p>&lt;strong>分散风险&lt;/strong>&lt;/p>
&lt;p>通过冗余、解耦责任、避免单点故障，和用全局优化来分散风险，并采用高级部署策略。考虑渐进式的滚动和金丝雀发布，将更新工作分布在数小时、数天或数周内，这样可以在所有用户受到影响之前，减少风险并识别问题。同样，进行自动化测试、滚动发布和自动回滚，以便及早发现任何问题。主动发现问题，总要比让问题来骚扰你会更好；那就要通过实践混沌工程和引入故障注入，以及自动化灾难恢复测试（如 DiRT，见第二章）来实现这一点。&lt;/p>
&lt;p>&lt;strong>采用开发实践&lt;/strong>&lt;/p>
&lt;p>采用促进质量文化的开发实践，并创建集成代码审查和健壮测试的过程，这些过程可以集成到持续集成/持续交付（CI/CD）流水线中。CI/CD 可以节省工程时间，并减小对客户的影响，使你能够自信地部署。&lt;/p>
&lt;p>&lt;strong>以可靠性为设计原则&lt;/strong>&lt;/p>
&lt;p>在 SRE 中，我们有一句话：“碰运气不是一种策略。” 当谈到故障时，问题并不是会不会发生，而是什么时候发生。因此，从一开始就以遵循：可靠性为设计原则，构建能够应对故障的健壮架构。通过以下问题来了解你如何应对故障：&lt;/p>
&lt;ul>
&lt;li>我的系统能够应对哪种类型的故障？&lt;/li>
&lt;li>它能容忍意外的单实例故障或重启吗？&lt;/li>
&lt;li>它如何应对区域性AZ或地区性Region故障？&lt;/li>
&lt;/ul>
&lt;p>意识到风险及其潜在影响范围后，进入风险缓解阶段（如在风险分析中所做的那样）。例如，为了缓解单实例问题，使用持久磁盘和配置自动化，并且备份数据。为了缓解区域和地区故障，可以在各个地区和区域分配资源并实施负载均衡。还可以进行横向扩展。例如，将单体架构解耦为微服务，更容易独立扩展它们（“做好一件事”）。横向扩展还可以意味着地理上（Region）的扩展，例如拥有多个数据中心以利用弹性。我们建议尽可能避免手工配置和特殊硬件。&lt;/p>
&lt;p>&lt;strong>优雅降级&lt;/strong>&lt;/p>
&lt;p>在你的架构中实现优雅降级(Graceful degradation)方法非常重要。将降级视为一种策略，例如限流和负载分流。问自己，如果不能为所有用户提供所有功能，我能否可以最小功能为所有用户服务？能否限流用户流量并丢弃高成本的请求？当然，什么是可接受的降级程度，要依赖于服务和用户旅程。返回 x 个产品和返回未更新的账户余额之间存在差异。但作为经验法则，能提供降级的服务，总比停止服务的好。&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>深度防御&lt;/strong>&lt;/p>
&lt;p>深度防御(Defense-in-depth)是构建系统以应对故障的一种方式，更准确地说，是容忍故障。如果依赖某个系统获取配置或其他运行时信息，确保有一个备用或缓存版本，当依赖项不可用时，而它们仍能继续工作。&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;strong>N+2 资源&lt;/strong>&lt;/p>
&lt;p>在分布式系统中，拥有 N+2 资源是实现可靠性的基本原则。N+2 意味着：你有 N 的容量来处理高峰期的请求，并有另外 2 的实例，其中一个可用于应对意外故障，另一个可用于计划升级。如前所述，你的可靠性取决于关键依赖项的可靠性，因此在架构中选择正确的构建块（Building block）。在云平台上构建时，确保使用服务的可靠性水平，并将它们与你的应用目标相关联。注意它们的范围（例如，在 Google Cloud Platform 中，范围可以是区域性的、区域间的或全球的[zonal, regional, global]）。记住，在设计时就主动解决可靠性问题，可以降低后期的成本。&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup> 并不存在一刀切的解决方案，应让需求指导你来做出因地制宜的设计决策。&lt;/p>
&lt;blockquote>
&lt;p>非抽象大型系统设计 (NALSD)&lt;/p>
&lt;p>在讨论可靠性和 SRE 的设计时，我们不能不提到非抽象的大型系统设计。在谷歌，我们发现，在设计阶段解决可靠性问题可以降低未来的成本。如果采用迭代式系统设计和实施风格，可以用更低的成本，开发出健壮且可扩展的系统。我们称这种方法为非抽象大型系统设计 (NALSD)，它描述了谷歌用于生产系统的迭代式设计过程。你可以在谷歌的 SRE 课堂栏目中了解更多相关内容。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>从失败中学习&lt;/strong>&lt;/p>
&lt;p>最后，你可以从失败中学习，使未来更好（更多内容请参见第40页的“心理安全”）。如前所述，事后分析是实现这一目标的工具。确保你有一致的事后分复盘析流程，能够产出错误修复（bug fix）、缓解措施和文档更新的后续跟踪落地行动项。像跟踪其他错误（bug）一样跟踪事后 复盘分析的行动项（如果还没有这样做），并应该优先考虑事后复盘分析工作，而不是“常规日常”的工作。&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup> 我们将在下一节中更详细地讨论事后复盘分析。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>推荐阅读：Jennifer Mace 的《通用缓解措施》&lt;a class="link" href="https://www.oreilly.com/content/generic-mitigations/%e3%80%82" target="_blank" rel="noopener"
>https://www.oreilly.com/content/generic-mitigations/。&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>参见《SRE Google 运维解密》（O&amp;rsquo;Reilly）中的第 4 章，“服务质量目标 (SLOs)”。&lt;a class="link" href="https://sre.google/sre-book/service-level-objectives/" target="_blank" rel="noopener"
>https://sre.google/sre-book/service-level-objectives/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>参见 Adrian Hilton 2021 年 5 月 7 日的文章《SRE 基础 2021：SLIs vs SLAs vs SLOs》。&lt;a class="link" href="https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>参见《Google SRE 工作手册》（O&amp;rsquo;Reilly）中的第 2 章，“实施 SLOs”。&lt;a class="link" href="https://sre.google/workbook/implementing-slos/" target="_blank" rel="noopener"
>https://sre.google/workbook/implementing-slos/&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>参见 Jesus Climent 2019 年 12 月 5 日的文章《缩短生产事故缓解时间—CRE 生活教训》。&lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/shrinking-the-time-to-mitigate-production-incidents&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>参见《Google SRE 工作手册》中的第 9 章，“事故响应”。&lt;a class="link" href="https://sre.google/workbook/incident-response/" target="_blank" rel="noopener"
>https://sre.google/workbook/incident-response/&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>参见《SRE Google 运维解密》中的第 14 章，“管理事故”。&lt;a class="link" href="https://sre.google/sre-book/managing-incidents/" target="_blank" rel="noopener"
>https://sre.google/sre-book/managing-incidents/&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>参见 Eric Harvieux 2020 年 1 月 31 日的文章《使用 SRE 原则识别和跟踪琐事》。&lt;a class="link" href="https://cloud.google.com/blog/products/management-tools/identifying-and-tracking-toil-using-sre-principles" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/management-tools/identifying-and-tracking-toil-using-sre-principles&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>关于负载分流和优雅降级的更多内容，参见《SRE Google 运维解密》中的第 22 章，“解决级联故障”。&lt;a class="link" href="https://sre.google/sre-book/addressing-cascading-failures/" target="_blank" rel="noopener"
>https://sre.google/sre-book/addressing-cascading-failures/&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>参见 Ines Envid 和 Emil Kiner 在 Google 博客上的文章《深入了解 Google Cloud 网络：确保环境安全的三项深度防御原则》，2019 年 6 月 20 日。&lt;a class="link" href="https://cloud.google.com/blog/products/networking/google-cloud-networking-in-depth-three-defense-in-depth-principles-for-securing-your-environment" target="_blank" rel="noopener"
>https://cloud.google.com/blog/products/networking/google-cloud-networking-in-depth-three-defense-in-depth-principles-for-securing-your-environment&lt;/a>&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>参见《Google SRE 工作手册》中的第 12 章，“引入非抽象大型系统设计 (NALSD)”。&lt;a class="link" href="https://sre.google/workbook/non-abstract-design/" target="_blank" rel="noopener"
>https://sre.google/workbook/non-abstract-design/&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>参见 Google Research 的 Betsy Beyer、John Lunney 和 Sue Lueder 的文章《事后分析行动项：计划工作并完成计划》。&lt;a class="link" href="https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/" target="_blank" rel="noopener"
>https://research.google/pubs/postmortem-action-items-plan-the-work-and-work-the-plan/&lt;/a>&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第三章 扩展事故管理响应</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch3/</link><pubDate>Wed, 26 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch3/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第三章 扩展事故管理响应" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们已经讨论了通过事故响应演习、角色扮演和定期测试来练习事故响应准备。这些策略能帮助你在真实事故发生时做好准备并开始管理（见第31页“建立有组织的事故响应程序”）。但是，当你的组织开始扩展时【译者注：扩展是指将事故管理的流程在更大范围的业务系统上逐步应用推广的过程。】，如何管理事故呢？在本节中，我们讨论如何在大量的系统之上扩展事故管理（流程/实践）。&lt;/p>
&lt;p>在 Google，我们为所有系统提供了最佳的事故管理覆盖。Google 规模庞大，每年处理超过 2 万亿次搜索，需要大量的数据中心、至少一百万台计算机和超过 80000 名员工。所有这些活动都通过一个庞大且高度互联的系统系（ system-to-system 简称 SoS）进行，依赖其技术堆栈保持生产运行。支持这个技术堆栈意味着适当的人员随时待命，以便在问题出现时进行故障排除和修复。这些人员是我们站点可靠性工程团队中的响应人员，他们为系统提供事故管理覆盖，并在事故发生时进行响应。&lt;/p>
&lt;h2 id="组件响应者">组件响应者
&lt;/h2>&lt;p>在站点可靠性工程团队中，我们还拥有组件响应者，他们负责 Google 技术基础设施中某个组件或系统的响应（图 3-1）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47.webp"
width="802"
height="157"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47_hu_8a849b20ad612fcd.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-24-47_hu_59b90565ff95ade7.webp 1024w"
loading="lazy"
alt="图 3-1. 组件响应者"
class="gallery-image"
data-flex-grow="510"
data-flex-basis="1225px"
>&lt;/p>
&lt;p>组件响应者是某个单一系统的专家，精通该问题领域，是优秀的故障排除专家，并在危机期间实践缓解策略。他们可以持续访问执行紧急响应所需的工具和系统，能够很好地应对压力，并在危机期间保持清晰的思路。&lt;/p>
&lt;p>单个组件响应者的责任范围有限，这使他们能够深入了解其领域及相关系统。这些响应者是防止故障从一个组件蔓延到整个堆栈的第一道防线。这些单独的组件比整体的系统体系级 SoS 堆栈要小，正如我们将在下面描述的“系统体系（SoS）响应者”一节中讨论的那样，通常具有明确且独立的系统边界。因此，可以设置合理的监控和告警机制，使组件响应者始终了解其系统的故障模式。&lt;/p>
&lt;p>当技术堆栈的范围超出一个人可理解和维护的能力时，我们将技术堆栈拆分，以便多个响应者可以分别对整个堆栈的单个组件提供覆盖。随着时间的推移，这些组件变得更加复杂，并进一步分解。通过保持有限的范围，主要响应者可以在任何给定时间解决小范围内的问题。然而，也存在风险，即忽视了跨多个组件的生产故障，或者如果问题超出其专业范围，则无法为组件响应者提供足够的支持。&lt;/p>
&lt;p>例如，假设一个底层故障在技术堆栈的显著部分发生级联效应。这种级联效应的速度超过了人类自我组织的速度。在一次影响范围广泛的事故中，我们很快就会达到每个组件团队都被呼叫、分配了响应人员并管理自己的状态。这些组件团队并行工作，但这些响应人员可能彼此并不知情（图 3-2）。其中一个响应人员处理的事故可能是根本原因，而其他则是后果。但究竟是哪一个呢？&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04.webp"
width="803"
height="210"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04_hu_bdfc307f406c60a3.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-04_hu_a8c2a41a6f14b977.webp 1024w"
loading="lazy"
alt="图 3-2. 从组件到更大的场景"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="917px"
>&lt;/p>
&lt;p>在一个足够大且复杂的技术堆栈中，一个主要响应人员几乎不可能同时驱动缓解并维护所有依赖关系和被依赖关系的状态。为了缓解这种风险，除了出色的组件响应人员之外，我们还建立了一个二级响应人员的结构。我们在 Google 称这些二级响应人员为系统响应人员，接下来我们将讨论这一部分。&lt;/p>
&lt;h2 id="系统响应人员">系统响应人员
&lt;/h2>&lt;p>系统响应人员（SoS 响应人员）负责处理跨多个组件系统、跨系统边界或复杂情况的事故。这些 SoS 响应人员经过专业培训，具有适当的权限和地位，并有权领导有组织的协调响应。他们是第二道防线，更全面地关注问题，并在应对分布式计算故障时提供关键优势支持（图 3-3）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33.webp"
width="802"
height="123"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33_hu_48e14d0a1a46ef0c.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-26-33_hu_9c1c7c5509f9f967.webp 1024w"
loading="lazy"
alt="图 3-3. 系统响应人员"
class="gallery-image"
data-flex-grow="652"
data-flex-basis="1564px"
>&lt;/p>
&lt;p>我们认为 SoS 响应人员是多系统事故管理者，技术全能，关注整体；他们在处理需要更广泛视角的事故方面有专业知识。通常，这些事故需要多个团队的参与；例如，一次重大系统级 SoS 故障会导致许多服务中断。这些事故可能会引发或已经引发下游故障，并可能扩展到服务边界之外。此外，这些事故可能已经持续了 30 分钟或更长的时间，且没有解决迹象，影响客户。&lt;/p>
&lt;p>SoS 响应人员适合应对这些影响广泛的事故，因为他们知道如何组织他人并掌控复杂局面。他们还擅长诊断系统行为，找出根本原因，专注于扩展响应并广泛沟通事故情况。&lt;/p>
&lt;p>在 Google，我们有两种类型的 SoS 响应人员。尽管每种类型都有其独特的功能，但它们经常协同工作：&lt;/p>
&lt;ul>
&lt;li>产品专注的事故响应团队（IRTs）：这些团队保护特定产品领域的可靠性。例如，广告 IRT 和 YouTube IRT。并不是每个产品领域都需要事故响应团队，但随着产品不断推出新功能、变得更加复杂，并积累了技术债务，这些团队将非常有帮助。这些团队的成员不一定了解产品堆栈的每一个细节，但他们了解产品的整体运营和依赖关系。&lt;/li>
&lt;li>技术事故响应团队（Tech IRT）：这是我们最广泛关注的事故响应团队。该团队专注于跨产品的事故、责任不明的事故或根本原因不清的普遍事故。Tech IRT 是我们的最后一道防线。成员是资深的 Google 员工，他们至少在两个不同的团队中担任过组件响应者，广泛了解系统运行，最重要的是，他们具备出色的事故管理技能。&lt;/li>
&lt;/ul>
&lt;p>Tech IRT 的成员继续为原团队工作，同时轮流进行全球 24/7 的值守/值班。他们能够在这些重大紧急情况下继续工作，因为他们经常练习这项专门技能。&lt;/p>
&lt;p>Tech IRT 成员每年两次接受为期两周的生产培训，深入了解系统运行和故障的细节。他们还需要每季度展示有效使用紧急工具的能力。
图 3-4 描绘了 Google 的事故响应组织架构。随着架构级别的增加，产品日常功能的细节变得更加抽象。每个角色同样重要——金字塔的每个后续级别都承受较少的寻呼负载。如果组件响应人员无法解决问题且威胁到产品稳定性，他们可以将问题升级到产品专注的 IRT。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04.webp"
width="802"
height="315"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04_hu_b173384e2f86ce76.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-04_hu_8f961171658098c5.webp 1024w"
loading="lazy"
alt="图 3-4. 事故响应组织架构"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;p>如果一个问题威胁到多个产品，或通过共享基础设施的解决方案可以更快缓解，Tech IRT 将被激活，作为所有下级问题的升级点，负责最广泛范围的操作。&lt;/p>
&lt;p>那么，是什么使得这个组织架构能够无缝运行呢？答案是共同的协议、信任、尊重和透明度。接下来我们将详细探讨这些。&lt;/p>
&lt;h2 id="事故响应组织架构">事故响应组织架构
&lt;/h2>&lt;p>成功的事故响应组织有四个特征：统一协议、信任、尊重和透明（见图 3-5）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24.webp"
width="805"
height="609"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24_hu_eb1275f84bd3a0df.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch3/2024-06-27_21-27-24_hu_778ab3637f5e1a42.webp 1024w"
loading="lazy"
alt="图 3-5. 成功事故响应组织的特征"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;h3 id="统一协议">统一协议
&lt;/h3>&lt;p>在 Google，我们广泛使用 FEMA 事故指挥系统（ICS）的内部变体，其中事故响应人员有明确的角色，如事故指挥官、记录员和通信员。通过使用共享且明确定义的流程，我们建立了有效的紧急响应习惯，包括保持活跃状态、明确的指挥链和减少整体压力。每个人都了解交接流程，知道应该交接给谁，以确保知识的有效传递。就像象棋不能在麻将桌上玩，在紧急情况下，所有人都必须按照同一个规则行事。&lt;/p>
&lt;h3 id="信任">信任
&lt;/h3>&lt;p>在事故发生期间，事故指挥官需要行使权威。他们需要指挥他人、组织混乱的能量，并判断合适的行动方案。对于许多组织来说，将权威级别与操作职责对齐是一个挑战，但我们的标准操作程序避免了只有高层业务主管才有权做出服务变更决策的惯例：我们将这种权威赋予具有背景知识和实时状态信息的主题专家（SME）。&lt;/p>
&lt;h3 id="尊重">尊重
&lt;/h3>&lt;p>确保所有响应人员在认为有必要时能够放心地升级情况非常重要。如果响应人员因为升级事故而受到审查、批评或被认为无能，他们可能不会在适当的时候进行升级。除了基本的礼貌，我们必须相信每个人在现有信息的基础上做出最佳决定。如果出现问题，关键不是责备某人，而是找出如何提供更准确和可操作的信息，以确保未来不再出错。这部分工作在事后分析过程中进行，Google 坚持严格的无责政策（稍后会详细介绍）【译者注：对事不对人策略】。&lt;/p>
&lt;h3 id="透明度">透明度
&lt;/h3>&lt;p>我们不进行信息隔离。当事故发生时，所有细节对所有人开放。如果禁止访问事故信息，就无法进行升级和互操作性——我们在事故解决后撰写的事后分析会在公司范围内的每周通讯中分享。我们鼓励通过阅读其他团队和产品领域发生的事故来进行跨团队学习。&lt;/p>
&lt;h3 id="风险管理">风险管理
&lt;/h3>&lt;p>除了事故响应组织结构的特征外，还需要考虑如何管理风险。从识别到解决事故的时间不应超过三天。正如之前所说，事故管理在时间和人力上都非常昂贵。长时间保持在事故管理的活跃状态会导致疲劳和倦怠，可能促使你开始考虑跳槽。事故是已经升级并需要立即有组织响应的问题。这种紧急状态并非自然状态——人类的大脑延髓不应该被长时间刺激，他们的身体也不应该长期分泌大量皮质醇。&lt;/p>
&lt;p>如果史前人类不断狩猎或被剑齿虎追捕，无法感到安全或休息，我们的进化会截然不同。如果你预计长时间处于战斗或逃跑模式，最终会导致团队成员的持续流失。&lt;/p>
&lt;h2 id="事故管理与风险的功能">事故管理与风险的功能
&lt;/h2>&lt;p>为了减少事故管理的时间，重要的是认识到事故管理和风险的功能。事故管理是一项短期任务，旨在迅速纠正危险情况。事故的严重程度可以分为几个简单的类别。在 Google，我们根据组织的产品适当地量化了这些类别（见表 3-1）。&lt;/p>
&lt;p>表 3-1. 严重性定义&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>严重性&lt;/th>
&lt;th>定义&lt;/th>
&lt;th>试金石&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重大&lt;/td>
&lt;td>面向用户的重大故障，产生负面新闻或对 Google 或特定 Google 客户造成巨大的收入影响。内部生产力故障只有在产生可见外部后果（如负面新闻周期）时才视为重大。&lt;/td>
&lt;td>可能或已对 Alphabet/Google 品牌和业务造成损害。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>严重&lt;/td>
&lt;td>对用户可见的故障，但不会对 Google 服务或特定客户造成持久损害，或对 Google 或其客户造成可观的收入损失，或 50% 或更多的 Google 员工受到显著影响。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，可能或将对 Alphabet/Google 品牌和业务造成损害。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等&lt;/td>
&lt;td>从差一点到重大/严重故障。大量内部用户受到显著影响。存在已知的解决方法，减轻了影响。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，可能会随着时间推移导致越来越多的不稳定性和更高的维护成本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>轻微&lt;/td>
&lt;td>外部用户可能未注意到故障。内部用户受到不便。导致网络、数据中心、实例等之间的流量发生意外波动。&lt;/td>
&lt;td>此类故障如果持续发生且未得到缓解，不太可能随着时间推移导致更多不稳定性，但代表正常操作条件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>微不足道&lt;/td>
&lt;td>事故对用户没有任何可见影响，对生产几乎没有实质性影响，但从中学到了宝贵的教训，需要以低优先级跟踪一些后续行动项目。&lt;/td>
&lt;td>此类事故如果持续发生且未得到缓解，不会被视为过程失效。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>忽略测试&lt;/td>
&lt;td>这甚至不是一次事故。去做其他事情吧。&lt;/td>
&lt;td>虚惊一场。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>事故的规模大致反映了情况的“风险性”（根本原因/触发/影响）。事故管理旨在缓解短期影响，为组织的决策者争取时间来决定下一步措施。事故管理并不意味着要持续到避免所有短期和长期影响。对于庞大的技术堆栈或积累的技术债务，可能需要数月甚至数年才能彻底解决根本原因/触发条件。事故应只在短期影响尚未缓解时保持“开放”状态，并进行积极的管理。&lt;/p>
&lt;p>在医院中，这相当于评估出血患者的紧急风险，并为其止血。那么接下来呢？医院会确定出血的原因并防止其复发。可能需要为患者制定长期计划，如避免再次遇到剑齿虎，或治疗引起出血的皮肤病。无论是哪种方式，一旦立即的危险消除，就会制定长期计划，包括必要时的全天候支持，以确保患者安全并防止再次出血。同样地，在你的技术堆栈中，一旦立即的危险解除，就应转向制定长期行动计划。&lt;/p>
&lt;p>在事故管理中，通常可以在几分钟内重现事故的时间线。如果处理的是紧急问题，每一分钟都可能影响用户或造成收入损失。因为每一分钟都很重要，事故管理对经理们造成了很大压力——正如本节前面提到的，这不是一种长期的积极体验。当处理事故的长期后果（解决根本原因或触发因素）时，理想情况下，不再有立即的用户伤害或重大利润损失。这很好。这些高优先级工作需要立即执行，但不需要像管理事故那样紧迫。这些工作的时间线可以按天或周来衡量，而不必像之前提到的事故时间线那样不超过三天。在不需要的情况下，不要保持战斗或逃跑模式。关闭事故，转向恢复。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第二章 实战演习事故响应准备</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch2/</link><pubDate>Tue, 25 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch2/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch2/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第二章 实战演习事故响应准备" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我们已经讨论了管理事故的三个阶段和事故管理生命周期。现在，让我们讨论如何实战演习事故管理，以便在实际事故发生时，确保我们已经做好了准备。&lt;/p>
&lt;h2 id="灾难角色扮演和事故响应演习">灾难角色扮演和事故响应演习
&lt;/h2>&lt;p>为了增强恢复力，测试和演练事故响应准备是非常有价值的。我们建议在团队中进行灾难角色扮演来训练事故响应的全过程。在谷歌，我们通常称之为“厄运之轮 (Wheel of Misfortune)”。这是一种重现过去在生产环境中曾经遇到的真实事故场景的一种方法。&lt;/p>
&lt;p>定期进行事故响应演习有许多现实的好处。在谷歌灾难恢复测试 (DiRT) 计划的早期，有些测试被认为风险过高而无法执行。然而，多年来，通过专注于这些由高风险测试所暴露出来的领域，许多暴露出来的风险已经得到了彻底解决，以至于这些测试现在是自动化执行的，并且被认为是无聊的测试。&lt;/p>
&lt;p>如果想要实现这一点，效果既非立竿见影，过程也不会轻松愉快——这需要投入时间，需要多个团队付出巨大的协同努力；但我们已经能够极大的降低全球系统中的重大风险，以至于“风险只是另一个定期运行的自动化测试”。&lt;/p>
&lt;h2 id="定期测试-regular-testing">定期测试 (Regular Testing)
&lt;/h2>&lt;p>执行定期的测试具有很多显著的好处。多年来，谷歌一直在进行 DiRT 测试，以发现并修复生产系统中的问题。随着团队不断测试他们的服务，高风险测试的数量减少了。这实际上是个好迹象——团队已经使系统更加具有恢复力，以至于发现暴露系统的弱点，也变得越来越难。&lt;/p>
&lt;p>测试失败——由于某种原因导致的测试失败——也变得更加罕见。即使发生，这些系统也往往能以预期的方式失败，并因此能得到迅速缓解。故障响应者现在更加自如地启动故障应急预案，能够在压力下保持头脑冷静，并且由于这些测试，撰写事后复盘报告的次数也减少了。谷歌多年的努力已经得到了回报——大家的心态已经从“灾难测试是对我个人的挑战”转变为“灾难测试是大家共同的任务”。&lt;/p>
&lt;h2 id="细化的测试和自动化">细化的测试和自动化
&lt;/h2>&lt;p>测试正在逐渐从解决纯粹的技术问题（例如“我们是否知道如何从完全损坏的数据库中恢复？”）转向更细化的“修复流程”的一系列挑战。&lt;/p>
&lt;p>技术测试较易讨论和自动化：基本上就是编写一些代码来执行一系列命令，并检查预期的响应。而想要找到有问题的流程，则更加困难——例如“只有一个人有权批准这个，但他们并不回复电话/邮件”——尤其是对于那些那么不经常执行的陌生流程。&lt;/p>
&lt;h2 id="准备响应者-preparing-responders">准备响应者 (Preparing Responders)
&lt;/h2>&lt;p>进行事故响应测试——即使只是理论测试——也可以帮助我们识别出有问题的流程，评估其概率和风险因素，并增强响应者的信心。即使测试未按计划进行，你也能更好地发现事故响应流程中的弱点。事故响应者也将会更好地做好在技术、心理和情感上的准备，以应对未来会发生的实际事故。&lt;/p>
&lt;p>情感上的准备并不可低估。如前所述，事故管理会给响应者带来巨大压力，导致疏忽大意、反应变慢和判断力模糊。压力还可能引起焦虑、疲劳、高血压和睡眠质量差等健康问题。&lt;/p>
&lt;p>进行事故响应测试不仅可以减少这些不良影响，更重要的是识别暴露出这些问题，以便采取纠正措施——如请求帮助、休息，甚至完全移交事故的处理。管理人员和领导也应该：时刻关注响应者的压力、疲劳和倦怠的迹象，并尽可能的提供必要的帮助。&lt;/p>
&lt;h2 id="编写事故响应测试">编写事故响应测试
&lt;/h2>&lt;p>编写事故响应测试(Writing Incident Response Tests)的一个良好起点是：查看并回顾最近发生的事故。在谷歌，我们在每次事后复盘分析中都会问这些标准问题：&lt;/p>
&lt;ul>
&lt;li>出了什么问题？&lt;/li>
&lt;li>哪些方面做得好？&lt;/li>
&lt;li>我们在哪里是凭运气？&lt;/li>
&lt;/ul>
&lt;p>首先查看出了什么问题，因为这是需要改进的地方。这些往往是容易解决的具体问题——例如，监控发现了问题但并没有通知任何人。一旦识别并修复了问题，就需要测试这个修复结果。这一点不能忽视：仅仅修复问题是不够的；修复可能不完整，或在其他地方又引起了回归。&lt;/p>
&lt;p>在测试正确性时，从小而简单的测试案例开始。随着对响应过程信心逐步增加，就可以开始研究更复杂的问题，包括那些不完全是技术性的（如人员流程方面）。&lt;/p>
&lt;p>当这些小范围测试进行了一段时间后，开始查看“我们在哪里是凭运气？”的那些方面。通常，这些问题更微妙，解决它们可能也不会容易。再次，从小处着手，将问题分解成更小、更易解决的部分。&lt;/p>
&lt;p>这些测试应保持缓慢的进行，但要保证稳定的节奏——既不想让团队淹没在测试工作中，也不想失去进度。举例来说，每四周进行一次一小时的测试，要比花费 10% 的运营预算在这些测试上更容易被接受。随着这些程序的发展和测试价值的显现，你会找到适合的测试频率和深度。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google SRE 白皮书： 《事故管理剖析》第一章 概述</title><link>https://martinliu.cn/blog/anatomy-of-an-incident-ch1/</link><pubDate>Tue, 25 Jun 2024 22:46:48 +0800</pubDate><guid>https://martinliu.cn/blog/anatomy-of-an-incident-ch1/</guid><description>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/pexels-pixabay-69934.webp" alt="Featured image of post Google SRE 白皮书： 《事故管理剖析》第一章 概述" />&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/anatomy-of-an-incident.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/anatomy-of-an-incident/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果没有猜错的话 ———— 在接下来的几周里，我们将会在个人和工作上面临巨大的压力，我们需要快速应对各种不断变化的状况。但我们已经为应对危机准备了十多年，并且已经做好了准备。在全球比以往任何时候都更需要信息、沟通和计算的时候，我们会确保 Google 能够提供帮助。&lt;/p>
&lt;p>——Benjamin Treynor Sloss，Google 站点可靠性工程团队工程副总裁，2020 年 3 月 3 日&lt;/p>&lt;/blockquote>
&lt;p>中断是不可避免的（这确实让人沮丧）。作为科学家和工程师，你们需要从长远角度看待问题，设计系统以实现最佳的可持续性、可扩展性、可靠性和安全性。但是，你们只能基于现有的知识进行设计。在实施解决方案时，你们也无法完全预知未来。你们不能总是预见到下一个零日事件、头条热搜话题、天气灾害、配置管理错误或技术变革。因此，你们需要随时准备应对这些可能影响系统的事件。&lt;/p>
&lt;p>谷歌在过去十年中最大的技术挑战之一是 COVID-19 新冠疫情爆发所带来的。新冠疫情引发了一系列快速出现的事故，我们需要迅速应对以继续为用户服务。我们必须大幅提升服务容量，让员工在家高效工作，并在供应链受限的情况下找到新的服务器修复方法。正如 Ben Treynor Sloss 所言，谷歌能够在这一系列重大变故中持续提供服务，因为我们已经为此做好了准备。十多年来，谷歌积极投资于事故管理，这种准备是提高事故响应能力最重要的事情。准备工作能增强恢复力。恢复力和处理中断的能力是衡量技术长期成功（以数十年为单位）的关键因素。除了做好工程设计，还需要时刻准备应对业务服务的中断。&lt;/p>
&lt;p>恢复力是公司运营的关键支柱之一。因此，事故管理是公司必不可少的流程。事故不仅对客户有影响，也对操作人员造成了负担。事故带来压力，通常需要人工干预。因此，有效的事故管理应该优先的考虑：预防性和主动性的工作，而不是被动应对。&lt;/p>
&lt;p>我们知道管理事故压力大，找到和培训响应人员也很困难；我们也知道有些事故不可避免，中断会发生。与其问“如果发生事故你会怎么做？”，不如问“事故发生时你会怎么做？”。通过减少这种模糊性，不仅能减轻操作人员的负担和压力，还能缩短解决时间，减少对用户的影响。&lt;/p>
&lt;p>我们写这份报告（白皮书）是为了总结一份：技术事故响应实践的指南。我们首先构建一些讨论事故的常用语言，然后深入探讨如何鼓励工程师、工程领导者和高管在组织内部思考事故管理。我们旨在涵盖从准备事故、响应事故、恢复事故，到保持健康组织的所有内容，以便大规模地应对各种突发情况。让我们开始吧。&lt;/p>
&lt;h2 id="什么是事故">什么是事故？
&lt;/h2>&lt;p>事故(incident)是一个含义广泛的词。其含义可能因不同群体而异。例如，在 ITIL 中，事故是指任何计划外的中断，如工单、报错或告警。无论这个词如何使用，重要的是要在其特定的定义上达成一致，以减少信息孤岛，确保每个人都在说同一种语言。&lt;/p>
&lt;p>在谷歌，事故是指：&lt;/p>
&lt;ul>
&lt;li>被升级的问题（因为影响太大，而无法单独处理）&lt;/li>
&lt;li>需要立即响应的问题&lt;/li>
&lt;li>需要有组织的进行响应的问题&lt;/li>
&lt;/ul>
&lt;p>有时，事故可能由服务中断引起，即服务在一段时间内不可用。中断可以是计划内的，例如在维护窗口期间系统故意不可用以进行更新。如果中断是计划好的并且已通知用户，则就不算是事故——并不需要开展立即、有组织的响应的事情。但通常情况下，我们指的是由未预见的故障引起的意外中断。大多数的意外中断都是事故，或最终会发展成为事故。&lt;/p>
&lt;p>事故可能对客户造成影响。它们还可能造成收入损失、数据损坏、安全漏洞等，这些都可能影响客户。当客户受到事故影响时，他们对你的信任可能会动摇。因此，你需要避免过多或过于严重的事故，以保持客户满意；否则，他们会选择离开。&lt;/p>
&lt;p>频繁的事故也会影响事故响应人员，因为处理事故的压力很大。找到具备适当技能来处理事故的站点可靠性工程师 (SRE) 既具挑战性又昂贵，因此你不希望通过让他们只负责事故响应来使其疲惫不堪。相反，你应该通过主动预防事故来提供他们技能成长的机会。在这份报告的后面，我们将进一步讨论这一点，以及减少压力和改善值班健康的方法。&lt;/p>
&lt;h2 id="并非所有问题都是事故">并非所有问题都是事故
&lt;/h2>&lt;p>区分事故和中断很重要，同样重要的是区分指标、告警和事故。如何区分指标和告警，告警和事故？并不是每个指标都会成为告警，也不是每个告警都是事故。为了帮助你理解这些术语的含义，我们将首先讨论监控和告警在维护系统健康中的作用。&lt;/p>
&lt;h3 id="监控">监控
&lt;/h3>&lt;p>监控是保持系统健康的最常见方法。根据《SRE Google 运维解密》的定义，监控是指收集、处理、汇总和展示系统的实时定量数据，例如查询计数和类型、错误计数和类型、处理时间和服务器在线时间。监控是一种度量。&lt;/p>
&lt;p>在度量方面，我们建议采取以客户为中心的方法来制定服务质量目标 (SLO；在第 26 页的“减少事故的影响”中有更详细的讨论) 和优化客户体验。这意味着收集能准确反映客户体验的指标，并尽可能收集多种度量，如黑盒、基础设施、客户端和应用程序指标。使用不同方法测量相同的值可以确保冗余和准确性，因为不同的测量方法各有优势。以客户为中心的仪表板也能很好地反映客户体验，对于故障排除和事故调试至关重要。&lt;/p>
&lt;p>重要的是，要专注于度量可靠性和对用户的影响，而不是度量已确认的事故个数。如果专注于后者，员工可能会因为害怕被惩罚而犹豫声明事故。这可能导致事故声明延迟，不仅浪费时间和丢失数据，还因为事后处理效果不佳。因此，声明事故并及时关闭比事后补救要好。&lt;/p>
&lt;p>在这方面，有时人们会将可靠性和可用性混用，但可靠性不仅仅是“服务可用性”，特别是在复杂的分布式系统中。可靠性是指在大规模下提供一致服务水平的能力，包括可用性、延迟和准确性等方面。这在不同服务中可能（也应该）有不同的体现。例如，YouTube 和 Google 搜索的可靠性是否相同？根据你的服务，不同用户的期望会有所不同，可靠性也可能有不同的定义。&lt;/p>
&lt;p>一般来说，如果系统的中断更少、更短、更小，它就更可靠。因此，最终取决于用户能容忍的停机时间。采用以客户为中心的方法，用户定义了你的可靠性。因此，需要尽可能接近地度量用户体验。（我们在第 26 页的“减少事故的影响”中对此进行了更详细的讨论。）&lt;/p>
&lt;h3 id="告警">告警
&lt;/h3>&lt;p>我们已经讨论了系统健康监控。现在让我们谈谈监控的关键组成部分：告警(Alerting)。当监控发现系统行为异常时，会发送一个信号，这个信号就是告警。告警可能意味着两件事：某些东西已经损坏，需要有人修复；或者某些东西可能即将损坏，需要有人检查。紧急程度——即何时需要采取行动——应指导你选择如何响应。如果需要立即采取（人工）行动，应发送紧急通知。如果在接下来的几个小时内需要人工行动，应发送告警。如果不需要立即行动——例如信息是用于分析或故障排除——则信息保持为指标或日志的形式。&lt;/p>
&lt;p>需要注意的是，告警的方式可能因组织偏好而异。例如，它可以在仪表板上显示，或以工单形式呈现。在谷歌，通常采用后者；监控系统在 Google 问题追踪器中创建一个具有不同优先级的“错误-bug”，这就是我们的工单形式。&lt;/p>
&lt;p>现在你已经了解了基础知识，让我们深入探讨可操作的告警。&lt;/p>
&lt;h3 id="可操作告警的重要性">可操作告警的重要性
&lt;/h3>&lt;p>如前所述，当特定条件满足时，告警会触发。但你必须谨慎，只针对真正重要和可操作的事项发出告警。考虑以下场景：作为当班人员，你在凌晨 2 点被呼叫，因为过去 5 分钟内 QPS 增加了 300%。这可能是一个流量波动大的服务，有时流量稳定，但偶尔会有大客户发出大量查询。&lt;/p>
&lt;p>这种情况下半夜叫醒你有何意义？实际上毫无意义。这个告警是不可操作的。只要服务没有崩溃的风险，就没有必要叫人起床。查看历史数据会显示服务需要应对这样的流量峰值，但这些峰值本身并不构成问题，不应生成告警。&lt;/p>
&lt;p>再考虑一个更微妙但更常见的可操作告警问题。你的公司需要每晚备份生产数据库，因此设置了一个每四小时运行一次的 cronjob 进行备份。一次备份由于瞬时错误失败——用于备份的副本发生了硬件故障，并被负载均衡器自动移出了服务模式——但随后几次备份都成功了。结果还是创建了一个工单。&lt;/p>
&lt;p>因为一次备份失败而创建工单是不必要的。这只会产生噪音，因为系统在无人干预的情况下自行恢复了。&lt;/p>
&lt;p>这种情况经常发生。虽然最终只需简单地关闭工单并附上“处理时已经好了”的信息，但这种行为存在一些问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>琐事 (toil)&lt;/strong> 有人不得不花时间查看工单、分析图表和报告，最终发现他们不需要采取任何行动。&lt;/li>
&lt;li>&lt;strong>告警疲劳 (alert fatigue)&lt;/strong> 如果 95% 的“数据库备份失败”告警只是被简单关闭，实际问题被忽视的风险会显著增加。&lt;/li>
&lt;/ul>
&lt;p>如前所述，事故是具有特定特征的问题。告警只是一个信号，表明可能有事故正在发生。你可能会遇到很多告警但没有实际事故。虽然这种情况不理想，但并不意味着你需要启动正式的事故管理技术；也许这是计划中的维护，你预期会收到这些告警。&lt;/p>
&lt;p>同样，你也可能有事故但没有任何告警——例如，你从安全团队得知他们怀疑生产系统被入侵，但你的团队没有触发任何相关告警。&lt;/p>
&lt;p>实际上，人们对告警和事故的感知有所不同：&lt;/p>
&lt;ul>
&lt;li>正式的事故管理比简单处理告警要更有压力。&lt;/li>
&lt;li>经验较少的响应者比经验丰富的响应者更不容易启动事故管理流程。&lt;/li>
&lt;li>事故更可能需要额外的团队资源，因此其他团队成员可以更早判断是否需要介入。&lt;/li>
&lt;/ul>
&lt;p>这种情况不仅限于你的团队，事实上，它适用于整个组织。&lt;/p>
&lt;p>告警通常比事故多。获取告警的基本指标（例如，每季度有多少告警）是有用的，但事故需要更详细的分析（例如，上季度的五个重大事故都是由于新功能在预生产环境中测试不足）。你不希望这些报告被所有收到的告警信息淹没。考虑到受众——告警指标主要对团队有用，而事故报告可能会被高层阅读，因此需要管理适用的范围。&lt;/p>
&lt;p>希望这能澄清何时你可以更自信地说“这不是事故”。然而，这也带来了一个二分法：如果有些事情不是事故，那意味着有些事情是事故。你该如何处理这些事故？我们将在下一节探讨。&lt;/p>
&lt;h2 id="事故管理生命周期">事故管理生命周期
&lt;/h2>&lt;p>最佳的事故管理不仅仅意味着尽可能快速地处理事故。良好的事故管理意味着关注事故的整个生命周期。在本节中，我们讨论一种系统化的事故管理方法。将事故视为系统中持续存在的风险。处理这些风险的过程称为事故管理生命周期。事故管理生命周期涵盖了准备、响应、恢复和缓解事故所需的所有活动。这是运营服务的持续成本。&lt;/p>
&lt;p>所谓生命周期，我们指的是事故存在的每个阶段。这些阶段如图 1-1 所示，具体如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>准备 Preparedness&lt;/strong> ：包括公司或团队为应对事故发生而采取的所有措施。这可能包括工程上的安全措施（如代码审查或发布流程）、事故管理培训，以及识别错误的实验或测试演习。这还包括设置监控和告警。&lt;/li>
&lt;li>&lt;strong>响应 Response&lt;/strong> ：当触发因素导致潜在风险变为实际问题时的应对措施。这包括响应告警、决定问题是否是事故，并与受影响的人员沟通。&lt;/li>
&lt;li>&lt;strong>缓解和恢复 Mitigation and recovery&lt;/strong> ：使系统恢复到功能状态的一系列行动。这包括为了避免影响或防止影响扩大的紧急缓解措施。恢复阶段还包括进行事后分析和反思，撰写事后报告。事后报告是一份关于事故的书面记录，包含采取的措施、影响、根本原因和防止再次发生或减少未来影响的后续行动。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44.webp"
width="932"
height="925"
srcset="https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44_hu_9e150a3cf62c54c8.webp 480w, https://martinliu.cn/blog/anatomy-of-an-incident-ch1/2024-06-25_23-02-44_hu_3114e4922f7810c.webp 1024w"
loading="lazy"
alt="图 1-1. 事故管理生命周期"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="241px"
>&lt;/p>
&lt;p>一旦恢复阶段结束，你将重新进入准备阶段。根据系统的复杂性，所有这些阶段可能同时进行——但可以确定的是，至少总有一个阶段在进行中。&lt;/p>
&lt;blockquote>
&lt;p>来源： &lt;a class="link" href="https://sre.google" target="_blank" rel="noopener"
>https://sre.google&lt;/a> ；本白皮书一共有 7 章，后续章节将陆续发布。完整中文版白皮书即将发布，敬请期待。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/img/anatomy-of-an-incident.png"
loading="lazy"
alt="cover"
>&lt;/p>
&lt;p>❤️ Photo by Pixabay: &lt;a class="link" href="https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/photo-of-a-2-fireman-killing-a-huge-fire-69934/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书：SRE 容量管理最佳实践</title><link>https://martinliu.cn/blog/sre-best-practices-for-capacity-management/</link><pubDate>Mon, 17 Jun 2024 13:23:28 +0800</pubDate><guid>https://martinliu.cn/blog/sre-best-practices-for-capacity-management/</guid><description>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/pexels-fox-58267-9097039.webp" alt="Featured image of post Google 白皮书：SRE 容量管理最佳实践" />&lt;p>作为 SRE，您需要确定服务的初始资源需求，并确保服务在意外需求下仍能稳定运行。容量管理是指确保您的服务拥有足够的资源，从而实现可扩展性、高效性和可靠性。无论是用户端服务还是公司内部服务，都必须应对预期和意外的增长。我们将利用率定义为资源使用的百分比。确定初始资源利用率并预测未来需求并不容易。我们提供了一些估算利用率和识别盲点的方法，并讨论了构建冗余以避免故障的好处。利用这些信息，您可以设计架构，使每个组件的资源分配增加能够有效地线性提升整个服务的容量。&lt;/p>
&lt;h2 id="容量管理原则">容量管理原则
&lt;/h2>&lt;p>在本文中，服务被定义为提供一组功能的所有二进制文件（服务栈）的集合。成功的容量管理需要从两个复杂的角度出发：资源制备，即现在运行服务所需的初始容量；以及容量规划，以保障未来服务的可靠性。&lt;/p>
&lt;p>容量管理的核心原则包括以下三点，以保持服务的可扩展性、可用性和可管理性：&lt;/p>
&lt;ol>
&lt;li>服务必须高效利用资源。大型服务需要大量资源，部署和维护成本高。&lt;/li>
&lt;li>服务必须可靠运行。限制资源容量以提高效率可能导致服务故障和停机风险，因此需要在效率和可靠性之间找到平衡。&lt;/li>
&lt;li>必须预见服务的增长。增加服务资源可能需要较长时间，且存在实际部署限制。这可能涉及购买新设备或建设新数据中心，也可能需要增加其他依赖系统和基础设施的容量。&lt;/li>
&lt;/ol>
&lt;h2 id="容量管理的复杂性">容量管理的复杂性
&lt;/h2>&lt;p>大型服务如同复杂的生命体，其行为有时难以预期。做出可能改变服务范围的工程决策时，需要考虑以下几个方面：&lt;/p>
&lt;ul>
&lt;li>服务性能。了解不同组件在负载下的表现。&lt;/li>
&lt;li>服务故障模式。考虑已知故障模式下服务的表现，以及面对未知故障模式时的可能行为。通过列出可能的瓶颈和服务依赖项，做好准备。&lt;/li>
&lt;li>需求。首先要确定预期的用户数量和流量、用户分布的位置以及他们的使用模式。&lt;/li>
&lt;li>自然增长。估计随着时间推移，需求可能会如何增长。&lt;/li>
&lt;li>功能扩展。考虑新增功能或服务比预期更成功时，对长期资源需求的影响。&lt;/li>
&lt;li>扩展能力。了解在增加资源分配时，服务的扩展情况。&lt;/li>
&lt;li>市场分析。评估市场变化对获取额外资源能力的影响。研究新技术，这些技术可以提高服务的性能、可靠性或效率，以及实施这些技术的成本。调查如何快速采用新技术，例如用 SSD 替换 HDD。&lt;/li>
&lt;/ul>
&lt;p>容量管理的目标是控制不确定性。在未知环境中，服务必须现在可用，并在未来继续运行。这是一种充满挑战但值得追求的微妙平衡：在效率与可靠性、准确性与复杂性、努力与收益之间做出权衡。&lt;/p>
&lt;p>使用数据来驱动容量决策。尽管你仍然会犯一些不可避免的错误，并需要创造性地解决问题，但最终的结果是一个可靠的关键业务服务。&lt;/p>
&lt;p>资源制备解决的是战术问题：“如何保持服务马上能立即运行起来？” 而容量规划解决的是战略问题：“如何在可预见的未来保持服务运行？”&lt;/p>
&lt;p>以下章节将详细讨论这些主题。&lt;/p>
&lt;h2 id="资源制备">资源制备
&lt;/h2>&lt;p>我们将讨论集中在服务系统上，即通过查找数据来响应用户请求的服务。不过，这些原则同样适用于数据存储服务、数据转换服务以及其他大多数计算机任务。&lt;/p>
&lt;p>资源制备涉及确定服务所需资源的目标利用率并分配这些资源。目标利用率被定义为在保证服务可靠运行的情况下，特定资源类别的最高可能利用率。资源类别指的是特定类型的计算资产，比如 CPU、RAM 和存储。&lt;/p>
&lt;p>要为你的服务进行资源制备，需要使用需求信号作为输入，并创建包含具体资源分配的生产布局，如图 1 所示。服务通常使用多种资源类别。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37.webp"
width="940"
height="476"
srcset="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37_hu_488080937d391812.webp 480w, https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-37_hu_da7ba864277c470b.webp 1024w"
loading="lazy"
alt="图 1: 资源制备解决方案中的需求信号和资源分配"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>&lt;strong>资源短缺的影响&lt;/strong>&lt;/p>
&lt;p>资源短缺会导致服务以不同方式失败，这取决于资源类别。&lt;/p>
&lt;p>当资源成为服务关键路径中的瓶颈时，用户会遇到延迟增加的情况。在最糟糕的情况下，瓶颈会导致请求积压，延迟不断增加，最终导致排队请求超时。如果没有缓解计划，服务将无法处理请求，进而发生故障。故障将持续，直到传入流量减少使服务恢复，或者服务重新启动。&lt;/p>
&lt;p>经常在关键路径中出现的资源包括：&lt;/p>
&lt;ul>
&lt;li>处理能力&lt;/li>
&lt;li>网络&lt;/li>
&lt;li>存储吞吐量&lt;/li>
&lt;/ul>
&lt;p>当资源成为非关键路径中的瓶颈时，服务的一些非时间关键功能（如维护或异步处理）会出现延迟。如果这些任务被延迟过长，它们可能会影响服务性能、功能、数据完整性，甚至在极端情况下导致故障。&lt;/p>
&lt;p>当服务用尽存储时，写入操作会失败。如果某些读取依赖于写入操作，例如服务或存储解决方案存储 Paxos 状态以进行一致性读取，或者存储解决方案跟踪所有访问的数据及其访问时间，这些读取操作也可能会失败。&lt;/p>
&lt;p>当其他资源（如内存或网络套接字）不足时，服务可能会崩溃、重启或挂起。资源不足的服务可能会因为垃圾收集而陷入频繁操作，或者以其他方式表现异常。这些故障会降低服务的容量，并可能触发需要人工干预的级联故障。&lt;/p>
&lt;p>有关缓解策略，请参见下文的“减少故障影响”部分。&lt;/p>
&lt;p>&lt;strong>估算利用率&lt;/strong>&lt;/p>
&lt;p>由于服务和资源类别的不同，每个服务的资源使用率和目标利用率都不同。为了准确估算特定服务的目标利用率，需要考虑以下几个方面。&lt;/p>
&lt;p>&lt;strong>峰值使用率&lt;/strong>&lt;/p>
&lt;p>峰值使用率是指在特定时间段内的最高使用率，取决于服务的性质和用户群体。例如，业务相关服务在工作日早晨可能达到使用高峰，而社交相关服务则在下午晚些时候、晚上、周末或社交活动期间达到峰值。突发事件也可能导致使用率骤降或飙升。全球服务的用户群分布在不同国家和时区，形成更复杂的日流量模式。&lt;/p>
&lt;p>假设负载不恒定，资源利用率在峰值流量期间不应超过服务分配资源的100%。这样，服务在应对峰值时不会因过度制备而浪费资源。&lt;/p>
&lt;p>&lt;strong>最大峰值利用率&lt;/strong>&lt;/p>
&lt;p>即使在峰值时，也不应让服务以100%的利用率运行。一些软件、语言或平台在CPU使用率接近100%时会出现性能问题或垃圾回收抖动。如果某个组件的内存利用率达到100%，服务可能会因内存不足（OOM）错误而崩溃。&lt;/p>
&lt;p>调整监控以捕捉足够小时间帧（微秒或秒）内的精确资源利用率是件繁琐的事情。因此，很难确定低延迟应用程序的资源使用峰值。&lt;/p>
&lt;p>&lt;strong>冗余&lt;/strong>&lt;/p>
&lt;p>发布问题、硬件故障、软件错误甚至计划维护都会导致服务组件失败或重启。这可能导致从单个组件崩溃到整个服务下线的各种故障。&lt;/p>
&lt;p>冗余是一种系统设计原则，指在替换失败组件时激活的重复组件。冗余程度由N+x表示，其中N是活动组件的总数，x是备份组件的数量。例如，N+3表示系统可以有三个组件故障，因为有三个备份组件可以替换它们。这样，无论组件总数（N）是多少，服务都能正常运行。&lt;/p>
&lt;p>冗余可以在区域内或跨区域应用。区域是位于不同物理地点的独立故障域，这样网络问题或自然灾害不会同时影响多个区域。&lt;/p>
&lt;p>&lt;strong>可用区域内冗余&lt;/strong>&lt;/p>
&lt;p>实现可用区域内的冗余相对简单。在一个区域内，需要保护服务免受二进制文件或物理机器故障的影响。通常，可以通过在每个区域运行额外的服务二进制文件实例，并使用负载平衡解决方案在出现故障时重定向流量来实现。冗余程度与基础设施的服务质量协议 (SLA) 相关。SLA 考虑了可同时处于故障状态的机器总数以及在新机器上重新启动二进制文件实例的速度。&lt;/p>
&lt;p>需要注意的是，可用区域内冗余无法保护服务免受导致整个区域瘫痪的故障（如电力、网络或自然灾害）的影响。&lt;/p>
&lt;p>&lt;strong>跨区域冗余&lt;/strong>&lt;/p>
&lt;p>跨区域冗余更加复杂。为了防止整个区域的中断，需要在多个区域部署副本或完整的服务堆栈副本，以实现跨区域的冗余，从而应对高峰期的服务负载。注意，每个副本必须有足够的容量，以便在声明的冗余情况下，任何数量的副本停机时都能服务所有预期负载。无论副本的数量（N）是多少，服务的区域冗余程度定义如下：&lt;/p>
&lt;ul>
&lt;li>N+0：服务运行但无法容忍任何区域中断&lt;/li>
&lt;li>N+1：服务能承受单个区域中断&lt;/li>
&lt;li>N+2：服务在两个区域中断时仍能运行&lt;/li>
&lt;li>等等&lt;/li>
&lt;/ul>
&lt;p>虽然部分冗余涉及容量，但也与服务架构本身有关。例如，一致性存储服务通常要求大多数副本处于运行状态，以确保写操作不会被回滚。
为 N+2 制备服务对可靠性有积极影响：可以计划整个区域的维护，但在维护期间会将冗余降至 N+1。服务仍然可以容忍另一个区域的意外事件。这将冗余降至 N+0，但不会导致中断。需要注意的是，切换到另一个区域可能会对可见的延迟产生影响。&lt;/p>
&lt;p>当冗余为 N+0 并且无法容忍进一步的故障时，优先任务是尽快缓解或解决意外事件。一个选项是完成或回滚计划的维护工作，以将服务恢复到 N+1。否则，任何其他区域出现事件都可能导致面向用户的中断。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54.webp"
width="1813"
height="707"
srcset="https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54_hu_d334953dad671404.webp 480w, https://martinliu.cn/blog/sre-best-practices-for-capacity-management/2024-06-17_14-25-54_hu_ae384dffa3952b86.webp 1024w"
loading="lazy"
alt="图 2: 服务制备资源成本的示例比较（以三个副本和五个副本为例）"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="615px"
>&lt;/p>
&lt;p>以上算法解释：&lt;/p>
&lt;p>【需求】预期负载：每秒 100 次请求 (rps)&lt;/p>
&lt;p>&lt;strong>在 3 个副本上运行 N+2&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许 2 个副本宕机 (N+2)&lt;/li>
&lt;li>3 - 2 = 1 个副本继续运行，处理 100 rps&lt;/li>
&lt;li>每个副本被配置处理 100 rps / 1 个副本 = 100 rps/副本&lt;/li>
&lt;li>总制备容量为 100 rps/副本 x 3 个副本 = 300 rps&lt;/li>
&lt;li>在平稳状态下，N+2 的最大利用率为 100 rps / 300 rps = 33%&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在 5 个副本上运行 N+2&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许 2 个副本宕机 (N+2)&lt;/li>
&lt;li>5 - 2 = 3 个副本继续运行，处理 100 rps&lt;/li>
&lt;li>每个副本被配置处理 100 rps / 3 个副本 = 34 rps/副本&lt;/li>
&lt;li>总制备容量为 34 rps/副本 x 5 个副本 = 170 rps&lt;/li>
&lt;li>在平稳状态下，N+2 的最大利用率为 100 rps / 170 rps = 59%&lt;/li>
&lt;/ul>
&lt;p>【方案对比】在 5 个副本上运行该服务的成本是运行在 3 个副本上的成本的 56.6%。这个比率是通过计算 170/300 得出的。&lt;/p>
&lt;p>&lt;strong>冗余的成本&lt;/strong>&lt;/p>
&lt;p>服务在越多的区域运行，运行任何级别冗余的成本就越低。考虑图 2 中描述的服务。它需要运行在 N+2 冗余模式下。在第一个设置中，它运行三个副本（N=3），在第二个设置中，它运行五个副本（N=5）。两种配置都有两个备用副本（+2），因此可以承受两个副本的故障。
接下来，检查五个副本的设置。其副本较小，即使两个副本失败并且两个备用副本都在使用中，仍有三个活动副本共享负载。这导致五个副本的 N+2 设置成本是三个副本服务使用相同冗余级别成本的 56.6%。参见图 2 中提供的计算。&lt;/p>
&lt;p>&lt;strong>同质和异质服务&lt;/strong>&lt;/p>
&lt;p>实现同质大小副本的服务冗余比实现异质大小副本的服务冗余更容易。您的服务必须准备好处理最大的区域故障。如果区域容量不同（即异质），在每个区域中，承受其他最大区域不可用的容量需求是不同的。结果是，较小的区域需要更多的资源，整体所需的资源来提供相同的负载更高。&lt;/p>
&lt;p>&lt;strong>复制和分布式流量&lt;/strong>&lt;/p>
&lt;p>为冗余制备资源还取决于服务流量的特性。无状态服务（如处理用户请求的 Web 服务器）接收分布在副本之间的流量。从存储服务读取的请求也可以分布在不同区域的副本之间。为这些服务制备 N+1 或 N+2 冗余是简单的，遵循前面例子的逻辑。处理跨区域复制请求（如写入）的服务行为不同。每次写入实体的请求需要最终写入每个副本，以保持服务数据在副本之间的一致性。当副本变得不可用时，复制写入请求不会对保持可用的副本产生额外的负担。然而，当不可用的副本重新上线时，会产生成本。此副本需要赶上停机期间错过的未完成写入。这一操作增加了其负担。保持运行的副本提供了同步恢复副本所需的数据，在恢复期间增加了所有副本的负载。理想情况下，应限制这一操作以避免影响整个副本集的低延迟流量。每个服务和每个组件接收的复制和分布流量的比例不同，这需要在资源制备时考虑。&lt;/p>
&lt;p>&lt;strong>对延迟不敏感的进程&lt;/strong>&lt;/p>
&lt;p>服务通常有对延迟不敏感的进程，如批处理作业、异步请求、维护和实验。然而，这些进程在处理生产负载（对延迟敏感）时给服务带来额外的压力。因此，服务需要额外的资源来容纳更高的峰值，增加了其成本。您可以通过分配较低优先级或在低负载期间调度来最小化对延迟不敏感请求的额外成本，以减少整体峰值。注意，这两种解决方案都需要经过适当测试并仔细部署以防止服务中断。&lt;/p>
&lt;p>&lt;strong>未知的额外资源&lt;/strong>&lt;/p>
&lt;p>最后一个要考虑的方面是未知因素。制备服务时有许多正当理由添加额外资源：例如，由另一个团队支持的底层库的性能回归，或实施外部团队要求（如加密所有 RPC）。如果出现问题，备用容量可以保持服务在延迟和错误方面按预期运行。然而，请记住，这一决定可能很昂贵，因此请确保在可靠性、可预测性和扩展性之间的权衡是值得的。&lt;/p>
&lt;h2 id="容量规划">容量规划
&lt;/h2>&lt;p>资源制备是指确定当前保持服务运行所需的资源量，而容量规划则是预测未来的资源需求以确保资源供应。&lt;/p>
&lt;p>&lt;strong>容量规划概述&lt;/strong>&lt;/p>
&lt;p>与资源制备类似，容量规划旨在确定维持服务所需的每种计算资源的数量。然而，容量规划需要在多个时间点上做出预测，例如三个月、六个月或一年的资源需求。&lt;/p>
&lt;p>对于现有服务，容量规划通过分析历史需求来预测增长，并在此基础上考虑服务的最大峰值利用率、冗余需求、对延迟不敏感的进程以及未知因素进行资源制备。通常，您还需要在预测中加入计划中的新资源消费者，如新服务、营销活动和新功能等。&lt;/p>
&lt;p>您需要为服务中的每个组件分配不同数量的每种资源。例如，对于 RAM，Web 服务器可能需要大量 RAM，而代理服务器可能只需要很少的 RAM。为了在规划未来容量时确定每种资源的需求量，需要考虑以下因素：&lt;/p>
&lt;ul>
&lt;li>您服务中的不同组件数量（如数据库、代理、应用）&lt;/li>
&lt;li>每个组件的实例数量（如 1 个数据库，2 个代理，2 个应用）&lt;/li>
&lt;li>您的服务运行的区域（如跨区域 N+1 或 N+2）&lt;/li>
&lt;li>您的预测所需的数据点数量&lt;/li>
&lt;/ul>
&lt;p>虽然这是复杂公式的一个简单示例，但像 RAM 这样的资源类别可能需要按照以下公式进行计算：&lt;/p>
&lt;blockquote>
&lt;p>（不同组件的数量）×（每个组件的实例数量）×（区域数量）×（数据点数量）×（其他影响因素）&lt;/p>&lt;/blockquote>
&lt;p>由此可见，当您考虑所有区域中所有服务器类型的所有资源类别并加入冗余时，所需确定的容量值数量将呈指数增长。&lt;/p>
&lt;p>&lt;strong>预测资源&lt;/strong>&lt;/p>
&lt;p>容量规划是一个极其复杂的过程，因为有无数因素在起作用，而且每个因素都可以独立变化。基于上述高级概述，预测时请考虑以下因素：&lt;/p>
&lt;ul>
&lt;li>按组件分类的资源类别 ：除了确定组件的总数外，还必须考虑每个组件使用的各种资源类别：例如 RAM、CPU、存储、网络等。一个组件可能使用一组资源类别，而其他组件可能使用完全不同的资源类别。如果您的服务包含许多组件，那么需要跟踪的资源类别会迅速增加。&lt;/li>
&lt;li>多个区域 ：如果需要在全球多个区域运行，可以想象预测各种机器（如 Web 服务器、数据库服务器、应用服务器、代理服务器等）CPU 等单一资源类别的难度会更大。再加上所有机器的其他资源类别，以及跨所有区域的冗余，在给定的时间段内（如六个月或一年后）进行规划时难度更大。&lt;/li>
&lt;li>服务需求：需求取决于新服务的成功和采用率，只有在服务推出后才能知道。需要随时间更新预测并修正长期预测。需要为突然的未计划负载增加做好准备，否则可能会导致服务中断。&lt;/li>
&lt;/ul>
&lt;p>其他意外事件如自然灾害、网络中断或停电会大幅改变流量模式。即使是计划中的事件，如社交活动或假期的开始或结束，也会以意想不到的方式影响服务。随着新功能的推出或用户基础的变化，这些事件每年的变化影响难以推测。&lt;/p>
&lt;p>不同时区的用户分布变化也会对服务产生影响。流量可能会在一天内分布更多或更少，意外地增加或降低峰值需求。&lt;/p>
&lt;p>&lt;strong>增长&lt;/strong>&lt;/p>
&lt;p>服务的增长取决于其成功与否。用户可能需要一些时间（以及营销活动）来了解您的服务并对其产生兴趣，而这种兴趣可能会随着时间慢慢增加或迅速飙升。其他互联网服务可能依赖于您的服务，它们的成功或失败可以直接影响您的服务。成功的外部服务可以为您带来更多流量，反之亦然。&lt;/p>
&lt;p>社会、经济、政治或其他因素可能会增加或减少您的用户流量。您需要确定您的增长率，并在容量规划会议中考虑这些因素。&lt;/p>
&lt;p>&lt;strong>预测示例&lt;/strong>&lt;/p>
&lt;p>为了说明服务所有者必须正确预测的各种资源类别值，我们使用一个简单的示例：&lt;/p>
&lt;ol>
&lt;li>两组件服务的资源类别：假设您有一个小型服务，如社交媒体应用。该服务由两台机器组成，一台 Web 服务器和一个数据库。Web 服务器使用 CPU 和 RAM，数据库使用 CPU、RAM、HDD 存储、HDD 吞吐量和 SSD 存储。这一共是六个独特的资源类别值。这远不是现实应用中的完整值集合。如果有三个副本，您需要定义 18 个值。如果按季度预测未来 12 个月，则需要定义 72 个值（每年四个季度 × 18）。&lt;/li>
&lt;li>影响您服务的趋势：您了解到，您的社交媒体服务受季节性趋势影响。在假期开始时（11 月至 12 月），流量会增加，春假和夏季开始时也会有流量高峰。预测时，不能只考虑资源的线性增长，还要考虑一年中高峰时段的流量峰值。每个月批处理任务（如数据清理或数据库压缩）期间，负载可能也会有所不同，甚至每周负载也会变化，这使得预测更加复杂。&lt;/li>
&lt;/ol>
&lt;h2 id="最佳实践">最佳实践
&lt;/h2>&lt;p>我们提出了一些容量管理的最佳实践，帮助您预见和解决常见问题和陷阱。&lt;/p>
&lt;p>&lt;strong>负载测试&lt;/strong>&lt;/p>
&lt;p>在目标利用率及以上运行服务的小副本，进行故障切换、缓存失效、发布等操作。评估服务如何应对和恢复过载，通过实验证实资源分配是否足以应对定义的负载。在从数据中推断估计值时要小心。如果一个分配有一个 CPU 的二进制实例每秒可以处理 100 个请求，那么通常可以假设两个分配有一个 CPU 的二进制实例总共每秒可以处理 200 个请求。但不能假设一个分配有两个 CPU 的二进制实例每秒可以处理 200 个请求，因为可能存在其他瓶颈。&lt;/p>
&lt;p>&lt;strong>全面评估容量&lt;/strong>&lt;/p>
&lt;p>尽管需要为未知情况添加额外容量，但要避免堆积过多资源而无意中使服务过度制备。应提供足够的备用资源，使服务能够应对突发问题。这可以在服务比预期更成功且资源不足时，争取一些额外时间来获取资源。&lt;/p>
&lt;p>&lt;strong>降低停机影响&lt;/strong>&lt;/p>
&lt;p>可以对服务进行准备，使其在资源耗尽时停机的影响降到最低。建议的预防措施包括：&lt;/p>
&lt;ul>
&lt;li>优雅降级：当服务负载过大时，禁用一些非关键功能以减少资源使用。&lt;/li>
&lt;li>拒绝服务 (DoS) 攻击保护：防止流量增加来自恶意方。&lt;/li>
&lt;li>有效超时：请求最终超时，服务放弃这些请求而不再浪费资源。&lt;/li>
&lt;li>负载分流：当服务负载过大时，快速拒绝请求，允许上层路由层重试请求或使其快速失败。这样可以避免服务落后并浪费资源在最终会超时的请求上。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>配额管理和限流&lt;/strong>&lt;/p>
&lt;p>部署配额系统有助于限制服务与后端之间的吞吐量，为使用同一后端的其他服务提供隔离。当服务发送的请求超过预期并达到配额限制时，后端会限制服务，而不是让自己过载并影响其他使用同一后端的服务。&lt;/p>
&lt;p>&lt;strong>监控&lt;/strong>&lt;/p>
&lt;p>通过监控服务收集的相关指标为资源制备和容量规划决策提供数据。使用我们上面的示例服务作为模型，以下是非常有用的：&lt;/p>
&lt;p>负载指标&lt;/p>
&lt;ul>
&lt;li>每秒的传入请求数&lt;/li>
&lt;li>对延迟不敏感的负载&lt;/li>
&lt;li>活跃用户数&lt;/li>
&lt;li>总用户数&lt;/li>
&lt;/ul>
&lt;p>资源指标&lt;/p>
&lt;ul>
&lt;li>资源分配&lt;/li>
&lt;li>实际资源使用情况&lt;/li>
&lt;li>配额使用情况&lt;/li>
&lt;li>被限制的请求数量&lt;/li>
&lt;/ul>
&lt;p>性能指标&lt;/p>
&lt;ul>
&lt;li>延迟&lt;/li>
&lt;li>错误&lt;/li>
&lt;/ul>
&lt;p>高阶健康指标（用于过滤其他受污染的指标数据）&lt;/p>
&lt;ul>
&lt;li>服务受到停机影响的时间&lt;/li>
&lt;li>服务正在进行维护的时间&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>告警&lt;/strong>&lt;/p>
&lt;p>通过告警进行资源制备和容量规划，以防止停机。一些有用的告警示例包括：当服务未达到预期的冗余水平时触发的告警，表示资源不足的告警，以及性能问题的告警等。&lt;/p>
&lt;p>&lt;strong>资源池化&lt;/strong>&lt;/p>
&lt;p>资源池化是将资源分组，使多个服务共享它们，而不是为每个服务单独分配。池化通常用于减少规划复杂性和资源碎片化，从而提高服务效率。实施该策略时，大型服务的规划仍需详细且精确，但小型服务可以共享一个大致和保守制备的资源池。这种方法减少了容量规划的工作量，但牺牲了服务的隔离性。&lt;/p>
&lt;p>&lt;strong>一般 SRE 最佳实践&lt;/strong>&lt;/p>
&lt;p>遵循适用于所有服务的基本 SRE 原则。例如，将容量状态作为配置存储在版本控制系统中，并要求对任何更改进行同行评审。自动化执行、逐步推出所有更改、持续监控服务，并准备在需要时进行回滚。&lt;/p>
&lt;p>在发生故障或其他问题时，进行无责后事件审查，诚实地从错误中吸取教训，并致力于改进系统，以避免重复这些错误。&lt;/p>
&lt;h2 id="评估服务容量">评估服务容量
&lt;/h2>&lt;p>在评估新服务或现有服务的容量时，我们建议按照以下步骤来确定其资源需求：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>硬件&lt;/th>
&lt;th>规格&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>处理器&lt;/td>
&lt;td>CPU 类型和核心数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>图形处理单元&lt;/td>
&lt;td>GPU 类型和数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>存储&lt;/td>
&lt;td>HDD（硬盘驱动器）和 SSD（固态硬盘）：&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 存储容量（TB）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 带宽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• IOPS（每秒输入输出操作）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>网络&lt;/td>
&lt;td>数据中心内部、数据中心之间、ISP 访问：&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 延迟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>• 带宽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>后端&lt;/td>
&lt;td>所需的服务和容量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>其他&lt;/td>
&lt;td>AI 加速器及其他特殊硬件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>估算服务所需的资源，以应对预期负载。使用表 1 的模板，填写不同资源类别的预期服务需求。&lt;/li>
&lt;li>计算并考虑服务各组件的目标利用率。您可能需要进行负载测试来评估：
&lt;ul>
&lt;li>峰值使用率&lt;/li>
&lt;li>最大峰值利用率&lt;/li>
&lt;li>冗余&lt;/li>
&lt;li>对延迟不敏感的过程&lt;/li>
&lt;li>未知情况下的备用资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>考虑以下因素：
&lt;ul>
&lt;li>优先级&lt;/li>
&lt;li>地区&lt;/li>
&lt;li>服务组件&lt;/li>
&lt;li>具体时间点及未来时间（如每月、每季度、六个月、一年等）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>进行预测，考虑是否需要按以下方面规划容量：
&lt;ul>
&lt;li>优先级&lt;/li>
&lt;li>地区&lt;/li>
&lt;li>服务组件&lt;/li>
&lt;li>每年的时间点数量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>持续学习容量管理：
&lt;ul>
&lt;li>观看视频《分布式服务的容量管理复杂性》，了解该主题的详细技术讲解 [1]。&lt;/li>
&lt;li>阅读 ;login: 文章《容量规划》 [2]。&lt;/li>
&lt;li>查看 Google 的《Site Reliability Engineering》中的《软件工程在 SRE 中的应用》、《管理关键状态》和《大规模可靠产品发布》章节 [3]。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>在本文中，我们探讨了容量管理的组成部分及其复杂性。我们将这个主题分为两个部分：资源制备和容量规划。资源制备解决了战术问题，即“如何保证服务现在能正常运行？”；而容量规划则关注战略问题，即“如何确保服务在未来也能持续运行？”回答这些问题并不简单，每个问题都需要仔细审查服务的不同方面。&lt;/p>
&lt;p>在进行资源制备时，需要检查各种需求信号（输入）及其对资源分配（输出）的影响。了解服务可能面临的预期高峰需求以及需要构建的冗余量非常重要。你是否考虑过资源短缺和供应商供应的影响？&lt;/p>
&lt;p>容量规划迫使你尝试预测服务及其负载在不断变化的未来会是什么样子。为了做到这一点，你必须充分了解你的服务。例如，你需要确定高峰周期及其发生时间，确定需要运行的地点数量及每个地点的不同能力，并预测可能影响服务的自然、社会甚至法律事件。当需要增加容量时，你是否有批准或资金来支持这一增长？&lt;/p>
&lt;p>虽然我们提出的许多最佳实践都很重要，但遵循可靠的 SRE 原则有助于简化容量管理：进行适当的负载测试，实施广泛的监控和警报，使用源代码控制系统，了解服务的优点和缺点，制定容量计划，并准备在需要时预测增长和扩展。&lt;/p>
&lt;p>&lt;strong>致谢&lt;/strong>&lt;/p>
&lt;p>作者感谢 JC van Winkel、Michal Kottman、Grant Bachman、Todd Underwood、Betsy Beyer 和 Salim Virji 的建议。&lt;/p>
&lt;p>作者：&lt;/p>
&lt;ol>
&lt;li>Luis Quesada Torres 是谷歌的一名站点可靠性工程师和经理，他负责确保谷歌云的人工智能 (AI) 产品可靠高效地运行。在业余时间，Luis 拥有多种爱好：他在多个音乐流派中作曲和制作音乐，他喜欢玩滑板，并且他会说西班牙语、英语、德语、瑞士德语和世界语。他很快还会学习日语。你可以通过 &lt;a class="link" href="mailto:luis@google.com" >luis@google.com&lt;/a> 联系他。&lt;/li>
&lt;li>Doug Colish 是谷歌在纽约市的一名技术作家，支持站点可靠性工程 (SRE) 团队。他为谷歌的《构建安全可靠系统》一书的多个章节做出了贡献。Doug 拥有超过三十年的系统工程经验，专注于 UNIX 和安全。他的爱好包括对汽车进行细节处理和改装，参加音乐会，以及观看和讨论优秀电影。你可以通过 &lt;a class="link" href="mailto:dcolish@google.com" >dcolish@google.com&lt;/a> 联系他。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>参考文献&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>[1] L. Quesada Torres, “Complexities of Capacity Management for Distributed Services,” Google Tech Talk: &lt;a class="link" href="https://www.youtube.com/watch?v=pOo0oKNM9I8" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=pOo0oKNM9I8&lt;/a>.&lt;/li>
&lt;li>[2] D. Hixson and K. Guliani, “Capacity Planning,” ;login:,vol. 40, no. 1 (February 2015): &lt;a class="link" href="https://www.usenix.org/system/files/login/articles/login_feb15_07_hixson.pdf" target="_blank" rel="noopener"
>https://www.usenix.org/system/files/login/articles/login_feb15_07_hixson.pdf&lt;/a>.&lt;/li>
&lt;li>[3] B. Beyer, C. Jones, N. R. Murphy, and J. Petoff, eds., Site Reliability Engineering, Chapters 18, 23, and 27: &lt;a class="link" href="https://landing.google.com/sre/sre-book/toc/index.html" target="_blank" rel="noopener"
>https://landing.google.com/sre/sre-book/toc/index.html&lt;/a>.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>原文地址: &lt;a class="link" href="https://static.googleusercontent.com/media/sre.google/en//static/pdf/login_winter20_10_torres.pdf" target="_blank" rel="noopener"
>https://static.googleusercontent.com/media/sre.google/en//static/pdf/login_winter20_10_torres.pdf&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>❤️ Photo by FOX: &lt;a class="link" href="https://www.pexels.com/photo/clear-drinking-glass-with-brown-liquid-9097039/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/clear-drinking-glass-with-brown-liquid-9097039/&lt;/a>&lt;/p></description></item><item><title>Google 白皮书：产品导向的 SRE 可靠性</title><link>https://martinliu.cn/blog/product-focused-reliability-for-sre/</link><pubDate>Wed, 12 Jun 2024 13:25:58 +0800</pubDate><guid>https://martinliu.cn/blog/product-focused-reliability-for-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/pexels-pavel-danilyuk-7868970.webp" alt="Featured image of post Google 白皮书：产品导向的 SRE 可靠性" />&lt;blockquote>
&lt;p>作者：Carl Crous, Parker Roth 和 Victoria Hurd；
译者：刘征
原文：&lt;a class="link" href="https://sre.google/resources/practices-and-processes/product-focused-reliability-for-sre/" target="_blank" rel="noopener"
>https://sre.google/resources/practices-and-processes/product-focused-reliability-for-sre/&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="介绍">介绍
&lt;/h2>&lt;p>站点可靠性工程师（SRE）传统上通过其服务间接支持产品，负责服务质量目标（SLO），并提高服务的可靠性。然而，这种方法存在一些局限，有可能影响产品和用户体验：&lt;/p>
&lt;ul>
&lt;li>服务仅能部分满足用户需求和业务目标。度量服务的可靠性只是对用户需求或业务目标的近似。&lt;/li>
&lt;li>用户界面（UI）越来越复杂。在 UI 和 SRE 度量的服务之间存在许多层次，导致产品覆盖的显著差距。&lt;/li>
&lt;li>服务增长可能轻易超过组织的工程增长，导致服务被忽视或团队负担过重。&lt;/li>
&lt;li>服务支持优化了产品整体可靠性和性能的一小部分，而在这些服务范围之外存在显著风险。&lt;/li>
&lt;li>服务本质上是同步的。异步流程常常被忽视或难以优先处理，因为其成功无法通过单一服务来度量。&lt;/li>
&lt;/ul>
&lt;p>本文探讨了这些限制，并讨论了一些 Google SRE 团队如何通过将支持重新聚焦于产品和最终用户需求来解决这些问题，而不是集中于基础设施和服务。我们还讨论了 SLO 策略，描述了 Google SRE 如何定义产品，并解释了如何决定哪些因素对实现产品可靠性至关重要。&lt;/p>
&lt;p>&lt;strong>产品参与度&lt;/strong>&lt;/p>
&lt;p>为了支持产品，SRE 需要熟悉产品及其功能的设计和开发。同时，还需要了解终端用户在使用产品时的目标。&lt;/p>
&lt;p>为了获取产品和用户信息，SRE 需要与产品经理和用户体验研究人员合作。这些人根据“要完成的工作”（Jobs to be Done）和 Google 的关键用户旅程（CUJ）等框架定义产品和功能，这些框架识别终端用户的目标和期望结果。&lt;/p>
&lt;p>使用这些信息，SRE 可以识别出对产品及其用户重要的内容，并用定义产品的相同语言来定义可靠性。&lt;/p>
&lt;h2 id="服务支持模型">服务支持模型
&lt;/h2>&lt;p>SRE 的核心责任是“负责其支持服务的可用性、延迟、性能、效率、变更管理、监控、应急响应和容量规划”[3]。&lt;/p>
&lt;p>在这种模型中，服务是 SRE 团队的主要“所有权单位”和“工作对象”。这种对服务的关注是 SRE 团队从传统上所建立的方式。它驱动了 SRE 按怎样的优先级别处理工作、度量性能，并扩大范围，从而能支持到更多的服务。&lt;/p>
&lt;p>从传统上看，SRE 在基于服务的工作中表现出色，能确保他们所支持的服务具有高可用性。然而，服务的可用性并不总是能等同于：用户对产品的满意，原因如下：&lt;/p>
&lt;ul>
&lt;li>产品仍然会发生超出 SRE 团队范围的故障，例如 Web端 或移动应用中的问题。&lt;/li>
&lt;li>SRE 团队花时间响应了可能对用户并没有影响的状况。例如，HTTP 404 错误可能并不会影响用户。&lt;/li>
&lt;/ul>
&lt;p>当 SRE 的职责范围仅限于某一组服务时，SRE 团队通常并没有足够的信息来有效解决以上问题。相反，SRE 被迫在并不了解服务应如何表现的情况下，来评估这些服务。&lt;/p>
&lt;p>SRE 团队其实可以接受对产品本身的责任，而不仅限于对服务可靠性的责任。这种在更高层面上的 &lt;strong>优先考虑产品，而不是服务&lt;/strong> 的承诺。我们称其为产品支持模型，它开启了一种新的可靠性思维方式。&lt;/p>
&lt;h2 id="产品支持模型">产品支持模型
&lt;/h2>&lt;p>这种新产品支持模型的核心是: SRE 负责产品关键功能的可靠性。过去，SRE 会被分配了&lt;strong>一组服务&lt;/strong>，它们在彼时都是受到重视的关键服务。现在，SRE 会被分配了&lt;strong>一组功能和用户想要的结果&lt;/strong>。在没有传统服务所有权固定边界的情况下，SRE 团队可以将其优先事项与业务和用户结果对齐，并在每一层服务堆栈中处理更广泛和更有影响力的工作。&lt;/p>
&lt;blockquote>
&lt;p>“如果你不能度量它，你就不能改进它。” — 彼得·德鲁克&lt;/p>&lt;/blockquote>
&lt;p>在工程团队能够管理产品的可靠性之前，必须先能够度量其可靠性。建立一套提供足够广度和深度覆盖的度量标准是至关重要的，这有助于团队识别最具影响力的工程工作，同时避免想要过度优化任何特定系统的诱惑。&lt;/p>
&lt;p>在团队能够度量产品的可靠性之前，必须先知道要度量什么，以及如何度量。需要度量的内容：来自于将产品建模为一组用户可见的行为或功能，并根据它们给用户带来的价值，对这些用户行为进行优先级排序。在掌握了这份优先级列表后，团队可以开始从支持团队/服务，转型为支持产品及其用户。&lt;/p>
&lt;p>图 1 说明了如何通过与利益相关者对齐、产品建模和度量的坚实基础，来实现提高产品可靠性的终极目标。同在这些概念上达成的共识，能使团队能够将资源投入到对最终用户和业务最具影响力的问题上。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw.webp"
width="3840"
height="1655"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw_hu_b1307bd8445ea78.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/prbw_hu_a8e161bf10f27e14.webp 1024w"
loading="lazy"
alt="图 1：产品可靠性引导工作流程"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="556px"
>&lt;/p>
&lt;h2 id="开始">开始
&lt;/h2>&lt;p>在本节中，你将学习如何实施以产品为中心的可靠性参与（engage），包括以下关键步骤：&lt;/p>
&lt;ol>
&lt;li>与利益相关者对齐&lt;/li>
&lt;li>建模产品&lt;/li>
&lt;li>度量性能&lt;/li>
&lt;li>管理可靠性&lt;/li>
&lt;/ol>
&lt;p>每个步骤列出了为 SRE 团队带来价值的中间交付物及其解锁的机会。我们鼓励你按顺序进行，但也指出了可以利用现有指标和关系的领域。&lt;/p>
&lt;h3 id="1-与你的利益相关者对齐">1. 与你的利益相关者对齐
&lt;/h3>&lt;p>与任何 SRE 参与过程类似，第一步是确定相关的利益相关者。在基于服务的参与中，依赖于 SRE 和开发团队之间的合作，而以产品为中心的参与则需要更多样化的合作伙伴。这里的更广泛的合作伙伴通常包括以下角色：&lt;/p>
&lt;ul>
&lt;li>产品经理：定义产品策略和需求。&lt;/li>
&lt;li>UX 设计师和研究人员：将需求转化为用户体验。&lt;/li>
&lt;li>工程团队：开发必要的功能和基础设施以实现用户体验。【译者注：在以服务为支持对象的模式中，SRE 仅重点关注&amp;amp;合作此方】&lt;/li>
&lt;li>支持专家：通过直接或书面沟通与最终用户互动。&lt;/li>
&lt;/ul>
&lt;p>为了成功的管理产品可靠性，关键是要确定每个角色的责任。&lt;/p>
&lt;blockquote>
&lt;p>交付物：记录角色和职责的文档，例如 RACI 矩阵[7]。&lt;/p>&lt;/blockquote>
&lt;p>在确定了所有的利益相关者后，与他们会面沟通，启动 SRE 的合作伙伴关系。&lt;/p>
&lt;h3 id="2-建模产品">2. 建模产品
&lt;/h3>&lt;p>人们（用户）使用产品是为了实现他们在现实世界里的目标。为了帮助产品团队构建能够促进用户目标的产品和服务，你需要了解产品用户的目标。&lt;/p>
&lt;p>本节介绍了两个关键概念：用户目标和步骤。用户目标描述了用户的意图和他们想要实现的目标。例如，邮件服务的一个目标可能是“与人交流”。步骤是用户为实现其目标而采取的各个独立操作。&lt;/p>
&lt;p>“要完成的工作”（JTBD）[1,5] 框架将用户目标建模为工作，而 Google 的关键用户旅程（CUJs）[2] 将用户目标建模为伴随一系列任务或步骤的目标。&lt;/p>
&lt;p>了解用户在使用产品或功能时的目标是软件开发的有力工具，因为它为你提供了关于产品最重要方面的清晰信号。用户的意图也是 SRE 可以利用的强大可靠性工具。&lt;/p>
&lt;p>假设你的产品是使用“要完成的工作”框架构建的，那么你将拥有一份有待促进的&lt;strong>用户目标列表&lt;/strong>。产品经理、UX 设计师和其他非工程学科角色，也都可能拥有这份列表。这份列表提供了用户期望目标的高阶描述，基于跨职能的数据，为涉及软件开发生命周期的许多学科提供了共同的语言。利用这些共享的用户目标作为产品支持的基础是建模产品可靠性的基础第一步。&lt;/p>
&lt;p>然而，如果你还没有用户目标列表，可能就需要自己开发这份列表，这将带来显著的工程成本，并导致只有 SRE 愿意使用该列表。更好的方法是与产品经理合作，并鼓励他们采用某种框架，并来负责定义用户目标。&lt;/p>
&lt;p>用户目标被分解为：用户为实现其总体目标，所要采取的一系列步骤。每个步骤都是独立的工作单元，与其他步骤无关。这些步骤提供以下信息：&lt;/p>
&lt;ul>
&lt;li>解释当用户在使用产品时，他们在做什么，或用户目标是什么。&lt;/li>
&lt;li>定义每个步骤的开始条件和多个成功或失败条件。&lt;/li>
&lt;li>可以与产品界面或基础设施相关联的具体操作列表，例如用户发送电子邮件时调用的 RPC。&lt;/li>
&lt;/ul>
&lt;p>以上用户目标只是：一个将步骤组合在一起的组织元素。&lt;/p>
&lt;p>基于这些步骤，你可以确定完成这些步骤所需用到的产品界面和基础设施的哪些部分。某个界面或基础设施服务的某些部分可能会涉及到不同的目标，因此它们可以具有不同的重要性级别。&lt;/p>
&lt;blockquote>
&lt;p>交付物：一个产品的用户目标登记表，包含了所有用户目标和步骤的高阶描述。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>邮件服务产品定义示例&lt;/strong>&lt;/p>
&lt;p>让我们考虑一个允许用户发送和接收电子邮件的邮件产品，还具有一些增值功能。我们将根据表 1 中描述的目标和步骤来建模此产品，并在图 2 中进行了说明。表 1 提供了可以被产品开发和支持中涉及的多个学科使用的基本产品模型。&lt;/p>
&lt;p>表 1: 用户目标和步骤示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>目标&lt;/th>
&lt;th>步骤&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>撰写邮件&lt;/td>
&lt;td>登录&lt;/td>
&lt;td>用户在登录页面进行身份验证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开撰写对话框&lt;/td>
&lt;td>用户点击**“撰写”**按钮，撰写对话框被显示出来。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>查找地址&lt;/td>
&lt;td>用户开始输入收件人的电子邮件地址，系统显示匹配的地址供选择。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>检查拼写&lt;/td>
&lt;td>当用户输入消息时，系统会突出显示拼写错误。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>发送邮件&lt;/td>
&lt;td>用户点击**“发送”**按钮，邮件被排队等待发送。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>阅读邮件&lt;/td>
&lt;td>登录&lt;/td>
&lt;td>用户在登录页面进行身份验证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开收件箱&lt;/td>
&lt;td>用户打开收件箱页面，显示所有邮件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>打开邮件&lt;/td>
&lt;td>用户选择一封邮件，系统显示邮件内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>接收邮件（异步）&lt;/td>
&lt;td>当邮件服务收到新邮件时，它们会自动显示在用户的收件箱中。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail.webp"
width="3593"
height="1443"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail_hu_2f0bcefa17416bf8.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/gmail_hu_d6a5aa2116503435.webp 1024w"
loading="lazy"
alt="图 2: 用户目标和步骤的流程图（见表 1）"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="597px"
>&lt;/p>
&lt;p>&lt;strong>产品重要性和优先级&lt;/strong>&lt;/p>
&lt;p>在转型到&lt;strong>产品支持模型&lt;/strong>时，请记住，SRE 团队在学习这种新方法时会面临更大的认知负荷。请通过战略性选择支持的方式和位置，来管理 SRE 团队的额外工作量。&lt;/p>
&lt;p>例如，你可能希望将大量支持集中在核心用户目标及其步骤上，并用高成本但准确的端到端 SLO 对其进行监控。在这种情况下，你还可以通过更便宜和传统的基于服务器的 SLO 支持较不重要的目标。&lt;/p>
&lt;p>安排 SRE 工作的优先级本身就是一个具有挑战性的问题。我们通过基于特定目标与产品关键绩效指标（KPI）之间的关系，来定义重要性来解决这个问题。这些指标通常已被用来评估停机的严重性，因此使用这些 KPI 来安排 SRE 任务的优先度，可以确保 SRE 跟上不断变化的产品需求。&lt;/p>
&lt;p>在 Google，我们使用特定产品的严重性指南（如 Google Cloud 重大事故 [6] 的场景）来指示停机对产品的严重性和影响。在 Google Ads 中，收入是评估停机严重性的关键指标，而在 YouTube 中，严重性指南包括用户观看视频的时间。参见邮件服务严重性示例，了解如何为典型的邮件服务定义严重性指南。这种分类主要用于衡量停机的影响，但也提供了一个明确的重要性信号，你可以将其应用于其他领域。&lt;/p>
&lt;p>严重性指南通常以对用户的影响为准，因此与用户目标和步骤密切相关。使用严重性指南，你可以根据严重停机对产品或功能的影响来组织用户目标和步骤，这被定义为产品重要性。参见邮件服务产品重要性示例，了解如何为典型的邮件服务定义产品重要性。&lt;/p>
&lt;p>这种重要性定义为优先安排 SRE 工作提供了明确的指导方针。确保整个基础设施有良好的基本覆盖，并制定评估更有针对性努力的投资回报的原则。考虑在关注不太重要的目标之前，你希望为最重要的目标实现什么级别的可靠性。&lt;/p>
&lt;p>通常，团队会陷入寻求一种新方法来解决可靠性问题的陷阱，然后试图将这种方法应用于所有场景，而不考虑适用性。然而，监控的初始化成本和在各处部署改进的持续维护成本的总和其实并不都合理的。例如，离线或批处理流量与互动用户流量相比，具有不同的可用性和延迟需求，因此每类流量需要不同的 SLO。&lt;/p>
&lt;p>更深入地了解对产品重要的内容还具有许多优势，从知道测试覆盖的重要性，到更好的事故响应。如果 SRE 知道问题很严重，他们会更快地反应和升级，从而更快地解决问题。&lt;/p>
&lt;blockquote>
&lt;p>交付物：一套与产品的用户目标和步骤一致的严重性和重要性定义。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>邮件服务严重性示例&lt;/strong>&lt;/p>
&lt;p>继续邮件服务产品定义示例，我们定义了产品的事故严重性分级如下：&lt;/p>
&lt;p>表 2: 事故严重性分级示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>严重性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>重大&lt;/td>
&lt;td>任何影响接收或发送邮件的情况。对核心功能有 &amp;gt;20% 的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等&lt;/td>
&lt;td>对核心功能有 &amp;gt;5% 的影响。对辅助功能有 &amp;gt;20% 的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>轻微&lt;/td>
&lt;td>对任何功能有 &amp;gt;0% 的影响。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在这个例子中，核心功能是用户需要用来阅读和撰写邮件的功能，例如认证系统或地址簿是辅助功能，例如拼写检查和自动补齐等，虽然增加了价值，但并不是产品使用的关键。&lt;/p>
&lt;p>影响的定义因产品而异，取决于独特的用户和业务需求。一些产品可能只关注技术影响，例如失败请求的百分比或延迟超过可接受阈值的请求百分比。其他产品可能关注收入损失、品牌损害或其他与业务 KPI 更直接相关的概念。无论为产品选择哪些标准，考虑以下关键原则是很重要的：&lt;/p>
&lt;ul>
&lt;li>结果集合应覆盖用户感知行为和业务优先级的所有方面。&lt;/li>
&lt;li>应能够以及时和可持续的方式确定事故的严重性。&lt;/li>
&lt;li>产品和工程领导层之间应对事故严重性非分级有广泛一致的意见。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>邮件服务产品重要性示例&lt;/strong>&lt;/p>
&lt;p>使用邮件服务严重性示例中的严重性分级，下面我们来定义产品的重要性如下：&lt;/p>
&lt;p>表 3: 产品重要性定义示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>重要性&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用户目标 &amp;gt; 步骤&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>关键&lt;/td>
&lt;td>负责邮件传输和投递的服务，是核心功能的关键（非可有可无）依赖项。&lt;/td>
&lt;td>撰写邮件、 阅读邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重要&lt;/td>
&lt;td>非关键的核心功能依赖项（优雅降级）或辅助功能的依赖项。&lt;/td>
&lt;td>撰写邮件 &amp;gt; 检查拼写 、 阅读邮件 &amp;gt; 过滤垃圾邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无&lt;/td>
&lt;td>所有其他服务，通常是内部或未发布的功能。&lt;/td>
&lt;td>所有未被识别为产品优先级的其他产品功能。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可以看到，重要性定义是围绕用户目标（例如撰写和发送邮件）建模的，而不是系统如何实现这些需求。一些具体步骤（例如检查拼写和过滤垃圾邮件）如果不被视为目标的关键组成部分，其重要性可能会有所不同。一些方面没有明确列出，例如身份验证，因为这是大多数目标中的一个步骤。&lt;/p>
&lt;p>&lt;strong>附加价值&lt;/strong>&lt;/p>
&lt;p>虽然 &lt;strong>度量性能&lt;/strong> 讨论了如何使用这个产品模型作为衡量产品性能的基础，但这不是该模型提供的唯一价值。对产品的用户目标有清晰的理解，可以在对用户需求的达成共识的基础上，协调测试策略、产品使用指标和其他生产问题。&lt;/p>
&lt;h3 id="3-度量性能">3. 度量性能
&lt;/h3>&lt;p>服务质量目标（SLO）是任何 SRE 团队工作的关键组成部分，提供反映系统可靠性的实际指标。《Google SRE 工作手册》[4] 是定义 SLO 和服务质量指标（SLI）的详细资源，并描述了如何使用它们，特别是针对服务。&lt;/p>
&lt;p>基于服务的 SLO 通常无法提供足够的产品覆盖。一些问题无法通过对某个服务器的监控覆盖，例如网络间或移动应用程序中的问题，或异步操作产生的问题等。&lt;/p>
&lt;p>当 SRE 团队发现基于服务的 SLO 存在不足时，他们会开始以多种方式扩展 SLO。从而提供更广泛产品覆盖的 SLO 主要有三类：服务 SLO、客户端埋点和端到端 SLO。&lt;/p>
&lt;p>&lt;strong>服务 SLO&lt;/strong>&lt;/p>
&lt;p>服务 SLO 是最常见的 SLO 类型。它们通过服务本身的指标进行监控，例如应用服务器日志或实时监控指标【译者注：包括后台服务埋点的 APM 数据】。也可以通过服务上层的日志进行度量，例如负载均衡器。你还可以使用黑盒监控（如拨测）结果来度量服务正常运行时间。&lt;/p>
&lt;p>以下是服务 SLO 的主要特征：&lt;/p>
&lt;p>表格 4: 服务 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>低成本&lt;/td>
&lt;td>服务 SLO 常见且广泛使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高信心&lt;/td>
&lt;td>服务 SLO 的数据在你的控制之下，可以提供非常高的可用性保证，例如对 SLO 数据的 SLO 保证。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>低延迟&lt;/td>
&lt;td>你可以以非常低的延迟收集和处理数据，从几秒到几分钟。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>覆盖范围狭窄&lt;/td>
&lt;td>这些 SLO 仅涵盖服务能看到的内容。通过在服务堆栈的更高层次度量 SLO，可以改善这一点。如果返回结果被服务视为成功，则 SLO 不受影响。然而，成功（正常）的结果并不总是保证结果有用（用户不受影响），例如返回空响应或向旧客户端返回不兼容的新数据。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>客户端埋点&lt;/strong>&lt;/p>
&lt;p>随着网络和移动应用程序的用户界面变得越来越复杂，越来越多的 SRE 团队开始直接支持这些界面。这可以通过直接从用户界面获取遥测数据来实现【译者注：包括真实用户监控-RUM】。&lt;/p>
&lt;p>这种遥测需要记录事件的日志或监控侧通道，这些事件可以处理并用于定义 SLO。&lt;/p>
&lt;p>这些数据通常需要批处理，并在后台发送，与交互式 RPC 请求分开。当应用程序关闭或失去网络连接时，一些遥测数据可能会丢失。所有这些因素都会影响数据的可靠性，预计会有一些个位数百分比的损失。此外，度量客户端设备上的信号还包括：测量设备的性能和互联网连接。&lt;/p>
&lt;p>然而，客户端 SLO 提供了用户实际体验到的产品性能的有用洞察信息。你可以使用这些 SLO 为连接较不可靠的用户提供更好的体验。当可以从用户界面度量开始和结束条件时，界面行为的复杂性，例如缓存、重试和异步 RPC 请求，都是透明的。&lt;/p>
&lt;p>在决定何时以及如何使用客户端 SLO 时，请考虑以下所有特征：&lt;/p>
&lt;p>表格 5 : 客户端 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>中等成本&lt;/td>
&lt;td>客户端 SLO 的埋点需要在用户界面中添加埋点探针功能以获取 RUM 数据，并需要一个系统来接收、处理数据，并设置 SLO 管理。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>低信心&lt;/td>
&lt;td>预期会有数据丢失。监控可能会受到性能较差的客户端设备和互联网连接的影响。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中等延迟&lt;/td>
&lt;td>信号通常从客户端设备批量传输。这些信号量数据需要进行额外的处理后，才能用于 SLO 管理，从而导致 15 分钟到 1 小时的延迟。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>广泛覆盖&lt;/td>
&lt;td>来自客户端设备的指标允许 SLO 直接衡量用户对产品性能和可靠性的体验。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>端到端 SLO&lt;/strong>&lt;/p>
&lt;p>有些产品功能和业务指标不能通过服务或客户端埋点直接度量。这些通常需要结合来自多个来源的数据，并涉及异步任务。&lt;/p>
&lt;p>例如，用户可能要求生成报告。用户界面发送一个 RPC 请求，该请求在报告被排入系统队列后成功。但这并不意味着报告成功生成。某些后台系统从队列中取出报告并生成它，或未能生成。要度量报告是否成功生成，你需要将用户的原始 RPC 请求与最终的报告生成结果结合起来。&lt;/p>
&lt;p>端到端 SLO 通常根据用户交互来度量其 SLI，因此可以提供相当准确的结果。&lt;/p>
&lt;p>实现端到端 SLO 需要相当多的工程工作量，因为你需要完成以下任务：&lt;/p>
&lt;ul>
&lt;li>确定度量 SLI 所需的数据集。&lt;/li>
&lt;li>采集和存储所需的数据。&lt;/li>
&lt;li>汇总并结合来自多个来源的数据。&lt;/li>
&lt;/ul>
&lt;p>端到端 SLO 的主要特征如下：&lt;/p>
&lt;p>表格 6: 端到端 SLO 特征&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特征&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>非常高的成本&lt;/td>
&lt;td>端到端 SLO 的埋点可能需要数月的工程工作。每个 SLO 都可能带来独特的工程挑战和约束。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高信心&lt;/td>
&lt;td>你可以使用多个数据源，并且可以通过交叉引用来跟踪任何数据源中的丢失数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>高延迟&lt;/td>
&lt;td>结合来自多个来源的信号可能既耗时又复杂。持续处理新数据成本高，因此通常优先选择离线批处理解决方案（通常每天或每几小时运行一次）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>覆盖范围窄&lt;/td>
&lt;td>端到端 SLO 旨在覆盖非常特定的功能或业务指标，并且以最高的信心度进行。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>优先级&lt;/strong>&lt;/p>
&lt;p>网络、移动应用程序和其他互联网连接设备变得越来越复杂，这推动了微服务架构的兴起，简化和扩展了运行现代应用程序所需的服务。&lt;/p>
&lt;p>全球服务器数量呈指数级增长，这在 GCP 等公共云提供商的增长中可以看到。然而，全球软件工程师的数量增长较为缓慢。&lt;/p>
&lt;p>需要认识到，每个 SLO 都有维护其底层数据，以及响应 SLO 失效的持续成本。某些产品功能也可能会随着时间的推移变得不那么重要，而其他功能可能在产品的整个生命周期中保持关键地位。&lt;/p>
&lt;p>软件工程师和站点可靠性工程师需要优先考虑哪些 SLO 仍然相当重要，它决定了 SRE 要在哪些方面投入时间以提高产品的可靠性。&lt;/p>
&lt;p>&lt;strong>产品 SLO&lt;/strong>&lt;/p>
&lt;p>产品级 SLO 是围绕用户实现目标的步骤定义的。通过利用&lt;strong>用户目标步骤&lt;/strong>信息注释（编者注：打标签或者元数据）和扩展，任何 SLO（如服务、客户端或端到端）都可以转换为产品级 SLO。&lt;/p>
&lt;p>进行将 SLO 与用户目标相互关联的工作看似比较简单，却能够使你理解 SLO 对用户的意义何在，以及它对产品的重要性。&lt;/p>
&lt;p>当 SLO 是以服务和基础设施为框架时，设置目标或延迟阈值存在一定挑战。但当 SLO 带有了用户目标的附加背景信息时，度量的内容会变得更加清晰。例如，与其问“用户数据服务器上的地址查找服务应该有多可靠和快速？”，不如问“用户在查找电子邮件地址时可以容忍多少错误，这些地址应该多快返回？”&lt;/p>
&lt;p>结合产品功能的关键性，你可以验证 SLO 设置是否合适，且不过于严格。这种方法为你提供了更宽的 SLO 目标范围，反应出了什么对产品重要。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4.webp"
width="814"
height="325"
srcset="https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4_hu_faf1c015c8c71e03.webp 480w, https://martinliu.cn/blog/product-focused-reliability-for-sre/all-4_hu_4f97212a4a26cea0.webp 1024w"
loading="lazy"
alt="图 3: 产品 SLO 如何围绕用户目标和步骤定义的示例"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="601px"
>&lt;/p>
&lt;blockquote>
&lt;p>交付物：列出覆盖不同 SLO 类型（可用性、延迟）和监控方法（服务端、客户端、端到端）的产品 SLO 的优先级排序清单。实施最高优先级的 SLO，并将较低优先级的 SLO 创建为待办事项，稍后再进行优先级排序。&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>遥测&lt;/strong>&lt;/p>
&lt;p>在实施产品 SLO 之前，必须先采集相关指标（也称为 SLI），从而跟踪相关的产品功能。为开发出这些指标，需将产品 SLO 模型的概念世界与实际基础设施生产环境对应起来。这是实施产品可靠性模型的关键价值驱动因素。&lt;/p>
&lt;p>例如，团队对 SLO 性能的理解曾经仅限于“数据库写入的可用性为 98%”。而专注于产品的 SLO 需要说明清楚，这 2% 的错误是否导致了 100% 的“保存电子邮件草稿”步骤的失败。&lt;/p>
&lt;p>将概要的可用性度量指标转化为：准确且可操作的产品性能指标的关键在于，理解每个请求所支持的产品功能。除了简单的可观测性需求外，功能请求级信息还可用于流量路由和负载分发策略，确保低优先级功能不会损害更关键的功能。&lt;/p>
&lt;p>虽然你可以通过多种方式将请求与产品功能关联起来，但有需要考虑这样两种主要的方式：客户端注释和服务器端注释。&lt;/p>
&lt;p>表 7: 客户端注释和服务器端注释的比较&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注释类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>客户端注释&lt;/td>
&lt;td>更新用户界面（网页和移动应用程序），将用户目标步骤的元数据附加好，并传播到后端服务的 RPC 请求上。这在技术上具有挑战性，需要 UI 团队协助设计，并最终负责维护这些注释。&lt;/td>
&lt;td>使用客户端注释是最准确的映射用户通过界面实现目标的方法。注释是由单个的 RPC 请求携带传播的，因此具有最高的保真度。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>服务器端注释&lt;/td>
&lt;td>分析后端服务器所接收到的 RPC 请求，并推断用户的目标步骤。&lt;/td>
&lt;td>当修改客户端的成本太高或你不拥有客户端（如 REST 服务）时，必须使用此方法。服务器端注释不如客户端注释准确，因为服务器需要做出许多假设来推断 RPC 请求所服务用户步骤（功能）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可能无法注释所有流量。根据产品的关键性分级，你可以决定哪些地方值得添加注释；你可能只注释那些最关键的用户目标。&lt;/p>
&lt;p>注释一个 RPC 请求后，你的服务需要在整个基础设施堆栈中传播该注释。这有助于你在许多 SRE 工具和流程中理解用户的目标及其重要性，包括以下内容：&lt;/p>
&lt;ul>
&lt;li>在监控仪表板和应用程序日志中，通过用户目标步骤了解问题及其影响。&lt;/li>
&lt;li>快速确定哪个用户目标受到了问题影响，从而确定事故的严重性。&lt;/li>
&lt;li>识别只考虑特定的用户目标步骤的服务质量目标 (SLO)，并忽略不重要请求（如批处理和测试流量）。&lt;/li>
&lt;/ul>
&lt;h3 id="4-可靠性管理">4. 可靠性管理
&lt;/h3>&lt;p>现在你已经确定了利益相关者、用户目标和步骤、关键性定义以及产品 SLO，你已准备好支持产品。&lt;/p>
&lt;p>我们建议你从小规模开始支持一个产品或服务。可以先为一些 SLO 启动某一个目标或步骤，然后迭代扩展团队的责任和范围。支持产品是一个持续进行的过程。在每个阶段，你将与利益相关者一起确定在下列投资领域之间的权衡：&lt;/p>
&lt;ol>
&lt;li>改进支持目标集的指标，以增加这些目标符合预期的信心。&lt;/li>
&lt;li>扩展支持目标集，确保产品的所有方面都符合预期。&lt;/li>
&lt;li>解决由投资领域 #1 和 #2 产生的指标所突显的性能差距。&lt;/li>
&lt;/ol>
&lt;p>确保在所有三个领域都有所投资。在领域 #1 和 #2 投资不足会导致团队错过领域 #3 中最有影响力的问题。另一方面，仅在领域 #1 和 #2 投资不会导致对用户和组织业务目标有帮助的改进。使用在关键实施步骤中收集和产生的信息，帮助组织确定在每个领域投资多少。&lt;/p>
&lt;p>&lt;strong>纳管&lt;/strong>&lt;/p>
&lt;p>纳管是 SRE 团队评估其将承担责任的产品或服务的接手的过程。此过程通常包括了解产品或服务以充分支持，并确保其符合 SRE 团队定义的一系列要求。&lt;/p>
&lt;p>在 SRE 团队承担产品的用户目标和步骤责任之前，团队需要定义一个正式的纳管流程，以确保以下内容：&lt;/p>
&lt;ul>
&lt;li>目标和步骤足够重要。&lt;/li>
&lt;li>步骤映射到所使用的服务，并在这些服务中进行了注释。&lt;/li>
&lt;li>潜在的 SLO 已被识别，并在整体产品优先级中进行了优先排序。&lt;/li>
&lt;li>SLO 稳定，支持它们不会对团队或服务所有者构成过度负担。&lt;/li>
&lt;/ul>
&lt;p>SRE 团队推动这个过程，与相关利益相关者会面，并与产品团队合作解决任何不足之处。&lt;/p>
&lt;p>&lt;strong>迭代&lt;/strong>&lt;/p>
&lt;p>在完成一个目标和其部分步骤的纳管过程之后，你可以通过以下方式迭代和改进团队的覆盖范围：&lt;/p>
&lt;ul>
&lt;li>纳管更多的用户目标和步骤。&lt;/li>
&lt;li>优化已经纳管的用户目标和步骤的覆盖范围。&lt;/li>
&lt;li>改进工具，以更好地支持用户目标和步骤。&lt;/li>
&lt;/ul>
&lt;p>我们建议不要试图支持每一个用户目标，而是为你支持的产品中最重要的方面设定一个门槛。同样，我们建议你决定哪些用户目标使用更昂贵的 SLO 方法进行埋点。一些用户目标可能只需要基于服务的 SLO，而其他用户目标可能会受益于客户端或端到端的埋点。&lt;/p>
&lt;p>最后，为了确定在哪里和何时投资改进工具，请评估支持的可持续性。工具不足会导致扩展受限，使团队在支持目标集的无效分类、调试和缓解工作中不堪重负。&lt;/p>
&lt;p>&lt;strong>离岗&lt;/strong>&lt;/p>
&lt;p>为了确保团队专注于产品的正确部分，我们建议团队定期重新评估支持的用户目标、步骤和 SLO。一些 SLO 可能随着时间的推移变得不那么重要，而一些用户目标可能会变得过时。&lt;/p>
&lt;p>维护一个所有支持的用户目标、步骤和 SLO 的优先列表是很重要的。使用此列表来验证团队是否在最重要的领域上花费时间和资源。当列表中的项目不再重要（或远不如不支持的项目重要）时，请考虑将它们离岗，以便团队可以重新专注于产品的最重要方面。&lt;/p>
&lt;p>&lt;strong>服务器支持&lt;/strong>&lt;/p>
&lt;p>在关注产品的同时，不能忽视支撑产品的基础设施服务器。始终需要确保服务器及其提供的服务保持健康。无论服务器对产品有多么重要，确保服务器健康是必要的，因为你花费了资源来运行它们。&lt;/p>
&lt;p>在 Google 专注于产品之前，提出了提供基础支持的概念。基础支持是一组由 SRE 定义的标准和最佳实践，使他们能够在不了解服务器具体用途的情况下为任何服务器提供一般支持。例如，基础支持可以要求某些库和框架提供常见功能，如负载平衡、服务间通信（RPCs），甚至是由主要负责服务器的开发团队拥有的最小 SLO。在这种情况下，平台而不是 SRE 提供基础可靠性支持，从而使 SRE 能够专注于不包含在基本策略中的更具影响力的可靠性改进。&lt;/p>
&lt;p>对于最关键的基础设施，可能需要额外的支持，但这不是强制性的。如果 SRE 主要负责最关键的用户目标，关键基础设施中的重大故障将导致产品级别 SLO 失败。此外，基础设施层面上的故障如果不影响产品 SLO，将不会提醒 SRE，可以由拥有该服务的开发团队处理（如未发布的功能和不太关键的批处理服务的问题）。&lt;/p>
&lt;p>将 SRE 支持集中在产品 SLO 上而不是服务上，可以使 SRE 支持更多产品，并将这种支持与产品最重要的部分对齐。&lt;/p>
&lt;h2 id="产品可靠性模型的前提条件">产品可靠性模型的前提条件
&lt;/h2>&lt;p>产品导向支持模型并不适用于所有用例。在实施前，建议你评估项目是否满足以下要求，以确定模型的适用性。&lt;/p>
&lt;p>&lt;strong>明确的角色和责任&lt;/strong>&lt;/p>
&lt;p>该模型需要比传统以服务为导向的参与，需要牵扯更多的利益相关者。传统的 SRE 参与通常局限于工程团队，而产品导向的参与则需要与更多角色（如 PM 和 UX）协作。与利益相关者进行有效的互动需要明确的角色和责任分工。即使是加载主页这样简单的操作，也需要有人明确速度标准。如果无法达成共识，就无法用这些结果来度量和管理产品的可靠性。&lt;/p>
&lt;p>&lt;strong>用户目标和步骤定义&lt;/strong>&lt;/p>
&lt;p>正如在“建模产品”中提到的，采用产品导向支持模型需要明确的用户目标和步骤定义。&lt;/p>
&lt;p>SRE 可以尝试为现有产品重新调整和推导用户目标，但失去了组织级别的支持，它的许多其他优势也将丧失。如果决策者不接受产品的定义，也不及时维护，它将很快过时且不准确。&lt;/p>
&lt;p>因此，拥有正确的利益相关协作，并维护好产品模型是关键要求。&lt;/p>
&lt;p>&lt;strong>易于维护的服务器&lt;/strong>&lt;/p>
&lt;p>服务器支持需要提供产品支持模型所需的详细信息。&lt;/p>
&lt;p>基本要求是单个服务器必须相对容易支持。这需要足够的标准和框架，使开发团队能够自行部署和维护，并在必要时由 SRE 提供帮助。&lt;/p>
&lt;p>如果 SRE 大部分时间都在支持某个服务器，他们将没有精力关注产品级别的问题。&lt;/p>
&lt;p>&lt;strong>与用户功能的直接映射&lt;/strong>&lt;/p>
&lt;p>必须尽可能在接近用户的地方度量用户目标和步骤（例如，在用户界面或处理用户界面请求的服务器中），因此更紧密地与堆栈入口点的服务器对齐。&lt;/p>
&lt;p>提供服务API的基础设施服务通常解决特定问题，可能与用户目标无关。例如，数据存储服务可能有一个低级API，仅包含与用户目标无关的简单加载和存储命令。&lt;/p>
&lt;p>以下是将产品支持模型应用于基础设施服务的几种选项：&lt;/p>
&lt;p>表 8: 基础设施服务的产品支持模型的应用选项&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选项&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>用例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>将基础设施客户端视为用户，并为基础设施的API定义用户目标和步骤。&lt;/td>
&lt;td>这是最不理想的选项，因为它等同于没有用户目标的产品。然而，在某些情况下，基础设施本身可以被视为一个产品。在这些情况下，产品决策者必须定义该产品，而不是SRE的责任。&lt;/td>
&lt;td>可能适用于基础设施本身被视为产品的情况。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配置基础设施客户端，根据其终端用户的输入提供用户目标信息。&lt;/td>
&lt;td>此选项通过以下方式帮助基础设施团队：提供有关终端用户目标的有价值信息；帮助基础设施团队识别对终端用户重要的RPC请求。&lt;/td>
&lt;td>提供有关终端用户目标的有价值信息；识别对终端用户重要的RPC请求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不采用产品聚焦方法。&lt;/td>
&lt;td>基础设施服务由其服务API定义，可能会从传统的服务支持模型中受益。如果你希望获得产品支持模型的好处，考虑通过其他方式实现这些好处。&lt;/td>
&lt;td>传统的服务支持模型可能更适合基础设施服务。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>产品支持模型为 SRE 团队提供了一种框架，使他们能够将支持工作集中在对用户和业务最重要的方面。该模型使 SRE 团队与组织的其他团队保持一致，并支持统一的术语和目标。&lt;/p>
&lt;p>该模型通过帮助 SRE 团队理解产品的关键点，并利用这些知识更好地填补服务支持模型的空白，解决了传统服务支持模型的许多问题。最终，产品支持模型让 SRE 团队专注于用户，确保产品满足最终用户的实际需求。&lt;/p>
&lt;h2 id="参考文献">参考文献
&lt;/h2>&lt;p>[1] Ulwick, A.W. 和 Osterwalder, A. (2016). Jobs to be done: Theory to practice. [在线] Idea Bite Press. 可在： &lt;a class="link" href="https://jobs-to-be-done-book.com/" target="_blank" rel="noopener"
>https://jobs-to-be-done-book.com/&lt;/a>&lt;/p>
&lt;p>[2] chang, austin (2017). What To Do If Your Product Isn&amp;rsquo;t Growing. [在线] Initialized Capital. 可在： &lt;a class="link" href="https://medium.com/initialized-capital/what-to-do-if-your-product-isnt-growing-7eb9d158fc" target="_blank" rel="noopener"
>https://medium.com/initialized-capital/what-to-do-if-your-product-isnt-growing-7eb9d158fc&lt;/a>&lt;/p>
&lt;p>[3] Beyer, B., Jones, C., Petoff, J. 和 Murphy, N. (2016). Site reliability engineering: How Google runs production systems. Sebastopol, Ca: O&amp;rsquo;reilly Media.&lt;/p>
&lt;p>[4] Beyer, B., Murphy, N., Rensin, D.K., Kawahara, K. 和 Thorne, S. (2018). The site reliability workbook: Practical ways to implement SRE. Cambridge O&amp;rsquo;reilly.&lt;/p>
&lt;p>[5] Kalbach, J. (2020). The jobs to be done playbook: Align your markets, organizations, and strategy around customer needs. New York: Two Waves Books.&lt;/p>
&lt;p>[6] Google Cloud. (n.d.). Incidents and the Google Cloud Service Health Dashboard | Support Documentation. [在线] 可在： &lt;a class="link" href="https://cloud.google.com/support/docs/dashboard#major_incident" target="_blank" rel="noopener"
>https://cloud.google.com/support/docs/dashboard#major_incident&lt;/a> [访问时间：2023 年 4 月 20 日]。&lt;/p>
&lt;p>[7] Wikipedia Contributors (2019). Responsibility Assignment Matrix. [在线] Wikipedia. 可在： &lt;a class="link" href="https://en.wikipedia.org/wiki/Responsibility_assignment_matrix" target="_blank" rel="noopener"
>https://en.wikipedia.org/wiki/Responsibility_assignment_matrix&lt;/a>&lt;/p>
&lt;p>❤️ Photo by Pavel Danilyuk: &lt;a class="link" href="https://www.pexels.com/photo/group-of-people-discussion-on-a-wooden-table-7868970/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/group-of-people-discussion-on-a-wooden-table-7868970/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第六章：不限于谷歌</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/</link><pubDate>Sat, 04 May 2024 01:01:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter6/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第六章：不限于谷歌" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>为完善本报告中的观点，我们与来自不同行业的三位 SRE 领导者进行了交谈，他们在过去几年中以各种形式采用了 SRE。每个人都有关于采用 SRE 的独特故事以及他们可能会做出不同选择的见解，此外还有关于在他们的行业或组织中使 SRE 工作的洞见。&lt;/p>
&lt;h2 id="医疗保健--joseph">医疗保健 // Joseph
&lt;/h2>&lt;p>Joseph Bironas 自从担任 Google SRE 领导者后，一直在多个医疗保健组织中领导 SRE 的采用。因此，他能够提供一个行业层面的观点，说明在这一领域实施 SRE 如何与其他技术和初创文化不同。由于其生命攸关的工作流程的性质，可靠性通常是首要考虑的问题。然而，医疗保健行业面临着组织模式、文化、预算和监管要求方面的特定挑战。&lt;/p>
&lt;p>在与一家专注于利润空间极窄的医疗设备制造及 FDA 监管领域的公司合作后，Joseph 观察到，虽然可靠性被视为一种需求，但在该行业中 SRE 的成本效益却未被充分理解。因此，SRE 和基础设施团队可能会发现自己成为“全能工程”，被纳入 IT 成本中心，职责范围大幅增加。&lt;/p>
&lt;p>你可能会问，将 SRE 团队归属在 IT 成本中心下有什么问题？当企业习惯于通过广泛的 IT 框架（如 ITIL）进行管理时，很难对 SRE 做出价值判断，而 SRE 只是 ITIL 的一部分——ITIL 还处理像硬件采购等 SRE 不涉及的事情。更重要的是，管理所有公司和生产 IT 的 CIO 并不是做出软件系统可靠性判断的最佳人选。相反，归属于专注于软件的领导者（例如工程高级副总裁（SVP）或 CTO）更为合理。&lt;/p>
&lt;p>该领域的组织往往面临着希望采用 SRE 而尚未采用 DevOps 实践的陡峭曲线。例如，由于涉及法规和全组织合规控制的复杂性，他们每月只发布一次软件，并且几乎没有 CI/CD 自动化。许多医疗保健组织根本不愿快速部署：对于某些客户来说，快速部署意味着测试不足或安全性不足。&lt;/p>
&lt;p>实施变革（如转向 SRE）的意愿在整个行业中差异很大，可能是由于领导优先事项和风格的不同。Joseph 描述了一个团队能够派遣设计师到现场收集需求，建立新工作流程，通过更好的产品革新护理的场景。在另一个场景中，一个不同的团队只被激励比现任者做得更好，这不需要同样的投资水平。在第三个场景中，一个团队被惯性困扰，在做出任何变革或投资之前等待自上而下的命令。根据 Joseph 的经验，更进步的领导往往对客户对可靠性的需求更敏感。&lt;/p>
&lt;p>与初创文化相比，这些团队的一些变革非常缓慢。一个团队质疑他们是否能在 18 个月内完成“任何事情”（如采用 SRE）——对于初创企业来说，这段时间几乎是永恒的。在考虑这种节奏的组织中的重大变革时，你必须有模型来帮助理解计划的投资回报。了解 J 曲线（见屋顶射击与登月计划（roofshots versus moonshots））在这里很重要，以避免在低谷中放弃努力，错过真正的回报。Joseph 建议每季度与团队进行检查，以保持进展的稳定节奏。他建议在专注于 SLO 之前，从事件响应开始转向 SRE，并通过事件评审（例如，持续六个月）建立持续学习的循环。为了进行“真正的投资”而不是无声地失败，你可能需要寻求高管的赞助，实施顶层 OKR，或专注于使努力在你的组织中“真实”的任何事情。关键不仅是从这个循环中学习，还要将所学付诸实践。&lt;/p>
&lt;p>另一个在医疗保健行业中常见的错误是忽视 SRE 的“软件方面”，当团队习惯于专注于传统运维工作时，认为“通过软件可以大幅减少 IT 支出”这种核心价值通常是领导者所陌生的概念，甚至可能被一些根深蒂固的系统管理员和操作人员故意抵制或破坏。忽视这一方面会使 SRE 显得非常无效。软件工程也很困难且昂贵。即使你购买了商业 SRE 相关工具（尽管有多年的大量贡献者，但这些工具仍不完美），你也无法逃避集成工作，这在很大程度上是一项软件工程工作。&lt;/p>
&lt;p>为可靠性制定预算也可能是一个问题。Joseph 指出，“这个行业没有 [Google 在建立 SRE 时拥有的] 广告收入曲线。” 这影响了他们像 Google 那样专业化和投资的能力，导致他们更多地依赖商业解决方案。业务预算和规划通常仍然采用瀑布模式，这对 SRE 工作来说是一个挑战——探索、理解和设计新解决方案所需的时间不适合瀑布式工作方式。&lt;/p>
&lt;p>从中得到的启示是，这些问题可以适用于所有行业。Joseph 分享了一个故事，说明即使是不完美的尝试也可以是一个有价值的起点。在他曾合作的一家公司中，领导层希望有一个极其简单的错误预算版本。他们没有选择适合其关键用户旅程 (CUJ) 的 SLO，而是为所有内容设定了一个单一的 SLO（99.95% 可用）。这个目标虽然简单易懂，但却削弱了整个工程团队对 SLO 概念的信心。状态和无状态应用程序、批处理和实时应用程序都采用相同的 SLO，这最终是无用的，并削弱了对该技术的信心。这也导致了毫无意义的错误预算，因此这些预算同样被削弱，任何试图使用这些错误预算的过程也被削弱。&lt;/p>
&lt;h2 id="零售业--kip-和-randy">零售业 // Kip 和 Randy
&lt;/h2>&lt;p>The Home Depot（THD）的 Commodore “Kip” Primous 和 Randall Lee 分享了这家大型零售商如何采用 SRE 的经验、成功之处以及面临的一些挑战。THD 是 Google Cloud Platform（GCP）的早期大型零售客户之一，在采用云服务的过程中，他们也遵循最近出版的 SRE 书中的原则采用了 SRE。六年后，他们当初期望构建的与现在存在的截然不同。&lt;/p>
&lt;p>Kip 最初是“点商”业务部门的可靠性工程（RE）经理，负责 THD 电子商务网站“浏览堆栈”的工作。Randy 比 Kip 早加入 THD，他们分享了一个共同的 SRE 目标：通过更好的平台提高弹性。他们最初考虑建立自己的云和数据中心，但后来评估了各种云服务提供商，并最终选择了 GCP。在向云迁移的过程中，唯一成功的方法是同时改变他们的工作方式，采用类似 SRE 或“DevOps 2.0”的方法。&lt;/p>
&lt;p>最初，THD 的目标是摆脱庞大的单体商业服务。Aurora 项目由副总裁资助并推动，目的是实现规模经济，减少运营团队的规模，将团队从数百名承包商转变为显著减少的全职员工。还有一个普遍的意图是提高可靠性，减少对组织内部其他可能不完全一致的团队的依赖。点商团队希望能够以“互联网速度”运作。&lt;/p>
&lt;p>对齐非常重要。在迁移到云之前，每次部署都“像发射航天飞机：需要多年努力的协调”。团队觉得目前的 DevOps 模式在 THD/点商内部已经走到了尽头。通过引入 RE，团队能够在新平台和新的职责下采用新的工作模式，并有能力解决任何与可靠性相关的问题。他们雇佣了很多云原生工程师，并尽可能地实现自动化。他们能够突破限制现有 DevOps 团队的边界。&lt;/p>
&lt;p>从 2015 年到 2017 年，SRE 团队能够快速独立地行动，因为他们在新的云基础设施上使用现代工具和硬件工作。然后在 2018 年，企业团队赶上了步伐——SRE 不再是唯一在 GCP 上工作的团队。令人欣慰的是，双方在企业团队更新传统模型时实现了融合——例如，承认在新的短暂虚拟机环境中不应再跟踪单个机器的补丁。通过一系列建设性的对话将团队聚集在一起，点商 RE 团队能够与新成立的集中企业团队合作，帮助建立更符合企业需求的流程和更好的安全准则。此外，他们能够将 GCP 平台的大部分管理工作（如计费、权限、配额等）从 RE 团队转移到企业团队。&lt;/p>
&lt;p>在 THD 进行 SRE 之旅的过程中，Kip 和 Randy 观察到了一些模式和经验，这些经验和模式可能适用于其他行业。让其他团队采用 SRE 概念的过程花了几年时间，并且是循环进行的：推动合规自动化、成本改进、访问控制和网络安全的改进。每次互动都需要大量讨论和教育。在故障或停机很少的平静时期，紧迫感可能来自外部事件。Equifax 故障或 Akamai 或 Facebook 的 DNS 问题可能会引发新一轮的可靠性改进。&lt;/p>
&lt;p>高管的支持对 SRE 在 THD 内部的成功采用至关重要。在点商团队通过使用 SRE 模型成功迁移到云后，SRE 角色在公司内变得与高绩效同义。许多其他团队希望复制这一模型，有些团队即使没有明确的 SLO 要求也被迫实施 SRE。然而，并不是所有团队都像点商团队那样幸运，可以从零开始并采用云原生。这导致一些团队难以认识到 RE 团队所带来的价值，有时会误解角色和责任的期望。当一个团队与组织中的“非官方” RE 互动时，这种模糊性可能会导致问题，因为这些 RE 可能无法在同一水平上工作或使用与原始团队相同的原则。例如，有些人“只是按按钮”，而没有真正的自动化琐事计划。这样的经历会让团队对未来与其他 RE 团队的合作失去兴趣。&lt;/p>
&lt;p>Kip 还警告说，如果每隔几年没有新的 SRE 启发的努力，可靠性标准会退化。RE 团队打破了壁垒，但这些壁垒正在重新建立。团队认为，“可靠性不是我的问题，这是 RE 的问题！”这传递了错误的信号。Randy 补充说，一个运行良好的 RE 团队如果没有不断强化和教育 RE 的实践和原则，以及明确的角色和责任定义，就会倒退。&lt;/p>
&lt;p>目前，THD 正在“加倍”投入 RE，但如果变革没有坚持 SRE 的原则，这实际上可能是一种反模式。SRE 不是解决所有问题的万能药，但当一个团队看到 SRE 的成功时，很难不想将 SRE 应用于各个方面。最近，Kip 被要求在分销中心和供应商支持的物理硬件上运行 RE，这并不适合 SRE。虽然总是有机会提高这些系统的可靠性，但在非云原生环境中应用许多 RE 实践更具挑战性。对于某些业务领域，可能更好的前进路径不是 SRE，而是价值流图（Value Stream Mapping）或精益（Lean）等实践。为了避免这些问题，更有意义的是将 SRE 作为“拉动”模型，而不是“推送”模型：不要强迫团队使用 SRE，而是将其作为一种服务提供，让团队自主选择。&lt;/p>
&lt;p>Kip 和 Randy 的最大建议是专注于高管教育，并认识到拥护者的价值。如果没有自上而下的支持，很难为任何有意义的变革筹集资金。通过产品开发团队获得资金会导致这些团队“从不想支付这笔税”的现象。每当他们支付这笔税时，只希望 SRE 直接为他们的产品工作并朝着他们的产品目标努力。&lt;/p>
&lt;p>在 THD，最初有一位高级领导倡导创建和发展点商 RE 团队以及其他领域的 RE 团队。THD 现在处于一个尴尬的境地，有许多 RE 团队在不同的项目上工作，应用 SRE 原则的能力各不相同。Randy 和 Kip 认为，拥有一个更高级的领导者可能会改善 THD 的状况。一个负责所有 RE 角色的可靠性副总裁（VP of Reliability）可以提供规模经济。没有中央 RE 组织，SRE 角色可能会演变成不同组织中的 SRE 完全做着不同的事情，并遵循不同的标准和原则。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>我们希望这份报告能够为企业如何采用 SRE 以及可能面临的挑战提供一些见解。我们认为，如果您清晰地定义 SRE 原则，将这些原则映射到具体的实践和能力，并优先培养团队内的成长，成功的机会会更高。我们还展示了一些团队在企业内部启动 SRE 实践的过程中所经历的例子，以及他们所面临和克服的具体挑战。&lt;/p>
&lt;p>我们相信这份报告将有助于您采用 SRE，带来更可靠的技术体验。希望通过这种采用，运营团队可以变得更可持续，服务更具扩展性，开发速度得到提升。&lt;/p>
&lt;p>“愿所有请求顺利，警报永不响起。”&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;p>James Brookbank 是 Google 的一名云解决方案架构师。解决方案架构师通过解决复杂的技术问题并提供专业的架构指导，帮助 Google 的客户更轻松地使用云服务。在加入 Google 之前，James 曾在多家大型企业工作，专注于 IT 基础设施和金融服务。&lt;/p>
&lt;p>Steve McGhee 是一位可靠性倡导者，帮助团队了解如何最佳地构建和运营世界级的可靠服务。在此之前，他在 Google 担任了超过 10 年的 SRE，学习如何在搜索、YouTube、Android 和云中扩展全球系统。他曾在加利福尼亚、日本和英国管理多个工程团队。Steve 还曾在一家加利福尼亚的企业工作，帮助他们向云迁移。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第五章：积极培育成功</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/</link><pubDate>Fri, 03 May 2024 23:55:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter5/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第五章：积极培育成功" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一旦你决定 SRE 值得在你的组织中推行并决心投资于它，确保你的投资取得成功至关重要。在系统中引入变革总是困难的，但要让这种变革持续下去则更难。以下是一些关于如何在你的组织中保持 SRE 运作的建议。&lt;/p>
&lt;h2 id="思考要大行动要小">思考要大，行动要小
&lt;/h2>&lt;p>“如果你不能衡量它，你就不能管理它”这句话经常与 Edwards Deming 联系在一起。然而，完整的引用是“认为你不能衡量它就不能管理它，这是一个代价高昂的谬论。”SRE 的核心是一种以指标驱动的方法。然而，无论有多少 SLO 或 SLI，都无法帮助你理解你的 SRE 实践是否有效并与企业战略一致。你必须通过持续的实验和学习来发现这一点。&lt;/p>
&lt;p>在前面的章节中，我们要求你“思考要大”，但在培养成功方面，你应该“行动要小”。任何形式的大规模变革都需要通过迭代和渐进的方式实现，SRE 也不例外。但有一个明显的警告——如果你的时间线太短，你将无法取得有意义的改变，所以要准备好找到平衡。&lt;/p>
&lt;p>Google 内部使用目标和关键结果 (OKR) 来共享目标和对齐团队，即使在实现这些目标的方法不总是明确时。你的组织可能有自己的流程来实现这一点，但必须扩展到包括明确的迭代和定期审查 SRE 团队的各项指标（如琐事、警报、软件工程影响、容量计划等）。由于采用的非线性特性，你的进展总会有挫折，因此这也应该视为过程中的正常部分。&lt;/p>
&lt;h2 id="文化比战略更重要">文化比战略更重要
&lt;/h2>&lt;p>Google 的一个假设，即 SRE 故事中的一个关键未书写部分，是内在的创新性 Google 文化。Google 还分享了我们进行的研究来描述这些属性。事实证明，团队成员是谁远不如团队成员如何互动、安排工作和看待他们的贡献重要。&lt;/p>
&lt;p>我们了解到，有五个关键动态使成功团队在 Google 中与其他团队区分开来：&lt;/p>
&lt;ul>
&lt;li>心理安全 : 我们是否能够在团队中冒险而不感到不安全或尴尬？&lt;/li>
&lt;li>可靠性 : 我们是否可以指望彼此按时完成高质量的工作？&lt;/li>
&lt;li>结构和清晰度 : 我们团队的目标、角色和执行计划是否清晰？&lt;/li>
&lt;li>工作的意义 : 我们是否在做对每个人来说都非常重要的事情？&lt;/li>
&lt;li>工作的影响 : 我们是否从根本上相信我们正在做的工作很重要？&lt;/li>
&lt;/ul>
&lt;p>我们看到的许多关于 SRE 采用的典型问题，如成本影响、特定行业关注、技术债务等。然而，这一发现的最好之处在于，像所有好的事物一样，这五个动态基本上是免费的！无论你的行业或情况如何，都可以优先考虑这些因素。Google 的高绩效团队依赖这些文化规范使 SRE 成功，使 SRE 成为这种文化基础上的自然行为。&lt;/p>
&lt;h2 id="忽视文化不会有帮助等待也无济于事">忽视文化不会有帮助；等待也无济于事
&lt;/h2>&lt;p>听我们谈论文化对成功采用 SRE 至关重要，通常令人沮丧，这暗示你应该等到文化达到一定程度后才能采用 SRE。套用一句流行的谚语，最好的改变文化的时间可能是 20 年前，但第二好的时间是现在。除了可靠性问题，不让你的文化对可靠性反馈做出响应还有其他重大后果。&lt;/p>
&lt;h2 id="培养-sre-的含义是什么">培养 SRE 的含义是什么？
&lt;/h2>&lt;p>要培养和发展 SRE，需要考虑一些关键活动。&lt;/p>
&lt;ol>
&lt;li>次线性扩展 : 我们之前提到过这一点，但需要澄清，这不是“用更少的资源做更多的事”，而是通过自动化和持续改进的文化来改变我们处理可靠性问题的方式。SRE 明确设计不是通过增加人数来扩展的，因此要抵制在现有软件流水线中增加更多人的诱惑，而是用 SRE 来自动化或省略这些步骤。&lt;/li>
&lt;li>建立和保留可持续的、快乐的团队 : 尽管科技行业已经从项目导向转向产品导向，但仍然很常见的是将个体视为可以随意在不同活动之间调动的可替换资源。这直接冲突于我们的文化建议。不要指望这样做还能在 SRE 上取得成功。&lt;/li>
&lt;li>承认 SRE 不是静态的——它本质上是一个动态角色，会随着时间成长 : 减少琐事和实施自动化的演变过程的一部分意味着 SRE 会在你的组织中发展。你仍然可以为此预算和计划，但目标是结果而不是具体任务和固定的团队规模。这一开始会感觉很奇怪，因为它与很多自上而下的计划活动相冲突。然而，当 SRE 动态地重新组建团队时，这通常是你正在取得成功的标志。&lt;/li>
&lt;li>评估你在组织内的可靠性思维水平和目标 : 达到高水平的 SRE 采用需要比预期更长的时间。在 Google 内部，我们认为达到产品战略级别的可靠性可能需要 3 到 5 年的时间。鉴于保持这一水平需要持续努力，恢复旧习惯也很常见。因此，花时间和精力不断评估和调整这种新的思维方式。&lt;/li>
&lt;/ol>
&lt;h2 id="sre-的关怀与培育">SRE 的关怀与培育
&lt;/h2>&lt;p>一旦启动 SRE，你需要照顾并培育你新生的组织。随着 SRE 实践的发展，你需要考虑以下几点。&lt;/p>
&lt;p>&lt;strong>将一个立足点团队发展成更大的组织&lt;/strong>&lt;/p>
&lt;p>不要从你最大的难题或每个人都不敢碰触的核心巨型单体应用开始。你需要在一个支持性的环境中通过一些快速的成功来起步，建立你的团队、原则和实践。相反，也不要从一个玩具服务开始。SRE 只有在有重要可靠性需求的地方才有价值。一旦你有了立足点，你需要不断学习，安全地扩展。处理大量不太重要的服务可能看起来很有吸引力，但要抵制这种诱惑。SRE 的价值在于高可靠性服务。其他服务应该遵循“你构建它，你运行它”的模型。&lt;/p>
&lt;p>&lt;strong>SRE 组织结构：独立的 SRE 组织与嵌入式团队&lt;/strong>&lt;/p>
&lt;p>自成立以来，Google 一直有一个专门的 SRE 组织，我们认为这样做有很多好处，例如可靠性文化、发布优先级、招聘等等。我们经常被要求将其与 DevOps 的“打破孤岛”方法进行比较。理解独立的 SRE 管理链不应该成为孤岛是至关重要的。SRE 有多种与开发团队合作的方式，从嵌入个体到轻度咨询。尽管如此，没有专门的组织结构也可能成功地部署 SRE，但需要广泛的高级领导支持。&lt;/p>
&lt;p>&lt;strong>晋升、培训和补偿&lt;/strong>&lt;/p>
&lt;p>SRE 是开发人员，应该期望获得至少与组织中其他开发人员相等的补偿和激励。晋升率也是衡量是否与其他团队平等的一个重要指标。你应该定期比较薪酬和晋升率，以消除任何差距。防止任何认为这种薪酬水平允许你虐待 SRE 的假设（例如，长时间工作）。注意，SRE 对进行有意义和有影响力的工作的期望会更高。&lt;/p>
&lt;p>值班是一项令人恐惧和疲惫的活动，需要仔细的准备和培训。还必须以有意义的方式补偿值班团队。如果你对直接补偿有限制，那么可以通过采用创意的方式（例如调休）来实现。&lt;/p>
&lt;p>&lt;strong>沟通和社区建设&lt;/strong>&lt;/p>
&lt;p>SRE 使能涵盖了各种活动，例如正式培训课程、技术讲座、读书小组等。大部分工作是间接完成的，通过提供时间和资源进行实验（例如 20% 工作时间）。自主权和授权是建设社区的关键，这需要通过积极的领导方式来实现。这意味着设定明确的领导愿景或北极星，并在组织内显著地树立授权的榜样。在任何形式的变革中，沟通的量很容易被低估，而 SRE 也特别擅长检测不真实的信息。&lt;/p>
&lt;p>&lt;strong>评估你的 SRE 采用是否有效&lt;/strong>&lt;/p>
&lt;p>在采用 SRE 的过程中，获得大量的 SRE 工件是很常见的，例如 SLO、SLI、错误预算、仪表板等。这些都是组织的代理指标，但它们不会总是给你一个全面的可靠性变化的图景。为此，你可能需要考虑一些更非常规的视角。如果事情确实进展顺利，良性循环会随着时间的推移显得更加平静。与其仅仅在事故与事故之间救火，不如有一种主动预防火灾的感觉。这可能会让人不安，特别是如果你的组织习惯于通过忙碌来展示其价值。在这一点上，抵制进行战术优化以重新获得忙碌感觉的诱惑。你的 SRE 会在经历失败并提升能力时自然地改进 SLO 和错误预算。&lt;/p>
&lt;h2 id="航向">航向
&lt;/h2>&lt;p>采用更主动的方法可以让你有更多时间专注于战略愿景。你会开始更清楚地了解组织中不同服务实际需要的可靠性水平。利用这些数据并设定新的预期结果来决定优化的重点。也许你的一些内部系统被标记为业务关键，但你的 SRE 们现在知道它们只需要 99.9% 的服务水平目标（SLO）。其他系统可能现在需要更高的可靠性水平，而判断你是否成功的一个可靠方法是当你开始看到其他团队对获得 SRE 好处的兴趣。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第四章： SRE 实践</title><link>https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/</link><pubDate>Thu, 02 May 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/</guid><description>&lt;img src="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第四章： SRE 实践" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一旦你建立了第一个 SRE 团队并掌握了这些原则，就该制定一套实践了。团队的实践由以下组成部分：成员能做什么、他们知道什么、他们拥有的工具，以及他们对这些工具的使用舒适度。&lt;/p>
&lt;p>团队的任务和环境最初决定了他们的工作内容。通常情况下，这意味着那些“开发团队未做的一切”，可能是一些列危险的稳定性缺陷。通过将团队聚焦于部分运维职责，他们可以产生一个能力循环，随着时间的推移相互增强。如果将他们投入到一个未定义范围的复杂环境中，那么结果必然是琐事和沮丧。另一个常见的反模式是将 SRE 工作添加到已经超负荷的团队中。&lt;/p>
&lt;p>团队的知识可以通过教育来扩展，无论是通过自我组织的还是企业集中组织的形式。应该鼓励团队定期举行团的内（间）的交叉培训会议，例如，每周一小时的会议，欢迎研讨任何关于生产环境的问题，无论是新成员还是资深成员都参与其中。如果问题有人能回答，则可以进行经验学习。如果没有人知道答案，可以转变为协作调查。根据我们的经验，这些会议对团队中的每个人都非常有价值。初级团队成员可以学习到新事物，资深成员也有机会传播他们的知识，通常还会发现一些大家都不知道的新事物。类似地，可以开展厄运之轮“Wheel of Misfortunes” 或桌面演练，在非正式的环境中，让团队成员讨论：他们在紧急情况下的角色和响应方式，对于让人们在无压力的环境下，更加舒适地接触生产环境非常有帮助。重现最近的所发生的故障是一个容易开始的起点。如果一个团队成员可以扮演指挥者的角色（会议主持人），并按照现实生产工作中的情况展示证据，其他团队成员就可以讨论：他们会怎么做和/或直接使用什么工具来调查事故发生期间的系统。&lt;/p>
&lt;p>还应该鼓励团队：从开发团队那里获得更多，有关他们正在运维的系统的知识。这不仅是更好地理解现有系统的很好的练习，也是直接引入新监控工具、讨论和规划系统变更（如性能改进）或解决可伸缩性或一致性问题的机会。这些对话在建立团队之间的信任方面通常非常有价值。&lt;/p>
&lt;p>团队的能力也可以通过引入新的第三方工具、开源软件工具或团队编写自己的工具来扩展。&lt;/p>
&lt;h2 id="从哪里开始">从哪里开始？
&lt;/h2>&lt;p>在为我们的团队赋予新的能力时，应该从哪里入手呢？可靠性和 SRE 的领域非常广泛，并不是所有 SRE 都能适合于一个全新的团队。我们建议从一套能够帮助团队学习成长的，并有具体的下一步工作内容的实践开始。抽象地说，我们推荐使用所谓的“计划－执行－检查－行动（PDCA）”模型。通过根据系统当前的工作状态来决定下一步计划，你的每一步都将需要是能落地的。我们将在本章后面的内容里，解释如何构建这些能力的平台，以及建议从哪里开始。这些初期的能力将形成一个良性循环，团队就不必猜测：接下来应该构建或采用什么，他们将能够根据对系统的观察自然而然地得出下个迭代的工作内容的结论。&lt;/p>
&lt;h2 id="你的目标是什么">你的目标是什么？
&lt;/h2>&lt;p>设定适当的目标非常重要。并不是所有系统都需要达到“五个九”（99.999%）的超高可靠性。我们建议根据你的服务和应用的可靠性需求进行分类，并相应地设定投入水平。如我们之前提到的，记住每提升一个“九”成本可能是前一个“九”的十倍，即99.99%的成本可能是99.9%的十倍。虽然这个说法很难精确证明，但这个原则是成立的。因此，如果在没有深思熟虑的情况下，就盲目或过于广泛地设定目标，可能会让你的投入变得非常昂贵，并在投入中陷入新的困境。过分追求不必要的高可靠性目标也可能导致团队顶尖人才的流失。如果你的目的只是到达近地轨道，那就没有必要设定登月的目标。&lt;/p>
&lt;p>确保你成功的路径是一个可循序渐进实现的目标，而不是期望通过一次性的大型项目或革命性变革来实现。在这里，渐进式改进才是关键。&lt;/p>
&lt;p>当你的团队开始尝试新的实践时，确保记录下所取得的成果，并在团队内部及对外宣传这些成果。同行间的认可非常重要，可以通过在团队站立会议中表扬成员、在会议上让人们分享他们是如何避免灾难的、在内部通讯中发布近失事件，以及向整个组织展示如果没有采取预防措施会发生什么等方式来进行。庆祝这类工作成果非常重要，尤其是在过去没有这样做习惯的环境中。口头表扬和书面表扬可以与奖金或礼物相结合。即使是小礼物，也能产生很大的鼓励作用。&lt;/p>
&lt;h2 id="如何到达目标">如何到达目标
&lt;/h2>&lt;p>不要制定一个长期且过于详细的计划，例如三年的详细规划。相反，你应该专注于确定前进的大方向。了解你的长期目标，但根据当前完成的任务来决定下一步。确立了方向之后，不必急于全面改变现有的团队和流程来适应新模式。相反，应该逐步引导团队步入正确的方向发展。&lt;/p>
&lt;p>我们将这种方法称为“战争迷雾”策略，意味着你清楚最终的目的地，但也为途中可能遇到的任何小问题做好了准备。在这个过程中，短期规划和灵活性至关重要，尤其是在初期，迅速取得成效，并立即展示其影响力，对于一个刚刚起步的项目和团队的士气有着极大的积极作用。设定可达成的短期目标来解决当下问题，同时开始构建可通用、可复用的长期能力，让多个团队都能受益。通过构建一个能够提供这些能力的基础设施，你可以放大投资的影响力。我们将在本章后面进一步详细阐述这个平台和能力的概念。&lt;/p>
&lt;p>组织内不同的产品开发团队在需求和现有能力方面都有所不同。在引入 SRE 时，你应当在参与模式（engamement model）上保持灵活，以适应各个团队的具体情况。通过理解产品团队的现状，你可以解决当前的问题，同时引入全组织范围的标准和最佳实践。当 SRE 团队刚开始运作时，如果有很多团队都想寻求他们的帮助，他们可能会感到负担过重。通过制定明确的参与“菜单”，你可以避免一次性的合作，或其他不可持续的合作模式。参与模式有几种类型，包括嵌入式、咨询式、基础设施支持等，这些在谷歌客户可靠性工程（CRE）团队的博客文章以及《Googel SRE 运维解密》的第32章中有很好的描述。&lt;/p>
&lt;p>对于 SRE 的采用，明确的汇报结构在早期就很关键。我们建议建立一个独立的组织，并且 SRE 领导应在管理团队中拥有一席之地。通过将 SRE 的领导层与产品开发部门分开，SRE 团队将更容易专注于可靠性这个核心目标，而不会受到那些更关注速度和功能交付的团队的直接压力。然而，在这样做时，要避免形成一个孤立的“运维”部门，因为 SRE 与企业其他部分的紧密合作至关重要。开发团队应该与这些共享的 SRE 团队开展紧密合作的投入，从而确保从 SRE 团队获得的价值大于自行构建 SRE 功能。&lt;/p>
&lt;h2 id="sre-成功的关键">SRE 成功的关键
&lt;/h2>&lt;p>SRE 的成功不仅仅取决于实践方法，如服务水平目标（SLO）和事故回顾（postmortem）。这些实际上是创造 SRE 工作文化起步阶段的产物。因此，成功地采用 SRE 不仅需要模仿这些实践，还必须采纳一种兼容的文化才能取得成功。&lt;/p>
&lt;p>这种文化建立在团队自身的信任和安全感之上。当团队负责控制重要系统时，他们必须感到在心理上是安全的。他们必须能够在不担心惩罚的情况下对同事和领导说“不”。他们必须感到自己的时间被重视，他们的意见受到倾听，他们的贡献得到认可。最重要的是，SRE 不应该感到自己比开发部门的同事更为“另类”或“次等”。基于历史上的原因 Dev 与 Ops 对立模型是一种常见陷阱。&lt;/p>
&lt;p>无责事故回顾就是一个著名的例子。通过记录“出了什么问题”，团队可以协作地确定导致故障的各种因素，无论是技术问题还是程序问题。经常，当人为错误发生时，将错误归咎于“人的因素”可能很有诱惑力，但这已被证明是没有意义的，也不是改进系统的有效方式。相反，SRE 倡导无责文化。可以这样理解：系统应该让人很难犯错。应当有自动化和检查措施来验证操作者的输入，并且鼓励用同行审查（peer review）来促进双方的共识和协作。当人们在报告中自由地提及自己的名字，并且知道不会因为可能发生在任何人身上的简单错误而受到羞辱、降级或负面绩效评估时，这表明你已经实现了无责事故回顾。如果你看到事故回顾中使用了“工程师”或用“人员1”这样的表述，你可能认为这是一种良好的无责实践，但这实际上可能反映了潜在的文化问题，必须直接解决。如果文件中的名字被隐去并替换为“工程师”或“人员1”，但在事故回顾之外仍然对工程师进行指责，那么责任文化问题就没有得到解决。你绝对不应该自动化地从记录或文件中删除任何人的名字——由于这并不能解决根本的文化问题，只会使文件更加难以阅读和理解。与其表面上删除名字，不如直接解决潜在的文化问题，从而实现真正的无责文化。&lt;/p>
&lt;p>一个不良文化的标志是&lt;em>西瓜指标&lt;/em>：外表看似绿油油，实则内部问题重重。这类指标反映了团队的努力，它们被精心设计，看上去很美好，但实际上隐藏了真正的缺陷。这与古德哈特法则类似，即任何成为目标的指标就不再是好的衡量指标。例如，过分关注支持工单数量，或整体平均解决时间（MTTR）往往会被滥用，不管是故意的还是出于好意，但都不主动认知自己的错误。通过度量团队的活动，我们把这些活动变成了目标，而不是客户的成果。相反，团队应该定义自己的成功指标，这些指标直接反映了客户满意度、系统稳定性和开发速度等因素。&lt;/p>
&lt;p>SRE 不应仅仅被视为“20%的时间”角色，而应该是组织内一个明确的职位和头衔。应该有一个公开的职业晋升路径，包括转岗要求和晋升期望。团队间的级别和薪酬应该公平对等。转岗不应该有任何显著的影响。&lt;/p>
&lt;p>判断一个成熟的 SRE 团队是否成功的好方法是：观察人员转入和转出SRE的情况。确保人员转移是常规的且没有任何官僚主义或限制，这样你可以快速了解人们是否感到在 SRE 团队中“被困”，或者它是否是一个理想的角色。通过观察从开发转移到 SRE 的自愿转移率，你可以判断这一角色是否吸引人。&lt;/p>
&lt;p>SRE 必须知道他们的时间是被重视的，尤其是当他们的工作需求超出了“正常工作时间”。例如，在谷歌，当 SRE 需要在正常工作时间以外值班时（即“on-call”），他们应该获得加班费补偿。谷歌的一些团队允许值班工程师在金钱补偿和休假之间二选一，按值班时间的一定比例看，通常设置一个值班时间的上限。不应该对一个团队提出超出其交付能力的需求，因此，确保值班池足够大是很重要的。常见的错误是：仅将值班池限定为 SRE 人员，这是不必要的限制。值班池也应该是基于自愿加入的。一旦团队感觉他们的时间被滥用，就会导致士气的迅速下降。&lt;/p>
&lt;p>另一个文化抓手是规划和目标设定。由于 SRE 最接近生产问题，他们通常很清楚最重要的是什么，哪些问题最紧急，哪些问题造成了最大的痛苦。允许 SR E团队设定自己的优先级和路线图，你就赋予了团队权力，他们将会更加有效率和愉快的工作。管理层应遵循共同制定，并达成对预期成果的共识的做法。业务需要加速开发吗？用户需要更快获得发布结果（新版本）吗？一个常见的反模式是泰勒主义，即领导者专权设定和优先考虑详细的计划和任务，然后将它们分配给下属。&lt;/p>
&lt;h2 id="构建能力平台">构建能力平台
&lt;/h2>&lt;p>SRE 团队可以构建一个平台，向合作团队提供能力，理想情况下，随着时间的推移，他们的贡献将扩展到整个组织。通过在共享服务、实践、规范和代码中引入弹性机制，这些团队可以开发出由：自动化、代码、共享库、管道、流程、规范、文档、手册组成的共享平台，甚至包括那些只存在于人们头脑中的特殊未记录知识。与其让每个团队都试图创建自己的最佳实践，不如将这些实践融入到平台中。产品可以从头在平台上构建（所谓的“数字原住民”），也可以移植到平台上。随着平台能力的增长，团队对其操作特性越来越有信心和体感舒适，逐渐将更加关键的工作负载都可以迁移过来。通过采纳这种将能力编码到平台中的模型，SRE 团队可以通过将能力同时应用到多个服务中来放大他们的影响力。平台是一个内部产品，应该像产品一样进行管理，将服务团队视为客户，接受功能请求，并跟踪缺陷（见图4-1）。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities.webp"
width="647"
height="378"
srcset="https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities_hu_b381b09c21c8284.webp 480w, https://martinliu.cn/blog/google-sre-ent-roadmap-chapter4/platfrom-of-capabilities_hu_e985e87f25e35293.webp 1024w"
loading="lazy"
alt="图 4-1. 能力平台示意图"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>当一个 SRE 团队开始来构建这个平台时，他们会面临一个问题：“首先应该构建什么能力？”通过分析前期采用 SRE 的低风险服务，你就可以将需求列表最小化为一个最小可行产品（MVP）。随着时间的推移，你会添加更多的能力。但下一步是什么呢？有两个来源：你的开发人员和你的环境。也就是说，根据他们的需求来构建，例如，“我们需要一个消息总线！”以及根据你所知道他们将需要的来构建，例如，“必须有一个可扩展的服务发现系统，否则这将无法工作。”&lt;/p>
&lt;p>对于环境所需的能力，这些通常包括：&lt;/p>
&lt;ul>
&lt;li>对 DevOps 进行优化改进，例如：增强软件开发生命周期（SDLC），更快、更安全地发布更多代码；&lt;/li>
&lt;li>可靠性工程的改进：最小化那些已经潜伏于系统中的错误带来的风险。&lt;/li>
&lt;/ul>
&lt;p>为了增强可靠性工程，我们推荐在团队中培养一种持续改进的机制。如果你不确定应该从哪里开始，可以从分析已经发生的系统中断事故入手，采取以下措施：&lt;/p>
&lt;ul>
&lt;li>制定服务水平目标（SLO），明确可接受的系统性能标准。&lt;/li>
&lt;li>建立一套正式的事故响应流程，确保在发生故障时迅速有效地响应。&lt;/li>
&lt;li>开展无责任的事故回顾和审查，鼓励团队成员坦诚地分析问题，而不担心受到指责。&lt;/li>
&lt;li>利用风险建模来确定改进的优先顺序，确保优先处理最关键的风险点。&lt;/li>
&lt;li>使用错误预算或其他风险管理方法，来消化待解决的可靠性问题，以保持系统的整体稳定性。&lt;/li>
&lt;/ul>
&lt;p>让这种持续改进成为推动团队不断创新的动力。例如，如果有一次的部署导致了整个服务器群的宕机，你可能需要探索减少此类风险的方法，比如通过限制影响范围、实施金丝雀发布，或使用其他灰度（渐进式）部署策略。如果发现了内存泄露问题，你可以在部署的前置流程中加入新的压力测试方法。这些新能力将被集成到你的基础设施平台中，为平台上的每项服务提供额外的保护和收益。随着这些通用的缓解策略逐步的证明了它们的价值，单次修复的情况将会大幅降低。&lt;/p>
&lt;h2 id="领导力">领导力
&lt;/h2>&lt;p>想要构建一个这样的技术平台，你就需要投入宝贵的工程资源，这些资源本可以用于开发新的业务功能。这就要求从基层到高层都需要施必要的加影响力。在功能开发和系统稳定性之间进行权衡时，决策者必须具有全局视野并得到适当的激励。我们越来越多地看到“首席可靠性官”这一职位，他们在组织内应当占有一席之地，参与制定战略性的可靠性决策（这一概念在马克·施瓦茨的《在桌边》一书中有所讨论）。虽然这是 SRE 成功实施的关键角色，但并不是一个常见的职位名称，通常是现有高管的额外职责。&lt;/p>
&lt;p>&lt;strong>了解效果&lt;/strong>&lt;/p>
&lt;p>一个运作良好、重视可靠性的组织会展现出几个明显的特征。首先是面对可靠性问题时，能够及时缓解或暂停新功能的发布。如果唯一目标是快速发布，可靠性和其他非功能性需求就会被牺牲。你的组织是否总是将可靠性工作位居新功能开发之后？是否有因“时间不足”而永远无法完成的项目？重要的是，这并不意味着：你应该放慢代码交付流程的速度，而是保持持续的推进。&lt;/p>
&lt;p>另一个成功的迹象是，个体英雄主义不再受到赞扬，反而积极的劝阻。当系统的成功依赖于少数人的担当时，团队就会形成一种不可持续的英雄主义文化，这种文化终将崩塌。英雄们会被鼓励独占特定领域知识，而不愿意去系统地预防问题的发生。这与《凤凰项目》一书中的布伦特角色类似。依赖个体英雄不仅效率低下，而且可能非常危险。团队必须积极阻止个体英雄行为的发生，同时保持团队责任感，因为英雄主义在短期内看似合理，但实际上不可取。&lt;/p>
&lt;p>一个表现良好的团队还会在出现中断前就对可靠性工作进行投资，并作为主动规划的一部分。在表现不佳的团队中，我们看到仅在发生一系列中断之后，才开始对可靠性进行投资。虽然这可能是必要的增加，但这种投资需要长期维持，而不是被视为一次性的应对措施或在情况好转后就被撤销。&lt;/p>
&lt;p>进一步说明，设想你的组织对于可靠性有两种不同的态度：和平时期和战时。它们分别对应于“一切正常”和“所有人都知道问题即将爆发”。通过区分这两种状态，你可以做出关于投资的决策。在战时，你会在平台的隐性特性、基础设施、流程和培训上投入更多的时间和金钱。而在和平时期，你也不会放弃这些工作，但你肯定会减少投资。&lt;/p>
&lt;p>然而，谁决定公司何时进入战时？这个决定是如何做出的？它如何在整个公司传达，而不造成恐慌或人才流失？一种方式是使用优先级代码，比如黄色警报或红色警报。这些是帮助团队确定工作优先级的组织实践。黄色警报意味着在一个季度内，当前的技术问题可能会变成一定的业务紧迫性。红色警报则表示问题可能在几天内发生，或者是已经存在的稳定性威胁。这些警报应该有明确的标准，所有领导团队成员都必须理解并同意这些标准。宣布这些警报必须得到领导层的批准才能产生预期效果。这些警报的结果应该是改变团队当前的工作优先级，可能会暂停现有的工作（如红色警报的情况），批准大批量投入，并能够直接协调其他团队来提供帮助。优先级警报对企业来说是一项代价昂贵的操作，因此你应该确保它们有明确的预期结果。这些结果应该在一开始就定义好退出标准，并在完成时清晰地传达出结束的信号。否则，团队会经历信号疲劳，而不再进行适当的响应。&lt;/p>
&lt;p>&lt;strong>选择投资于可靠性&lt;/strong>&lt;/p>
&lt;p>那么，作为一个可靠性领导者可能会做出哪些较不戏剧性的改变呢？这将涉及政策和投入。当政策是从基层向上的推动时，那么设置的全组织范围政策往往会是不一致的。如果存在一个领导的角色，由他来进行审核、消除重复、批准和传播这些政策，那将更为有效。同样，公司的资金支出，包括人员、硬件、软件、差旅和服务，通常是以分层的方式进行的。&lt;/p>
&lt;p>在构建前面提到的结构之前，必须考虑组织内可靠性的价值。为了使其有意义，组织必须将可靠性视为一项投资，甚至是业务产品差异化的竞争因素，而不是成本中心。应该明确可靠性是最重要的隐性产品特性。一个不可用、卡顿或充满 bug 的产品，无论具有多么丰富的功能，对客户的价值都会大打折扣。想要设定这个方向，你必须在高层进行操作，以确保持一致性，特别是：如果这是一个新的方向。&lt;/p>
&lt;p>一个简单的论点是，可靠性还可以作为更容易理解的概念的代名词，例如代码质量。如果系统出现了用户可见的问题，那么诸如灰度变更等可靠性实践的应用，就可以使系统在直接解决代码质量问题之前，让最终用户感觉更加稳定。例如，通过只对1%的用户发布带有缺陷的版本，那么99%的用户就不会发现问题。这使得系统看起来比实际上好100倍，并显著的降低了支持成本和声誉的损害。&lt;/p>
&lt;p>&lt;strong>做出决策&lt;/strong>&lt;/p>
&lt;p>在你将可靠性设定为对更强大产品的投资后，你就可以制定更长远的计划了，并会产生更大的影响。传统模式将 IT 视为成本中心，完全倾向于随着时间的推移逐渐降低成本投入。但最终，如果服务不可用了，无论它的后续运维成本是多么的廉价都将失去意义。你仍然可以实施成本的削减，但应该是在实现了可靠性目标之后再予以考虑。如果你发现维持所设定的可靠性目标的成本过高，你可以明确重新定义这些目标——比如，降低一个“9”的标准——并评估由此产生的权衡。&lt;/p>
&lt;p>要实现这些目标，你可能需要说服某个管理委员会、决策者群体或高层管理。你需要他们的支持，以便随着时间推移为供给和维护团队，提供必要的资源，并培训及进一步发展团队成员。这应该被视为长期投资，并明确得到相应的资金支持，而不是隐藏在其他预算项里。&lt;/p>
&lt;blockquote>
&lt;p>反模式：忽略奥德修斯
在涉及可靠性时，一个常见的反模式是让停机或其他“坏消息”影响你的计划周期，即使这些情况是预期的。领导层在面对坏消息时，往往会感到需要“做点什么”，而“坚持计划”通常看起来没有影响力。然而，如果计划已经考虑到了停机，除非对系统的理解发生重大变化，否则“坚持计划”正是正确的做法。“奥德修斯契约 (Ulysses pact)”这个术语在这里是一个有用的例子。领导者奥德修斯告诉他的团队在他被绑在桅杆上时，坚持计划，驶过塞壬。当他的团队坚持计划（尽管他在挣扎和乞求停下），他表扬了他们。他们没有被短期思维所诱惑。他们的计划考虑了长期影响，并在混乱开始前制定了一个清晰的计划。
如果允许团队在当下做出决定，你往往会选择忽略一个好的计划，而做出情绪化或以自我为中心的选择。一个经典的例子是领导者介入故障处理中，而没有全面了解情况，尽管一个有能力的团队已经在控制局势。这通常是公司文化的结果。一种高薪人员的意见 (HiPPO) 文化可能对事件管理和整体可靠性产生极其不利的影响。相反，听从奥德修斯，坚持计划，不要弃船。这不仅适用于事件响应，还适用于错误预算耗尽或在面对“非常糟糕”的事件时跟踪 SLO。如果你的计划是在错误预算耗尽时停止功能发布，但你每次都为“这个重要功能”做例外，你的领导力将受到严重削弱。一个有效的改善措施是引入“银弹”，即领导者被授予三颗银弹，用于在必要时覆盖预期计划。通过引入这种人为的稀缺性，领导者必须做出明确的权衡。同样，如果单一的坏事件消耗了一个 SLO，不要忽略它。召集团队分析这如何改变你们对系统的共同理解。这种类型的故障以前从未被考虑过吗？对故障的响应是否不足？&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：同时采用
另一个反模式是尝试在不进行修改的情况下混合旧模型和新模型。这会使团队偏离正确的方向，应避免这种情况。例如，在 ITIL 问题管理中，通常期望一个中心团队通过问题经理来减少问题的原因并缩短解决时间。相比之下，SRE 期望嵌入的工程师通过事后总结和评审来推动他们自己的问题解决。虽然结果仍然一致（更少且更短的停机时间），但方法和角色大不相同。尝试同时做这两件事，你最终会陷入混乱，并且这两种方法的预期结果相互冲突，效果不佳。
我们称这些 SRE 和非 SRE 原则的糟糕混合为“有毒组合”，类似于医学术语中指的不良药物混合。单独使用时每种原则可能是有益的，但两者结合在一起会导致意外的坏结果。我们经常发现使用两者的初衷是好的，通常是为了让现有员工参与进来，或者为了报告的连续性。然而，这种做法的吸引力远不及其带来的更糟的结果：更长的停机时间，更多的琐事和更低的可靠性。&lt;/p>&lt;/blockquote>
&lt;h2 id="人员配置和留任">人员配置和留任
&lt;/h2>&lt;p>在人员配置和角色定义上也可能出现反模式。在建立 SRE 团队时，很容易会选择从外部聘请 SRE 来对现有团队进行整顿。但这实际上可能导致精力的浪费，通常新聘请的 SRE 无法理解团队或现有技术的细微差别，回归到应用以前使用的方法，而不知道这些方法在新工作中是否合理。&lt;/p>
&lt;p>我们建议将现有团队发展成 SRE 团队。仅仅重新命名是不够的，但提供一个结构化的学习路径和一个成长和发展的环境肯定是有效的。当然，有些情况下过渡可能会失败。如果个人没有被设置在一个成功的环境中，而是被期望仅通过“阅读书籍”立即成为高级 SRE，他们可能会感到沮丧并寻找其他工作。同样，一些工程师看不到变革的理由，没有激励机制，或者非常抵制接受新角色。通过提供带薪教育、时间和学习的空间，并提供背景信息帮助团队理解变革的必要性，你可以成功地将团队过渡到 SRE 角色。这需要时间、精力和耐心。在过渡不成功的情况下，进行离职面谈是很重要的，特别是要解决过渡的问题，个人的感受和效果。你可能会发现你的计划中的缺陷，或发现它没有按你预期的方式执行。最后，当你要求团队做更复杂且影响更大的工作时，请注意这确实是更高价值的工作，团队应该为此获得相应的报酬。也就是说，当你的团队开始像 SRE 那样运作时，你应该支付他们 SRE 的薪酬，否则他们会转到能这样做的地方去。如果你提供团队学习高价值技能的机会，而他们离开去别处使用这些技能，你只能责怪自己。&lt;/p>
&lt;h2 id="技能提升">技能提升
&lt;/h2>&lt;p>在培养和过渡现有员工成为 SRE 时，制定一个技能提升计划至关重要。这包括“需要哪些技能”和“如何获得这些技能”——即角色需要的技能以及如何使员工掌握这些技能。技能差距分析和调查等工具在这方面非常有用，用来核实对工作所需基础技能的假设。这些技能在 SRE 文献中往往没有具体提及，但它们对于 SRE 在全组织范围内扩大贡献至关重要。例如，传统运维团队对软件工程基础（如版本控制、单元测试和软件设计模式）不熟悉并不罕见。确保这些基本技能包含在你的技能提升计划中，并针对每个学习者的特点进行调整至关重要，这不仅是为了在团队中建立足够的技能基础，还为了为个人提供一个顺利过渡到新角色预期的路径（从而减少团队成员的流失）。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第三章：SRE 原则</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/</link><pubDate>Wed, 01 May 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第三章：SRE 原则" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在我们探讨具体的实践方法之前，首先要明白的是原则的重要性，这就像法律中遵守法律的字面含义和精神含义。单单实践方法本身并不足够；SRE 的核心精神在于它的原则中。实践方法也面面俱到————它们只是原则的外在体现，也会随着时间和组织的不同而随机应变。&lt;/p>
&lt;p>原则是你转型基础的基本真理，它们在你的决策过程中提供帮助和指导。实现业务目标通常有多种方式，因此鼓励人们充分理解和执行核心原则，要优于：设定一套面子工程的详尽的规则，那只让人按照字面意义去机械的执行，而忽视了核心精神。以 Google 的原则为例，虽然我们有多种：关于如何设计和构建新服务的内部政策，但我们始终坚持的核心原则是：“以用户为中心，其他一切都会随之而来”。&lt;/p>
&lt;p>你的重点应该是：激发每个层次的人，使其都展示领导力，而不是从各种方面剥夺他们的个人意识，不是用指令束缚他们。特别是，业务部门和经理需要认可转型的原因和动机，并必须愿意在他们的专业领域的范围内调整和进行详细的指导。一旦说服了这些有影响力的人，他们就会成为你最大的资产（资源），如果没有被说服，他们就会成为你最大的障碍。&lt;/p>
&lt;p>与原则类似，良好的政策关注的是产出，而不是任务的完成；然而，它们更像观察视角方面的指导。它们是你用于牵引业务的抓手，而不是对抗业务流程的工具。政策和政策框架应该让人们在明确的界限内安全地运行。同时，它们也应该包含合理的默认设置，以便引导行为朝着正确的方向发展。&lt;/p>
&lt;blockquote>
&lt;p>反模式：&lt;strong>关于如何实施SRE，预先规划一个大而全的计划或设计。&lt;/strong>&lt;br>
本质上，你需要花费大量的时间来学习，我们建议：你构建一个由一致的原则指导的反馈循环（也就是说，通过反馈改进，形成一个良性的循环）。&lt;/p>&lt;/blockquote>
&lt;p>我们将简要介绍 SRE 书中的每一个原则，以及如何在你的组织中应用它们。若想要获得更多细节，我们建议你阅读《Google SRE运维解密》一书中的相关章节。&lt;/p>
&lt;h2 id="拥抱风险">拥抱风险
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第三章&lt;/em>&lt;/p>
&lt;p>这是在初始阶段最难迈出的一步。我们通常把这个问题描述为：可靠性与速度之间的权衡；然而，这并不一定是真的。对企业来说，对于理解可靠性，最有帮助的方式，是将其与指数级的运维成本联系起来。大约每提高一个&amp;quot;9&amp;quot;（例如，从 99.9% 提高到 99.99%）都会导致成本增加一个数量级，无论是软件、硬件还是人力资源。考虑是否能从这种投资中获得良好的回报，有助于根据业务需求进行调整。故障的类型也非常重要。例如，需要全天候运行的服务会更适合实施 SRE（相比那些公司内部的一周只运行 8 小时，每周 5 天的系统）。另外，对于那些没有得到积极维护的服务，SRE 的作用将会大打折扣，因为这些服务在持续改进方面的机会本来就会很少。尤其是在你故意不进行太频繁的版本发布，或不在编写新的代码时，这点尤为明显。&lt;/p>
&lt;blockquote>
&lt;p>反模式：&lt;strong>服务 100% 可靠性目标。&lt;/strong>
对于几乎所有事情来说，100% 都不是正确的目标。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：在“常规”的运维中实现了 99.999% 的可靠性&lt;br>
月度指标或维护窗口可能会掩盖灾难带来的巨大影响。&lt;/p>&lt;/blockquote>
&lt;h2 id="服务质量目标">服务质量目标
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第四章&lt;/em>&lt;/p>
&lt;p>在你开始考虑实施 SLO 和 SLA 之前，先从服务质量指标（SLI）开始，并根据你系统的实际观测数据，来制定和校准的 SLI，然后用来支持 SLO/SLA 协商（利益干系人间的对齐）。不要让你现有的业务承诺影响你对 SLO/SLI 准确性和相关性的判断————你可以选择使用指标来驱动工作的变化，或者反之亦然。总之，不能进行粉饰，或者挑选优点展示。而要，花时间理解你的客户想要的是什么，而不能，为了支持&amp;amp;证明你理论，使用方便的数据点。简单来说，让事实证据（SLI/SLO）来驱动你的结论（SLA）。尝试关注那些 &amp;gt;99.9% 的服务，对于 &amp;lt;99.9% 的服务而言，SRE 可以先不参与相关维护工作（直到它们产生了需求）。我们反复强调：如果一个服务不从 SLO/SLI 中受益，那么它可能也不会从 SRE 中受益。最后，如果在 SLO 不违规的情况下，你就不能对软件或流程做任何变更了，那么 SRE 对你的收益也会甚微。&lt;/p>
&lt;blockquote>
&lt;p>反模式：SLO = SLA
你应该总是将 SLO 设置得比 SLA（例如，SLO：99.95%，SLA：99.9%）更严格。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：SLI = OKR（目标和关键结果）/KPI（关键绩效指标）&lt;br>
Goodhart 的法则在这里适用：当一个度量成为了目标，它就不再是一个好的度量。&lt;/p>&lt;/blockquote>
&lt;h2 id="消除琐事">消除琐事
&lt;/h2>&lt;p>&lt;em>详见：《GOOGLE SRE运维解密》第五章&lt;/em>&lt;/p>
&lt;p>这可能是最重要的原则之一，因为它与 SRE 成功所需的创新文化密切相关。大多数时候，企业领导层希望加快进度，并通过确保将所有资源都 100% 的利用来实现这一点。如果你真的希望能确保：你的团队正在做正确的事情，而不是快速地做错误的事情，那么你的目标应该是少于 50% 的繁琐工作（或者我们所说的琐事）。这是可靠性（和速度）在大规模下的秘密。不要将其等同于技术债务，即可以把它们都攒起来，以后一起偿还，或者以“琐事周”的形式，每个季度解决一次这个问题。一旦琐事压制住了你的团队，那么所有 SRE 的所有其他活动都会停滞不前。你必须为组织来定义：什么是琐事，并且这必须由 SRE 实践者来决定，而不是自上而下的指令。琐事的定义也会随着时间的推移而改变（定义再次由实践者更新）。&lt;/p>
&lt;blockquote>
&lt;p>反模式：将琐事作为一个可有可无的原则&lt;br>
忽视消减琐事会对应用 SRE 产生很大的影响。如果你没有时间减少琐事，那么你就没有时间实施 SRE。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：琐事是某个人/某个团队的工作，而不是每个人的工作&lt;br>
最接近工作的人需要是修复它的人。如果你试图把这个工作转嫁出去，它会驱动错误的行为。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：琐事清除周&lt;br>
每季度举行一次“琐事清除周”是常见的诱人的做法，但这是这样是行不通的。你需要采取更系统、更持续的消除琐事的方法。&lt;/p>&lt;/blockquote>
&lt;h2 id="监控分布式系统">监控分布式系统
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第六章&lt;/em>&lt;/p>
&lt;p>可观测性是一门独立的专门学科，它需要像其他开发实践一样受到同等的重视和思考。实际上，大多数企业应当预期投资于多种系统，这些系统将帮助团队更高效地工作。单一的监控平台（大而全的统一控制台）并不能很好地运作；同样，使用数百种功能叠加在一起的工具也不可行。通过理解你独特的 SRE 用户路径，以及他们需要使用多种工具来诊断和解决系统间的逻辑关系，找到适合你的平衡点。将可观测性系统视为：需要投资和精心设计的内部产品，强调工具的实用性，而不是“完美”的仪表板，因为系统总是在变化。记住，告警过度和告警不足同样的糟糕：告警不应直接发送给人类，除非需要他们采取行动。构建这种告警学习循环是加速学习的常见方法；弄的不合理，会迅速使 SRE 精疲力竭。&lt;/p>
&lt;blockquote>
&lt;p>反模式：告警信息过载
告警的电子邮件充斥了你的收件箱，我们会忽略所有信息，这意味着高优先级的告警也无法得到必要的响应，因为告警噪音太多。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：“NoOps”工具会替代 SRE
工具可以增强 SRE 的能力，但还不能替代他们。完全消除运维是不可能的，这样会迅速的让你的 SRE 团队渐行渐远。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：告警即是原因
你可以记录很多事情，但告警总是针对症状而不是原因发出。&lt;/p>&lt;/blockquote>
&lt;h2 id="google-自动化的演变">Google 自动化的演变
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第七章&lt;/em>&lt;/p>
&lt;p>当涉及到极高的可靠性水平 (99.99% 或更高) 时，自动化是最重要的，因为在这个时候，如果需要人工介入，你几乎总是会经历的的是：服务水平目标 (SLO) 违约。随着系统错误预算的逐渐缩减，干预的平衡点也随之变化，最终转变为主动维护，会采用的技术手段包括优雅降级、重试等。自动化本身也会成为一个常见的问题，花时间修复不良流程是非常重要的，但很难融入团队文化。自动化也需要和系统其他部分一样的容易维护。&lt;/p>
&lt;blockquote>
&lt;p>反模式：不管流程的质量或适用性，默认一切自动化
最好的代码是并不写的代码！对于不很频繁的流程，操作手册（Playbook）是一个很好的中间解决方案。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：对于“非常重要”的部分也不要人工介入
只有当你真正需要又人来做决定，并且他们有权这样做时，才让人工介入。&lt;/p>&lt;/blockquote>
&lt;h2 id="发布工程">发布工程
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第八章&lt;/em>&lt;/p>
&lt;p>发布工程与你的 DevOps 团队可能已经在进行的持续集成/持续交付 (CI/CD) 实践有广泛重叠。要充分利用这些现有工作，而不试图自上而下的强加另一套实践。强调结果和流程指标以对齐团队，并确保你在一个平台团队 (或根据规模的不同而有多个团队) 上有足够的投资。&lt;/p>
&lt;p>尽可能提前发布相关的工作，即尽早让测试团队也参与进来，并在所有阶段考虑测试。&lt;/p>
&lt;p>不要让开发人员负担过重，但确保发布周期的每个部分都被视为有价值的，并与其他部分保持一致。对于 SRE 来说，发布流水线是导致大多数问题的原因 (因此也是解决问题的关键)。与值班和维护人员也需要紧密的配合。&lt;/p>
&lt;blockquote>
&lt;p>反模式：DevOps/SRE 团队负责所有的发布
那是让不同职位的人都来干运维的活。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：发布工程必须引入 CI/CD
持续交付本身就是一门学科，你的平台和开发团队需要在这方面打好基础 (SRE 可以提供帮助)。&lt;/p>&lt;/blockquote>
&lt;h2 id="简单性">简单性
&lt;/h2>&lt;p>&lt;em>详见《GOOGLE SRE运维解密》第九章&lt;/em>&lt;/p>
&lt;p>团队的认知负荷很重要，并且会随着团队职责的扩展或缩减而变化。确保允许团队合并或拆分，从而让认知负荷匹配。基本上，复杂性意味着很多事情都会很难理解；因此，要尽可能的激励：减少不必要的复杂性，并将复杂的事情拆分成更小、更易管理的部分，例如领域驱动设计 (DDD)。另一个从 DevOps 中重用的重要概念是：高上下文 (High Context) 与低上下文 (Low Context)，以及 SRE 的一些概念如操作手册（Playbook）、文档、灾难恢复测试 (DiRT) 演习等，这些都是使事情变成低上下文的重要部分。拥有更少的代码和更少的产品特性，可能会与大多数产品的激励相悖，因此：要考虑其可靠性影响时，请确保对此进行控制。&lt;/p>
&lt;blockquote>
&lt;p>反模式：简单意味着我能理解它
用一个高管专用的仪表盘，并不可能有意义地显示所有内容。更不要试图强行的实现它。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：基于年度评估的静态团队
动态团队的形成需要一年多次。&lt;/p>&lt;/blockquote>
&lt;h2 id="如何引入这些原则">如何引入这些原则？
&lt;/h2>&lt;p>如何将这些原则映射到你组织？将这些原则完全与您的组织对齐的可能性很小，但这没关系！你的 SRE 版本并不需要完全和 Google 的相同，只需要原则一致。但是，请确保你特意地选择将要追求的目标，检查与现存原则之间的差异，并利用这段时间仔细检查面子指标 (参见 Eric Ries 在《精益创业》中解释的“成功剧场”)。在不稳定的基础上进行变革可能很难，因此如果你没有信心，请假设你需要检查和改变。尽量不要在原则上犹豫不决，如果你认为某事无法完成，那么推迟它的实施，要比假装工作更好。&lt;/p>
&lt;h2 id="防止组织破坏性错误">防止组织破坏性错误
&lt;/h2>&lt;p>变更可能会潜在的产生非常不同影响。采纳新原则时，进行的一些变更不一定总是有效。变更所带来影响，通常比能否恢复原样更不重要，这意味着最难逆转的变更，通常也会造成最大的痛苦。专注于更容易逆转的改变，即使这些变更是错误的，它们仍然会带来经验教训。例如，如果第一次重组不成功，你可以随时进行另一场重组，但你不能让解雇的人重新回到公司。&lt;/p>
&lt;blockquote>
&lt;p>反模式：解雇所有不会编程的运维人员
除了显而易见的道德或法律影响，你根本无法逆转这个决定。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：给所有开发人员生产的 root 访问权限
良好的安全和运维实践包括：与过往的任何时候相比，最小可用权限最适用于自动化。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：选择业务中最关键的系统作为起点
你不会在马拉松训练计划的第一天就跑 26 英里。&lt;/p>&lt;/blockquote>
&lt;h2 id="建立安全失败的环境">建立安全失败的环境
&lt;/h2>&lt;p>为你的采纳之旅创建一个安全失败的环境，期望失败会发生，但确保你从中学习并长进。在做复杂的事情时，请确保有主题专家（SME）的参与，但在做复杂的事情时，请确保你要么奖励失败，要么有失败预算。在大多数组织中，真正奖励失败很难，因此有时失败预算更合适。这意味着：你根据成功的前 n% 进行衡量，而不是平均/中位数。领导团队中这些行为的榜样作用至关重要，否则他们将无法在整个组织中融入这些行为。&lt;/p>
&lt;blockquote>
&lt;p>反模式：我们会支持你的任何冒险，只要结果成功就行
真正的风险预算意味着接受一系列的失败。&lt;/p>&lt;/blockquote>
&lt;h2 id="当心优先级分歧">当心优先级分歧
&lt;/h2>&lt;p>整个领导团队完全支持你的可能性很小。更可能的是，人们想要可靠性，但对变更和成本有合理的担忧。我们建议承认变更的 J 型曲线，如图 3-1 所示，这意味着在一开始的几个相对容易的胜利之后，实现有影响的变更的曲线变得困难。例如，采用自己的新自动化可能感觉像是一个倒退，然后才会实现显著的收益。通过进行屋顶射击而不是月球发射来确保成功。你仍然可以追求显著的改进，但一开始要保守一些。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23.webp"
width="721"
height="448"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23_hu_7970b27cc0910f84.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter3/2024-05-20_22-49-23_hu_1426f8e751a5c3df.webp 1024w"
loading="lazy"
alt="图 3-1. 变革的 J 曲线，来自 DORA 2018 年 DevOps 状态报告"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;blockquote>
&lt;p>反模式：过早放弃。例如，尝试 SRE 六个月，然后在没有立即胜利的情况下停止
这并不意味着你需要立即完成所有事情，但在几个季度之后，必须有一个明确的方向感，表明在朝着正确的方向前进。&lt;/p>&lt;/blockquote>
&lt;h2 id="如何取得支持">如何取得支持
&lt;/h2>&lt;p>如何获得这些原则的支持，获得你需要的关键批准和支持？通过考虑 John Kotter 或 BJ Fogg 提到的一般企业变革原则，确保你为 SRE 成功做好准备。即使你的领导团队不完全相信你正在尝试的事情，也没关系，但你需要确保至少有足够的紧迫感来进行变革，并有动机去实施它。&lt;/p>
&lt;p>在技术领域，我们经常奖励解决问题，而不是防止问题的发生，SRE 原则和实践的采用，可能会成为这种操作模式的牺牲品。通过找到适合你组织的指标来确保 SRE 采纳的持续价值是显而易见的。例如，在零售业，你可能专注于在黑色星期五期间最大化销售额，而在医疗保健领域，你可能专注于持续合规性和可用性，在金融领域，可能是关于交易系统的吞吐量或完成分析流水线处理的速度。&lt;/p>
&lt;blockquote>
&lt;p>反模式：如果你构建 SRE，他们就会来
实践不能孤立存在。你必须开始实际的工作，才能做出真正的改进。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>反模式：稳步上升的进展
现实世界的变革有起有落。如果你没有失败，那么你就没有在学习。&lt;/p>&lt;/blockquote>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第二章：SRE 方法对可靠性的意义何在？</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/</link><pubDate>Tue, 30 Apr 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第二章：SRE 方法对可靠性的意义何在？" />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>可靠性并非新鲜事物。企业一直将其视为业务系统需要不断提升的重要品质，无论是在服务质量、可靠性还是系统正常运行时间方面。那么，SRE方法又有何独特之处呢？为何当下引起如此关注？它与传统方法有何异同？对企业来说，又意味着什么？&lt;/p>
&lt;h2 id="将可靠性作为产品的关键差异化因素">将可靠性作为产品的关键差异化因素
&lt;/h2>&lt;p>为什么企业要建立 SRE 团队或者追求可靠性呢？他们希望实现什么样的结果？行业技术的流行趋势总是在不断的变化（技术、流程），但它们需要有实质性的商业价值才能被企业留存下来。考虑到可靠性和安全性，它们起初都不是产品明显的差异化因素，而是被视为必备的需求而已。只有在出现问题，并且期望产品具有高可靠性，或其依赖性时，它们才会变得更加突出。例如，多年前，安全漏洞和黑客攻击相对较少见，因此安全性是存在的，但并不会出现在面向消费者，或企业的产品营销材料中。现在，随着漏洞越来越普遍，并成为人们关注的焦点，我们将安全性视为产品的差异化因素之一。&lt;/p>
&lt;p>可靠性（更常见的是可用性或正常运行时间）往往主要会在服务级别协议（SLA）和类似协议或期望设定的详细条款中提及。然而，我们在客户满意度（CSAT）评分、像 Downdetector 这样的第三方网站，以及将更多的生活和业务转移到互联网的整体趋势中，才会感受到可靠性的存在。在 COVID-19 疫情期间，许多软件即服务（SaaS）产品经历了业务的高速增长，并且不得不大幅提高对 SaaS 产品可靠性的期望。&lt;/p>
&lt;p>除了“可用性”之外，作为可靠性特性常见的代名词，我们还可以想到：耐久性、数据持久性、在负载下的速度或性能、一致性和返回结果的质量等各种特性描述，与作为消费者级和互联网服务客户隐性的可靠性诉求相似的特性。&lt;/p>
&lt;p>一旦我们理解到了：可靠性实际上是产品的高期待特性，我们甚至可以大胆地说，它是产品最需要必备的特性。因为，如果产品一旦不可用了，那么它的任何功能（增删改查&amp;hellip;）也都无法发挥作用。如果产品在性能或质量方面的糟糕使用体验导致用户感到沮丧，那么产品服务将不会令用户满意。如果产品服务在高峰时段、关键业务时刻无法使用了，那么产品服务就会让用户感到不值得拥有，而离你而去。&lt;/p>
&lt;p>谷歌搜索以“始终可用”的特点而闻名，以至于认为它是无处不在的服务（甚至用于测试网络是否通畅）。谷歌搜索的可用性是它与竞争对手进行对比时的关键差异化因素，与速度、质量、易用性和用户体验并列。这并非偶然，而是谷歌十多年来的一个刻意选择和投资的成果。&lt;/p>
&lt;h2 id="应该何时关注可靠性">应该何时关注可靠性？
&lt;/h2>&lt;p>当初创公司考虑是否要在可靠性方面进行投资时，可能会认为可靠性还是为时尚早。特别是当他们考虑到像谷歌这样的大型组织所采取的全面措施时。这是可以理解的，因为：初创公司首要的工作是构建一个最小可行产品（MVP），而不是一个耐用的、有韧性的服务。然而，一旦产品的可行性确定了，那就应尽快将可靠性纳入产品路线图，与安全性和其他“横向”工作（国际化、可访问性等）一起开展起来。&lt;/p>
&lt;p>在这些初创公司或早期企业中，关于可靠性的高成本定制化开发投资可能尚早，但与安全管理类似，在可靠性管理领域中，也有许多产品通过开源软件，以及通过第三方提供的服务和工具变得更加通用化。可以尽早的开始利用这些通用的工具和服务，从而避免在后期，不得不在已经发展壮大的复杂系统中进行痛苦的集成工作，或是被动响应可靠性问题。积极的前瞻性考虑是可靠性，及其相关准备工作的关键。另外，值得注意的是，尽管像谷歌这样的公司在内部构建了许多可靠性管理系统，但这绝不是最具成本效益的方法。利用外部的服务和工具是很早就经过验证的最佳实践。外部采购胜过内部自研是值得推荐的做法，特别是在诸如安全性（“永远不要自己编写加密算法”）和可靠性等领域，因为，自研可能会产生大量边缘场景和副作用。虽然，目前可靠性管理供应商领域的成熟程度和规模尚不如安全性，但它正在增长中，并且会对不断发展的公司产生重大影响。&lt;/p>
&lt;p>在规划稳定性投资时，麦肯锡的“增长的三个阶段”模型（见图 2-1）可能会对你有所帮助。它描述了公司未来发展的三种思考方式：&lt;/p>
&lt;ul>
&lt;li>阶段 1 是当前已经很重要的工作领域。&lt;/li>
&lt;li>阶段 2 是预期中新的增长领域。&lt;/li>
&lt;li>阶段 3 是未来潜在的长期增长领域，目前处于研发阶段。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58.webp"
width="442"
height="275"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58_hu_9cb5f5a23052c6ff.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-11-58_hu_5858d9837be89d07.webp 1024w"
loading="lazy"
alt="图 2-1：增长的三个阶段"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;p>通过考虑对每个阶段的不同投资水平，各个团队就可以拆解可靠性领域中不断涌现的工作内容。&lt;/p>
&lt;p>首先，让我们从阶段 1 模型的产品开始，我们应该专注于确保：让可靠性工作能够为公司当前的业务模式保驾护航，同时助力短期需求的持续创新。这相关的工作包括：对于传统的运维工作，可以通过 SRE 实践进行自动化。其他工作内容还包括：服务监控（服务质量目标 [SLO]）、事故响应和持续集成/持续交付（CI/CD）等等。&lt;/p>
&lt;p>阶段 2 模型产品考虑的是：将核心业务扩展到新的市场和面向新客户。将现有的可靠性功能进行扩展，从而支持到更广泛的消费者，并可能在必要的情况下在全球范围内扩展基础设施。这些情况都将带来新的可靠性挑战，例如：分布式团队（7x24覆盖）、针对多个客户群体的容量规划、多区域部署，以及传统的维护窗口应用就不太现实了，这类工作事项本质上仅适用于本地化产品，而不适用于全球化产品（不是“所有用户都在深夜中”）。&lt;/p>
&lt;p>最后，与阶段 3 模型产品相关的可靠性工作包括：公司可能扩展其业务提供的方式。为了应对未来颠覆性机遇或应对竞争威胁，公司应该用新的能力和新的商业模式来实现。投资于阶段 3 的公司将确保其平台和架构不会被绑定在单一的商业模式上，而是允许各种形态的系统的生成和演变，同时保持控制和质量标准。在这里，系统需要是可靠的，但不能僵化。诸如集中式批准委员会和自上而下的架构标准等工作会扼杀阶段 3 模型产品所需的创新。&lt;/p>
&lt;p>因此，将 SRE 应用于阶段 1 可以对您当前重要的业务产生立竿见影的影响。将 SRE 作为阶段 2 的核心基础可以保障未来的成功。然而，阶段 3 并不是开展 SRE 的最佳领域，因为在那里做投资的可行性还不明朗。&lt;/p>
&lt;h2 id="为什么-sre站点可靠性工程在现在才开始流行">为什么 SRE（站点可靠性工程）在现在才开始流行?
&lt;/h2>&lt;p>为什么 SRE 不是在 20 世纪 70 年代或者 2010 年被发明并流行起来？显然，基于互联网的服务的复杂性近年来已经明显增长，尤其值得注意的是伴随着云计算的崛起。从商业上讲，我们将云视为分布式系统的后浪，而分布式系统是计算机科学中的一个深入研究的领域。只有在过去的十多年里，这个计算机科学的分支才对个人消费者（例如，Google，Facebook，Apple）和企业（如 Salesforce）产生了重要影响，或者说，它的原则早已经被服务提供商（如 Akamai，Stripe）广泛有效地用于提供可扩展的互联网系统，更不用说云服务提供商了。&lt;/p>
&lt;p>“数据仓库级计算”（这是 Google 的一个概念，将数据中心比喻为一个超级的数据仓库计算机的模式）的引入改变了企业构建、交付、运营和扩展服务的方式。这些新模式明显改变了企业对待成本（CapEx）的方式，从租赁或建造空间和购买计算机系统的资本支出模型转向了按需租赁计算服务片段的运营支出模型（OpEx）。然而，这还涉及到系统设计、架构和应对不断变化的故障模式的问题。&lt;/p>
&lt;p>传统的基础设施遵循类似建筑行业或金字塔的模型：从底部向上构建的大而坚固的基座。如果基座出现了问题，对其上面的所有东西都会是灾难。我们将这种模型称为基于组件的可靠性模型，或者联合模型，即需要使系统中的所有组件都可用，系统才能正常运行；如图 2-2所示，&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14.webp"
width="442"
height="219"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14_hu_f28c0dffab661422.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter2/2024-05-04_15-12-14_hu_87e007e0d267e178.webp 1024w"
loading="lazy"
alt="图 2-2：可靠性金字塔 "
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;p>在云计算中使用的新模型是概率可靠性或交集模型，由于架构选择是期待故障的，所以只要系统的一部分子集可用，系统就可以正常工作。&lt;/p>
&lt;p>虽然这个概念并不新颖或难以理解，但对于云服务的使用者来说，特别是当我们提出“迁移上云”的建议时，这并不显而易见，因为他们认为旧模型和新模型之间存在这等同性。虽然在新平台上运行旧模型是完全可能的，但必须考虑许多其他因素，这经常会让那些没有做好准备的人感到困惑。例如，传统的 IT 部门可能会为任何特定的虚拟机（VM）的正常运行时间而感到自豪，而对云 VM 则预期其实生命更为短暂：它们会被任意地创建和销毁，而且这个过程通常会非常快。&lt;/p>
&lt;p>企业在像 Google，Facebook 和 Apple 这样的现代公司中看到了成功的案例，发现了两个主要的优势：（1）大规模创新，以及（2）大规模可靠系统。这些公司不仅可以构建新系统，而且可以保持它们的可用性，敏捷性和正确性。这个组合对于企业来说非常有吸引力，因为这使企业也能够快速响应市场需求，并向整个市场提供广泛的解决方案。&lt;/p>
&lt;h2 id="超越-google-的光环">超越 Google 的光环
&lt;/h2>&lt;p>当然，Google 并不总是如此庞大。实际上，在早期，Google 以更传统的方式管理服务器群。使 Google 与众不同的是，它早期从垂直扩展转向了水平扩展其服务器群，也就是说，从购买更大更强大的计算机转向了购买更多更便宜的计算机。&lt;/p>
&lt;p>你可以通过走过早期托管设施的走道看到这种变化。虽然在第一次互联网热潮期间，许多租户的机架里都有看起来很酷、昂贵的硬件，但 Google 却使用的是大量标准商用硬件，预期任何时候某个机器都可能会发生故障，并在软件设计中也考虑到这种故障。&lt;/p>
&lt;p>引发这个转变的一个重要因素是，这是一个有意为之的选择：在进行水平扩展的过程中，避免相关的运营成也线性增长。也就是说，从财务的角度看，当水平扩展时，也持续雇佣更多人来维护新增的机器是没不合理的。&lt;/p>
&lt;p>在这种技术和财务选择的双重推动下，Google做出了自己的选择——这就是 SRE 部门的诞生。Google 只是在大多数其他公司之前做出了这个选择，因为它是一个非常早期的互联网规模化公司。&lt;/p>
&lt;p>我们相信，许多公司现在面临的扩展挑战与 Google 当时面临的挑战相似。只不过现在这些公司有公共云的优势，而不必在自己的数据中心中填充大量的标准商用硬件。我们相信，Google 能够通过发展 SRE 职能部门来克服这种方法的变化，这意味着 SRE 也可以帮助在其他公司克服同样的难关。&lt;/p>
&lt;p>我们在 Google 学到的一个关于 SRE 与传统 IT 运维人员配备水平的重要观点是，那就是亚线性扩展。我们的意思是，运维一个系统的团队的规模不应该与系统本身的增长速率相同。如果你的系统的使用量翻倍了，那么你也不应该需要两倍的运维团队。Google 选择不按机器数量进行扩展，而是按其他更高级的指标进行扩展：集群、服务或平台。通过关注更高的抽象层级，团队可以做更多的事情，而开销更小。 这些抽象层级往往是由那些以前运维过这些系统的人来构建和扩展的。&lt;/p>
&lt;p>复杂性可以增加对 SRE 的需求，但你的SRE人员配备应该比服务的接入增长得更慢，这个概念被称为亚线性扩展。这实际上直接与减少团队中的重复劳动琐事的原则有关。随着系统的增长和衍生，团队需要做更多的重复的任务来保持系统的健康。SRE 管理必须积极防止并跟踪这一点。如果团队允许过多的重复劳动琐事发生，不主动察觉，这可能会是一个下滑的开始，会导致团队无法维持，同时宕机时间也会增加。&lt;/p>
&lt;h2 id="为什么不选择更传统的运维方式">为什么不选择更传统的运维方式？
&lt;/h2>&lt;p>你的组织可以通过利用 Google 从垂直扩展转向水平扩展的经验，以及通过发展 SRE 而产生的相关变化，更早地享受到规模的优势，同时也可以节省资金。想一下另一种方式：为了降低扩展团队的成本，而随着复杂性的增加，团队的责任也在增加，人们也可能会从外部寻找更便宜的劳动力（例如，“外派员工”或“正确的离岸外包”）。这是处理规模和复杂性时一个太常见的方法。这通常会导致系统增长受阻，导致发生停机事故，实际上随着时间的推移，增加的成本会更高。这些意外的成本可能不仅来自停机或对品牌的损害，还可能来自于执行或扩展速度降低、新产品的上市时间延长，甚至最终被竞争对手超越等其他形式的业务收入损失。在选择如何优化运营和可靠性投资的成本时，组织需要考虑全局。&lt;/p>
&lt;p>因此，配备合适的 SRE 团队是很重要的。其实你不需要都去雇佣博士学历，但你也不能吝啬。尽量不要只关注运维人员的单位成本，而是要关注整个系统的综合成本。做个类比，工业食品包装使用着价值百万的机器设备，将桃子装入罐头盒中。你可能会想，“为什么不雇佣非熟练工人？那会比百万美元的机器便宜得多。”乍一看，这听起来更便宜。然而，当你考虑到雇佣非熟练工人的整个系统成本时，实际上更贵。因此，使用价值百万的机器的整个系统最终比雇佣非熟练工人更好、更便宜。如果你让他们，SRE 和平台工程师来为你建造你的罐头机器人。不要因为你过去常做的事情，就强迫他们手动填装桃罐头。&lt;/p>
&lt;p>如果没有高效能的员工，采用像 SRE 这样的高性能实践会更困难。那么现有的团队是不是就没有希望了？一点也不。完全有可能，并且强烈建议开发现有的人才。团队可能会试图雇佣一个外部专家，甚至是一个拥有 SRE 经验的外部团队，但这可能是一个错误。同样，期望通过外派员工或离岸外包获得（长期的）SRE 能力，也不太可能得到你期望的结果。SRE 人员的单位成本往往比传统的运维团队高，试图削减人员预算，或者想在在配备 SRE 团队时，以低成本获得高价值的方式往往都会失败。如果你的组织重视可靠性，你应该能够合理化这个成本，我们将在后面的部分探讨如何做到这一点。&lt;/p>
&lt;p>将运维只看做成本中心是一个常见的错误。你应该考虑收入和总拥有成本的全局，避免局部优化成本，并认识到，只关注短期削减成本最终可能会让你的公司付出更大的代价。例如，通过评估发生事故的情况，估计事故将对收入或品牌的影响，投资一个 SRE 团队的定位，就可以视为一种长期的保险，包括一系列的事故缓解和预防策略。理想情况下，这个团队不仅仅是“保险”，实际上还是驱动改善（可靠性！）向客户交付创新的驱动力。考虑以你的阶段 2 模型产品为目标，并统筹规划你的平台。不要只解决今天的问题；还要为将来做计划。&lt;/p>
&lt;p>考虑转型现有员工的好处。只要给予正确的激励、机会和足够的时间，一个组织就可以改变其常态，并优雅地接受其人员的现代化角色和责任，同时也尽可能地减少了不必要的人员流动。因为，毫无疑问，一个组织最宝贵的资产永远是它的人员。在评估员工的技能集时，不应低估了他们对公司核心业务的真正理解。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》第一章：初探企业 SRE</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/</link><pubDate>Tue, 30 Apr 2024 21:41:05 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre-chapter1/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》第一章：初探企业 SRE " />&lt;blockquote>
&lt;p>译者：刘征&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>将 SRE 导入当前的各种传统企业，是一项看似可能艰巨的工作，因此 Google SRE 整理了一些建议，希望能帮助到更多企业。通过评估企业现有的环境、设定合理的预期，并确保企业朝着正确的方向迈出正确的步伐，企业可以从评估 SRE的原则和实践，从评估SRE在组织中的运作方式开始。&lt;/p>
&lt;h2 id="演进优于革命">演进优于革命
&lt;/h2>&lt;p>企业的一个显著特点是：会始终拥有以前的 IT/管理信息系统（MIS）方法和原则的历史，Google SRE将详细讨论一些常见的方法。无论当前状态如何，Google SRE发现在采用 SRE 时，选择通过演进和补充现有框架的方式，而不是直接与其对抗会取得最大成功。此外，SRE 与其他任何技术的采用过程类似，都会受到历史遗留的影响（参见维基百科关于路径依赖的页面）。简而言之，这意味着：在像企业这样的复杂系统中，在不同地方应用相同的改变，也将产生出不一致而非收敛的结果。Google SRE将从一些成功的采用了不同的流行框架的示例开始讨论。&lt;/p>
&lt;h2 id="sre-实践可与-itsm-框架共存">SRE 实践可与 ITSM 框架共存
&lt;/h2>&lt;p>信息技术基础架构库（ITIL）是一组详细的 IT 活动实践，如 IT 服务管理（ITSM）。并非每个企业都使用 ITIL，但如果企业的相关组织在一定程度上采用过 ITIL，则应准备好 SRE 和 ITIL 实践之间会存在着重叠。此外，由于 ITIL 是一个框架，企业的定制化实施可能与库中的内容有很大差异。&lt;/p>
&lt;blockquote>
&lt;p>关键点：ITIL 有五本核心书籍，用数千页的篇幅涵盖了：关于如何构建和运行 IT 服务的内容，其中的很多主题与可靠性无关，也有很多内容故意未被 SRE 涵盖。ITIL 是一个框架，而 SRE 是一组实践，因此它们肯定是兼容的，但是在翻译术语（例如，“warranty”，“utility” 等）时可能会遇到挑战。此外，SRE 在变更管理和服务的拥有权等领域有着明确的观点，因此即使结果是一致的，也要做好调整的准备。&lt;/p>&lt;/blockquote>
&lt;p>对于调和现存的一些常见 SRE 的反模式，可能也会比较有挑战。变更咨询委员会（CAB）是变更控制的常见模式。SRE 所秉持的持续交付的方式，意味着要让这个机构简化和战略化：企业可以在 Google 的 DevOps 研究和评估（DORA）的文章中，了解到更多有关简化变更审批的内容。类似地，对于网络运维中心（NOC，或者中国的 ECC）而言，则应该将其从事件驱动模型转变为更具前瞻性的方式，重点是对其进行自动化和赋能。在这两种情况下，重点是演进当前的运作模式，而非立即替换它们。&lt;/p>
&lt;h2 id="devops敏捷精益">DevOps/敏捷/精益
&lt;/h2>&lt;p>DevOps 有多种定义。为了简单起见，Google SRE 假定它包括其他方法的相关部分，如敏捷（SAFe、DAD 和 LeSS）和精益（Six Sigma、看板）。Google 的 DORA 研究表明，SRE 和 DevOps 是互补的，因此如果企业的组织在一定程度上采用了 DevOps，则通常会有所裨益。与 ITIL 一样，我们要预见到 SRE 和 DevOps 实践存在着一些重叠，并且企业的定制化实施可能与《DevOps Handbook - DevOps 实践指南》存在着广泛的差异。Google SRE将在后面更详细地介绍特定的 SRE 实践，但 SRE 与 DevOps 相关最大的许多能力（例如版本控制、同行评审等）也通常被视为采用 SRE 的先决条件。无论企业选择通过 DevOps 还是 SRE 倡议来构建这些能力，这些都由企业来决定，但为了确保采用 SRE 的成功，那些重要的 DevOps 能力仍然需要提前准备继续。&lt;/p>
&lt;blockquote>
&lt;p>关键点：当企业在调和 DevOps 和 SRE 的差异时，倡议务实的原则；想要完成大规模演进变革的成功，还是要通过迭代和循序渐进的方式来实现。重要的是：需要把特定的工作活动拆解出来，并专注于对人员的赋能，而不是花费不必要的时间和精力来获取一个完美的“空架子”。&lt;/p>&lt;/blockquote>
&lt;p>尽管 DevOps 和 SRE 是互补的，但它们在一些领域还可能会令人难以调和。例如，企业可能已经决定将开发和运维报告层次结构替换为跨职能的 DevOps 团队。在这种情况下，重新引入像 SRE 这样的专门职能则需要进行认真的考虑。&lt;/p>
&lt;h3 id="千里之行始于足下">千里之行，始于足下
&lt;/h3>&lt;p>无论您的企业正在使用着什么方法和框架，了解并诚实地对待企业今天的现状都很重要。正如《Google SRE 运维解密》 一书所言，“希望不是一种策略！” 如果企业认为：当前的企业环境中即没有任何缺失，也不存在任何改进的机会，那么企业应该问自己：为什么要采用 SRE。同样，企业现有的一些技术或员工的想法，在刚开始的时候，看起来也可能与企业的 SRE 愿景并不一致。在做出任何改变以前，花时间来了解这些也很重要。&lt;/p>
&lt;h3 id="明确企业的期望和愿景">明确企业的期望和愿景
&lt;/h3>&lt;p>接下来，企业了解自己期望的结果很重要。SRE 会包含许多技术和文化的组成部分，但它们都指向一个相同的目标，即：实现可靠性的目标。企业应该提前预计到：企业需要花费大量的时间和精力，来定义SRE 的技术和文化与现有框架的交互方式。只是简单地说“提高可靠性”是行不通的。同样，如果企业期望的结果与可靠性无关（例如：成本、速度），那么就需要准备额外的工作成本，来让SRE 实践与企业的整体愿景进行适配。&lt;/p>
&lt;h3 id="sre-开始与人">SRE 开始与人
&lt;/h3>&lt;p>随着时间的推移，流程和技术会潮起潮落，而人员和实践则能够接受和适应它们。如果，企业是从培训和招聘开始的，那么企业可以不断的添加或删除技术和流程。而建立 SRE 能力则是一个渐进的过程；所以，不要试图通过简单的招聘来取得成功。将招聘看做是培训方式的一种加强版，而不是取代培训。记住，SRE 需要一种 “生机文化”（与病态和官僚的企业文化并列） 才能取得成功，所以确保这一点至关重要。&lt;/p>
&lt;h3 id="拥抱自身的特殊性">拥抱自身的特殊性
&lt;/h3>&lt;p>在企业的某个特定组织内采用 SRE，其实并没有一个标准化的最佳实践的做法。企业能成功的方式才是它唯一正确的方式。Google SRE 现在已经对很多组织的工作成果进行了大量的研究，知道了一些行之有效的方式，还有一些无效的做法；然而，企业必然还是会犯一些新颖的错误。将这些组织的经验视为真正的学习工具，将各种有效的改进循环融入你当前的企业的组织中。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item><item><title>《企业 SRE 路线图》Google SRE 企业路线图白皮书</title><link>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/</link><pubDate>Tue, 30 Apr 2024 11:23:43 +0800</pubDate><guid>https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/</guid><description>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/pexels-anete-lusina-4792380.webp" alt="Featured image of post 《企业 SRE 路线图》Google SRE 企业路线图白皮书" />&lt;p>&lt;img src="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54.webp"
width="661"
height="991"
srcset="https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54_hu_facdffe1a239d453.webp 480w, https://martinliu.cn/blog/google-enterprise-roadmap-to-sre/2024-04-30_11-55-54_hu_2cbd16391d2212c5.webp 1024w"
loading="lazy"
alt="Enterprise roadmap to SRE"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre-cn.pdf" >下载中文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://martinliu.cn/wp/enterprise-roadmap-to-sre.pdf" >下载英文版 PDF 文件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oreilly.com/library/view/enterprise-roadmap-to/9781098117740/" target="_blank" rel="noopener"
>从 Oreilly 阅读白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sre.google/resources/practices-and-processes/enterprise-roadmap-to-sre/" target="_blank" rel="noopener"
>从 Google 下载白皮书&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>这份文档是一本关于如何构建和维持一个站点可靠性工程（SRE）职能部门的书籍，名为《企业 SRE 路线图》（Enterprise Roadmap to SRE），由 James Brookbank 和 Steve McGhee 撰写。这本书由O&amp;rsquo;Reilly Media, Inc.在 2022 年出版，旨在帮助大型和复杂的组织（即企业）采用SRE。&lt;/p>
&lt;p>下面是对本白皮书的简要概述。&lt;/p>
&lt;p>&lt;strong>前言&lt;/strong>&lt;/p>
&lt;p>SRE 的实施与挑战&lt;/p>
&lt;p>Google 的两本 O&amp;rsquo;Reilly 书籍——《站点可靠性工程》和《站点可靠性工作手册》——展示了为什么承诺整个服务生命周期可以使组织成功地构建、部署、监控和维护软件系统。前者由 Betsy Beyer、Chris Jones、Niall Richard Murphy 和 Jennifer Petoff 编辑，后者由 Betsy Beyer、Niall Richard Murphy、David K. Rensin、Kent Kawahara 和 Stephen Thorne 编辑。&lt;/p>
&lt;p>本报告旨在在这些书籍的基础上，深入探讨在大型复杂组织（即企业）中采用 SRE 的挑战。尽管 SRE 在过去几年中非常流行，但我们从许多企业获得的反馈表明，SRE 的热情与实际采用之间存在差距。&lt;/p>
&lt;p>我们认为这是一个需要弥合的重要差距，因为可靠性正日益成为企业的重要区分点。云采用和 COVID-19 大流行引发的技术变革速度和规模，通常需要不同的技术来应对增加的复杂性。&lt;/p>
&lt;p>如果您参与生产系统的可靠性，或者依赖其可靠性，并且需要了解更多关于 SRE 采用的信息，这些主题将引起您的兴趣。这包括执行和领导角色，也包括个体贡献者（如云架构师、站点可靠性工程师 [SRE]、平台开发人员等）。无论您的角色是什么，如果您设计、实施或维护技术系统，这里都有适合您的内容。&lt;/p>
&lt;p>&lt;strong>第1章：企业 SRE 入门&lt;/strong>
介绍如何将 SRE 引入现有企业，建议首先评估现有环境，设定期望，并确保在评估 SRE 及其在组织内可能的工作方式时，朝着正确的方向迈出合理的步伐。&lt;/p>
&lt;p>&lt;strong>第2章：为什么要采用 SRE 提高可靠性？&lt;/strong>
讨论了为什么企业希望建立 SRE 团队或追求可靠性，以及他们希望实现的结果。作者指出，可靠性是产品最需要具备的特性，因为如果产品不可用了，那么它的任何特性都无法被利用到。&lt;/p>
&lt;p>&lt;strong>第3章：SRE 原则&lt;/strong>
在讨论具体实践之前，作者强调了原则的重要性。SRE 的原则包括 拥抱风险、服务质量目标（SLOs）、消除琐事（Toil）、分布式系统的监控等。&lt;/p>
&lt;p>&lt;strong>第4章：SRE 实践&lt;/strong>
一旦建立了 SRE 团队并对原则有了一定了解，就可以在组织中，开始实施一套 SRE 实践。团队的实践取决于成员能做什么、他们知道什么、他们拥有什么工具，以及他们对所有这些的舒适度。&lt;/p>
&lt;p>&lt;strong>第5章：积极培育成功&lt;/strong>
讨论了如何确保 SRE 在组织中成功的实施，包括采取小规模行动、建立和保持可持续的快乐团队、承认 SRE 是一个动态的角色，并随着时间的推移而发展。&lt;/p>
&lt;p>&lt;strong>第6章：不仅Google可以，企业亦可行&lt;/strong>
作者与三位不同行业的 SRE 领导者进行了交谈，他们在过去几年中以各种形式采用了 SRE ，分享了他们独特的故事，包括采用 SRE 的工作方式、他们可能会采取的不同方法，以及对 SRE 在他们的行业或组织中有效运作的洞察。&lt;/p>
&lt;p>&lt;strong>结论&lt;/strong>
作者希望本白皮书能帮助企业采用 SRE，并为每个人带来更可靠的技术体验。他们认为，通过明确定义 SRE 原则，将这些原则映射到实践和能力上，并优先发展和培养团队内部的这些能力，可以提高成功的机会。&lt;/p>
&lt;p>&lt;strong>关于作者&lt;/strong>
James Brookbank 是 Google 的云解决方案架构师，专注于为 Google 客户解决复杂的技术问题并提供专业的架构指导。Steve McGhee 是可靠性倡导者，帮助团队了解如何构建和运营世界级的可靠服务。在担任此职位之前，他曾任职 Google 的 SRE 超过10年，学习如何扩展全球系统。&lt;/p>
&lt;p>Feature picture ❤️ Anete Lusina: &lt;a class="link" href="https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/" target="_blank" rel="noopener"
>https://www.pexels.com/photo/miniature-toy-car-on-top-of-monopoly-board-game-4792380/&lt;/a>&lt;/p></description></item></channel></rss>