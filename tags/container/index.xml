<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Container on Martin Liu's Blog</title><link>https://martinliu.cn/tags/container/</link><description>Recent content in Container on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 25 Jun 2024 21:44:26 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/container/index.xml" rel="self" type="application/rss+xml"/><item><title>容器化应用的设计原则</title><link>https://martinliu.cn/blog/cloud-native-container-design/</link><pubDate>Sat, 24 Mar 2018 20:51:01 +0800</pubDate><guid>https://martinliu.cn/blog/cloud-native-container-design/</guid><description>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/BingWallpaper-2018-03-20.jpg" alt="Featured image of post 容器化应用的设计原则" />&lt;p>本文来自于Red Hat咨询顾问Bilgin Ibryam所编写的一篇白皮书，名为《PRINCIPLES OF CONTAINER-BASED APPLICATION DESIGN》。这篇文章在作者的Blog上发表后，作者的twitter被Kubernetes官方twitter转发。白皮书在Red Hat官网的下载地址：&lt;a class="link" href="https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper" target="_blank" rel="noopener"
>https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper&lt;/a> 文本是对这篇文章的学习和整理。&lt;/p>
&lt;p>先回顾经典的软件设计原则：&lt;/p>
&lt;ul>
&lt;li>保持简单，愚蠢（KISS）&lt;/li>
&lt;li>不要重复自己（DRY）&lt;/li>
&lt;li>你不会需要它 （YAGNI）&lt;/li>
&lt;li>关注点分离（SoC）&lt;/li>
&lt;li>Single responsibility, Open/closed, Liskov substitution, Interface segregation, Dependency inversion （SOLID）&lt;/li>
&lt;/ul>
&lt;p>然后是Red Hat的云原生容器设计原则：&lt;/p>
&lt;ul>
&lt;li>唯一关注性原则（SCP）&lt;/li>
&lt;li>高度可观测性原则（HOP）&lt;/li>
&lt;li>生命周期一致性原则（LCP）&lt;/li>
&lt;li>镜像不可变性原则（IIP）&lt;/li>
&lt;li>进程可处置性原则（PDP）&lt;/li>
&lt;li>自包含性原则（S-CP）&lt;/li>
&lt;li>运行时约束性原则（RCP）&lt;/li>
&lt;/ul>
&lt;p>很多组织都理解云原生的重要性和必要性，但是并不知道从哪里开始。那么请确保：云原生平台和容器化应用能无缝的运行在一起，并且具备抵御故障的能力，甚至在底层的基础架构出现宕机的时候，也能通过过弹性扩展的方式表现出可靠性。本文描述了容器化应用时需要遵循的基本准则，实施这些原则有助于使之与云原生平台Kubernetes更加适配。&lt;/p>
&lt;h2 id="唯一关注性原则-single-concern-principlescp">唯一关注性原则 SINGLE CONCERN PRINCIPLE（SCP）
&lt;/h2>&lt;p>在许多方面，唯一关注性原则与来自SOLID的SRP是类似的，它建议一个类应该只有一个责任。SRP背后的动机是每个责任是变更的一个轴心，一个类应该有，且也只有一个需要改变的理由。SCP原则中的“关注”一词强调关注是一种更高层次的抽象的责任，而且它更好地将范围描述为一个容器而不是一个类。虽然SRP的主要动机是变化原因的唯一性，而SCP的主要动机是容器镜像重用和可替换性。如果你创建一个解决单个问题的容器，并且以功能完整的方式来实现，不同应用程序中的容器镜像重用的可能性就会更高。&lt;/p>
&lt;p>因此，SCP原则规定每个集容器都应该解决一个问题，并做得很好。 实现这一点，通常比在面向对象的世界中实现SRP更容易，容器通常管理的一个单一的进程，大多数情况下一个进程解决一个问题。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/scp.png"
loading="lazy"
alt="scp 容器化应用的设计原则"
>&lt;/p>
&lt;p>如果你的容器化微服务需要解决多个问题，它可以使用这样的模式，将多个容器用sidecar和init-containers的模式合并成一个部署单元（pod），这样每个容器仍然是处理单个问题。同样，您可以替换处理同样问题的容器。 例如，将Web服务器容器或队列实现容器，更新为更具可扩展性的容器。&lt;/p>
&lt;h2 id="高度可观测性原则-high-observability-principlehop">高度可观测性原则 HIGH OBSERVABILITY PRINCIPLE（HOP）
&lt;/h2>&lt;p>容器提供了一种统一的方式来打包和运行应用程序，将它们视为一个黑盒子对象。 但任何旨在成为云原生公民的容器都必须提供API支持，要为运行时环境编写接口（API），以观察容器的健康状况和行为。 这是自动化容器更新和生命周期回收的基本先决条件和统一的方式，从而提高系统的弹性和用户体验。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/hop.png"
loading="lazy"
alt="hop 容器化应用的设计原则"
>&lt;/p>
&lt;p>实际上，您的容器化应用程序必须至少为其提供不同类型的健康检查的API&amp;ndash;活动和就绪等状态。更好的应用程序的行为则必须提供其他手段来观察容器化应用程序的状态。应用程序应该将重要事件记录到标准错误（STDERR）和标准输出（STDOUT）中，从而通过统一的日志聚合工具（诸如Fluentd和Logstash之类的工具）进行分析，并与跟踪和指标收集库相结合，例如OpenTracing，Prometheus等。&lt;/p>
&lt;p>将您的应用程序视为黑盒子，但实施所有必要的API以帮助平台对其进行观测，并以最佳方式管理您的应用程序。&lt;/p>
&lt;h2 id="生命周期一致性原则-life-cycle-conformance-principlelcp">生命周期一致性原则 LIFE-CYCLE CONFORMANCE PRINCIPLE（LCP）
&lt;/h2>&lt;p>HOP规定了你的容器提供供平台观测的API。 LCP则规定：您的应用程序有办法读取来自平台的事件。 此外，除了获得事件以外，容器还应该对这些事件相应地作出反应。这就是此原则名字由来。这几乎就像在应用程序通过一个“写入API”与平台进行交互。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/lcp.png"
loading="lazy"
alt="lcp 容器化应用的设计原则"
>&lt;/p>
&lt;p>来自管理平台的各种事件都是为了帮助您管理您的容器的生命周期的。决定处理哪些事件取决于您的应用程序 以及是否对这些事件做出反应。&lt;/p>
&lt;p>但有些事件比其他事件更重要。例如，任何需要一个干净的关闭进程，这就需要捕获信号：终止（SIGTERM）消息，并尽可能迅速关闭。 这是为了避免通过强制关闭信号：kill（SIGKILL），之后跟随一个SIGTERM。&lt;/p>
&lt;p>还有其他事件，例如PostStart和PreStop，可能对您的应用程序生命周期管理也非常重要。 例如，某些应用程序需要在服务之前进行预热请求和一些需要在关闭干净之前释放资源。&lt;/p>
&lt;h2 id="镜像不可变性原则-image-immutability-principleiip">镜像不可变性原则 IMAGE IMMUTABILITY PRINCIPLE（IIP）
&lt;/h2>&lt;p>IMAGE IMMUTABILITY PRINCIPLE（IIP）容器化的应用程序是不可变更的，镜像一旦完成了构建，预计在不同的环境中运行都不会改变。这意味着在因外部环境的不同，在需要的时候需要使用外部手法处理所依赖的外部配置数据，而不是每个环境修改或者构建不同的容器。而容器应用程序中的任何变更，都应该因此触发构建新的容器映像，并在所有环境中重用它。相同于这个原理的，不可变服务器和不可变基础架构的概念也很受欢迎，并且对于服务器/主机管理也是如此。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/iip.png"
loading="lazy"
alt="iip 容器化应用的设计原则"
>&lt;/p>
&lt;p>在遵循IIP原则的情况下，应该防止为不同的环境创建相似的容器镜像，要始终坚持为所有环境只配置一个容器映像。 这个原则允许在应用程序更新期间，采用自动回滚和前滚等做法，这是云原生自动化的重要方面。&lt;/p>
&lt;h2 id="进程可处置性原则-process-disposability-principlepdp">进程可处置性原则 PROCESS DISPOSABILITY PRINCIPLE（PDP）
&lt;/h2>&lt;p>迁移到容器应用程序的主要动机之一是：容器需要尽可能做到临时性，并做好在任何时候被另一个容器实例替换的准备。需要更换容器的原因有很多，比如：健康检查失败、缩容、应用程序将容器迁移到不同的主机，平台资源匮乏或其它的问题。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/pdp.png"
loading="lazy"
alt="pdp 容器化应用的设计原则"
>&lt;/p>
&lt;p>这意味着容器化的应用程序必须保持其状态为向外扩展的或分布式和冗余的。这也意味着应用程序应该快速启动和关闭，甚至为彻底的硬件故障做好准备。 实施这一原则的另一个有用的做法是创建小容器。 容器在云原生环境可以自动调度并在不同的主机上启动。较小的容器可以实现更快启动时间，因为在重新启动之前容器镜像需要被物理地复制到主机系统。&lt;/p>
&lt;h2 id="自包含性原则-self-containment-principles-cp">自包含性原则 SELF-CONTAINMENT PRINCIPLE（S-CP）
&lt;/h2>&lt;p>这个原则规定一个容器应该在构建时包含所有需要的东西。容器的存在应该仅仅依赖于Linux®内核，在并添加相关额外的库，在容器构建时加入它们。除了库之外，它还应该包含语言运行时，应用程序平台（如果需要），以及运行所需的其他依赖关系，等运行容器化应用所需要的诸如此类的东西。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/s-cp.png"
loading="lazy"
alt="s-cp 容器化应用的设计原则"
>&lt;/p>
&lt;p>唯一的例外是：由于不同环境之间差异，并且只能在运行时提供的配置; 例如，通过Kubernetes提供的ConfigMap。&lt;/p>
&lt;p>某些应用程序由多个容器组件组成。 例如，容器化的Web应用程序也可能需要数据库容器。 根据这个原则，并不建议合并两个容器。相反，它建议的是数据库容器只包含运行数据库所需的所有内容，Web应用程序容器只包含运行Web应用程序所需的所有内容，如Web服务器。 在运行时，Web应用程序容器将根据需要依赖于并访问数据库容器。&lt;/p>
&lt;h2 id="运行时约束性原则-runtime-confinement-principlercp">运行时约束性原则 RUNTIME CONFINEMENT PRINCIPLE（RCP）
&lt;/h2>&lt;p>S-CP从构建时的角度查看容器，并关注于生成的二进制文件及其内容。但是容器不仅仅是磁盘上一个只有尺寸大小的单一维度的黑盒子。 容器运行时有多个维度，例如内存使用维度，CPU使用维度等资源消耗维度。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/rcp.png"
loading="lazy"
alt="rcp 容器化应用的设计原则"
>&lt;/p>
&lt;p>这个RCP原则建议每个容器申报资源需求，并发送信息到平台。它应该分享容器的资源配置文件，从CPU，内存，网络，磁盘的角度声明。这影响到平台如何执行调度，自动扩展，容量 管理以及容器常规的服务级别协议（SLA）等。&lt;/p>
&lt;p>除了向平台声明容器的资源需求之外，还有一点也很重要， 应用被约束在使用所声明的资源需求内。如果应用程序对资源的使用保持在约束的范围内，则当资源匮乏发生时，平台不太可能将其终止和迁移。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>云原生不仅仅是一种最终状态 - 它也是一种工作方式。 本份白皮书描述了一系列容器应用的基本原则，必须遵守才能成为优秀的云原生公民。&lt;/p>
&lt;p>除了这些原则之外，创建良好的容器应用程序还需要熟悉其他容器相关的最佳实践和技术。 尽管上述原则非常根本，适用于大多数用例，下面列出的最佳实践在应用和不应用的时候，则需要判断力。以下是一些与容器相关的更常见的最佳实践：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>镜像要尽可能的小&lt;/strong>。 通过清理临时文件，并避免安装不必要的软件包来构建小尺寸镜像。 这减少了容器的尺寸，构建时间和复制容器镜像的网络传输时间。&lt;/li>
&lt;li>&lt;strong>支持任意用户ID&lt;/strong>。 避免使用sudo命令或要求特定用户名运行你的容器。&lt;/li>
&lt;li>&lt;strong>标记重要的端口&lt;/strong>。 虽然可以在运行时指定端口号，然而使用EXPOSE命令在运行的时候指定，则可以让镜像的使用者更轻松。&lt;/li>
&lt;li>&lt;strong>为持久数据使用卷&lt;/strong>。 在容器摧毁之后还需要保存的容器数据的，必须将数据写入一个数据卷。&lt;/li>
&lt;li>&lt;strong>设置镜像元数据&lt;/strong>。 以标签和注释形式存在的镜像元数据可以使您的容器镜像更加实用，从而为使用您的容器的开发人员提供了更好的体验。&lt;/li>
&lt;li>&lt;strong>使主机和镜像同步&lt;/strong>。 一些容器应用需要容器在某些属性（如时间和机器ID）上与主机同步。&lt;/li>
&lt;/ul>
&lt;p>这里是指向各种模式和最佳实践的资源的链接，以帮助您能有效地实现上述目标：&lt;/p>
&lt;ul>
&lt;li>• &lt;a class="link" href="https://www.slideshare.net/luebken/container-patterns" target="_blank" rel="noopener"
>https://www.slideshare.net/luebken/container-patterns&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices" target="_blank" rel="noopener"
>https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="http://docs.projectatomic.io/container-best-practices" target="_blank" rel="noopener"
>http://docs.projectatomic.io/container-best-practices&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://docs.openshift.com/enterprise/3.0/creating_images/guidelines.html" target="_blank" rel="noopener"
>https://docs.openshift.com/enterprise/3.0/creating_images/guidelines.html&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf" target="_blank" rel="noopener"
>https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://leanpub.com/k8spatterns/" target="_blank" rel="noopener"
>https://leanpub.com/k8spatterns/&lt;/a>&lt;/li>
&lt;li>• &lt;a class="link" href="https://12factor.net" target="_blank" rel="noopener"
>https://12factor.net&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>容器编排器之战</title><link>https://martinliu.cn/blog/container-orchestration-wars/</link><pubDate>Fri, 12 Jan 2018 23:33:32 +0800</pubDate><guid>https://martinliu.cn/blog/container-orchestration-wars/</guid><description>&lt;img src="https://martinliu.cn/images/abstract-11.jpg" alt="Featured image of post 容器编排器之战" />&lt;p>K8s在2017年底为这场速战速决的站点话上了句号，结果是所有竞争对手都选择了增加对K8s的支持。在各自的编排器框架里内置了K8s。本文是根据Mesosphere公司的大拿Karl KARL ISENBERG在各种大会上分享过多次的一份演讲稿改版的。&lt;/p>
&lt;h2 id="karl-isenberg-是谁">KARL ISENBERG 是谁？
&lt;/h2>&lt;p>所在公司?&lt;/p>
&lt;ul>
&lt;li>Mesosphere（当前）&lt;/li>
&lt;li>Pivotal&lt;/li>
&lt;/ul>
&lt;p>做过的产品?&lt;/p>
&lt;ul>
&lt;li>DC/OS&lt;/li>
&lt;li>opensource&lt;/li>
&lt;li>CloudFoundry&lt;/li>
&lt;li>BOSH&lt;/li>
&lt;/ul>
&lt;p>联络信息：&lt;/p>
&lt;ul>
&lt;li>github.com/karlkfi&lt;/li>
&lt;li>twitter.com/karlkfi&lt;/li>
&lt;li>linkedin.com/in/karlkfi&lt;/li>
&lt;li>karl.isenberg.us&lt;/li>
&lt;/ul>
&lt;h2 id="基础架构的进化">基础架构的进化
&lt;/h2>&lt;p>传统的应用架构在逐渐向下面两种架构演变。&lt;/p>
&lt;h3 id="可扩展的单体应用架构">可扩展的单体应用架构
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-12%20at%2011.42.23%20PM.png"
loading="lazy"
alt="Screen Shot 2018-01-12 at 11.42.23 P"
>&lt;/p>
&lt;p>关键词：&lt;/p>
&lt;ul>
&lt;li>Online 基于互联网&lt;/li>
&lt;li>Latency Routed 用户访问基于延迟路由&lt;/li>
&lt;li>Multi-Region 多区部署&lt;/li>
&lt;li>Load Balanced 负载均衡接入&lt;/li>
&lt;li>Multi-Zone 多个Zone&lt;/li>
&lt;li>Replicated 应用实例多副本&lt;/li>
&lt;li>Auto-Scaled 容量自动化收缩&lt;/li>
&lt;li>Data Replication 区内数据多副本&lt;/li>
&lt;li>Data Synchronization 跨区数据同步&lt;/li>
&lt;/ul>
&lt;h3 id="可扩展的微服务架构">可扩展的微服务架构
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-12%20at%2011.50.47%20PM.png"
loading="lazy"
alt="Screen Shot 2018-01-12 at 11.50.47 P"
>&lt;/p>
&lt;p>上图出处：Wheel of Doom ，来自&lt;a class="link" href="https://sudo.hailoapp.com/services/2015/03/09/journey-into-a-microservice-world-part-3/" target="_blank" rel="noopener"
>A Journey into Microservices by Hailo&lt;/a>&lt;/p>
&lt;h3 id="应用裸金属服务器">应用+裸金属服务器
&lt;/h3>&lt;p>APPLICATION
PROVISIONING
ON
BARE METAL&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-12%20at%2011.54.26%20PM.png"
loading="lazy"
alt="Screen Shot 2018-01-12 at 11.54.26 P"
>&lt;/p>
&lt;h3 id="应用iaas">应用+IaaS
&lt;/h3>&lt;p>APPLICATION
PROVISIONING
ON
VIRTUAL INFRASTRUCTURE
PLATFORM
(IaaS)&lt;/p>
&lt;blockquote>
&lt;p>“Ultimately, utility cloud providers have
exposed how difficult it is to properly operate
data centers — and reminded all of us that the
ability to expertly operate infrastructure is
what really fuels the consumption of open
source infrastructure.”
&amp;ndash;Brian Stein (Rackspace VP - 2017)&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/images/images/Screen%20Shot%202018-01-12%20at%2011.58.36%20PM.png"
loading="lazy"
alt="Screen Shot 2018-01-12 at 11.58.36 P"
>&lt;/p>
&lt;h3 id="应用paasapaasiaas">应用+PaaS/aPaaS+IaaS
&lt;/h3>&lt;p>APPLICATION
PLATFORM
(PaaS / aPaaS)
ON
INFRASTRUCTURE
PLATFORM
(IaaS)&lt;/p>
&lt;blockquote>
&lt;p>“The goal of Cloud Foundry is to put more of the
controls back in the hands of developers so they can
self-provision, so there aren’t a lot of roadblocks in their way. But it gives a lot of guardrails.”
&amp;ndash; Chip Childers (Cloud Foundry Foundation CTO - 2017)
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%2012.03.37%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 12.03.37 A"
>&lt;/p>&lt;/blockquote>
&lt;h3 id="容器编排器iaas">容器编排器+IaaS
&lt;/h3>&lt;p>CONTAINER
ORCHESTRATION
ON
INFRASTRUCTURE
PLATFORM
(IaaS)&lt;/p>
&lt;blockquote>
&lt;p>“&amp;hellip;traditional “PaaS” roles have now been
taken over by containers… The piece that is
left for PaaS is the part that was always the
most important part of PaaS in the first place,
and that’s the opinionated developer
experience.”
&amp;ndash;Brendan Burns (Kubernetes Cofounder - 2017)&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%2012.08.37%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 12.08.37 A"
>&lt;/p>
&lt;h3 id="caasiaas">CaaS+IaaS
&lt;/h3>&lt;p>CONTAINER
PLATFORM
(CaaS)
ON
INFRASTRUCTURE
PLATFORM
(IaaS)
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%2012.10.28%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 12.10.28 A"
>&lt;/p>
&lt;h3 id="caas裸金属服务器">CaaS+裸金属服务器
&lt;/h3>&lt;p>CONTAINER
PLATFORM
(CaaS)
ON
BARE METAL&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%2012.11.42%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 12.11.42 A"
>&lt;/p>
&lt;h3 id="faasiaas">FaaS+IaaS
&lt;/h3>&lt;p>FUNCTION
PLATFORM
(FaaS)
ON
INFRASTRUCTURE
PLATFORM
(IaaS)&lt;/p>
&lt;blockquote>
&lt;p>“If your PaaS can efficiently start instances in 20ms that run for half a second, then call it serverless.”
&amp;ndash;Adrian Cockcroft-(AWS VP - 2016)&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%2012.13.46%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 12.13.46 A"
>&lt;/p>
&lt;h3 id="faascaas">FaaS+CaaS
&lt;/h3>&lt;p>FUNCTION
PLATFORM
(FaaS)
ON
CONTAINER
PLATFORM
(CaaS)
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.43.06%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.43.06 A"
>&lt;/p>
&lt;h3 id="faascaasiaas">FaaS+CaaS+IaaS
&lt;/h3>&lt;p>FUNCTION PLATFORM
(FaaS)
ON
CONTAINER PLATFORM
(CaaS)
ON
INFRASTRUCTURE PLATFORM
(IaaS)&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.44.49%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.44.49 A"
>&lt;/p>
&lt;h2 id="平台频谱---platform-spectrum">平台频谱 - PLATFORM SPECTRUM
&lt;/h2>&lt;p>从左到右，资源的抽象程度不断提高；最左侧的弹性最高，最右侧的速率最高。
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.47.36%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.47.36 A"
>&lt;/p>
&lt;p>下图是不同类型里的厂商和软件。
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.48.19%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.48.19 A"
>&lt;/p>
&lt;h2 id="容器平台层次">容器平台层次
&lt;/h2>&lt;p>容器编排器的层次如下：
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.49.36%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.49.36 A"
>&lt;/p>
&lt;ul>
&lt;li>User workloads 用户工作负载&lt;/li>
&lt;li>Distributed container management 分布式容器管理&lt;/li>
&lt;li>Local container management 本地容器管理&lt;/li>
&lt;li>Container agnostic infrastructure 容器无关性基础架构&lt;/li>
&lt;/ul>
&lt;p>容器平台的层次如下：
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.51.23%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.51.23 A"
>&lt;/p>
&lt;p>CONTAINER PLATFORM&lt;/p>
&lt;ul>
&lt;li>User workloads 用户工作负载&lt;/li>
&lt;li>System management &amp;amp; service enablement 系统管理和服务管理&lt;/li>
&lt;li>Distributed container management 分布式容器管理&lt;/li>
&lt;li>Local container management 本地容器管理&lt;/li>
&lt;li>Container aware infrastructure 容器感知的基础架构&lt;/li>
&lt;li>Container agnostic infrastructure 容器无关的基础架构&lt;/li>
&lt;/ul>
&lt;p>分布式操作系统的层次如下：
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.52.52%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.52.52 A"
>&lt;/p>
&lt;h2 id="容器平台功能点">容器平台功能点
&lt;/h2>&lt;p>CONTAINER
PLATFORM
CAPABILITIES&lt;/p>
&lt;h3 id="运行态的能力">运行态的能力
&lt;/h3>&lt;p>1 容器&lt;/p>
&lt;ul>
&lt;li>Resource Isolation&lt;/li>
&lt;li>Resource Constraints&lt;/li>
&lt;li>Process Tree&lt;/li>
&lt;li>Environment Isolation&lt;/li>
&lt;li>Shell / Exec&lt;/li>
&lt;/ul>
&lt;p>2 镜像&lt;/p>
&lt;ul>
&lt;li>Build&lt;/li>
&lt;li>Layers&lt;/li>
&lt;li>Download&lt;/li>
&lt;li>Cache&lt;/li>
&lt;li>Publish&lt;/li>
&lt;li>Prune&lt;/li>
&lt;/ul>
&lt;p>3 网络&lt;/p>
&lt;ul>
&lt;li>Container&lt;/li>
&lt;li>Bridge&lt;/li>
&lt;li>Host&lt;/li>
&lt;li>Virtual&lt;/li>
&lt;li>Overlay&lt;/li>
&lt;li>Remote&lt;/li>
&lt;li>User-defined&lt;/li>
&lt;li>Port Mapping&lt;/li>
&lt;/ul>
&lt;p>4 数据卷&lt;/p>
&lt;ul>
&lt;li>Ephemeral&lt;/li>
&lt;li>Host&lt;/li>
&lt;li>Backup / Restore&lt;/li>
&lt;li>Copy In / Out&lt;/li>
&lt;li>Shared&lt;/li>
&lt;/ul>
&lt;h3 id="编排器的能力">编排器的能力
&lt;/h3>&lt;p>调度&lt;/p>
&lt;ul>
&lt;li>Placement&lt;/li>
&lt;li>Replication/Scaling&lt;/li>
&lt;li>Readiness Checking&lt;/li>
&lt;li>Resurrection&lt;/li>
&lt;li>Rescheduling&lt;/li>
&lt;li>Rolling Updates&lt;/li>
&lt;li>Collocation&lt;/li>
&lt;li>Daemons&lt;/li>
&lt;li>Cron Jobs&lt;/li>
&lt;/ul>
&lt;p>资源管理&lt;/p>
&lt;ul>
&lt;li>Memory&lt;/li>
&lt;li>CPU&lt;/li>
&lt;li>GPU&lt;/li>
&lt;li>Ephemeral Volumes&lt;/li>
&lt;li>Remote Persistent Volumes&lt;/li>
&lt;li>Local Persistent Volumes&lt;/li>
&lt;li>Ports&lt;/li>
&lt;li>IPs (per container)&lt;/li>
&lt;/ul>
&lt;p>服务管理&lt;/p>
&lt;ul>
&lt;li>Labels&lt;/li>
&lt;li>Groups/Namespaces&lt;/li>
&lt;li>Dependencies&lt;/li>
&lt;li>Load Balancing (L7)&lt;/li>
&lt;li>VIPs (L3/L4 LB)&lt;/li>
&lt;li>DNS&lt;/li>
&lt;li>DNS Proxy&lt;/li>
&lt;li>Secrets&lt;/li>
&lt;li>Config Mgmt&lt;/li>
&lt;/ul>
&lt;h3 id="运维方面的能力">运维方面的能力
&lt;/h3>&lt;p>管理&lt;/p>
&lt;ul>
&lt;li>GUI&lt;/li>
&lt;li>CLI&lt;/li>
&lt;li>Metrics API&lt;/li>
&lt;li>Logs API&lt;/li>
&lt;li>Events API&lt;/li>
&lt;li>Rolling Upgrades&lt;/li>
&lt;li>Backups &amp;amp; Restores&lt;/li>
&lt;/ul>
&lt;p>MULTI-INFRASTRUCTURE&lt;/p>
&lt;ul>
&lt;li>Multi-cloud&lt;/li>
&lt;li>Multi-zone&lt;/li>
&lt;li>Multi-region&lt;/li>
&lt;li>Hybrid-cloud&lt;/li>
&lt;li>Federation&lt;/li>
&lt;/ul>
&lt;p>系统服务&lt;/p>
&lt;ul>
&lt;li>Auto-Scaling&lt;/li>
&lt;li>Package Management&lt;/li>
&lt;li>Service Catalog&lt;/li>
&lt;li>Service Brokers&lt;/li>
&lt;li>Admin Proxy&lt;/li>
&lt;li>API Gateway&lt;/li>
&lt;/ul>
&lt;h3 id="平台的能力">平台的能力
&lt;/h3>&lt;p>容器网络&lt;/p>
&lt;ul>
&lt;li>Overlay&lt;/li>
&lt;li>Routing&lt;/li>
&lt;li>Network Address Translation (NAT)&lt;/li>
&lt;li>Firewalls&lt;/li>
&lt;li>Access Control Lists&lt;/li>
&lt;li>Quality of Service&lt;/li>
&lt;/ul>
&lt;p>容器存储&lt;/p>
&lt;ul>
&lt;li>Local Volumes&lt;/li>
&lt;li>Remote Volumes&lt;/li>
&lt;li>Block Storage&lt;/li>
&lt;li>File System Storage&lt;/li>
&lt;li>Object Storage&lt;/li>
&lt;/ul>
&lt;p>平台数据库&lt;/p>
&lt;ul>
&lt;li>Lock Service&lt;/li>
&lt;li>Key-Value Database&lt;/li>
&lt;li>Relational Database&lt;/li>
&lt;li>Time Series Database&lt;/li>
&lt;/ul>
&lt;p>安全&lt;/p>
&lt;ul>
&lt;li>User Accounts&lt;/li>
&lt;li>Service Accounts&lt;/li>
&lt;li>System/User Space&lt;/li>
&lt;li>E2E Encryption&lt;/li>
&lt;li>Non-root User Workloads&lt;/li>
&lt;li>Audit Logging&lt;/li>
&lt;li>Public Key Infrastructure&lt;/li>
&lt;li>Certifications&lt;/li>
&lt;/ul>
&lt;p>多租户&lt;/p>
&lt;ul>
&lt;li>User Groups&lt;/li>
&lt;li>Permissions&lt;/li>
&lt;li>RBAC&lt;/li>
&lt;li>ABAC&lt;/li>
&lt;li>Resource Sharing
&lt;ul>
&lt;li>FIFO&lt;/li>
&lt;li>Fair&lt;/li>
&lt;li>Quotas&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Branding&lt;/li>
&lt;li>Quality of Service&lt;/li>
&lt;/ul>
&lt;p>非功能需求&lt;/p>
&lt;p>稳定性&lt;/p>
&lt;ul>
&lt;li>Performance&lt;/li>
&lt;li>Responsiveness&lt;/li>
&lt;li>Efficiency&lt;/li>
&lt;/ul>
&lt;p>可用性&lt;/p>
&lt;ul>
&lt;li>Fault Tolerance&lt;/li>
&lt;li>Robustness,&lt;/li>
&lt;li>Reliability,&lt;/li>
&lt;li>Resilience,&lt;/li>
&lt;li>Disaster Recovery&lt;/li>
&lt;/ul>
&lt;p>灵活性&lt;/p>
&lt;ul>
&lt;li>Format Support,&lt;/li>
&lt;li>Interoperability,&lt;/li>
&lt;li>Extensibility,&lt;/li>
&lt;li>Container Runtimes&lt;/li>
&lt;/ul>
&lt;p>可用度&lt;/p>
&lt;ul>
&lt;li>Familiarity,&lt;/li>
&lt;li>Maintainability,&lt;/li>
&lt;li>Compatibility,&lt;/li>
&lt;li>Debuggability&lt;/li>
&lt;/ul>
&lt;p>可移植性&lt;/p>
&lt;ul>
&lt;li>Host OS,&lt;/li>
&lt;li>Cloud,&lt;/li>
&lt;li>Bare-Metal,&lt;/li>
&lt;li>Hybrid&lt;/li>
&lt;/ul>
&lt;p>安全性&lt;/p>
&lt;ul>
&lt;li>Encryption Quality,&lt;/li>
&lt;li>Vulnerability Process,&lt;/li>
&lt;li>Fast Patching,&lt;/li>
&lt;li>Backporting&lt;/li>
&lt;/ul>
&lt;h2 id="容器平台对比">容器平台对比
&lt;/h2>&lt;p>市场里的主要技术厂商如下。
&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.57.44%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.57.44 A"
>&lt;/p>
&lt;p>其它值得考虑的厂商如下。&lt;/p>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.58.36%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.58.36 A"
>&lt;/p>
&lt;p>下面的能力对比的时间点是 06/2017，这个时候K8s是否能胜出还是个悬念。&lt;/p>
&lt;h3 id="调度">调度
&lt;/h3>&lt;p>图示说明：&lt;/p>
&lt;ul>
&lt;li>绿勾：包含此能力&lt;/li>
&lt;li>横杠：New/External/Partial/Experimental&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%206.59.42%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 6.59.42 A"
>&lt;/p>
&lt;h3 id="资源管理">资源管理
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%207.00.38%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 7.00.38 A"
>&lt;/p>
&lt;h3 id="服务管理">服务管理
&lt;/h3>&lt;p>&lt;img src="https://martinliu.cn/images/Screen%20Shot%202018-01-13%20at%207.01.16%20AM.png"
loading="lazy"
alt="Screen Shot 2018-01-13 at 7.01.16 A"
>&lt;/p>
&lt;h2 id="如何选择">如何选择
&lt;/h2>&lt;h3 id="第一阵营重量级">第一阵营：重量级
&lt;/h3>&lt;p>KUBERNETES&lt;/p>
&lt;ul>
&lt;li>Huge community&lt;/li>
&lt;li>Solid API&lt;/li>
&lt;li>Some assembly required&lt;/li>
&lt;li>Multitude of vendors/installers&lt;/li>
&lt;/ul>
&lt;p>OPENSHIFT&lt;/p>
&lt;ul>
&lt;li>Application platform based on Kubernetes&lt;/li>
&lt;li>Always trailing Kubernetes releases&lt;/li>
&lt;li>No assembly required&lt;/li>
&lt;li>Open core, enterprise platform&lt;/li>
&lt;/ul>
&lt;p>DC/OS&lt;/p>
&lt;ul>
&lt;li>Runs native applications (non-Docker)&lt;/li>
&lt;li>Specialized in data services&lt;/li>
&lt;li>Ambitious scope (on-prem AWS)&lt;/li>
&lt;li>No assembly required&lt;/li>
&lt;li>Open core, enterprise platform&lt;/li>
&lt;/ul>
&lt;p>DOCKER&lt;/p>
&lt;ul>
&lt;li>Huge community&lt;/li>
&lt;li>Fast moving API&lt;/li>
&lt;li>Integrated orchestration and runtime&lt;/li>
&lt;li>Recent pivot from runtime to orchestration&lt;/li>
&lt;li>Open core, enterprise platform&lt;/li>
&lt;/ul>
&lt;h3 id="第二阵营轻量级">第二阵营：轻量级
&lt;/h3>&lt;p>EC2 CONTAINER SERVICE (ECS)&lt;/p>
&lt;ul>
&lt;li>Hosted-only solution&lt;/li>
&lt;li>Tight integration with AWS services&lt;/li>
&lt;li>Closed platform&lt;/li>
&lt;/ul>
&lt;p>RANCHER CATTLE&lt;/p>
&lt;ul>
&lt;li>Gateway to Kubernetes, Mesos, and Docker&lt;/li>
&lt;li>Open platform, enterprise support&lt;/li>
&lt;/ul>
&lt;p>NOMAD&lt;/p>
&lt;ul>
&lt;li>Provisioner with orchestration features&lt;/li>
&lt;li>Runs native applications (non-Docker)&lt;/li>
&lt;li>Tight integration with Vault and Consul&lt;/li>
&lt;li>Some assembly required&lt;/li>
&lt;li>Open platform, enterprise support&lt;/li>
&lt;/ul>
&lt;p>KONTENA&lt;/p>
&lt;ul>
&lt;li>Simple to set up&lt;/li>
&lt;li>No assembly required&lt;/li>
&lt;li>Open core, enterprise platform&lt;/li>
&lt;/ul>
&lt;h3 id="karl个人的考察点">Karl个人的考察点？
&lt;/h3>&lt;ul>
&lt;li>Which is more important to you: &lt;strong>velocity or flexibility&lt;/strong>?&lt;/li>
&lt;li>Do you want an &lt;strong>opinionated&lt;/strong> application platform?&lt;/li>
&lt;li>Do you need to support &lt;strong>Big Data&lt;/strong> initiatives and pipelines?&lt;/li>
&lt;li>Do you want a &lt;strong>hosted&lt;/strong> solution?&lt;/li>
&lt;li>Are you willing to &lt;strong>build out your own integrations&lt;/strong>?&lt;/li>
&lt;li>Do you need &lt;strong>on-prem &amp;amp; hybrid&lt;/strong> capabilities?&lt;/li>
&lt;li>Do you want to avoid infrastructure &lt;strong>lock-in&lt;/strong>?&lt;/li>
&lt;li>Are you already invested in a specific infrastructure?&lt;/li>
&lt;li>Are you already invested in a specific operating system?&lt;/li>
&lt;li>Do you need &lt;strong>federation and multi-region&lt;/strong>support?&lt;/li>
&lt;li>Do you want &lt;strong>multi-tenancy&lt;/strong> or is multi-instance good enough?&lt;/li>
&lt;li>How important are seamless automated &lt;strong>rolling upgrades&lt;/strong>?&lt;/li>
&lt;li>&lt;strong>How many nines&lt;/strong> do your customers need?&lt;/li>
&lt;li>How important is reverse compatibility &amp;amp; API &lt;strong>stability&lt;/strong>?&lt;/li>
&lt;li>Do you need to support &lt;strong>non-Docker workloads&lt;/strong>?&lt;/li>
&lt;/ul></description></item><item><title>红帽媒体日</title><link>https://martinliu.cn/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</link><pubDate>Tue, 14 Jul 2015 14:20:24 +0000</pubDate><guid>https://martinliu.cn/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</guid><description>&lt;p>本次演讲用了大约 25 分钟，超时了大约 5 分钟多，但是其中有些观点还是没有叙述的很倒位。只能算是我的一种理解和解读，希望对道场的媒体朋友们对认识红帽公司有帮助。&lt;/p>
&lt;p>演讲源版 slide 和录音在这个网页上： &lt;a class="link" href="http://investors.redhat.com/events.cfm" target="_blank" rel="noopener"
>http://investors.redhat.com/events.cfm&lt;/a> 的这部分：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Jun 24, 2015&lt;/p>
&lt;p>10:30 AM - 1:00 PM ET&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Red Hat Analyst Day&lt;/p>
&lt;p>&lt;a class="link" href="http://edge.media-server.com/m/p/mhayc7rh" target="_blank" rel="noopener"
> Listen to webcast &lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://investors.redhat.com/common/download/download.cfm?companyid=RHAT&amp;amp;fileid=838366&amp;amp;filekey=633328A1-EAD6-471D-9934-C43F4CDC5666&amp;amp;filename=RH_Summit_Analyst_Day_FINAL.pdf" target="_blank" rel="noopener"
>View Presentation&lt;/a>&lt;/p>
&lt;p>12.2 MB&lt;/p>
&lt;p>&lt;a class="link" href="http://investors.redhat.com/events.cfm#" target="_blank" rel="noopener"
>Add to Briefcase&lt;/a>&lt;/p>
&lt;p>View Additional Information&lt;/p>
&lt;!-- raw HTML omitted --></description></item></channel></rss>