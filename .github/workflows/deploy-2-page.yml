# 🔧 调试模式的 GitHub Pages 部署工作流
# 
# 当前配置：
# - 所有分支的 push 都会触发完整构建和部署流程
# - 用于调试和测试部署流程
# 
# 调试完成后，请修改 on.push.branches 为 [master] 
# 以恢复只在 master 分支合并时触发
#
name: Deploy to Github Pages (Debug Mode)

on:
    push:
        # 调试模式：所有分支的 push 都触发构建
        branches: ['**']
    pull_request:
        branches: [master]
    workflow_dispatch:
        inputs:
            enable_optimization:
                description: '启用完整优化'
                required: false
                default: true
                type: boolean

env:
    HUGO_VERSION: '0.148.2'

jobs:
    build:
        runs-on: ubuntu-24.04

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: recursive
                  fetch-depth: 0

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.21'
                  
            - name: Cache Hugo binary
              uses: actions/cache@v4
              with:
                  path: ~/hugo
                  key: ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}
                  
            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-v2
                  restore-keys: |
                      ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                      ${{ runner.os }}-go-

            - name: Cache Hugo resources
              uses: actions/cache@v4
              with:
                  path: resources
                  key: hugo-resources-${{ hashFiles('assets/**') }}
                  restore-keys: |
                      hugo-resources-

            - name: Setup Hugo
              uses: peaceiris/actions-hugo@v3
              with:
                  hugo-version: ${{ env.HUGO_VERSION }}
                  extended: true

            - name: Cache optimization tools
              # 调试模式：所有分支都执行优化
              # if: github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true'
              uses: actions/cache@v4
              id: tools-cache
              with:
                  path: |
                      /usr/bin/cwebp
                      /usr/bin/optipng
                      /usr/bin/jpegoptim
                      /usr/bin/brotli
                  key: optimization-tools-${{ runner.os }}-v2

            - name: Install optimization tools
              # 调试模式：所有分支都执行优化
              # if: (github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true') && steps.tools-cache.outputs.cache-hit != 'true'
              if: steps.tools-cache.outputs.cache-hit != 'true'
              run: |
                  echo "🔧 安装优化工具..."
                  sudo apt-get update -qq
                  sudo apt-get install -y webp optipng jpegoptim brotli
                  echo "✅ 优化工具安装完成"

            - name: Build
              env:
                  HUGO_ENV: production
                  NODE_ENV: production
                  HUGO_CACHEDIR: /tmp/hugo_cache
              run: |
                  mkdir -p /tmp/hugo_cache
                  hugo --minify --gc --enableGitInfo --cleanDestinationDir --logLevel info

            - name: Cache optimization results  
              # 调试模式：所有分支都执行优化
              # if: github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true'
              uses: actions/cache@v4
              with:
                  path: |
                      public/**/*.webp
                      public/**/*.optimized
                      public/**/*.gz
                      public/**/*.br
                  key: optimization-${{ hashFiles('public/**/*.jpg', 'public/**/*.jpeg', 'public/**/*.png', 'public/**/*.html', 'public/**/*.css', 'public/**/*.js') }}-v3
                  restore-keys: |
                      optimization-

            - name: Optimize images
              # 调试模式：所有分支都执行优化
              # if: github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true'
              run: |
                  echo "🖼️ 开始图片优化..."
                  
                  # 统计文件数量
                  total_images=$(find public -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l)
                  echo "📊 发现 $total_images 张图片"
                  
                  # 使用并行处理加速优化（使用 xargs 更可靠）
                  echo "🚀 使用并行处理加速优化"
                  
                  # 并行转换 WebP（使用 xargs）
                  find public -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | xargs -I {} -P 4 bash -c '
                      img="$1"
                      webp_name="${img%.*}.webp"
                      if [ ! -f "$webp_name" ] || [ "$img" -nt "$webp_name" ]; then
                          cwebp -q 85 "$img" -o "$webp_name" && echo "转换: $img -> $webp_name"
                      fi
                  ' _ {}
                  
                  # 并行压缩 PNG（只处理大文件）
                  find public -name "*.png" | xargs -I {} -P 4 bash -c '
                      img="$1"
                      size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null || echo 0)
                      if [ $size -ge 102400 ]; then
                          optimized_marker="$img.optimized"
                          if [ ! -f "$optimized_marker" ] || [ "$img" -nt "$optimized_marker" ]; then
                              optipng -o1 "$img" && touch "$optimized_marker" && echo "压缩PNG: $img"
                          fi
                      fi
                  ' _ {}
                  
                  # 并行压缩 JPEG（只处理大文件）
                  find public -name "*.jpg" -o -name "*.jpeg" | xargs -I {} -P 4 bash -c '
                      img="$1"
                      size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null || echo 0)
                      if [ $size -ge 102400 ]; then
                          optimized_marker="$img.optimized"
                          if [ ! -f "$optimized_marker" ] || [ "$img" -nt "$optimized_marker" ]; then
                              jpegoptim --size=85% "$img" && touch "$optimized_marker" && echo "压缩JPEG: $img"
                          fi
                      fi
                  ' _ {}
                  
                  echo "✅ 图片优化完成"
            - name: Generate compressed files
              # 调试模式：所有分支都执行优化
              # if: github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true'
              run: |
                  echo "🗜️ 生成压缩文件..."
                  
                  # 统计需要压缩的文件数量
                  total_files=$(find public -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.xml" -o -name "*.json" \) | wc -l)
                  echo "📊 发现 $total_files 个可压缩文件"
                  
                  # 生成 Gzip 文件（增量处理）
                  gzip_count=0
                  find public -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.xml" -o -name "*.json" \) | while read file; do
                      if [ ! -f "$file.gz" ] || [ "$file" -nt "$file.gz" ]; then
                          gzip -9 -c "$file" > "$file.gz"
                          gzip_count=$((gzip_count + 1))
                          if [ $((gzip_count % 100)) -eq 0 ]; then
                              echo "Gzip 进度: $gzip_count/$total_files"
                          fi
                      fi
                  done
                  
                  # 生成 Brotli 文件（增量处理）
                  brotli_count=0
                  find public -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.xml" -o -name "*.json" \) | while read file; do
                      if [ ! -f "$file.br" ] || [ "$file" -nt "$file.br" ]; then
                          brotli -9 -c "$file" > "$file.br"
                          brotli_count=$((brotli_count + 1))
                          if [ $((brotli_count % 100)) -eq 0 ]; then
                              echo "Brotli 进度: $brotli_count/$total_files"
                          fi
                      fi
                  done
                  
                  echo "✅ 文件压缩完成"

            - name: Build statistics
              # 调试模式：所有分支都执行优化
              # if: github.ref == 'refs/heads/master' || github.event.inputs.enable_optimization == 'true'
              run: |
                  echo "📊 构建统计..."
                  file_count=$(find public -type f | wc -l)
                  echo "总文件数: $file_count"
                  
                  # 只在文件数量较少时计算大小（避免长时间计算）
                  if [ $file_count -lt 10000 ]; then
                      echo "总大小: $(du -sh public | cut -f1)"
                      
                      # 快速统计压缩文件
                      gzip_files=$(find public -name "*.gz" | wc -l)
                      brotli_files=$(find public -name "*.br" | wc -l)
                      webp_files=$(find public -name "*.webp" | wc -l)
                      
                      echo "Gzip 文件数: $gzip_files"
                      echo "Brotli 文件数: $brotli_files" 
                      echo "WebP 文件数: $webp_files"
                  else
                      echo "文件数量较多，跳过详细统计以节省时间"
                  fi

            - name: Deploy 🚀
              uses: JamesIves/github-pages-deploy-action@v4.6.8
              with:
                  branch: gh-pages
                  folder: public
                  clean: false  # 禁用清理以加快部署
                  single-commit: false  # 保留 git 历史以支持增量部署
                  force: false  # 禁用强制推送
                  git-config-name: 'github-actions[bot]'
                  git-config-email: 'github-actions[bot]@users.noreply.github.com'
                  commit-message: |
                      Deploy from ${{ github.ref_name }} branch
                      
                      Source commit: ${{ github.sha }}
                      Workflow: ${{ github.workflow }}
                      
            - name: Debug Info
              run: |
                  echo "🔍 调试信息："
                  echo "分支: ${{ github.ref_name }}"
                  echo "提交: ${{ github.sha }}"
                  echo "事件: ${{ github.event_name }}"
                  echo "仓库: ${{ github.repository }}"
                  echo "运行ID: ${{ github.run_id }}"
                  echo ""
                  echo "📝 部署到 GitHub Pages 完成!"
                  echo "🌐 预览地址: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"